interface DataSourceSettingsPaging {
    /**
     * Paging is not enabled by default
     */
    enabled?: boolean;
    /**
     * Type for the paging operation
     *
     * Valid values:
     * "local" Data is paged client-side.
     * "remote" A remote request is done and URL params encoded
     */
    type?: any;
    /**
     * Number of records on each page
     */
    pageSize?: number;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page size
     */
    pageSizeUrlKey?: string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page index
     */
    pageIndexUrlKey?: string;
    /**
     * Current page index
     */
    pageIndex?: number;
    /**
     * Whether when a new page of data is requested we should append the new data to the existing data
     */
    appendPage?: boolean;
    /**
     * Option for DataSourceSettingsPaging
     */
    [optionName: string]: any;
}
interface DataSourceSettingsFiltering {
    /**
     * Filtering type.
     *
     * Valid values:
     * "remote" Parameters will be encoded and it's up to the backend to interpred them from the response.
     * "local" The data will be filtered automatically client-side
     */
    type?: any;
    /**
     * Enables or disables case sensitive filtering on the data. Works only for local filtering
     */
    caseSensitive?: boolean;
    /**
     * If the type of paging/sorting/filtering is local and applyToAllData is true, filtering will be performed on the whole data source that's present locally, otherwise only on the current dataView. if type is remote, this setting doesn't have any effect.
     */
    applyToAllData?: boolean;
    /**
     * Can point to either a string or a function object. The parameters that are passed are 1) the data array to be filtered, 2) the filtering expression definitions. Should return an array of the filtered data
     */
    customFunc?: any;
    /**
     * Url key that will be encoded in the request if remote filtering is performed. Default value of null implies OData-style URL encoding. Please see http://www.odata.org/developers/protocols/uri-conventions for details
     */
    filterExprUrlKey?: string;
    /**
     * Url key that will be encoded in the request, specifying if the filtering logic will be AND or OR
     */
    filterLogicUrlKey?: string;
    /**
     * Data will be initially filtered accordingly, directly after dataBind()
     */
    defaultFields?: any[];
    /**
     * A list of expression objects, containing the following key-value pairs: fieldName, expression (search string), condition , and logic (AND/OR)
     */
    expressions?: any[];
    /**
     * An "SQL-like' encoded expressions string. Takes precedence over "expressions". Example: col2 > 100; col2 LIKE %test%
     */
    exprString?: string;
    /**
     * An object containing custom defined filtering conditions as objects.
     */
    customConditions?: any;
    /**
     * Option for DataSourceSettingsFiltering
     */
    [optionName: string]: any;
}
interface DataSourceSettingsSorting {
    /**
     * Sorting direction
     *
     * Valid values:
     * "none"
     * "asc"
     * "desc"
     */
    defaultDirection?: any;
    /**
     * When defaultDirection is different than "none", and defaultFields is specified, data will be initially sorted accordingly, directly after dataBind()
     */
    defaultFields?: any[];
    /**
     * If the sorting type is local and applyToAllData is true, sorting will be performed on the whole data source that's present locally, otherwise only on the current dataView. If sorting type is remote, this setting doesn't have any effect.
     */
    applyToAllData?: boolean;
    /**
     * Custom sorting function that can point to either a string or a function object. When the function is called, the following arguments are passed: data array, fields (array of field definitions) , direction ("asc" or "desc"). The function should return a sorted data array
     */
    customFunc?: any;
    /**
     * Custom comparison sorting function. Accepts the following arguments: fields, schema, booleand value whether sorting is ascending , convert function(please check option for customConvertFunc) and returns a value 0 indicating that values are equal, 1 indicating that val1 > val2 and -1 indicating that val1 < val2
     */
    compareFunc?: any;
    /**
     * Custom data value conversion function(called from sorting function). Accepts a value of the data cell and column key and should return the converted value
     */
    customConvertFunc?: any;
    /**
     * Specifies whether sorting will be applied locally or remotely (via a remote request)
     *
     * Valid values:
     * "remote"
     * "local"
     */
    type?: any;
    /**
     * Specifies if sorting will be case sensitive or not. Works only for local sorting
     */
    caseSensitive?: boolean;
    /**
     * URL param name which specifies how sorting expressions will be encoded in the URL. Default is null and uses OData conventions
     */
    sortUrlKey?: string;
    /**
     * URL param value for ascending type of sorting. Default is null and uses OData conventions
     */
    sortUrlAscValueKey?: string;
    /**
     * URL param value for descending type of sorting. Default is null and uses OData conventions
     */
    sortUrlDescValueKey?: string;
    /**
     * A list of sorting expressions , consisting of the following keys (and their respective values): fieldName and direction
     */
    expressions?: any[];
    /**
     * Takes precedence over experssions, an "SQL-like" encoded expressions string  : see sort(). Example col2 > 100 ORDER BY asc
     */
    exprString?: string;
    /**
     * Option for DataSourceSettingsSorting
     */
    [optionName: string]: any;
}
interface DataSourceSettingsSummaries {
    /**
     * Specifies whether summaries will be applied locally or remotely (via a remote request)
     *
     * Valid values:
     * "remote" A remote request is done and URL params encoded
     * "local" Data is paged client-side.
     */
    type?: any;
    /**
     * Url key for retrieving data from response - used only when summaries are remote
     */
    summaryExprUrlKey?: string;
    /**
     * Key for retrieving data from the summaries response - used only when summaries are remote
     */
    summariesResponseKey?: string;
    /**
     * Determines when the summary values are calculated
     *
     * Valid values:
     * "priortofilteringandpaging"
     * "afterfilteringbeforepaging"
     * "afterfilteringandpaging"
     */
    summaryExecution?: any;
    /**
     * A list of column settings that specifies custom summaries options per column basis
     */
    columnSettings?: any[];
    /**
     * Option for DataSourceSettingsSummaries
     */
    [optionName: string]: any;
}
interface DataSourceSettings {
    /**
     * Setting this is only necessary when the data source is set to a table in string format. we need to create an invisible dummy data container in the body and append the table data to it
     */
    id?: string;
    /**
     * This is the property in the dataView where actual resulting records will be put. (So the dataView will not be array but an object if this is defined), after the potential data source transformation
     */
    outputResultsName?: string;
    /**
     * Callback function to call when data binding is complete
     */
    callback?: Function;
    /**
     * Object on which to invoke the callback function
     */
    callee?: any;
    /**
     * This is the normalized (transformed) resulting data, after it's fetched from the data source
     */
    data?: any[];
    /**
     * This is the source of data - non normalized. Can be an array, can be reference to some JSON object, can be a DOM element for a HTML TABLE, or a function
     */
    dataSource?: any;
    /**
     * Client-side dataBinding event. Can be a string pointing to a function name, or an object pointing to a function
     */
    dataBinding?: any;
    /**
     * Client-side dataBound event. Can be a string pointing to a function name, or an object pointing to a function
     */
    dataBound?: any;
    /**
     * Specifies the HTTP verb to be used to issue the request
     */
    requestType?: string;
    /**
     * Type of the data source
     *
     * Valid values:
     * "json" Specifies that the data source is an already evaluated JSON (JavaScript object/array) or a string that can be evaluated to JSON
     * "xml" Specifies that the data source is a XML Document object or a string that can be evaluated to XML
     * "unknown" Specifies that the data source is of unknown type. In that case it will be analyzed and automatically detected if possible
     * "array" Specifies that the data source is a simple array of objects.
     * "htmlTableString" Specifies that the data source points to a string that represents a HTML table
     * "htmlTableId" Specifies that the data source points to an ID of a HTML Table element that's loaded on the page
     * "htmlTableDom" The data source points to a DOM object that is of TABLE type
     * "invalid" Set whenever data source is analyzed (in case its type is unknown) and the type cannot be detected
     * "remoteUrl" Specifies that the data source points to a remote URL, from which data will be retrieved using an AJAX call ($.ajax)
     * "htmlListDom" The data source points to a DOM object that is of UL/OL type
     * "htmlSelectDom" The data source points to a DOM object that is of SELECT type
     * "empty"
     */
    type?: any;
    /**
     * A schema object that defines which fields from the data to bind to
     */
    schema?: any;
    /**
     * The unique field identifier
     */
    primaryKey?: string;
    /**
     * Property in the response which specifies the total number of records in the backend (this is needed for paging)
     */
    responseTotalRecCountKey?: string;
    /**
     * Property in the response which specifies where the data records array will be held (if the response is wrapped)
     */
    responseDataKey?: string;
    /**
     * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType
     *
     * Valid values:
     * "json"
     * "xml"
     * "html"
     * "script"
     * "jsonp"
     * "text"
     */
    responseDataType?: any;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     */
    responseContentType?: string;
    /**
     * If set to false will disable transformations on schema, even if it is defined locally in the javascript code
     */
    localSchemaTransform?: boolean;
    /**
     * Event that is fired before URL parameters are encoded. Can point to a function name or the function object itself
     */
    urlParamsEncoding?: any;
    /**
     * Event that is fired after URL parameters are encoded (When a remote request is done). Can point to a function name or the function object itself
     */
    urlParamsEncoded?: any;
    /**
     * Settings related to built-in paging functionality
     */
    paging?: DataSourceSettingsPaging;
    /**
     * Settings related to built-in filtering functionality
     */
    filtering?: DataSourceSettingsFiltering;
    /**
     * Settings related to built-in sorting functionality
     */
    sorting?: DataSourceSettingsSorting;
    /**
     * Settings related to built-in summaries functionality
     */
    summaries?: DataSourceSettingsSummaries;
    /**
     * A list of field definitions specifying the schema of the data source.
     * Field objects description: {fieldName, [fieldDataType], [fieldXPath]}
     */
    fields?: any[];
    /**
     * If true, will serialize the transaction log of updated values - if any - whenever commit is performed via a remote request.
     */
    serializeTransactionLog?: boolean;
    /**
     * If set to true, the following behavior will take place:
     * if a new row is added, and then deleted, there will be no transaction added to the log
     * if an edit is made to a row or cell, then the value is brought back to its original value, the transaction should be removed
     * Note: This option takes effect only when autoCommit is set to false.
     */
    aggregateTransactions?: boolean;
    /**
     * If auto commit is true, data will be automatically commited to the data source, once a value or a batch of values are updated via saveChanges()
     */
    autoCommit?: boolean;
    /**
     * Specifies an update remote URL, to which an AJAX request will be made as soon as saveChages() is called.
     */
    updateUrl?: string;
    /**
     * A function to call when row is added.
     * Function takes first argument item and second argument dataSource.
     * Use item.row to obtain reference to the added row.
     * Use item.rowId to get the row ID.
     * Use dataSource to obtain reference to $.ig.DataSource.
     */
    rowAdded?: Function;
    /**
     * A function to call when row is updated (edited).
     * Function takes first argument item and second argument dataSource.
     * Use item.rowIndex to get the row index.
     * Use item.newRow to obtain reference to the updated row.
     * Use item.oldRow to obtain reference to the row that was updated.
     * Use dataSource to obtain reference to $.ig.DataSource.
     */
    rowUpdated?: Function;
    /**
     * A function to call when row is inserted.
     * Function takes first argument item and second argument dataSource.
     * Use item.row to obtain reference to the inserted row.
     * Use item.rowId to get the row ID.
     * Use item.rowIndex to get the row index.
     * Use dataSource to obtain reference to $.ig.DataSource.
     */
    rowInserted?: Function;
    /**
     * A function to call when row is deleted.
     * Use item.row to obtain reference to the deleted row.
     * Use item.rowId to get the row ID.
     * Use item.rowIndex to get the row index.
     * Use dataSource to obtain reference to $.ig.DataSource.
     */
    rowDeleted?: Function;
    /**
     * Option for DataSourceSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class DataSource {
        constructor(settings: DataSourceSettings);
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    DataSource: typeof Infragistics.DataSource;
}
declare module Infragistics {
    class TypeParser {
        toStr(obj: Object): void;
        toDate(obj: Object, pk: Object, key: Object): void;
        toNumber(obj: Object): void;
        toBool(obj: Object): void;
        isNullOrUndefined(obj: Object): void;
        empty(): void;
        num(): void;
    }
}
interface DataSchemaSchema {
    /**
     * A list of field definitions specifying the schema of the data source. Field objects description: {fieldName, [fieldDataType], [fieldXPath]}
     */
    fields?: any[];
    /**
     * This is the property (path) in the data source where the records are located.
     */
    searchField?: string;
    /**
     * This is the property in the resulting object where actual resulting records will be put. (So the result will not be array but an object if this is defined), after the potential data source transformation
     */
    outputResultsName?: string;
    /**
     * Option for DataSchemaSchema
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class DataSchema {
        constructor(schema: DataSchemaSchema);
        /**
         * Performs a transformation on the schema so that the resulting data matches the schema
         *
         * @param data    the data to transform
         */
        transform(data: Object): Object;
        /**
         * Specifies if the object is null, undefined, or an empty string
         *
         * @param o    the object to check for being empty
         */
        isEmpty(o: Object): Object;
        /**
         * Specifies if the object has custom properties or not
         *
         * @param obj    the object to check for presence or lack of custom properties
         */
        isObjEmpty(obj: Object): Object;
        /**
         * Type="array" A list of field definitions specifying the schema of the data source. Field objects description: {fieldName, [fieldDataType], [fieldXPath]}
         */
        fields(): void;
    }
}
interface IgniteUIStatic {
    DataSchema: typeof Infragistics.DataSchema;
}
declare module Infragistics {
    class RemoteDataSource {
        constructor(settings: DataSourceSettings);
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    RemoteDataSource: typeof Infragistics.RemoteDataSource;
}
declare module Infragistics {
    class JSONDataSource {
        constructor(settings: DataSourceSettings);
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    JSONDataSource: typeof Infragistics.JSONDataSource;
}
interface RESTDataSourceSettingsRestSettingsCreate {
    /**
     * Specifies a remote URL to which create requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
     */
    url?: string;
    /**
     * Specifies a remote URL template. Use ${id} in place of the resource id.
     */
    template?: string;
    /**
     * Specifies whether create requests will be sent in batches
     */
    batch?: boolean;
    /**
     * Option for RESTDataSourceSettingsRestSettingsCreate
     */
    [optionName: string]: any;
}
interface RESTDataSourceSettingsRestSettingsUpdate {
    /**
     * Specifies a remote URL to which update requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
     */
    url?: string;
    /**
     * Specifies a remote URL template. Use ${id} in place of the resource id.
     */
    template?: string;
    /**
     * Specifies whether update requests will be sent in batches
     */
    batch?: boolean;
    /**
     * Option for RESTDataSourceSettingsRestSettingsUpdate
     */
    [optionName: string]: any;
}
interface RESTDataSourceSettingsRestSettingsRemove {
    /**
     * Specifies a remote URL to which remove requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
     */
    url?: string;
    /**
     * Specifies a remote URL template. Use ${id} in place of the resource id.
     */
    template?: string;
    /**
     * Specifies whether update requests will be sent in batches
     */
    batch?: boolean;
    /**
     * Option for RESTDataSourceSettingsRestSettingsRemove
     */
    [optionName: string]: any;
}
interface RESTDataSourceSettingsRestSettings {
    /**
     * Settings for create requests
     */
    create?: RESTDataSourceSettingsRestSettingsCreate;
    /**
     * Settings for update requests
     */
    update?: RESTDataSourceSettingsRestSettingsUpdate;
    /**
     * Settings for remove requests
     */
    remove?: RESTDataSourceSettingsRestSettingsRemove;
    /**
     * Specifies whether the ids of the removed resources are send through the request URI
     */
    encodeRemoveInRequestUri?: boolean;
    /**
     * Specifies a custom function to serialize content sent to the server. It should accept a single object or an array of objects and return a string. If not specified, JSON.stringify() will be used.
     */
    contentSerializer?: Function;
    /**
     * Specifies the content type of the request
     */
    contentType?: string;
    /**
     * Option for RESTDataSourceSettingsRestSettings
     */
    [optionName: string]: any;
}
interface RESTDataSourceSettings {
    /**
     * Settings related to REST compliant update routine
     */
    restSettings?: RESTDataSourceSettingsRestSettings;
    /**
     * Option for RESTDataSourceSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class RESTDataSource {
        constructor(settings: RESTDataSourceSettings);
        saveChanges(success: Object, error: Object): void;
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    RESTDataSource: typeof Infragistics.RESTDataSource;
}
interface JSONPDataSourceSettings {
    /**
     * Override the callback function name in a jsonp request. Sets option jsonp in $.ajax function
     *
     * Valid values:
     * "bool" Setting the jsonp option to false prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation
     */
    jsonp?: any;
    /**
     * Specify the callback function name for a JSONP request. Sets option jsonpCallback in $.ajax function
     */
    jsonpCallback?: any;
    /**
     * Option for JSONPDataSourceSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class JSONPDataSource {
        constructor(settings: JSONPDataSourceSettings);
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    JSONPDataSource: typeof Infragistics.JSONPDataSource;
}
declare module Infragistics {
    class XmlDataSource {
        constructor(settings: DataSourceSettings);
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    XmlDataSource: typeof Infragistics.XmlDataSource;
}
declare module Infragistics {
    class FunctionDataSource {
        constructor(settings: DataSourceSettings);
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    FunctionDataSource: typeof Infragistics.FunctionDataSource;
}
declare module Infragistics {
    class HtmlTableDataSource {
        constructor(settings: DataSourceSettings);
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    HtmlTableDataSource: typeof Infragistics.HtmlTableDataSource;
}
declare module Infragistics {
    class ArrayDataSource {
        constructor(settings: DataSourceSettings);
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    ArrayDataSource: typeof Infragistics.ArrayDataSource;
}
interface MashupDataSourceMashupSettings {
    /**
     * Indicates whether to ignore records that have no corresponding data in all of the provided data sources.
     */
    ignorePartialRecords?: boolean;
    /**
     * An array of $.ig.DataSource instances holding the disperse data.
     */
    dataSource?: any[];
    /**
     * Option for MashupDataSourceMashupSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class MashupDataSource {
        constructor(mashupSettings: MashupDataSourceMashupSettings);
        constructor(settings: DataSourceSettings);
        dataBind(): void;
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    Not used in $.ig.DataSource
         */
        findRecordByKey(key: string, ds?: string, objPath?: string): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    Not used in $.ig.DataSource
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * Sorts the data source locally. The result (filtered data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalFilter(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    MashupDataSource: typeof Infragistics.MashupDataSource;
}
interface HierarchicalDataSourceSettingsPaging {
    /**
     * Option for HierarchicalDataSourceSettingsPaging
     */
    [optionName: string]: any;
}
interface HierarchicalDataSourceSettingsSorting {
    /**
     * Option for HierarchicalDataSourceSettingsSorting
     */
    [optionName: string]: any;
}
interface HierarchicalDataSourceSettingsFiltering {
    /**
     * Option for HierarchicalDataSourceSettingsFiltering
     */
    [optionName: string]: any;
}
interface HierarchicalDataSourceSettings {
    autogenerate?: boolean;
    initialDataBindDepth?: number;
    maxDataBindDepth?: number;
    defaultChildrenDataProperty?: string;
    callback?: any;
    callee?: any;
    data?: any[];
    dataSource?: any;
    dataBinding?: any;
    dataBound?: any;
    type?: string;
    responseDataType?: any;
    responseContentType?: any;
    localSchemaTransform?: boolean;
    urlParamsEncoding?: any;
    urlParamsEncoded?: any;
    requestType?: string;
    odata?: boolean;
    paging?: HierarchicalDataSourceSettingsPaging;
    sorting?: HierarchicalDataSourceSettingsSorting;
    filtering?: HierarchicalDataSourceSettingsFiltering;
    schema?: any[];
    /**
     * Option for HierarchicalDataSourceSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class HierarchicalDataSource {
        constructor(settings: HierarchicalDataSourceSettings);
        dataBind(callback: Object, callee: Object): void;
        root(): void;
        dataAt(path: Object, keyspath: Object): void;
    }
}
interface IgniteUIStatic {
    HierarchicalDataSource: typeof Infragistics.HierarchicalDataSource;
}
interface TreeHierarchicalDataSourceSettingsTreeDSFiltering {
    /**
     * Specifies from which data bound level to be applied filtering - 0 is the first level
     */
    fromLevel?: number;
    /**
     * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
     */
    toLevel?: number;
    /**
     * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don't match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don't match filtering conditions
     */
    displayMode?: any;
    /**
     * Filtering data source specific property - name of property in dataRecord object - indicates whether dataRow matches filtering conditions. It is used ONLY when filtering is applied.
     */
    matchFiltering?: string;
    /**
     * Option for TreeHierarchicalDataSourceSettingsTreeDSFiltering
     */
    [optionName: string]: any;
}
interface TreeHierarchicalDataSourceSettingsTreeDSSorting {
    /**
     * Specifies from which data bound level to be applied sorting - 0 is the first level
     */
    fromLevel?: number;
    /**
     * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
     */
    toLevel?: number;
    /**
     * Option for TreeHierarchicalDataSourceSettingsTreeDSSorting
     */
    [optionName: string]: any;
}
interface TreeHierarchicalDataSourceSettingsTreeDSPaging {
    /**
     * Sets gets paging mode.
     *
     * Valid values:
     * "allLevels" includes all visible records in paging.
     */
    mode?: any;
    /**
     * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is 'rootLevelOnly' then the context row always shows the value of the contextRowRootText option.
     *
     * Valid values:
     * "none" Does not render the contextual row
     * "parent" Renders a read-only representation of the immediate parent row
     * "breadcrumb" Renders a read-only breadcrumb trail representing the full path through all ancestors
     */
    contextRowMode?: any;
    /**
     * Option for TreeHierarchicalDataSourceSettingsTreeDSPaging
     */
    [optionName: string]: any;
}
interface TreeHierarchicalDataSourceSettingsTreeDS {
    /**
     * Property name of the array of child data in a hierarchical data source.
     */
    childDataKey?: string;
    /**
     * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
     */
    foreignKey?: string;
    /**
     * Specifies the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
     */
    initialExpandDepth?: number;
    /**
     * Specifies if data is loaded on demand from a remote server. Default is false.
     */
    enableRemoteLoadOnDemand?: boolean;
    /**
     * Specifies a remote URL as a data source, from which data will be retrieved using an AJAX call ($.ajax)
     */
    dataSourceUrl?: string;
    /**
     * Specifies a custom function to be called when the remote request for data has finished.
     */
    requestDataCallback?: Function;
    /**
     * Specifies a custom function to be called when the remote request for data has finished successfully.
     */
    requestDataSuccessCallback?: Function;
    /**
     * Specifies a custom function to be called when the remote request for data has finished with an error.
     */
    requestDataErrorCallback?: Function;
    /**
     * The name of the property that keeps track of the expansion state of a data item. Defaults to __ig_options.expanded.
     */
    propertyExpanded?: string;
    /**
     * The name of the property that keeps track of the level in the hierarchy.Defaults to __ig_options.dataLevel.
     */
    propertyDataLevel?: string;
    /**
     * If set to TRUE it is expected that the source of data is normalized and transformed(has set dataLevel and expansion state). The source of data is used as flatDataView. Usually used when the paging is remote and paging mode is allLevels, or features are remote(and the processing of the returned result should be made on the server)
     */
    initialFlatDataView?: boolean;
    /**
     * Specifies a custom function to be called when requesting data to the server - usually when expanding/collapsing record. If set the function should return the encoded URL. It takes as parameters: data record(type: object), expand - (type: bool).
     */
    customEncodeUrlFunc?: Function;
    /**
     * If true save expansion states in internal list and send it to the server. Applying to one of the main constraint of the REST architecture  Stateless Interactions - client specific data(like expansion states) should NOT be stored on the server
     */
    persistExpansionStates?: boolean;
    /**
     * Configure datasource filtering settings.
     */
    filtering?: TreeHierarchicalDataSourceSettingsTreeDSFiltering;
    /**
     * Configure datasource sorting settings.
     */
    sorting?: TreeHierarchicalDataSourceSettingsTreeDSSorting;
    /**
     * Configure datasource paging settings.
     */
    paging?: TreeHierarchicalDataSourceSettingsTreeDSPaging;
    /**
     * Option for TreeHierarchicalDataSourceSettingsTreeDS
     */
    [optionName: string]: any;
}
interface TreeHierarchicalDataSourceSettings {
    /**
     * Configure tree datasource specific settings
     */
    treeDS?: TreeHierarchicalDataSourceSettingsTreeDS;
    /**
     * Option for TreeHierarchicalDataSourceSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class TreeHierarchicalDataSource {
        constructor(settings: TreeHierarchicalDataSourceSettings);
        /**
         * Data binds to the current data source  data source
         * databinding works using the following workflow:
         * 1. fire the databinding event
         * 2. based on the data source type (see analyzeDataSource()), do the following:
         * 3. if type is HtmlTable, parse the table and set the data and dataView respectively.
         * if the type is Function, call it, apply Paging/Filtering/Sorting, and set this._dataView . If the developer wants to do his own paging, filtering or sorting
         * in that case, then he should handle the PageIndexChanging and/or DataFiltering, and/or ColumnSorting client-side events, and cancel them.
         * if no paging/sorting/filtering are enabled, use just this._data to save space
         * if the data source is of type RemoteUrl, use jQuery's $.ajax API to trigger a remote request to the service. Use the param() API to encode the URL
         * if the data source is invalid, throw an exception
         * if the analyzed runtime data source type , that is, the result of analyzeDataSource(), is Unknown, check if
         * the value of settings.type is set to XML or JSON. If string, eval for JSON, and parse for the XML to build the object ree
         * 4. now normalize/transform the data, if a schema is supplied. This inplies any additional data type  conversion
         * 5. next, if OpType is Local, apply paging, sorting, and/or filtering to the data, and store the result in this._dataView
         * 6. fire the databound event
         *
         *
         * @param callback    callback function
         * @param callee    callee object on which the callback will be executed. If none is specified, will assume global execution context
         */
        dataBind(callback?: string, callee?: Object): void;
        getParentRowsForRow(dataRow: Object, ds: Object): void;
        /**
         * Gets the current data bound depth of the tree grid hierarchy.
         */
        getDataBoundDepth(): void;
        /**
         * Gets/Sets whether the data source has been transformed from flat to hierarchical
         *
         * @param isTransformed    Determines if the data source is marked as transformed or not.
         */
        isTransformedToHierarchicalData(isTransformed?: boolean): void;
        /**
         * Transforms flat data to hierararchical data and returns the result
         *
         * @param data    The flat data that will be transformed to hierarchical
         */
        transformToHierarchicalData(data: Object): Object;
        /**
         * This processes the passed data for the specified level and applies the schema transformation to it.
         *
         * @param data    The data to be processed and transformed
         * @param level    The level to which the data belongs to. If this is not set it defaults to 0.
         * @param suppressTransformation    Determines whether the data should go through schema transformation. If true schema transofrmatin will not be applied.
         */
        processDataPerLevel(data: Object, level?: number, suppressTransformation?: boolean): Object;
        /**
         * Returnschild data transformed to flat data
         *
         * @param record    The data record whose data is transformed and returned as flat
         * @param level    The level. If not set defaults to 0.
         */
        getFlatDataForRecord(record: Object, level?: number): Object;
        /**
         * Generates flat data.
         * Returns an object that contains the generated flat data, the flat visible data, records count and visible records count.
         *
         * @param data    The data record whose data is transformed.
         * @param level    The level from which to start recursively generating the flat data. If not set defaults to 0.
         */
        generateFlatData(data: Object, level?: number): Object;
        /**
         * Generates a flat data view from the current (hierarchical)data
         */
        generateFlatDataView(): void;
        /**
         * Returns the current flat data view
         */
        flatDataView(): Object;
        /**
         * Returns flat visible data.
         */
        getVisibleFlatData(): Object;
        /**
         * Returns flat data(without taking into account visible/expansion state).
         */
        getFlatData(): Object;
        /**
         * Returns total records count(without taking into account visible/expansion state).
         */
        getFlatDataCount(): number;
        /**
         * Sets the expanded/collapsed state of a row by its index
         *
         * @param index    The index of the row.
         * @param expanded    If true then the row will be expanded. Otherwise it will be collapsed.
         * @param callbackArgs    Specifies a custom function to be called when the state of the row is changed.
         */
        setExpandedStateByRowIndex(index: number, expanded: boolean, callbackArgs: Function): void;
        /**
         * Sets the expanded state of a row by its primary key
         *
         * @param rowId    The id of the row.
         * @param expanded    If true the row will be expanded. Otherwise it will be collapsed.
         * @param callbackArgs    Specifies a custom function to be called when the state of the row is changed.
         */
        setExpandedStateByPrimaryKey(rowId: string, expanded: boolean, callbackArgs: Function): void;
        /**
         * Gets whether the row with the specified id is expanded.Returns true if the row is expanded or false if it's not.
         *
         * @param rowId    //The id of the row.
         */
        getExpandStateById(rowId: string): boolean;
        /**
         * Toggles the row's state by the row's id.
         *
         * @param rowId    The id of the row.
         * @param callbackArgs    Specifies a custom function to be called when the state of the row is changed.
         */
        toggleRow(rowId: string, callbackArgs: Function): void;
        /**
         * Sorts the data source locally. The result (sorted data) can be obtained by calling dataView(). Remote filtering can be performed by just calling dataBind() and setting the settings.sorting.expressions
         * multi-column sorting can be enabled by setting keepSortState to true.
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sort(fields: Object, direction: string): void;
        /**
         * Sorts the given data recursively
         * fields => an array of fields object definitions:
         * example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
         *
         *
         * @param data    the data array that will be sorted.
         * @param level    the level to which the data belongs to
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sortDataRecursive(data: Object, level: number, fields: Object, direction: string): void;
        /**
         * Sorts the passed data and returns the sorted result.
         *
         *
         * @param data    the data to be sorted
    
       fields => an array of fields object definitions:
       example: [{fieldName : "firstName"}, {fieldName : "lastName"}]
       example 2: [{fieldIndex : 1} , {fieldIndex : 2}]
        
         * @param fields    an array of fields object definitions
         * @param direction    asc / desc direction
         */
        sortData(data: Object, fields: Object, direction: string): void;
        /**
         * Returns the total number of records in the local data source
         */
        totalLocalRecordsCount(): number;
        /**
         * Returns the total number of match filtering records in the data source. When the dataSource is remote and filtering is applied then it is taken value of property 'filtering.countRecords' in metatadata - if set. If it is not set returns totalRecordsCount
         */
        getFilteringMatchRecordsCount(): number;
        /**
         * Filters the data source locally. Remote filtering can be performed by just calling dataBind() and setting the settings.filtering.expressions. The result (filtered data) can be obtained by calling dataView()
         * example: [{fieldName : "firstName", expr: "abc", cond: "StartsWith"}, {fieldName : "lastName"}]
         * example 2: [{fieldIndex : 1} , {fieldIndex : 2, expr: "a", cond : "contains"}]
         * expr is the filter expression text , such as "abc", or a regular expression such as *test*
         * cond is the filtering condition such as startsWith, endsWith, contains, equals, doesNotEqual, doesNotContain
         * if expr is detected to be a regular expression, the "cond" part is skipped
         *
         *
         * @param fieldExpressions    a list of field expression definitions
         * @param boolLogic    boolean logic. Accepted values are AND and OR.
         * @param keepFilterState    if keepFilterState is set to true, it will not discard previous filtering expressions
         * @param fieldExpressionsOnStrings
         */
        filter(fieldExpressions: Object, boolLogic: Object, keepFilterState: boolean, fieldExpressionsOnStrings: Object): void;
        /**
         * Gets the count of the filtered records in the dataView
         */
        getFilteredRecordsCountFromDataView(): number;
        /**
         * Gets the count of the filtered records
         */
        getFilteredRecordsCount(): number;
        /**
         * This clears local filtering applied to the data view by resetting it to the original data and applying any paging.
         */
        clearLocalFilter(): void;
        /**
         * Gets whether the flat data view should be generated by calling the generateFlatDataView method.
         */
        shouldCallGenerateFlatDataView(): void;
        /**
         * Clears __matchFiltering property from the data record objects in the filtered data source. The __matchFiltering property determines whether a record matches the specified filtering condition.
         *
         * @param data    the array of data objects to be cleared. If not set the current filtered data array is used.
         */
        clearMatchFiltering(data?: Object): void;
        /**
         * Gets the path of a record by the record or the record's key
         *
         * @param record    the record or the record's key as string or number
         */
        getPathBy(record: Object): void;
        /**
         * Returns a record by a specified key (requires that primaryKey is set in the settings)
         *
         * @param key    Primary key of the record
         * @param ds    the data source in which to search for the record. When not set it will use the current data source.
         * @param objPath    path to the object. Example: {path: '5/1'}
         */
        findRecordByKey(key: Object, ds?: string, objPath?: Object): Object;
        /**
         * Removes a specific record denoted by the primaryKey of the passed key parameter from the data source
         *
         * @param key    primary key of the record
         * @param origDs
         */
        removeRecordByKey(key: Object, origDs: Object): void;
        /**
         * Gets the chilren records by the parent record's key in the passed data source
         *
         * @param key     primary key of the record
         * @param ds     the data source
         */
        getChildrenByKey(key: Object, ds: Object): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param rowIndex    row index at which to be insert the new row
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         * @param parentRowId    the value of the primary key of the parent row(if any)
         */
        insertRow(rowId: Object, rowObject: Object, rowIndex: number, autoCommit: boolean, parentRowId: Object): Object;
        /**
         * Sets a list of fields to the data source. If no parameter is specified, just returns the already existing list of fields
         *
         * @param fields    a field has the following format: {key: 'fieldKey', dataType: 'string/number/date' }
         */
        fields(fields?: Object): Object;
        /**
         * Analyzes the dataSource setting to automatically determine the type of the data source. Returns the data source type. See settings.type
         */
        analyzeDataSource(): string;
        /**
         * Returns the current normalized/transformed and paged/filtered/sorted data, i.e. the dataView
         */
        dataView(): Object;
        /**
         * Returns all of the bound data, without taking into account local paging, sorting, filtering, etc.
         */
        data(): Object;
        /**
         * Returns transformed data according to transformed execution:
         * 1. Before paging and filtering
         * 2. After filtering before paging
         * 3. After filtering and paging
         *
         *
         * @param transformedExecution
         */
        transformedData(transformedExecution: Object): Object;
        /**
         * Returns summaries data
         */
        dataSummaries(): Object;
        /**
         * Gets/sets the schema definition.
         *
         * @param s    a schema object
         * @param t    type of the data source. See settings.type
         */
        schema(s?: Object, t?: string): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param p    object holding all paging settings. See settings.paging
         */
        pagingSettings(p?: Object): void;
        /**
         * Gets/sets a list of filtering settings
         *
         * @param f    object holding all filtering settings. See settings.filtering
         */
        filterSettings(f?: Object): void;
        /**
         * Gets/sets a list of paging settings
         *
         * @param s    object holding all sorting settings. See settings.sorting
         */
        sortSettings(s?: Object): void;
        /**
         * Gets/sets a list of summaries settings.
         *
         * @param s    object holding all summaries settings. See settings.summaries
         */
        summariesSettings(s?: Object): void;
        /**
         * Gets/sets the dataSource setting. If no parameter is specified, returns settings.dataSource
         *
         * @param ds
         */
        dataSource(ds?: Object): Object;
        /**
         * Gets/sets the type of the dataSource. If no parameter is specified, returns settings.type
         * returnType="json|xml|unknown|array|function|htmlTableString|htmlTableId|htmlTableDom|invalid|remoteUrl|empty"
         *
         * @param t
         */
        type(t?: Object): void;
        /**
         * Removes a record from the data source at specific index.
         *
         * @param index    index of record
         * @param origDs
         */
        removeRecordByIndex(index: number, origDs: Object): void;
        /**
         * Sets a cell value for the cell denoted by rowId and colId. Creates a transaction for the update operation and returns it
         *
         * @param rowId    the rowId - row key (string) or index (number)
         * @param colId    the column id - column key (string) or index (number)
         * @param val    The new value
         * @param autoCommit    if autoCommit is true, it updates the datasource automatically and the transaction is still stored in the accumulated transaction log
         */
        setCellValue(rowId: Object, colId: Object, val: Object, autoCommit: boolean): Object;
        /**
         * Updates a record in the datasource. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the record object containing the key/value pairs we want to update. It doesn't have to include key/value pairs for all fields defined in the schema or in the data source (if no schema is defined)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        updateRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Adds a new row to the data source. Creates a transaction that can be committed / rolled back
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param rowObject    the new record data.
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        addRow(rowId: Object, rowObject: Object, autoCommit: boolean): Object;
        /**
         * Deletes a row from the data source.
         *
         * @param rowId    the record key - primaryKey (string) or index (number)
         * @param autoCommit    if autoCommit is true, the datasource will be updated automatically and the transaction is still stored in the accumulated transaction log
         */
        deleteRow(rowId: Object, autoCommit: boolean): Object;
        /**
         * Adds a new node to the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        addNode(data: Object): void;
        /**
         * Removes a node from the tree data source. Creates a transaction that can be committed / rolled back
         *
         * @param data    the transaction data
         */
        removeNode(data: Object): void;
        /**
         * Returns a standalone object (copy) that represents the commited transactions, but detached from the data source
         *
         * @param t    a transaction object
         */
        getDetachedRecord(t: Object): Object;
        /**
         * Update the data source with every transaction from the log
         *
         * @param id    Id of the transaction to commit. If no id is specified, will commit all transactions to the data source.
         */
        commit(id?: number): void;
        /**
         * Clears the transaction log without updating anything in the data source
         *
         * @param id    Record Id to find transactions for. If no id is specified, will rollback all transactions to the data source.
         */
        rollback(id?: Object): void;
        /**
         * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source
         */
        pendingTransactions(): any[];
        /**
         * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
         */
        allTransactions(): any[];
        /**
         * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently
         */
        transactionsAsString(): string;
        /**
         * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
         *
         * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
         * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
         */
        saveChanges(success: Function, error: Function): void;
        /**
         * Get summaries calculation data from remote response
         *
         * @param key
         * @param dsObj
         */
        summariesResponse(key: Object, dsObj: Object): void;
        /**
         * Returns filtered data if local filtering is applied. If filtering is not applied OR type of filtering is remote returns undefined.
         */
        filteredData(): any[];
        /**
         * This clears local sorting applied to the data view by resetting it to the original data and applying any paging
         */
        clearLocalSorting(): void;
        /**
         * Applicable only when the data source is bound to remote data. Gets / sets the total number of records in the data source. If data binding is remote, and there's paging or filtering enabled, the actual total number of records may not
         * match the number of records that exists on the client
         *
         * @param count    the total number of records
         * @param key    the name of the property which hold the total records count value
         * @param dsObj
         * @param context
         */
        totalRecordsCount(count?: number, key?: string, dsObj?: Object, context?: Object): void;
        /**
         * Gets / sets if the response from the server contains a property which specifies the total number of records in the server-side backend
         *
         * @param hasCount    specifies if the data source contains a property that denotes the total number of records in the server-side backend
         */
        hasTotalRecordsCount(hasCount: boolean): void;
        /**
         * Returns metadata object for the specified key
         *
         * @param key    Primary key of the record
         */
        metadata(key: string): Object;
        /**
         * Returns the total number of pages
         */
        pageCount(): number;
        /**
         * Gets /sets the current page index. If an index is passed as a parameter, the data source is re-bound.
         *
         * @param index    the page index. If none is specified, returns the current page index.
         */
        pageIndex(index?: number): number;
        /**
         * Gets /sets the page index that should be persisted. For now ONLY when filtering is applied and call explicitly DataBind.
         *
         * @param value    the page index that should be persisted. If none is specified, returns the current page index that should be persisted.
         */
        persistedPageIndex(value?: number): number;
        /**
         * Sets the page index to be equal to the previous page index and rebinds the data source
         */
        prevPage(): void;
        /**
         * Sets the page index to be equal to the next page index and rebinds the data source
         */
        nextPage(): void;
        /**
         * Gets /sets the page size and rebinds the data source if a parameter is specified. If no parameter is passed, returns the current page size
         *
         * @param s    the page size.
         */
        pageSize(s?: number): void;
        /**
         * For internal use
         *
         * @param dirty
         */
        pageSizeDirty(dirty: Object): void;
        /**
         * Returns a list of records for the specified page. Implies that paging is enabled.
         *
         * @param p    the page index for which records will be returned
         */
        recordsForPage(p: number): void;
        /**
         * Converts a HTML TABLE dom element to a JavaScript array of objects that contain the records data
         *
         * @param tableDOM    TABLE dom element to transform
         */
        tableToObject(tableDOM: Element): Object;
        /**
         * Parses the string and returns an evaluated JSON object
         *
         * @param s    the JSON as string.
         */
        stringToJSONObject(s: string): void;
        /**
         * Parses a string and returns a XML Document
         *
         * @param s    the XML represented as a string
         */
        stringToXmlObject(s: string): void;
    }
}
interface IgniteUIStatic {
    TreeHierarchicalDataSource: typeof Infragistics.TreeHierarchicalDataSource;
}
declare module Infragistics {
    class DvCommonWidget {
        option(key: Object, value: Object): void;
    }
}
interface SimpleTextMarkerTemplateSettings {
    padding?: number;
    getText?: any;
    backgroundColor?: string;
    borderColor?: string;
    borderThickness?: number;
    textColor?: string;
    font?: any;
    /**
     * Option for SimpleTextMarkerTemplateSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class SimpleTextMarkerTemplate {
        constructor(requireThis: boolean);
        constructor(settings: SimpleTextMarkerTemplateSettings);
        getText(item: Object, textDelegate: Object): void;
        measure(measureInfo: Object): void;
        render(renderInfo: Object): void;
    }
}
interface IgniteUIStatic {
    SimpleTextMarkerTemplate: typeof Infragistics.SimpleTextMarkerTemplate;
}
interface OlapXmlaDataSourceOptionsRequestOptions {
    /**
     * The value is applied to XmlHttpRequest.withCredentials if supported by the user agent.
     *                 Setting this property to true will allow IE8/IE9 to make authenticated cross-origin requests to tusted domains through XmlHttpRequest instead of XDomainRequest
     *                 and will prompt the user for credentials.
     */
    withCredentials?: boolean;
    /**
     * A callback to be invoked right before the request is send to the server. Extends beforeSend callback of jQuery.ajax's options object.
     */
    beforeSend?: Function;
    /**
     * Option for OlapXmlaDataSourceOptionsRequestOptions
     */
    [optionName: string]: any;
}
interface OlapXmlaDataSourceOptionsMdxSettings {
    /**
     * Optional="true" a value indicating whether a NON EMPTY clause is present on ROWS axis. Default value is true
     */
    nonEmptyOnRows?: boolean;
    /**
     * Optional="true" a value indicating whether a NON EMPTY clause is present on COLUMNS axis. Default value is true
     */
    nonEmptyOnColumns?: boolean;
    /**
     * Optional="true" a value indicating whether a members' set expressions on ROWS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
     */
    addCalculatedMembersOnRows?: boolean;
    /**
     * Optional="true" a value indicating whether a members' set expressions on COLUMNS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
     */
    addCalculatedMembersOnColumns?: boolean;
    /**
     * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on ROWS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
     */
    dimensionPropertiesOnRows?: any[];
    /**
     * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on COLUMNS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
     */
    dimensionPropertiesOnColumns?: any[];
    /**
     * Option for OlapXmlaDataSourceOptionsMdxSettings
     */
    [optionName: string]: any;
}
interface OlapXmlaDataSourceOptions {
    /**
     * Optional="false" The URL of the XMLA server.
     */
    serverUrl?: string;
    /**
     * The catalog name.
     */
    catalog?: string;
    /**
     * The name of the cube in the data source.
     */
    cube?: string;
    /**
     * The name of the measure group in the data source.
     */
    measureGroup?: string;
    /**
     * A list of measure names separated by comma (,). These will be the measures of the data source.
     */
    measures?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
     */
    filters?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
     */
    rows?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
     */
    columns?: string;
    /**
     * An object containing information about how the request to the XMLA server should be processed.
     */
    requestOptions?: OlapXmlaDataSourceOptionsRequestOptions;
    /**
     * Enables/disables caching of the XMLA result object.
     */
    enableResultCache?: boolean;
    /**
     * Additional properties sent with every discover request.
     *             The object is treated as a key/value store where each property name is used as the key and the property value as the value.
     */
    discoverProperties?: any;
    /**
     * Additional properties sent with every execute request.
     *             The object is treated as a key/value store where each property name is used as the key and the property value as the value.
     */
    executeProperties?: any;
    /**
     * Optional="true" a javascript object containing information about how the request to the xmla server should be processed
     */
    mdxSettings?: OlapXmlaDataSourceOptionsMdxSettings;
    /**
     * Option for OlapXmlaDataSourceOptions
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class OlapXmlaDataSource {
        constructor(options: OlapXmlaDataSourceOptions);
        /**
         * Initializes the data source and returns a promise that will be resolved once the data source is initialized.
         * The promise's result will be the metadata tree for the catalog/cube/measureGroup specified in the settings or null if the settings do not provide a valid cube initialization data.
         * The data source is not functional until it has been initialized and all other methods other than initialize() will throw an error if isInitialized() returns false.
         */
        initialize(): Object;
        /**
         * Retrieves the initialization state of the data source.
         */
        isInitialized(): boolean;
        /**
         * Indicates whether the data source is modified.
         */
        isModified(): boolean;
        /**
         * Indicates whether the update() method execution is in progress.
         */
        isUpdating(): boolean;
        /**
         * Retrieves the currently loaded catalogs in the data source.
         */
        catalogs(): any[];
        /**
         * Retrieves the current catalog in the data source.
         */
        catalog(): Object;
        /**
         * Sets the current catalog for the data source and updates the cubes() and catalog() properties.
         *
         * @param catalogName the name of the catalog.
         */
        setCatalog(catalogName: string): Object;
        /**
         * Retrieves the currently loaded cubes in the data source.
         */
        cubes(): any[];
        /**
         * Retrieves the current cube in the data source.
         */
        cube(): Object;
        /**
         * Sets the current cube for the data source and updates the cube(), measureGroup() and metadataTree() properties.
         *
         * @param cubeName the name of the cube.
         */
        setCube(cubeName: string): Object;
        /**
         * Retrieves the currently loaded measure groups in the data source.
         */
        measureGroups(): any[];
        /**
         * Retrieves the current measureGroup in the data source.
         */
        measureGroup(): Object;
        /**
         * Sets the current measure group for the data source and updates the measureGroup() and metadataTree() properties.
         * Even though the catalogs/cubes/measureGroups items are cascading(e.g. in order to load the cubes a catalog has to be set) in order to construct the metadata tree a measure group is not required as it just filters the resulting metadata.
         * Once setCube(cubeName) is called the metadata tree would be loaded and the measureGroup() property would be filled with the default '(All)' measure group which indicates that no measure group is selected.
         *
         * @param measureGroupName the name of the measure group.
         */
        setMeasureGroup(measureGroupName: string): Object;
        /**
         * Returns the fully loaded metadata tree.
         */
        metadataTree(): Object;
        /**
         * Adds a hierarchy to the rows of the pivot grid.
         *
         * @param rowItem An object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid rows.
         */
        addRowItem(rowItem: Object): void;
        /**
         * Removes a hierarchy or the measure list from the rows of the pivot grid.
         *
         * @param rowItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "rows".
         */
        removeRowItem(rowItem: Object): void;
        /**
         * Adds a hierarchy to the columns of the pivot grid.
         *
         * @param columnItem an object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid columns.
         */
        addColumnItem(columnItem: Object): void;
        /**
         * Removes a hierarchy or the measure list from the columns of the pivot grid.
         *
         * @param columnItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "columns".
         */
        removeColumnItem(columnItem: Object): void;
        /**
         * Adds a hierarchy to the filter axis of the pivot grid.
         *
         * @param filterItem an object of type $.ig.Hierarchy which is the hierarchy to add.
         */
        addFilterItem(filterItem: Object): void;
        /**
         * Removes a hierarchy from the filter axis of the pivot grid.
         *
         * @param filterItem an object of type $.ig.Hierarchy which is the hierarchy to remove.
         */
        removeFilterItem(filterItem: Object): void;
        /**
         * Adds a measure to the measures of the pivot grid.
         *
         * @param measureItem an object of type $.ig.Measure which is the measure to add.
         */
        addMeasureItem(measureItem: Object): void;
        /**
         * Removes a measure from the measures of the pivot grid.
         *
         * @param measureItem An object of type $.ig.Measure which is the measure to remove.
         */
        removeMeasureItem(measureItem: Object): void;
        /**
         * Sets the index at which the measure list will be positioned in the rows/columns it resides.
         *
         * @param index the index where measure list to appear.
         */
        setMeasureListIndex(index: number): void;
        /**
         * Sets the location of the measure list.
         *
         * @param location accepted values are 'rows' and 'columns'.
         */
        setMeasureListLocation(location: Object): void;
        /**
         * Sets a tuple member to be expanded next time the update() method is called.
         * Calling this method on an already expanded member does nothing.
         *
         * @param axisName the name of the axis for the tuple.
         * @param tupleIndex the index of the tuple in the axis.
         * @param memberIndex the index of the member in the tuple.
         */
        expandTupleMember(axisName: string, tupleIndex: number, memberIndex: number): void;
        /**
         * Sets a tuple member to be collapsed next time the update() method is called.
         * Calling this method on an already collapsed member does nothing.
         *
         * @param axisName the name of the axis for the tuple.
         * @param tupleIndex the index of the tuple in the axis.
         * @param memberIndex the index of the member in the tuple.
         */
        collapseTupleMember(axisName: string, tupleIndex: number, memberIndex: number): void;
        /**
         * Returns the items in the row axis.
         */
        rowAxis(): any[];
        /**
         * Returns the items in the column axis.
         */
        columnAxis(): any[];
        /**
         * Returns the items in the filter axis.
         */
        filters(): any[];
        /**
         * Returns the items in the measures axis.
         */
        measures(): any[];
        /**
         * Returns the result from the last update or null if the last update was unsuccessful.
         */
        result(): Object;
        /**
         * Clears all pending changes since last time the update() method is called.
         */
        clearPendingChanges(): void;
        /**
         * Performs an update with the list of pending changes and updates the data source result.
         */
        update(): Object;
        /**
         * Gets the first element of the specified elementType which matches the specified predicate or null if there is no such element found.
         *
         * @param predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
         * @param elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
         */
        getCoreElement(predicate: Function, elementType: Object): Object;
        /**
         * Gets an array with elements of the specified elementType which match the specified predicate or empty array if there is no such element found.
         *
         * @param predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
         * @param elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
         */
        getCoreElements(predicate: Function, elementType: Object): Object;
        /**
         * Returns $.ig.Dimension object for the specified unique name.
         *
         * @param dimensionUniqueName the unique name of the searched dimension object.
         */
        getDimension(dimensionUniqueName: string): Object;
        /**
         * Returns $.ig.Hierarchy object for the specified unique name.
         *
         * @param hierarchyUniqueName the unique name of the searched hierarchy object.
         */
        getHierarchy(hierarchyUniqueName: string): Object;
        /**
         * Returns $.ig.Level object for the specified unique name.
         *
         * @param levelUniqueName the unique name of the searched level object.
         */
        getLevel(levelUniqueName: string): Object;
        /**
         * Returns $.ig.Measure object for the specified unique name.
         *
         * @param measureUniqueName the unique name of the searched measure object.
         */
        getMeasure(measureUniqueName: string): Object;
        /**
         * Returns $.ig.MeasureList object available when operates with more than one $.ig.Measure object.
         */
        getMeasureList(): Object;
        /**
         * Returns an array of strings with the unique names of selected for given hierarchy filter members.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
         */
        getFilterMemberNames(hierarchyUniqueName: string): any[];
        /**
         * Adds a member to list of filter members that will be present in result.
         * If a member of given hierarchy is added to this filter list then only those members which are present in this filter list will be present for that hierarchy in the result.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy this member belongs to.
         * @param memberUniqueName the unique name of the member to be added.
         */
        addFilterMember(hierarchyUniqueName: string, memberUniqueName: string): void;
        /**
         * Removes a member from the list of filter members that will be present in result.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy this member belongs to.
         * @param memberUniqueName the unique name of the member to be removed.
         */
        removeFilterMember(hierarchyUniqueName: string, memberUniqueName: string): void;
        /**
         * Removes all members from the list of filter members and the filter for the specified hierarchy is cleared.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy which filter members to be cleared.
         */
        removeAllFilterMembers(hierarchyUniqueName: string): void;
        /**
         * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given level filter member.
         *
         * @param levelUniqueName the unique name of the member whose active filter members are returned.
         */
        getMembersOfLevel(levelUniqueName: string): void;
        /**
         * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given hierarchy filter member.
         *
         * @param hierarchyUniqueName the unique name of the member whose active filter members are returned.
         */
        getMembersOfHierarchy(hierarchyUniqueName: string): void;
        /**
         * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects that are children of the current member.
         *
         * @param memberUniqueName the unique name of the member whose active filter members are returned.
         */
        getMembersOfMember(memberUniqueName: string): void;
    }
}
interface IgniteUIStatic {
    OlapXmlaDataSource: typeof Infragistics.OlapXmlaDataSource;
}
interface OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure {
    /**
     * Optional="false" A unique name for the measure.
     */
    name?: string;
    /**
     * A caption for the measure.
     */
    caption?: string;
    /**
     * Optional="false" An aggregator function called when each cell is evaluated.
     *                                 Returns a value for the cell. If the returned value is null, no cell will be created in for the data source result.
     */
    aggregator?: Function;
    /**
     * The path used when displaying the measure in the user interface. Nested folders are indicated by a backslash (\).
     */
    displayFolder?: string;
    /**
     * Option for OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure
     */
    [optionName: string]: any;
}
interface OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension {
    /**
     * A unique name for the measures dimension.
     *                             The default value is "Measures". This name is used to create the names of dimensions using the following pattern:
     *                             [<measuresDimensionMetadata.name>].[<measureMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the measures dimension.
     *                             The default value is "Measures".
     */
    caption?: string;
    /**
     * An array of measure metadata objects.
     */
    measures?: OlapFlatDataSourceOptionsMetadataCubeMeasuresDimensionMeasure[];
    /**
     * Option for OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension
     */
    [optionName: string]: any;
}
interface OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel {
    /**
     * Optional="false" A name for the level.
     *                                     The unique name of the level is formed using the following pattern:
     *                                     {<hierarchy.uniqueName>}.[<levelMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the level.
     */
    caption?: string;
    /**
     * A function called for each item of the data source array when level members are created.
     *                                     Based on the item parameter the function should return a value that will form the $.ig.Member’s name and caption.
     */
    memberProvider?: Function;
    /**
     * Option for OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel
     */
    [optionName: string]: any;
}
interface OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie {
    /**
     * Optional="false" A name for the hierarchy.
     *                                 The unique name of the hierarchy is formed using the following pattern:
     *                                 [<parentDimension.name>].[<hierarchyMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the hierarchy.
     */
    caption?: string;
    /**
     * The path to be used when displaying the hierarchy in the user interface.
     *                                 Nested folders are indicated by a backslash (\).
     *                                 The folder hierarchy will appear under parent dimension node.
     */
    displayFolder?: string;
    /**
     * An array of level metadata objects.
     */
    levels?: OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchieLevel[];
    /**
     * Option for OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie
     */
    [optionName: string]: any;
}
interface OlapFlatDataSourceOptionsMetadataCubeDimension {
    /**
     * Optional="false" A unique name for the dimension.
     */
    name?: string;
    /**
     * A caption for the dimension.
     */
    caption?: string;
    /**
     * An array of hierarchy metadata objects.
     */
    hierarchies?: OlapFlatDataSourceOptionsMetadataCubeDimensionHierarchie[];
    /**
     * Option for OlapFlatDataSourceOptionsMetadataCubeDimension
     */
    [optionName: string]: any;
}
interface OlapFlatDataSourceOptionsMetadataCube {
    /**
     * Optional="false" A unique name for the cube.
     */
    name?: string;
    /**
     * A caption for the cube.
     */
    caption?: string;
    /**
     * An object providing information about the measures' root node.
     */
    measuresDimension?: OlapFlatDataSourceOptionsMetadataCubeMeasuresDimension;
    /**
     * An array of dimension metadata objects.
     */
    dimensions?: OlapFlatDataSourceOptionsMetadataCubeDimension[];
    /**
     * Option for OlapFlatDataSourceOptionsMetadataCube
     */
    [optionName: string]: any;
}
interface OlapFlatDataSourceOptionsMetadata {
    /**
     * Optional="false" Metadata used for the creation of the cube.
     */
    cube?: OlapFlatDataSourceOptionsMetadataCube;
    /**
     * Option for OlapFlatDataSourceOptionsMetadata
     */
    [optionName: string]: any;
}
interface OlapFlatDataSourceOptions {
    /**
     * Optional="true" Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     */
    dataSource?: any;
    /**
     * Optional="true" Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
     */
    dataSourceUrl?: string;
    /**
     * Optional="true" Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * Optional="true" Specifies the name of the property in which data records are held if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Optional="true" Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    responseDataType?: string;
    /**
     * A list of measure names separated by comma (,). These will be the measures of the data source.
     */
    measures?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
     */
    filters?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
     */
    rows?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
     */
    columns?: string;
    /**
     * Optional="false" An object containing processing instructions for the $.ig.DataSource data.
     */
    metadata?: OlapFlatDataSourceOptionsMetadata;
    /**
     * Option for OlapFlatDataSourceOptions
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class OlapFlatDataSource {
        constructor(options: OlapFlatDataSourceOptions);
        /**
         * Initializes the data source and returns a promise that will be resolved once the data source is initialized.
         * The promise's result will be the metadata tree for the catalog/cube/measureGroup specified in the settings or null if the settings do not provide a valid cube initialization data.
         * The data source is not functional until it has been initialized and all other methods other than initialize() will throw an error if isInitialized() returns false.
         */
        initialize(): Object;
        /**
         * Retrieves the initialization state of the data source.
         */
        isInitialized(): boolean;
        /**
         * Indicates whether the data source is modified.
         */
        isModified(): boolean;
        /**
         * Indicates whether the update() method execution is in progress.
         */
        isUpdating(): boolean;
        /**
         * Retrieves the currently loaded cubes in the data source.
         */
        cubes(): any[];
        /**
         * Retrieves the current cube in the data source.
         */
        cube(): Object;
        /**
         * Sets the current cube for the data source and updates the cube(), measureGroup() and metadataTree() properties.
         *
         * @param cubeName the name of the cube.
         */
        setCube(cubeName: string): Object;
        /**
         * Returns the fully loaded metadata tree.
         */
        metadataTree(): Object;
        /**
         * Adds a hierarchy to the rows of the pivot grid.
         *
         * @param rowItem An object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid rows.
         */
        addRowItem(rowItem: Object): void;
        /**
         * Removes a hierarchy or the measure list from the rows of the pivot grid.
         *
         * @param rowItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "rows".
         */
        removeRowItem(rowItem: Object): void;
        /**
         * Adds a hierarchy to the columns of the pivot grid.
         *
         * @param columnItem an object of type $.ig.Hierarchy which is the hierarchy to add in the pivot grid columns.
         */
        addColumnItem(columnItem: Object): void;
        /**
         * Removes a hierarchy or the measure list from the columns of the pivot grid.
         *
         * @param columnItem an object of type $.ig.Hierarchy or $.ig.MeasureList which is the hierarchy to remove or the measure list if there are more than one measures added and the measure list location is set to "columns".
         */
        removeColumnItem(columnItem: Object): void;
        /**
         * Adds a hierarchy to the filter axis of the pivot grid.
         *
         * @param filterItem an object of type $.ig.Hierarchy which is the hierarchy to add.
         */
        addFilterItem(filterItem: Object): void;
        /**
         * Removes a hierarchy from the filter axis of the pivot grid.
         *
         * @param filterItem an object of type $.ig.Hierarchy which is the hierarchy to remove.
         */
        removeFilterItem(filterItem: Object): void;
        /**
         * Adds a measure to the measures of the pivot grid.
         *
         * @param measureItem an object of type $.ig.Measure which is the measure to add.
         */
        addMeasureItem(measureItem: Object): void;
        /**
         * Removes a measure from the measures of the pivot grid.
         *
         * @param measureItem An object of type $.ig.Measure which is the measure to remove.
         */
        removeMeasureItem(measureItem: Object): void;
        /**
         * Sets the index at which the measure list will be positioned in the rows/columns it resides.
         *
         * @param index the index where measure list to appear.
         */
        setMeasureListIndex(index: number): void;
        /**
         * Sets the location of the measure list.
         *
         * @param location accepted values are 'rows' and 'columns'.
         */
        setMeasureListLocation(location: Object): void;
        /**
         * Sets a tuple member to be expanded next time the update() method is called.
         * Calling this method on an already expanded member does nothing.
         *
         * @param axisName the name of the axis for the tuple.
         * @param tupleIndex the index of the tuple in the axis.
         * @param memberIndex the index of the member in the tuple.
         */
        expandTupleMember(axisName: string, tupleIndex: number, memberIndex: number): void;
        /**
         * Sets a tuple member to be collapsed next time the update() method is called.
         * Calling this method on an already collapsed member does nothing.
         *
         * @param axisName the name of the axis for the tuple.
         * @param tupleIndex the index of the tuple in the axis.
         * @param memberIndex the index of the member in the tuple.
         */
        collapseTupleMember(axisName: string, tupleIndex: number, memberIndex: number): void;
        /**
         * Returns the items in the row axis.
         */
        rowAxis(): any[];
        /**
         * Returns the items in the column axis.
         */
        columnAxis(): any[];
        /**
         * Returns the items in the filter axis.
         */
        filters(): any[];
        /**
         * Returns the items in the measures axis.
         */
        measures(): any[];
        /**
         * Returns the result from the last update or null if the last update was unsuccessful.
         */
        result(): Object;
        /**
         * Clears all pending changes since last time the update() method is called.
         */
        clearPendingChanges(): void;
        /**
         * Performs an update with the list of pending changes and updates the data source result.
         */
        update(): Object;
        /**
         * Gets the first element of the specified elementType which matches the specified predicate or null if there is no such element found.
         *
         * @param predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
         * @param elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
         */
        getCoreElement(predicate: Function, elementType: Object): Object;
        /**
         * Gets an array with elements of the specified elementType which match the specified predicate or empty array if there is no such element found.
         *
         * @param predicate a predicate callback invoked against each core element of the specified type. It has to return true when the element has matched the serach criteria, otherwise - false.
         * @param elementType an object specified by $.ig.ICoreOlapElement.prototype.$type property. Valid types which prototype can be examined are: $.ig.Dimension, $.ig.Hierarchy, $.ig.Level, $.ig.Measure and $.ig.MeasureList.
         */
        getCoreElements(predicate: Function, elementType: Object): Object;
        /**
         * Returns $.ig.Dimension object for the specified unique name.
         *
         * @param dimensionUniqueName the unique name of the searched dimension object.
         */
        getDimension(dimensionUniqueName: string): Object;
        /**
         * Returns $.ig.Hierarchy object for the specified unique name.
         *
         * @param hierarchyUniqueName the unique name of the searched hierarchy object.
         */
        getHierarchy(hierarchyUniqueName: string): Object;
        /**
         * Returns $.ig.Level object for the specified unique name.
         *
         * @param levelUniqueName the unique name of the searched level object.
         */
        getLevel(levelUniqueName: string): Object;
        /**
         * Returns $.ig.Measure object for the specified unique name.
         *
         * @param measureUniqueName the unique name of the searched measure object.
         */
        getMeasure(measureUniqueName: string): Object;
        /**
         * Returns $.ig.MeasureList object available when operates with more than one $.ig.Measure object.
         */
        getMeasureList(): Object;
        /**
         * Returns an array of strings with the unique names of selected for given hierarchy filter members.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
         */
        getFilterMemberNames(hierarchyUniqueName: string): any[];
        /**
         * Adds a member to list of filter members that will be present in result.
         * If a member of given hierarchy is added to this filter list then only those members which are present in this filter list will be present for that hierarchy in the result.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy this member belongs to.
         * @param memberUniqueName the unique name of the member to be added.
         */
        addFilterMember(hierarchyUniqueName: string, memberUniqueName: string): void;
        /**
         * Removes a member from the list of filter members that will be present in result.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy this member belongs to.
         * @param memberUniqueName the unique name of the member to be removed.
         */
        removeFilterMember(hierarchyUniqueName: string, memberUniqueName: string): void;
        /**
         * Removes all members from the list of filter members and the filter for the specified hierarchy is cleared.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy which filter members to be cleared.
         */
        removeAllFilterMembers(hierarchyUniqueName: string): void;
        /**
         * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given level filter member.
         *
         * @param levelUniqueName the unique name of the level whose active filter members are returned.
         */
        getMembersOfLevel(levelUniqueName: string): void;
        /**
         * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects of selected for given hierarchy filter member.
         *
         * @param hierarchyUniqueName the unique name of the hierarchy whose active filter members are returned.
         */
        getMembersOfHierarchy(hierarchyUniqueName: string): void;
        /**
         * Returns Promise which on completion provides an array of $.ig.OlapResultAxisMember objects that are children of the current member.
         *
         * @param memberUniqueName the unique name of the member whose active filter members are returned.
         */
        getMembersOfMember(memberUniqueName: string): void;
    }
}
interface IgniteUIStatic {
    OlapFlatDataSource: typeof Infragistics.OlapFlatDataSource;
}
declare module Infragistics {
    class OlapMetadataTreeItem {
        /**
         * Returns the OLAP metadata item that this tree item represents which is an object of type $.ig.Cube, $.ig.Dimension, $.ig.Hierarchy, $.ig.Measure, $.ig.Level.
         */
        item(): Object;
        /**
         * Returns the metadata tree item type which is a value from the $.ig.MetadataTreeItemType enumeration.
         *
         * $.ig.MetadataTreeItemType.prototype.cube = 0;
         * Item type for the cube tree items. Contain an item() of type $.ig.Cube.
         *
         * $.ig.MetadataTreeItemType.prototype.dimension = 1;
         * Item type for the dimension tree items. Contain an item() of type $.ig.Dimension.
         *
         * $.ig.MetadataTreeItemType.prototype.group = 2;
         * Item type for the group tree items. Does not have item().
         *
         * $.ig.MetadataTreeItemType.prototype.userDefinedHierarchy = 3;
         * Item type for the userDefinedHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
         *
         * $.ig.MetadataTreeItemType.prototype.systemEnabledHierarchy = 4;
         * Item type for the systemEnabledHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
         *
         * $.ig.MetadataTreeItemType.prototype.parentChildHierarchy = 5;
         * Item type for the parentChildHierarchy tree items. Contain an item() of type $.ig.Hierarchy.
         *
         * $.ig.MetadataTreeItemType.prototype.measure = 6;
         * Item type for the measure tree items. Contain an item() of type $.ig.Measure.
         *
         * $.ig.MetadataTreeItemType.prototype.level1 = 7;
         * Item type for the level1 tree items. Contain an item() of type $.ig.Level.
         *
         * $.ig.MetadataTreeItemType.prototype.level2 = 8;
         * Item type for the level2 tree items. Contain an item() of type $.ig.Level.
         *
         * $.ig.MetadataTreeItemType.prototype.level3 = 9;
         * Item type for the level3 tree items. Contain an item() of type $.ig.Level.
         *
         * $.ig.MetadataTreeItemType.prototype.level4 = 10;
         * Item type for the level4 tree items. Contain an item() of type $.ig.Level.
         *
         * $.ig.MetadataTreeItemType.prototype.level5 = 11;
         * Item type for the level5 tree items. Contain an item() of type $.ig.Level.
         */
        type(): number;
        /**
         * Returns the caption text that should be displayed for this tree item.
         */
        caption(): string;
        /**
         * Returns the children ot this tree item.
         */
        children(): Object;
    }
}
interface OlapResultViewOptions {
    /**
     * Optional="false" an object of type $.ig.OlapResult which represents the full cached result.
     */
    result?: any;
    /**
     * Optional="false" an object of type $.ig.OlapResult which represents the visible part of the result.
     */
    visibleResult?: any;
    /**
     * Optional="false" a value indicating whether the result has one or more hierarchies in the columns.
     */
    hasColumns?: boolean;
    /**
     * Optional="false" a value indicating whether the result has one or more hierarchies in the rows.
     */
    hasRows?: boolean;
    /**
     * Option for OlapResultViewOptions
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class OlapResultView {
        constructor(options: OlapResultViewOptions);
        /**
         * Creates a new $.ig.OlapResultView object with result object having the same structure as the original one and new visibleResult where the tuples which appear as children under specified tuple and member index are no longer present.
         *
         * @param axisName
         * @param tupleIndex
         * @param memberIndex
         */
        collapseTupleMember(axisName: Object, tupleIndex: Object, memberIndex: Object): Object;
        /**
         * Creates a $.ig.OlapResultView view object with result object having the same structure as the original one and new visibleResult where the tuples which appear as children under specified tuple and member index are accessible as part of the visibleResult.
         *
         * @param axisName
         * @param tupleIndex
         * @param memberIndex
         */
        expandTupleMember(axisName: Object, tupleIndex: Object, memberIndex: Object): Object;
        /**
         * Creates a new $.ig.OlapResultView object as the axis specified by axisName of the original result object is extended with the tuples of the same axis found into supplied partialResult object.
         *
         * @param partialResult
         * @param axisName
         */
        extend(partialResult: Object, axisName: Object): Object;
    }
}
interface IgniteUIStatic {
    OlapResultView: typeof Infragistics.OlapResultView;
}
interface OlapTableViewOptionsViewSettings {
    /**
     * Optional="false" a value indicating whether parent for columns is in front of its children.
     *                 If set to true the query set sorts members in a level in their natural order. Their natural order is the default ordering of the members along the hierarchy when no other sort conditions are specified.
     *                 Child members immediately follow their parent members.
     *                 If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     */
    isParentInFrontForColumns?: boolean;
    /**
     * Optional="false" a value indicating whether parent for rows is in front of its children.
     *                 If set to true the query set sorts members in a level in their natural order. Their natural order is the default ordering of the members along the hierarchy when no other sort conditions are specified.
     *                 Child members immediately follow their parent members.
     *                 If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     */
    isParentInFrontForRows?: boolean;
    /**
     * Optional="false" value indicating wheter the column headers should be arranged for compact header layout - each hieararchy is in a single row.
     */
    compactColumnHeaders?: boolean;
    /**
     * Optional="false" value indicating wheter the row headers should be arranged for compact header layout - each hieararchy is in a single row.
     */
    compactRowHeaders?: boolean;
    /**
     * Option for OlapTableViewOptionsViewSettings
     */
    [optionName: string]: any;
}
interface OlapTableViewOptions {
    /**
     * Optional="false" an object of type $.ig.OlapResult.
     */
    result?: any;
    /**
     * Optional="false" a value indicating whether the result has one or more hierarchies in the columns.
     */
    hasColumns?: boolean;
    /**
     * Optional="false" a value indicating whether the result has one or more hierarchies in the rows.
     */
    hasRows?: boolean;
    /**
     * Optional="false" an object containing the table view configuration options as properties.
     */
    viewSettings?: OlapTableViewOptionsViewSettings;
    /**
     * Option for OlapTableViewOptions
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class OlapTableView {
        constructor(options: OlapTableViewOptions);
        /**
         * Initializes the table view object as its rowHeaders, columnHeaders and resultCells are created for the result object the table view is related to.
         * Applies the items from the columnSortDirections and levelDortDirections to produce the sorted result.
         */
        initialize(): void;
        /**
         * Returns the configuration object this table view is created with.
         */
        viewSettings(): Object;
        /**
         * Gets or sets the column sort direction items, which will be applied when the $.ig.OlapTableView is initialized.
         * - tupleIndex (number): specifies the index of the tuple, which corresponds to a column in the column axis.
         * - sortDirection (string: ascending|descending): indicates the sort direction for the column. The allowed values are 'ascending' (default) and 'descending'.
         * - comparer (function): an optional function, which will be used to compare the cells from the column. The function should return a number:
         * 1. If Cell1 <  Cell2, return a value lower than 0.
         * 2. If Cell1 == Cell2, return 0.
         * 3. If Cell1 > Cell2, return a value greater than 0.
         *
         *
         * @param columnSortDirections an array of objects, which have the following properties:
         */
        columnSortDirections(columnSortDirections?: any[]): any[];
        /**
         * Returns the column sort direction items, which were applied during the $.ig.OlapTableView initialization.
         */
        appliedColumnSortDirections(): any[];
        /**
         * Gets or sets the level sort direction items, which will be applied when the $.ig.OlapTableView is
         * - levelUniqueName (string): the name of the level to be sorted.
         * - sortDirection (string: ascending|descending): indicates the sort direction for the level. The allowed values are 'ascending' (default) and 'descending'.
         * - sortBehavior (string:alphabetical|system): indicates the type of sorting to be applied. The allowed values are 'alphabetical' (default) and 'system'.
         *
         * @param levelSortDirections an array of objects, which have the following properties:
         */
        levelSortDirections(levelSortDirections?: any[]): any[];
        /**
         * Returns the level sort direction items, which were applied during the $.ig.OlapTableView initialization.
         */
        appliedLevelSortDirections(): any[];
        /**
         * Returns a javascript object, which maps the applied level sort directions to the axis name, hierarchy index in the axis and the level depth.
         * It is used internally to determine, which $.ig.OlapTableViewHeaderCell needs to display a sorting indicator in the user interface.
         */
        appliedSortDirectionsMap(): Object;
        /**
         * Returns the table row headers.
         */
        rowHeaders(): any[];
        /**
         * Returns the table column headers.
         */
        columnHeaders(): any[];
        /**
         * Returns the table result cells ordered as if the grid is iterated row by row.
         */
        resultCells(): any[];
        /**
         * Returns the sorted $.ig.OlapResult object.
         */
        result(): Object;
    }
}
interface IgniteUIStatic {
    OlapTableView: typeof Infragistics.OlapTableView;
}
declare module Infragistics {
    class OlapTableViewHeaderCell {
        /**
         * Returns the caption for the header cell.
         */
        caption(): string;
        /**
         * Returns the expaned state for the header cell.
         */
        isExpanded(): boolean;
        /**
         * Indicates whether the header cell can be expanded.
         */
        isExpanable(): boolean;
        /**
         * Returns the row index for the header cell.
         */
        rowIndex(): number;
        /**
         * Returns the row span for the header cell.
         */
        rowSpan(): number;
        /**
         * Returns the column index for the header cell.
         */
        columnIndex(): number;
        /**
         * Returns the column span for the header cell.
         */
        columnSpan(): number;
        /**
         * Returns the name of the axis this header cell is related to.
         */
        axisName(): string;
        /**
         * Returns the index of tuple in the axis this header cell is related to.
         */
        tupleIndex(): number;
        /**
         * Returns the index of the axis member in the tuple this header cell is related to.
         */
        memberIndex(): number;
    }
}
declare module Infragistics {
    class OlapTableViewResultCell {
        /**
         * Returns the value provided by $.ig.Cell object.
         */
        value(): Object;
        /**
         * Returns the formmated value to be displayed by the data cell.
         */
        formattedValue(): string;
        /**
         * Returns the ordinal of this cell used to determine its position into the data cells' grid.
         */
        cellOrdinal(): number;
        /**
         * Returns the index of $.ig.Cell object in $.ig.OlapResult object.
         */
        resultCellIndex(): number;
    }
}
declare module Infragistics {
    class Catalog {
        /**
         * Returns the name of the catalog.
         *
         * @param value
         */
        name(value: Object): string;
        /**
         * Returns the unique name of the catalog.
         *
         * @param value
         */
        uniqueName(value: Object): string;
        /**
         * Returns the caption of the catalog used when displaying the name of the catalog to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns the description of the catalog which is a human-readable description of the catalog
         *
         * @param value
         */
        description(value: Object): string;
    }
}
declare module Infragistics {
    class Cube {
        /**
         * Returns the name of the cube.
         *
         * @param value
         */
        name(value: Object): string;
        /**
         * Returns the unique name of the cube.
         *
         * @param value
         */
        uniqueName(value: Object): string;
        /**
         * Returns the caption of the cube used when displaying the name of the cube to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns a user-friendly description of the cube.
         *
         * @param value
         */
        description(value: Object): string;
        /**
         * Returns the type of the cube which is a value from the $.ig.CubeType enumeration.
         *
         * $.ig.CubeType.prototype.cube = 0;
         * $.ig.CubeType.prototype.dimension = 1;
         * $.ig.CubeType.prototype.unknown = 2;
         *
         * @param value
         */
        cubeType(value: Object): number;
        /**
         * Returns the date and time on which the cube was last processed.
         *
         * @param value
         */
        lastProcessed(value: Object): Object;
        /**
         * Returns the date and time on which the cube was last updated.
         *
         * @param value
         */
        lastUpdated(value: Object): Object;
    }
}
declare module Infragistics {
    class Dimension {
        /**
         * Returns the name of the dimension.
         *
         * @param value
         */
        name(value: Object): string;
        /**
         * Returns the unique name of the dimension.
         *
         * @param value
         */
        uniqueName(value: Object): string;
        /**
         * Returns the caption of the dimension used when displaying the name of the dimension to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns a user-friendly description of the dimension.
         *
         * @param value
         */
        description(value: Object): string;
        /**
         * Returns the type of the dimension which is a value from the $.ig.DimensionType enumeration.
         *
         * $.ig.DimensionType.prototype.unknown = 0;
         * $.ig.DimensionType.prototype.time = 1;
         * $.ig.DimensionType.prototype.measure = 2;
         * $.ig.DimensionType.prototype.other = 3;
         * $.ig.DimensionType.prototype.quantitative = 5;
         * $.ig.DimensionType.prototype.accounts = 6;
         * $.ig.DimensionType.prototype.customers = 7;
         * $.ig.DimensionType.prototype.products = 8;
         * $.ig.DimensionType.prototype.scenario = 9;
         * $.ig.DimensionType.prototype.utility = 10;
         * $.ig.DimensionType.prototype.currency = 11;
         * $.ig.DimensionType.prototype.rates = 12;
         * $.ig.DimensionType.prototype.channel = 13;
         * $.ig.DimensionType.prototype.promotion = 14;
         * $.ig.DimensionType.prototype.organization = 15;
         * $.ig.DimensionType.prototype.billOfMaterials = 16;
         * $.ig.DimensionType.prototype.geography = 17;
         *
         * @param value
         */
        dimensionType(value: Object): number;
    }
}
declare module Infragistics {
    class Hierarchy {
        /**
         * Returns the name of the hierarchy.
         *
         * @param value
         */
        name(value: Object): string;
        /**
         * Returns the unique name of the hierarchy.
         *
         * @param value
         */
        uniqueName(value: Object): string;
        /**
         * Returns the caption of the hierarchy used when displaying the name of the hierarchy to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns a user-friendly description of the hierarchy.
         *
         * @param value
         */
        description(value: Object): string;
        /**
         * Returns the unique name of the default member for the hierarchy.
         *
         * @param value
         */
        defaultMember(value: Object): string;
        /**
         * Returns the unique name of the 'All' member for the hierarchy.
         *
         * @param value
         */
        allMember(value: Object): string;
        /**
         * Returns the unique name of the dimension that contains the hierarchy.
         *
         * @param value
         */
        dimensionUniqueName(value: Object): string;
        /**
         * Returns the source of the hierarchy which is a value from the $.ig.HierarchyOrigin enumeration.
         *
         * $.ig.HierarchyOrigin.prototype.userDefined = 1;
         * Identifies user defined hierarchies.
         *
         * $.ig.HierarchyOrigin.prototype.systemEnabled = 2;
         * Identifies attribute hierarchies.
         *
         * $.ig.HierarchyOrigin.prototype.systemInternal = 4;
         * Identifies attributes with no attribute .
         *
         * @param value
         */
        hierarchyOrigin(value: Object): number;
        /**
         * Returns the hierarchy display folder path to be used when displaying the hierarchy in the user interface.
         * Folder names will be separated by a semicolon (;). Nested folders are indicated by a backslash (\).
         *
         * @param value
         */
        hierarchyDisplayFolder(value: Object): string;
    }
}
declare module Infragistics {
    class Measure {
        /**
         * Returns the name of the measure.
         *
         * @param value
         */
        name(value: Object): string;
        /**
         * Returns the unique name of the measure.
         *
         * @param value
         */
        uniqueName(value: Object): string;
        /**
         * Returns the caption of the measure used when displaying the name of the measure to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns a user-friendly description of the measure.
         *
         * @param value
         */
        description(value: Object): string;
        /**
         * Returns the name of the measure group this measure belongs to.
         *
         * @param value
         */
        measureGroupName(value: Object): string;
        /**
         * Returns the aggregator type that identifies how a measure was derived. It is a value from the $.ig.AggregatorType enumeration.
         *
         * $.ig.AggregatorType.prototype.unknown = 0;
         * The aggregated function is undefined.
         *
         * $.ig.AggregatorType.prototype.sum = 1;
         * The aggregated function adds all values.
         *
         * $.ig.AggregatorType.prototype.count = 2;
         * The aggregated function will count the number of the values.
         *
         * $.ig.AggregatorType.prototype.min = 3;
         * The aggregated function will returns the smallest value.
         *
         * $.ig.AggregatorType.prototype.max = 4;
         * The aggregated function will returns the largest value.
         *
         * $.ig.AggregatorType.prototype.average = 5;
         * The aggregated function will returns the average of cells value.
         *
         * $.ig.AggregatorType.prototype.variance = 6;
         * The aggregated function will estimates variance based on the sample.
         *
         * $.ig.AggregatorType.prototype.std = 7;
         * The aggregated function will estimates the standart deviation based on sample.
         *
         * $.ig.AggregatorType.prototype.distinctCount = 8;
         * The aggregated function will returns the number of distinct, nonempty tuples in a set.
         *
         * $.ig.AggregatorType.prototype.none = 9;
         * No aggregation performed.
         *
         * $.ig.AggregatorType.prototype.averageOfChildren = 10;
         * The aggregated function will returns the average of the measure's children.
         *
         * $.ig.AggregatorType.prototype.firstNonEmpty = 13;
         * The aggregated function will returns the measure's first nonempty member.
         *
         * $.ig.AggregatorType.prototype.lastNonEmpty = 14;
         * The aggregated function will returns the measure's last nonempty member.
         *
         * $.ig.AggregatorType.prototype.byAccount = 15;
         * Aggregated by the aggregation function associated with the specified account type of an attribute in an account dimension.
         *
         * $.ig.AggregatorType.prototype.calculated = 127;
         * The aggregated function will returns the result derived from a formula.
         *
         * @param value
         */
        aggregatorType(value: Object): number;
        /**
         * Returns the default format string for the measure.
         *
         * @param value
         */
        defaultFormatString(value: Object): string;
        /**
         * Returns the measure display folder path to be used when displaying the measure in the user interface.
         * Folder names will be separated by a semicolon (;). Nested folders are indicated by a backslash (\).
         *
         * @param value
         */
        measureDisplayFolder(value: Object): string;
    }
}
declare module Infragistics {
    class Level {
        /**
         * Returns the name of the level.
         *
         * @param value
         */
        name(value: Object): string;
        /**
         * Returns the unique name of the level.
         *
         * @param value
         */
        uniqueName(value: Object): string;
        /**
         * Returns the caption of the level used when displaying the name of the level to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns a user-friendly description of the level.
         *
         * @param value
         */
        description(value: Object): string;
        /**
         * Returns the distance of the level from the root of the level. Root level is zero (0)
         *
         * @param value
         */
        depth(value: Object): number;
        /**
         * Returns the unique name of the hierarchy that contains the level.
         *
         * @param value
         */
        hierarchyUniqueName(value: Object): string;
        /**
         * Returns the unique name of the dimension that contains the level.
         *
         * @param value
         */
        dimensionUniqueName(value: Object): string;
        /**
         * Returns the count of all members in the level.
         *
         * @param value
         */
        membersCount(value: Object): number;
        /**
         * Returns a value that defines how the level was sourced.
         *
         * @param value
         */
        levelOrigin(value: Object): number;
        /**
         * Returns the ID of the attribute that the level is sorted on.
         *
         * @param value
         */
        levelOrderingProperty(value: Object): number;
    }
}
declare module Infragistics {
    class MeasureGroup {
        /**
         * Returns the name of the measure group.
         *
         * @param value
         */
        name(value: Object): string;
        /**
         * Returns the caption of the measure group used when displaying the name of the measure group to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns a user-friendly description of the measure group.
         *
         * @param value
         */
        description(value: Object): string;
        /**
         * Returns the name of the catalog to which this measure group belongs.
         *
         * @param value
         */
        catalogName(value: Object): string;
        /**
         * Returns the name of the cube to which this measure group belongs
         *
         * @param value
         */
        cubeName(value: Object): string;
    }
}
declare module Infragistics {
    class MeasureList {
        /**
         * Returns the caption of the measure list used when displaying the name of the measure list to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns an array of $.ig.Measure objects this measure list is grouping.
         *
         * @param value
         */
        measures(value: Object): any[];
    }
}
declare module Infragistics {
    class OlapResult {
        /**
         * Returns a value indicating whether the result object contains any data.
         *
         * @param value
         */
        isEmpty(value: Object): boolean;
        /**
         * Returns an array of $.ig.OlapResultAxis objects this result is built on.
         *
         * @param value
         */
        axes(value: Object): any[];
        /**
         * Returns an array of $.ig.OlapResultCell objects which hold the result data.
         *
         * @param value
         */
        cells(value: Object): any[];
    }
}
interface OlapResultAxisOptions {
    /**
     * Optional="false" array of $.ig.OlapResultTuple objects which form the axis.
     */
    tuples?: any[];
    /**
     * Optional="false" the count of the $.ig.OlapResultAxisMember objects of each tuple.
     */
    tupleSize?: number;
    /**
     * Option for OlapResultAxisOptions
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class OlapResultAxis {
        constructor(options: OlapResultAxisOptions);
        /**
         * Returns an array of $.ig.OlapResultTuple objects which form the axis.
         */
        tuples(): any[];
        /**
         * Returns the count of the $.ig.OlapResultAxisMember objects of each tuple.
         */
        tupleSize(): number;
    }
}
interface IgniteUIStatic {
    OlapResultAxis: typeof Infragistics.OlapResultAxis;
}
interface OlapResultTupleOptions {
    /**
     * Optional="false" array of $.ig.OlapResultAxisMember objects which form the tuple object.
     */
    members?: any[];
    /**
     * Option for OlapResultTupleOptions
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class OlapResultTuple {
        constructor(options: OlapResultTupleOptions);
        /**
         * Returns an array of $.ig.OlapResultTuple objects which form the axis.
         */
        members(): any[];
    }
}
interface IgniteUIStatic {
    OlapResultTuple: typeof Infragistics.OlapResultTuple;
}
declare module Infragistics {
    class OlapResultAxisMember {
        /**
         * Returns the unique name of the axis member.
         *
         * @param value
         */
        uniqueName(value: Object): string;
        /**
         * Returns the caption of the axis member used when displaying the name of the axis member to the user.
         *
         * @param value
         */
        caption(value: Object): string;
        /**
         * Returns the unique name of the level this member belongs to.
         *
         * @param value
         */
        levelUniqueName(value: Object): string;
        /**
         * Returns the unique name of the hierarchy that contains the level.
         *
         * @param value
         */
        hierarchyUniqueName(value: Object): string;
        /**
         * Returns the distance of member parent level from the root of the level. Root level is zero (0)
         *
         * @param value
         */
        levelNumber(value: Object): number;
        /**
         * A bitmap of the information projected by childCount, drilledDown and parentSameAsPrev properties.
         *
         * @param value
         */
        displayInfo(value: Object): number;
        /**
         * Returns the count of children members this member has.
         *
         * @param value
         */
        childCount(value: Object): number;
        /**
         * Returns a value that indicates whether at least one child of this member appears on the axis, immediately following all occurrences of that member. This can be used by applications to display a "+" or a "-" next to the member.
         *
         * @param value
         */
        drilledDown(value: Object): boolean;
        /**
         * Returns a value that indicates whether the parent of this member is the same as the parent of the member preceding all occurrences of the current member.
         *
         * @param value
         */
        parentSameAsPrev(value: Object): boolean;
        /**
         * Returns a key value map of the members' properties. By default only 'PARENT_UNIQUE_NAME' and 'CHILDREN_CARDINALITY' properties are available.
         *
         * @param value
         */
        properties(value: Object): Object;
    }
}
declare module Infragistics {
    class OlapResultCell {
        /**
         * Returns the position of the cell when cells are iterated row by row.
         *
         * @param value
         */
        cellOrdinal(value: Object): number;
        /**
         * Returns a key value map of the cell's properties. Currently only 'Value' and 'FmtValue' properties are available.
         *
         * @param value
         */
        properties(value: Object): Object;
    }
}
interface IgTemplatingRegExp {
    /**
     * Option for IgTemplatingRegExp
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class igTemplating {
        constructor(regExp: IgTemplatingRegExp);
        /**
         * Templates the given template with the provided data. If data is a function that requires arguments, the arguments need to be provided as an array following the data. tmpl(template, data[, args])
         *
         * @param template     Specifies the template string
         * @param data     Specifies the data to be templated in the template. If function is provided, then it has to be object or array returning function, possible receiving arguments array which can be specified as the third parameter
         * @param args     If function is provided as the second parameter, then this parameter is the arguments for the function.
         */
        tmpl(template: string, data: Object, args?: any[]): string;
        clearTmplCache(): void;
        /**
         * Encoding < > ' and "
         *
         * @param value     The string to be encoded.
         */
        encode(value: string): string;
    }
}
interface IgniteUIStatic {
    igTemplating: typeof Infragistics.igTemplating;
}
interface ErrorMessageDisplayingEvent {
    (event: Event, ui: ErrorMessageDisplayingEventUIParam): void;
}
interface ErrorMessageDisplayingEventUIParam {
    /**
     * Used to obtain reference to the barcode widget.
     */
    owner?: any;
    /**
     * Used to get or set the error message that is to be shown.
     */
    errorMessage?: any;
}
interface DataChangedEvent {
    (event: Event, ui: DataChangedEventUIParam): void;
}
interface DataChangedEventUIParam {
    /**
     * Used to obtain reference to the barcode widget.
     */
    owner?: any;
    /**
     * Used to obtain the new data.
     */
    newData?: any;
}
interface IgQRCodeBarcode {
    /**
     * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * Gets or sets the brush to use to fill the backing of the barcode.
     */
    backingBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of the backing.
     */
    backingOutline?: string;
    /**
     * Gets or sets the stroke thickness of the backing outline.
     */
    backingStrokeThickness?: number;
    /**
     * Gets or sets the brush to use to fill the background of the bars.
     */
    barBrush?: string;
    /**
     * Gets or sets the brush to use for the label font.
     */
    fontBrush?: string;
    /**
     * Gets or sets the font of the text displayed by the control.
     */
    font?: string;
    /**
     * Gets or sets the data value.
     */
    data?: string;
    /**
     * Gets or sets the message text displayed when some error occurs.
     */
    errorMessageText?: string;
    /**
     * Gets or sets the stretch.
     *
     * Valid values:
     * "none"
     * "fill"
     * "uniform"
     * "uniformToFill"
     */
    stretch?: any;
    /**
     * Gets or sets a value which specifies how the grid fills within the barcode control dimensions.
     *
     * Valid values:
     * "fillSpace" FillSpace mode ensures that the barcode grid fills the control dimensions.
     * "ensureEqualSize" EnsureEqualSize mode ensures that every grid column/row has the same pixels number width/height. The sum of all columns/rows pixels may be less than the width/height of the control.
     */
    barsFillMode?: any;
    /**
     * Gets or sets the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
     */
    widthToHeightRatio?: number;
    /**
     * Gets or sets the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
     */
    xDimension?: number;
    /**
     * Gets or sets the error correction level of the QR Code symbol.
     *
     * Valid values:
     * "low" Low error correction level allows recovery of 7% of the symbol codewords.
     * "medium" Medium error correction level allows recovery of 15% of the symbol codewords.
     * "quartil" Quartil error correction level allows recovery of 25% of the symbol codewords.
     * "high" High error correction level allows recovery of 30% of the symbol codewords.
     */
    errorCorrectionLevel?: any;
    /**
     * Gets or sets the size version of the QR Code symbol.
     *
     * Valid values:
     * "undefined" If set, the QR code barcode sets internally the smallest version that will accommodate the data.
     * "version1" Version1 defines size of 21x21 modules for the symbol.
     * "version2" Version2 defines size of 25x25 modules for the symbol.
     * "version3" Version3 defines size of 29x29 modules for the symbol.
     * "version4" Version4 defines size of 33x33 modules for the symbol.
     * "version5" Version5 defines size of 37x37 modules for the symbol.
     * "version6" Version6 defines size of 41x41 modules for the symbol.
     * "version7" Version7 defines size of 45x45 modules for the symbol.
     * "version8" Version8 defines size of 49x49 modules for the symbol.
     * "version9" Version9 defines size of 53x53 modules for the symbol.
     * "version10" Version10 defines size of 57x57 modules for the symbol.
     * "version11" Version11 defines size of 61x61 modules for the symbol.
     * "version12" Version12 defines size of 65x65 modules for the symbol.
     * "version13" Version13 defines size of 69x69 modules for the symbol.
     * "version14" Version14 defines size of 73x73 modules for the symbol.
     * "version15" Version15 defines size of 77x77 modules for the symbol.
     * "version16" Version16 defines size of 81x81 modules for the symbol.
     * "version17" Version17 defines size of 85x85 modules for the symbol.
     * "version18" Version18 defines size of 89x89 modules for the symbol.
     * "version19" Version19 defines size of 93x93 modules for the symbol.
     * "version20" Version20 defines size of 97x97 modules for the symbol.
     * "version21" Version21 defines size of 101x101 modules for the symbol.
     * "version22" Version22 defines size of 105x105 modules for the symbol.
     * "version23" Version23 defines size of 109x109 modules for the symbol.
     * "version24" Version24 defines size of 113x113 modules for the symbol.
     * "version25" Version25 defines size of 117x117 modules for the symbol.
     * "version26" Version26 defines size of 121x121 modules for the symbol.
     * "version27" Version27 defines size of 125x125 modules for the symbol.
     * "version28" Version28 defines size of 129x129 modules for the symbol.
     * "version29" Version29 defines size of 133x133 modules for the symbol.
     * "version30" Version30 defines size of 137x137 modules for the symbol.
     * "version31" Version31 defines size of 141x141 modules for the symbol.
     * "version32" Version32 defines size of 145x145 modules for the symbol.
     * "version33" Version33 defines size of 149x149 modules for the symbol.
     * "version34" Version34 defines size of 153x153 modules for the symbol.
     * "version35" Version35 defines size of 157x157 modules for the symbol.
     * "version36" Version36 defines size of 161x161 modules for the symbol.
     * "version37" Version37 defines size of 165x165 modules for the symbol.
     * "version38" Version38 defines size of 169x169 modules for the symbol.
     * "version39" Version39 defines size of 173x173 modules for the symbol.
     * "version40" Version40 defines size of 177x177 modules for the symbol.
     */
    sizeVersion?: any;
    /**
     * Gets or sets the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
     *
     * Valid values:
     * "undefined" When Undefined encoding mode is set, the QR code barcode internally switches between modes as necessary in order to achieve the most efficient conversion of data into a binary string.
     * "numeric" Numeric mode encodes data from decimal digit set (0-9). Normally 3 data characters are represented by 10 bits.
     * "alphanumeric" Alphanumerc mode encodes data from a set of 45 characters (digits 0-9, upper case letters A-Z, nine other characters: space, $ % * + _ . / : ). Normally two input characters are represented by 11 bits.
     * "byte" In Byte mode the data is encoded at 8 bits per character. The character set of the Byte encoding mode is byte data (by default it is ISO/IEC 8859-1 character set).
     * "kanji" The Kanji mode efficiently encodes Kanji characters in accordance with the Shift JIS system based on JIS X 0208. Each two-byte character value is compactedd to a 13-bit binary codeword.
     */
    encodingMode?: any;
    /**
     * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
     * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
     */
    eciNumber?: number;
    /**
     * Gets or sets a value indicating whether to show the ECI header.
     *
     * Valid values:
     * "hide" Hide the header.
     * "show" Show the header.
     */
    eciHeaderDisplayMode?: any;
    /**
     * Gets or sets the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specificatoins.
     *
     * Valid values:
     * "none" Do not use any Fnc1 symbols, i.e. the data is not identified according to specific predefined industry or application specifications.
     * "gs1" Uses Fnc1 symbol in the first position of the character in Code 128 symbols and designates data formatted in accordance with the GS1 General Specification.
     * "industry" Uses Fnc1 symbol in the second position of the character in Code 128 symbols and designates data formatted in accordance with a specific indystry application previously agreed with AIM Inc.
     */
    fnc1Mode?: any;
    /**
     * Gets or sets the Application Indicator assigned to identify the specification concerned by AIM International.
     * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
     */
    applicationIndicator?: string;
    /**
     * Occurs when an error has happened.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the barcode widget.
     * Use ui.errorMessage to get or set the error message that is to be shown.
     */
    errorMessageDisplaying?: ErrorMessageDisplayingEvent;
    /**
     * Occurs when the data has changed.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the barcode widget.
     * Use ui.newData to obtain the new data.
     */
    dataChanged?: DataChangedEvent;
    /**
     * Option for igQRCodeBarcode
     */
    [optionName: string]: any;
}
interface IgQRCodeBarcodeMethods {
    /**
     * Returns information about how the barcode is rendered.
     */
    exportVisualData(): Object;
    /**
     * Causes all pending changes of the barcode e.g. by changed property values to be rendered immediately.
     */
    flush(): void;
    /**
     * Destroys widget.
     */
    destroy(): void;
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     */
    styleUpdated(): void;
}
interface JQuery {
    data(propertyName: "igQRCodeBarcode"): IgQRCodeBarcodeMethods;
}
interface JQuery {
    igQRCodeBarcode(methodName: "exportVisualData"): Object;
    igQRCodeBarcode(methodName: "flush"): void;
    igQRCodeBarcode(methodName: "destroy"): void;
    igQRCodeBarcode(methodName: "styleUpdated"): void;
    /**
     * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the barcode. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  the brush to use to fill the backing of the barcode.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "backingBrush"): string;
    /**
     * Sets the brush to use to fill the backing of the barcode.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "backingBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the outline of the backing.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "backingOutline"): string;
    /**
     * Sets the brush to use for the outline of the backing.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "backingOutline", optionValue: string): void;
    /**
     * Gets  the stroke thickness of the backing outline.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "backingStrokeThickness"): number;
    /**
     * Sets the stroke thickness of the backing outline.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "backingStrokeThickness", optionValue: number): void;
    /**
     * Gets  the brush to use to fill the background of the bars.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "barBrush"): string;
    /**
     * Sets the brush to use to fill the background of the bars.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "barBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the label font.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "fontBrush"): string;
    /**
     * Sets the brush to use for the label font.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "fontBrush", optionValue: string): void;
    /**
     * Gets  the font of the text displayed by the control.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "font"): string;
    /**
     * Sets the font of the text displayed by the control.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "font", optionValue: string): void;
    /**
     * Gets  the data value.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "data"): string;
    /**
     * Sets the data value.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "data", optionValue: string): void;
    /**
     * Gets  the message text displayed when some error occurs.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "errorMessageText"): string;
    /**
     * Sets the message text displayed when some error occurs.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "errorMessageText", optionValue: string): void;
    /**
     * Gets  the stretch.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "stretch"): any;
    /**
     * Sets the stretch.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "stretch", optionValue: any): void;
    /**
     * Gets  a value which specifies how the grid fills within the barcode control dimensions.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "barsFillMode"): any;
    /**
     * Sets a value which specifies how the grid fills within the barcode control dimensions.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "barsFillMode", optionValue: any): void;
    /**
     * Gets  the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "widthToHeightRatio"): number;
    /**
     * Sets the width (XDimension) to height (YDimension) ratio. It accepts only positive values. This property does not apply for the QR barcode.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "widthToHeightRatio", optionValue: number): void;
    /**
     * Gets  the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "xDimension"): number;
    /**
     * Sets the X-dimension (narrow element width) for a symbol in mm. It accepts values from 0.01 to 100.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "xDimension", optionValue: number): void;
    /**
     * Gets  the error correction level of the QR Code symbol.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "errorCorrectionLevel"): any;
    /**
     * Sets the error correction level of the QR Code symbol.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "errorCorrectionLevel", optionValue: any): void;
    /**
     * Gets  the size version of the QR Code symbol.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "sizeVersion"): any;
    /**
     * Sets the size version of the QR Code symbol.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "sizeVersion", optionValue: any): void;
    /**
     * Gets  the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "encodingMode"): any;
    /**
     * Sets the encoding mode for compaction of the QR Code symbol data. The default value is undefined if the Shift_JIS encoding is loaded. Otherwise the default value is byte.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "encodingMode", optionValue: any): void;
    /**
     * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
     * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "eciNumber"): number;
    /**
     * Each Extended Channel Interpretation (ECI) is designated by a six-digit assignment number: 000000 - 999999.
     * The default value depends on the loaded encodings. The default is ECI 000003 (representing ISO/IEC 8859-1) if the ISO/IEC 8859-1 character set is loaded. Otherwise the default value is 000026 (representing UTF-8).
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "eciNumber", optionValue: number): void;
    /**
     * Gets  a value indicating whether to show the ECI header.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "eciHeaderDisplayMode"): any;
    /**
     * Sets a value indicating whether to show the ECI header.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "eciHeaderDisplayMode", optionValue: any): void;
    /**
     * Gets  the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specificatoins.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "fnc1Mode"): any;
    /**
     * Sets the FNC1 mode indicator which identifies symbols encoding messages formatted according to specific predefined industry or application specificatoins.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "fnc1Mode", optionValue: any): void;
    /**
     * Gets  the Application Indicator assigned to identify the specification concerned by AIM International.
     * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "applicationIndicator"): string;
    /**
     * Sets the Application Indicator assigned to identify the specification concerned by AIM International.
     * The value is respected only when the Fnc1Mode is set to Industry. Its value may take the form of any single Latin alphabetic character from the set {a - z, A - Z} or a two-digit number.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "applicationIndicator", optionValue: string): void;
    /**
     * Occurs when an error has happened.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the barcode widget.
     * Use ui.errorMessage to get or set the error message that is to be shown.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "errorMessageDisplaying"): ErrorMessageDisplayingEvent;
    /**
     * Occurs when an error has happened.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the barcode widget.
     * Use ui.errorMessage to get or set the error message that is to be shown.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "errorMessageDisplaying", optionValue: ErrorMessageDisplayingEvent): void;
    /**
     * Occurs when the data has changed.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the barcode widget.
     * Use ui.newData to obtain the new data.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "dataChanged"): DataChangedEvent;
    /**
     * Occurs when the data has changed.
     * Function takes first argument evt and second argument ui.
     * Use ui.owner to obtain reference to the barcode widget.
     * Use ui.newData to obtain the new data.
     *
     * @optionValue New value to be set.
     */
    igQRCodeBarcode(optionLiteral: 'option', optionName: "dataChanged", optionValue: DataChangedEvent): void;
    igQRCodeBarcode(options: IgQRCodeBarcode): JQuery;
    igQRCodeBarcode(optionLiteral: 'option', optionName: string): any;
    igQRCodeBarcode(optionLiteral: 'option', options: IgQRCodeBarcode): JQuery;
    igQRCodeBarcode(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igQRCodeBarcode(methodName: string, ...methodParams: any[]): any;
}
interface DataBindingEvent {
    (event: Event, ui: DataBindingEventUIParam): void;
}
interface DataBindingEventUIParam {
    /**
     * Used to obtain reference to chart widget.
     */
    owner?: any;
    /**
     * Used to obtain reference to instance of $.ig.DataSource.
     */
    dataSource?: any;
}
interface DataBoundEvent {
    (event: Event, ui: DataBoundEventUIParam): void;
}
interface DataBoundEventUIParam {
    /**
     * Used to obtain reference to chart widget.
     */
    owner?: any;
    /**
     * Used to obtain reference to array actual data which is displayed by chart.
     */
    data?: any;
    /**
     * Used to obtain reference to instance of $.ig.DataSource.
     */
    dataSource?: any;
}
interface UpdateTooltipEvent {
    (event: Event, ui: UpdateTooltipEventUIParam): void;
}
interface UpdateTooltipEventUIParam {
    /**
     * Used to obtain reference to chart widget.
     */
    owner?: any;
    /**
     * Used to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
     */
    text?: any;
    /**
     * Used to obtain reference to item. Value of that member can be modified or replaced by custom item.
     */
    item?: any;
    /**
     * Used to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
     */
    x?: any;
    /**
     * Used to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
     */
    y?: any;
    /**
     * Used to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
     */
    element?: any;
}
interface HideTooltipEvent {
    (event: Event, ui: HideTooltipEventUIParam): void;
}
interface HideTooltipEventUIParam {
    /**
     * Used to obtain reference to chart widget.
     */
    owner?: any;
    /**
     * Used to obtain reference to item.
     */
    item?: any;
    /**
     * Used to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
     */
    element?: any;
}
interface IgBaseChart {
    /**
     * The width of the chart.
     */
    width?: number;
    /**
     * The height of the chart.
     */
    height?: number;
    /**
     * Gets sets template for tooltip associated with chart item.
     * Example: "Value: $(ValueMemberPathInDataSource)"
     */
    tooltipTemplate?: string;
    /**
     * Gets sets maximum number of displayed records in chart.
     */
    maxRecCount?: number;
    /**
     * Gets sets a valid data source.
     * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
     * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
     */
    dataSource?: any;
    /**
     * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
     */
    dataSourceType?: string;
    /**
     * Gets sets url which is used for sending JSON on request for remote data.
     */
    dataSourceUrl?: string;
    /**
     * See $.ig.DataSource. property in the response specifying the total number of records on the server.
     */
    responseTotalRecCountKey?: string;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Event which is raised before data binding.
     * Return false in order to cancel data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     */
    dataBinding?: DataBindingEvent;
    /**
     * Event which is raised after data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.data to obtain reference to array actual data which is displayed by chart.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     */
    dataBound?: DataBoundEvent;
    /**
     * Event which is raised before tooltip is updated.
     * Return false in order to cancel updating and hide tooltip.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
     * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
     * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
     * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
     * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
     */
    updateTooltip?: UpdateTooltipEvent;
    /**
     * Event which is raised before tooltip is hidden.
     * Return false in order to cancel hiding and keep tooltip visible.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.item to obtain reference to item.
     * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
     */
    hideTooltip?: HideTooltipEvent;
    /**
     * Option for igBaseChart
     */
    [optionName: string]: any;
}
interface IgBaseChartMethods {
    /**
     * Find index of item within actual data used by chart.
     *
     * @param item     The reference to item.
     */
    findIndexOfItem(item: Object): number;
    /**
     * Get item within actual data used by chart. That is similar to this.getData()[index].
     *
     * @param index     Index of data item.
     */
    getDataItem(index: Object): Object;
    /**
     * Get reference of actual data used by chart.
     */
    getData(): any[];
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param item     The item that we want to add to the data source.
     */
    addItem(item: Object): Object;
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param item     the new item that we want to insert in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     */
    insertItem(item: Object, index: number): Object;
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param index     The index in the data source from where the item will be been removed.
     */
    removeItem(index: number): Object;
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param index     The index of the item in the data source that we want to change.
     * @param item     The new item object that will be set in the data source.
     */
    setItem(index: number, item: Object): Object;
    /**
     * Notifies the chart that an item has been set in an associated data source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source that has been changed.
     * @param newItem     the new item that has been set in the collection.
     * @param oldItem     the old item that has been overwritten in the collection.
     */
    notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
    /**
     * Notifies the chart that the items have been cleared from an associated data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     */
    notifyClearItems(dataSource: Object): Object;
    /**
     * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source where the new item has been inserted.
     * @param newItem     the new item that has been set in the collection.
     */
    notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;
    /**
     * Notifies the target axis or series that an item has been removed from the specified index in its data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source from where the old item has been removed.
     * @param oldItem     the old item that has been removed from the collection.
     */
    notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;
    /**
     * Get reference to chart object.
     */
    chart(): Object;
    dataBind(): void;
    /**
     * Destroys widget.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igBaseChart"): IgBaseChartMethods;
}
interface JQuery {
    igBaseChart(methodName: "findIndexOfItem", item: Object): number;
    igBaseChart(methodName: "getDataItem", index: Object): Object;
    igBaseChart(methodName: "getData"): any[];
    igBaseChart(methodName: "addItem", item: Object): Object;
    igBaseChart(methodName: "insertItem", item: Object, index: number): Object;
    igBaseChart(methodName: "removeItem", index: number): Object;
    igBaseChart(methodName: "setItem", index: number, item: Object): Object;
    igBaseChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
    igBaseChart(methodName: "notifyClearItems", dataSource: Object): Object;
    igBaseChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
    igBaseChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
    igBaseChart(methodName: "chart"): Object;
    igBaseChart(methodName: "dataBind"): void;
    igBaseChart(methodName: "destroy"): void;
    /**
     * The width of the chart.
     */
    igBaseChart(optionLiteral: 'option', optionName: "width"): number;
    /**
     * The width of the chart.
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "width", optionValue: number): void;
    /**
     * The height of the chart.
     */
    igBaseChart(optionLiteral: 'option', optionName: "height"): number;
    /**
     * The height of the chart.
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "height", optionValue: number): void;
    /**
     * Gets  template for tooltip associated with chart item.
     * Example: "Value: $(ValueMemberPathInDataSource)"
     */
    igBaseChart(optionLiteral: 'option', optionName: "tooltipTemplate"): string;
    /**
     * Sets template for tooltip associated with chart item.
     * Example: "Value: $(ValueMemberPathInDataSource)"
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;
    /**
     * Gets  maximum number of displayed records in chart.
     */
    igBaseChart(optionLiteral: 'option', optionName: "maxRecCount"): number;
    /**
     * Sets maximum number of displayed records in chart.
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "maxRecCount", optionValue: number): void;
    /**
     * Gets  a valid data source.
     * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
     * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * Sets a valid data source.
     * That can be instance of array or primitives, array of objects, instance of $.ig.DataSource, or any other data accepted by $.ig.DataSource.
     * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONPDataSource is used.
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataSourceType"): string;
    /**
     * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;
    /**
     * Gets  url which is used for sending JSON on request for remote data.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;
    /**
     * Sets url which is used for sending JSON on request for remote data.
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;
    /**
     * See $.ig.DataSource. property in the response specifying the total number of records on the server.
     */
    igBaseChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;
    /**
     * See $.ig.DataSource. property in the response specifying the total number of records on the server.
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
     */
    igBaseChart(optionLiteral: 'option', optionName: "responseDataKey"): string;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
     *
     * @optionValue New value to be set.
     */
    igBaseChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;
    /**
     * Event which is raised before data binding.
     * Return false in order to cancel data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;
    /**
     * Event which is raised before data binding.
     * Return false in order to cancel data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     *
     * @optionValue Define event handler function.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;
    /**
     * Event which is raised after data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.data to obtain reference to array actual data which is displayed by chart.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;
    /**
     * Event which is raised after data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.data to obtain reference to array actual data which is displayed by chart.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     *
     * @optionValue Define event handler function.
     */
    igBaseChart(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;
    /**
     * Event which is raised before tooltip is updated.
     * Return false in order to cancel updating and hide tooltip.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
     * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
     * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
     * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
     * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
     */
    igBaseChart(optionLiteral: 'option', optionName: "updateTooltip"): UpdateTooltipEvent;
    /**
     * Event which is raised before tooltip is updated.
     * Return false in order to cancel updating and hide tooltip.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.text to obtain html of tooltip. Value of that member can be modified. If modified value is null or empty string, then current content of tooltip keeps old value.
     * Use ui.item to obtain reference to item. Value of that member can be modified or replaced by custom item.
     * Use ui.x to obtain left position of tooltip in pixels relative to widget. Value of that member can be modified.
     * Use ui.y to obtain top position of tooltip in pixels relative to widget. Value of that member can be modified.
     * Use ui.element to obtain reference to jquery object which represents tooltip. Value of that member can be replaced by custom element.
     *
     * @optionValue Define event handler function.
     */
    igBaseChart(optionLiteral: 'option', optionName: "updateTooltip", optionValue: UpdateTooltipEvent): void;
    /**
     * Event which is raised before tooltip is hidden.
     * Return false in order to cancel hiding and keep tooltip visible.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.item to obtain reference to item.
     * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
     */
    igBaseChart(optionLiteral: 'option', optionName: "hideTooltip"): HideTooltipEvent;
    /**
     * Event which is raised before tooltip is hidden.
     * Return false in order to cancel hiding and keep tooltip visible.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to chart widget.
     * Use ui.item to obtain reference to item.
     * Use ui.element to obtain reference to jquery object which represents tooltip or value of ui.element from last updateTooltip event. Value of that member can be replaced by custom element.
     *
     * @optionValue Define event handler function.
     */
    igBaseChart(optionLiteral: 'option', optionName: "hideTooltip", optionValue: HideTooltipEvent): void;
    igBaseChart(options: IgBaseChart): JQuery;
    igBaseChart(optionLiteral: 'option', optionName: string): any;
    igBaseChart(optionLiteral: 'option', options: IgBaseChart): JQuery;
    igBaseChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igBaseChart(methodName: string, ...methodParams: any[]): any;
}
interface IgBulletGraphRange {
    /**
     * Gets or sets the name of the range.
     */
    name?: string;
    /**
     * Gets or sets the brush to use to fill the range.
     */
    brush?: string;
    /**
     * Gets or sets the outline to use when rendering the range.
     */
    outline?: string;
    /**
     * Gets or sets the value at which the range starts along the scale.
     */
    startValue?: number;
    /**
     * Gets or sets the value at which the range ends along the scale.
     */
    endValue?: number;
    /**
     * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the inner edge of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
     */
    innerStartExtent?: number;
    /**
     * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the inner edge of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
     */
    innerEndExtent?: number;
    /**
     * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the outer edge of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
     */
    outerStartExtent?: number;
    /**
     * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the outer edge of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
     */
    outerEndExtent?: number;
    strokeThickness?: number;
    /**
     * Option for IgBulletGraphRange
     */
    [optionName: string]: any;
}
interface FormatLabelEvent {
    (event: Event, ui: FormatLabelEventUIParam): void;
}
interface FormatLabelEventUIParam {
}
interface AlignLabelEvent {
    (event: Event, ui: AlignLabelEventUIParam): void;
}
interface AlignLabelEventUIParam {
}
interface IgBulletGraph {
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * Gets or sets the scale ranges to render on the bullet graph.
     */
    ranges?: IgBulletGraphRange[];
    /**
     * Gets or sets the ranges' tooltip template.
     */
    rangeToolTipTemplate?: string;
    /**
     * Gets or sets the value's tooltip template.
     */
    valueToolTipTemplate?: string;
    /**
     * Gets or sets the target value's tooltip template.
     */
    targetValueToolTipTemplate?: string;
    /**
     * Gets or sets the orientation of the scale.
     *
     * Valid values:
     * "horizontal"
     * "vertical"
     */
    orientation?: any;
    /**
     * Gets or sets a collection of brushes to be used as the palette for bullet graph ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    rangeBrushes?: any;
    /**
     * Gets or sets a collection of brushes to be used as the palette for bullet graph outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    rangeOutlines?: any;
    /**
     * Gets or sets the minimum value of the scale.
     */
    minimumValue?: number;
    /**
     * Gets or sets the maximum value of the scale.
     */
    maximumValue?: number;
    /**
     * Gets or sets the value indicated by the target value bar.
     */
    targetValue?: number;
    /**
     * Gets or sets the name used for the target value. The name is displayed in the default target value tooltip.
     */
    targetValueName?: string;
    /**
     * Gets or sets the value at which the bar ends.
     */
    value?: number;
    /**
     * Gets or sets the name used for actual value.
     */
    valueName?: string;
    /**
     * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    rangeInnerExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    rangeOuterExtent?: number;
    /**
     * Gets or sets the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    valueInnerExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    valueOuterExtent?: number;
    /**
     * Gets or sets the interval to use for the scale.
     */
    interval?: number;
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
     */
    ticksPostInitial?: number;
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
     */
    ticksPreTerminal?: number;
    /**
     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     */
    labelInterval?: number;
    /**
     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the bullet graph.
     */
    labelExtent?: number;
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
     */
    labelsPostInitial?: number;
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
     */
    labelsPreTerminal?: number;
    /**
     * Gets or sets the number of minor tickmarks to place between major tickmarks.
     */
    minorTickCount?: number;
    /**
     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    tickStartExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    tickEndExtent?: number;
    /**
     * Gets or sets the stroke thickness to use when rendering ticks.
     */
    tickStrokeThickness?: number;
    /**
     * Gets or sets the brush to use for the major tickmarks.
     */
    tickBrush?: string;
    /**
     * Gets or sets the brush to use for the label font.
     */
    fontBrush?: string;
    /**
     * Gets or sets the brush to use for the actual value element.
     */
    valueBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of actual value element.
     */
    valueOutline?: string;
    /**
     * Gets or sets the stroke thickness to use when rendering single actual value element.
     */
    valueStrokeThickness?: number;
    /**
     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    minorTickStartExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    minorTickEndExtent?: number;
    /**
     * Gets or sets the stroke thickness to use when rendering minor ticks.
     */
    minorTickStrokeThickness?: number;
    /**
     * Gets or sets the brush to use for the minor tickmarks.
     */
    minorTickBrush?: string;
    /**
     * Gets or sets a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
     */
    isScaleInverted?: boolean;
    /**
     * Gets or sets the brush to use to fill the backing of the bullet graph.
     */
    backingBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of the backing.
     */
    backingOutline?: string;
    /**
     * Gets or sets the stroke thickness of the backing outline.
     */
    backingStrokeThickness?: number;
    /**
     * Gets or sets the inner extent of the bullet graph backing.
     */
    backingInnerExtent?: number;
    /**
     * Gets or sets the outer extent of the bullet graph backing.
     */
    backingOuterExtent?: number;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    scaleStartExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    scaleEndExtent?: number;
    /**
     * Gets or sets the brush to use when rendering the fill of the comparative marker.
     */
    targetValueBrush?: string;
    /**
     * Get or sets the breadth of the target value element.
     */
    targetValueBreadth?: number;
    /**
     * Gets or sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    targetValueInnerExtent?: number;
    /**
     * Gets or sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    targetValueOuterExtent?: number;
    /**
     * Gets or sets the brush to use when rendering the outline of the target value.
     */
    targetValueOutline?: string;
    /**
     * Gets or sets the stroke thickness of the outline of the target value bar.
     */
    targetValueStrokeThickness?: number;
    /**
     * Gets or sets the number of milliseconds over which changes to the bullet graph should be animated.
     */
    transitionDuration?: number;
    /**
     * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
     */
    showToolTipTimeout?: number;
    /**
     * Gets or sets a value indicating whether tooltips are enabled.
     */
    showToolTip?: boolean;
    /**
     * Gets or sets the font.
     */
    font?: string;
    formatLabel?: FormatLabelEvent;
    alignLabel?: AlignLabelEvent;
    /**
     * Option for igBulletGraph
     */
    [optionName: string]: any;
}
interface IgBulletGraphMethods {
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     */
    getRangeNames(): void;
    /**
     * Adds a new range to the bullet graph.
     *
     * @param value     The range object to be added.
     */
    addRange(value: Object): void;
    /**
     * Removes a range from the bullet graph.
     *
     * @param value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     */
    removeRange(value: Object): void;
    /**
     * Updates the specified range of the bullet graph.
     *
     * @param value     The range object to be updated.
     */
    updateRange(value: Object): void;
    /**
     * Returns information about how the bullet graph is rendered.
     */
    exportVisualData(): Object;
    /**
     * Causes all pending changes of the bullet graph e.g. by changed property values to be rendered immediately.
     */
    flush(): void;
    /**
     * Destroys widget.
     */
    destroy(): void;
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     */
    styleUpdated(): void;
}
interface JQuery {
    data(propertyName: "igBulletGraph"): IgBulletGraphMethods;
}
interface JQuery {
    igBulletGraph(methodName: "getRangeNames"): void;
    igBulletGraph(methodName: "addRange", value: Object): void;
    igBulletGraph(methodName: "removeRange", value: Object): void;
    igBulletGraph(methodName: "updateRange", value: Object): void;
    igBulletGraph(methodName: "exportVisualData"): Object;
    igBulletGraph(methodName: "flush"): void;
    igBulletGraph(methodName: "destroy"): void;
    igBulletGraph(methodName: "styleUpdated"): void;
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igBulletGraph(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igBulletGraph(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  the scale ranges to render on the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "ranges"): IgBulletGraphRange[];
    /**
     * Sets the scale ranges to render on the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "ranges", optionValue: IgBulletGraphRange[]): void;
    /**
     * Gets  the ranges' tooltip template.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeToolTipTemplate"): string;
    /**
     * Sets the ranges' tooltip template.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeToolTipTemplate", optionValue: string): void;
    /**
     * Gets  the value's tooltip template.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueToolTipTemplate"): string;
    /**
     * Sets the value's tooltip template.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueToolTipTemplate", optionValue: string): void;
    /**
     * Gets  the target value's tooltip template.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueToolTipTemplate"): string;
    /**
     * Sets the target value's tooltip template.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueToolTipTemplate", optionValue: string): void;
    /**
     * Gets  the orientation of the scale.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "orientation"): any;
    /**
     * Sets the orientation of the scale.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "orientation", optionValue: any): void;
    /**
     * Gets  a collection of brushes to be used as the palette for bullet graph ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeBrushes"): any;
    /**
     * Sets a collection of brushes to be used as the palette for bullet graph ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeBrushes", optionValue: any): void;
    /**
     * Gets  a collection of brushes to be used as the palette for bullet graph outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeOutlines"): any;
    /**
     * Sets a collection of brushes to be used as the palette for bullet graph outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeOutlines", optionValue: any): void;
    /**
     * Gets  the minimum value of the scale.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minimumValue"): number;
    /**
     * Sets the minimum value of the scale.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minimumValue", optionValue: number): void;
    /**
     * Gets  the maximum value of the scale.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "maximumValue"): number;
    /**
     * Sets the maximum value of the scale.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "maximumValue", optionValue: number): void;
    /**
     * Gets  the value indicated by the target value bar.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValue"): number;
    /**
     * Sets the value indicated by the target value bar.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValue", optionValue: number): void;
    /**
     * Gets  the name used for the target value. The name is displayed in the default target value tooltip.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueName"): string;
    /**
     * Sets the name used for the target value. The name is displayed in the default target value tooltip.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueName", optionValue: string): void;
    /**
     * Gets  the value at which the bar ends.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "value"): number;
    /**
     * Sets the value at which the bar ends.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "value", optionValue: number): void;
    /**
     * Gets  the name used for actual value.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueName"): string;
    /**
     * Sets the name used for actual value.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueName", optionValue: string): void;
    /**
     * Gets  the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeInnerExtent"): number;
    /**
     * Sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeInnerExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeOuterExtent"): number;
    /**
     * Sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "rangeOuterExtent", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueInnerExtent"): number;
    /**
     * Sets the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueInnerExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueOuterExtent"): number;
    /**
     * Sets the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueOuterExtent", optionValue: number): void;
    /**
     * Gets  the interval to use for the scale.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "interval"): number;
    /**
     * Sets the interval to use for the scale.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "interval", optionValue: number): void;
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "ticksPostInitial"): number;
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "ticksPostInitial", optionValue: number): void;
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "ticksPreTerminal"): number;
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "ticksPreTerminal", optionValue: number): void;
    /**
     * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "labelInterval"): number;
    /**
     * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "labelInterval", optionValue: number): void;
    /**
     * Gets  the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "labelExtent"): number;
    /**
     * Sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "labelExtent", optionValue: number): void;
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "labelsPostInitial"): number;
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "labelsPostInitial", optionValue: number): void;
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "labelsPreTerminal"): number;
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "labelsPreTerminal", optionValue: number): void;
    /**
     * Gets  the number of minor tickmarks to place between major tickmarks.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickCount"): number;
    /**
     * Sets the number of minor tickmarks to place between major tickmarks.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickCount", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "tickStartExtent"): number;
    /**
     * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "tickStartExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "tickEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "tickEndExtent", optionValue: number): void;
    /**
     * Gets  the stroke thickness to use when rendering ticks.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "tickStrokeThickness"): number;
    /**
     * Sets the stroke thickness to use when rendering ticks.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "tickStrokeThickness", optionValue: number): void;
    /**
     * Gets  the brush to use for the major tickmarks.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "tickBrush"): string;
    /**
     * Sets the brush to use for the major tickmarks.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "tickBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the label font.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "fontBrush"): string;
    /**
     * Sets the brush to use for the label font.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "fontBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the actual value element.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueBrush"): string;
    /**
     * Sets the brush to use for the actual value element.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the outline of actual value element.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueOutline"): string;
    /**
     * Sets the brush to use for the outline of actual value element.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueOutline", optionValue: string): void;
    /**
     * Gets  the stroke thickness to use when rendering single actual value element.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueStrokeThickness"): number;
    /**
     * Sets the stroke thickness to use when rendering single actual value element.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "valueStrokeThickness", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickStartExtent"): number;
    /**
     * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickStartExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickEndExtent", optionValue: number): void;
    /**
     * Gets  the stroke thickness to use when rendering minor ticks.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickStrokeThickness"): number;
    /**
     * Sets the stroke thickness to use when rendering minor ticks.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickStrokeThickness", optionValue: number): void;
    /**
     * Gets  the brush to use for the minor tickmarks.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickBrush"): string;
    /**
     * Sets the brush to use for the minor tickmarks.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "minorTickBrush", optionValue: string): void;
    /**
     * Gets  a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "isScaleInverted"): boolean;
    /**
     * Sets a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "isScaleInverted", optionValue: boolean): void;
    /**
     * Gets  the brush to use to fill the backing of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingBrush"): string;
    /**
     * Sets the brush to use to fill the backing of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the outline of the backing.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingOutline"): string;
    /**
     * Sets the brush to use for the outline of the backing.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingOutline", optionValue: string): void;
    /**
     * Gets  the stroke thickness of the backing outline.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingStrokeThickness"): number;
    /**
     * Sets the stroke thickness of the backing outline.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingStrokeThickness", optionValue: number): void;
    /**
     * Gets  the inner extent of the bullet graph backing.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingInnerExtent"): number;
    /**
     * Sets the inner extent of the bullet graph backing.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingInnerExtent", optionValue: number): void;
    /**
     * Gets  the outer extent of the bullet graph backing.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingOuterExtent"): number;
    /**
     * Sets the outer extent of the bullet graph backing.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "backingOuterExtent", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "scaleStartExtent"): number;
    /**
     * Sets the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "scaleStartExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "scaleEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "scaleEndExtent", optionValue: number): void;
    /**
     * Gets  the brush to use when rendering the fill of the comparative marker.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueBrush"): string;
    /**
     * Sets the brush to use when rendering the fill of the comparative marker.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueBrush", optionValue: string): void;
    /**
     * Get  the breadth of the target value element.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueBreadth"): number;
    /**
     * Get or sets the breadth of the target value element.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueBreadth", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueInnerExtent"): number;
    /**
     * Sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueInnerExtent", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueOuterExtent"): number;
    /**
     * Sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueOuterExtent", optionValue: number): void;
    /**
     * Gets  the brush to use when rendering the outline of the target value.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueOutline"): string;
    /**
     * Sets the brush to use when rendering the outline of the target value.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueOutline", optionValue: string): void;
    /**
     * Gets  the stroke thickness of the outline of the target value bar.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueStrokeThickness"): number;
    /**
     * Sets the stroke thickness of the outline of the target value bar.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "targetValueStrokeThickness", optionValue: number): void;
    /**
     * Gets  the number of milliseconds over which changes to the bullet graph should be animated.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "transitionDuration"): number;
    /**
     * Sets the number of milliseconds over which changes to the bullet graph should be animated.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;
    /**
     * Gets  the time in milliseconds that tooltip appearance is delayed with.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "showToolTipTimeout"): number;
    /**
     * Sets the time in milliseconds that tooltip appearance is delayed with.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "showToolTipTimeout", optionValue: number): void;
    /**
     * Gets  a value indicating whether tooltips are enabled.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "showToolTip"): boolean;
    /**
     * Sets a value indicating whether tooltips are enabled.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "showToolTip", optionValue: boolean): void;
    /**
     * Gets  the font.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "font"): string;
    /**
     * Sets the font.
     *
     * @optionValue New value to be set.
     */
    igBulletGraph(optionLiteral: 'option', optionName: "font", optionValue: string): void;
    /**
     */
    igBulletGraph(optionLiteral: 'option', optionName: "formatLabel"): FormatLabelEvent;
    /**
     */
    igBulletGraph(optionLiteral: 'option', optionName: "formatLabel", optionValue: FormatLabelEvent): void;
    /**
     */
    igBulletGraph(optionLiteral: 'option', optionName: "alignLabel"): AlignLabelEvent;
    /**
     */
    igBulletGraph(optionLiteral: 'option', optionName: "alignLabel", optionValue: AlignLabelEvent): void;
    igBulletGraph(options: IgBulletGraph): JQuery;
    igBulletGraph(optionLiteral: 'option', optionName: string): any;
    igBulletGraph(optionLiteral: 'option', options: IgBulletGraph): JQuery;
    igBulletGraph(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igBulletGraph(methodName: string, ...methodParams: any[]): any;
}
interface IgDataChartCrosshairPoint {
    /**
     * The x coordinate.
     */
    x?: number;
    /**
     * The y coordinate.
     */
    y?: number;
    /**
     * Option for IgDataChartCrosshairPoint
     */
    [optionName: string]: any;
}
interface IgDataChartLegend {
    /**
     * The name of the element to turn into a legend.
     */
    element?: string;
    /**
     * Type of the legend.
     *
     * Valid values:
     * "item" Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.
     * "legend" Specify the legend as legend. It is supported by all types of series in the igDataChart control.
     */
    type?: any;
    /**
     * The width of the legend.
     */
    width?: any;
    /**
     * The height of the legend.
     */
    height?: any;
    /**
     * Option for IgDataChartLegend
     */
    [optionName: string]: any;
}
interface IgDataChartAxes {
    /**
     * Type of the axis.
     *
     * Valid values:
     * "numericX" Specify the axis as numeric X axis. Useful for displaying scatter, category and financial price series.
     * "numericY" Specify the axis as numeric Y axis.Useful for displaying scatter, category and financial price series.
     * "categoryX" Specify the axis as category X axis. Useful for displaying scatter, category and financial price series.
     * "categoryDateTimeX" Specify the axis as category datetime X axis. Useful for displaying category and financial price series with date based data.
     * "categoryY" Specify the axis as category Y axis. Useful for displaying scatter, category and financial price series.
     * "categoryAngle" Specify the axis as category angle axis. Useful for displaying polar and radial categories.
     * "numericAngle" Specify the axis as numeric angle axis. Useful for displaying polar and radial series.
     * "numericRadius" Specify the axis as numeric radius axis. Useful for displaying polar and radial series.
     */
    type?: any;
    /**
     * The unique identifier of the axis.
     */
    name?: string;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Set to true in order to have an existing axis removed from the chart, by name
     */
    remove?: boolean;
    /**
     * Specifies the location to display the axis labels for this axis.
     *
     * Valid values:
     * "outsideTop" The labels should have an outside top position.
     * "outsideBottom" The labels should have an outside bottom position.
     * "outsideLeft" The labels should have an outside left position.
     * "outsideRight" The labels should have an outside right position.
     * "insideTop" The labels should have an inside top position.
     * "insideBottom" The labels should have an inside bottom position.
     * "insideLeft" The labels should have an inside left position.
     * "insideRight" The labels should have an inside right position.
     */
    labelLocation?: any;
    /**
     * Specifies whether the labels are visible.
     *
     * Valid values:
     * "visible" The labels should be visisble for this axis.
     * "collapsed" The labels should not be visible for this axis.
     */
    labelVisibility?: any;
    /**
     * Specifies the extent of the area dedicated to the labels for this axis. If unspecified, this value is auto-calculated.
     */
    labelExtent?: number;
    /**
     * Specifies the angle that labels on the axis should be rotated
     */
    labelAngle?: number;
    /**
     * Overrides the style of the text used for the axis labels.
     */
    labelTextStyle?: string;
    /**
     * Overrides the color of the text used for the axis labels.
     */
    labelTextColor?: string;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
     */
    formatLabel?: any;
    /**
     * Gets or sets the Stroke property.
     */
    stroke?: string;
    /**
     * Gets or sets the StrokeThickness property.
     */
    strokeThickness?: number;
    /**
     * Gets or sets the Strip property.
     */
    strip?: string;
    /**
     * Gets or sets the MajorStroke property.
     */
    majorStroke?: string;
    /**
     * Gets or sets the MajorStrokeThickness property.
     */
    majorStrokeThickness?: number;
    /**
     * Gets or sets the MinorStroke property.
     */
    minorStroke?: string;
    /**
     * Gets or sets the MinorStrokeThickness property.
     */
    minorStrokeThickness?: number;
    /**
     * Gets or sets the IsInverted property.
     */
    isInverted?: boolean;
    /**
     * Gets or sets the CrossingAxis property.
     */
    crossingAxis?: string;
    /**
     * Gets or sets the CrossingValue property.
     */
    crossingValue?: any;
    /**
     * Gets or sets the coercion methods to use when loading data from data sources.
     * Should be specified before setting any member paths, if being used. Setting it later
     * will not cause data to be reimported into the chart.
     */
    coercionMethods?: any;
    /**
     * Gets or sets the axis label format string.
     */
    label?: any;
    /**
     * Gets or sets the amount of space between adjacent categories for the current axis object.
     * The gap is silently clamped to the range [0, 1] when used.
     */
    gap?: number;
    /**
     * Gets or sets the amount of overlap between adjacent categories for the current axis object.
     * The overlap is silently clamped to the range [-1, 1] when used.
     */
    overlap?: number;
    /**
     * Indicates the angle in degress that the chart's 0th angle should be offset.
     */
    startAngleOffset?: number;
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
     */
    interval?: number;
    /**
     * Gets or sets the axis display type. Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.
     *
     * Valid values:
     * "continuous" Points occur at even intervals, even where data is not present at a given point.
     * "discrete" Points occur when data is present, possibly at uneven intervals.
     */
    displayType?: any;
    /**
     * Gets or sets the axis MinimumValue.
     */
    minimumValue?: number;
    /**
     * Gets or sets the axis MaximumValue.
     */
    maximumValue?: number;
    /**
     * Gets or sets the DateTime mapping property for the CategoryDateTimeXAxis.
     */
    dateTimeMemberPath?: string;
    /**
     * Gets or sets the ReferenceValue property.
     */
    referenceValue?: number;
    /**
     * Gets or sets the IsLogarithmic property.
     */
    isLogarithmic?: boolean;
    /**
     * Gets or sets the LogarithmBase property.
     */
    logarithmBase?: number;
    /**
     * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be
     * a value between 0.0 and 1.0.
     */
    radiusExtentScale?: number;
    /**
     * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
     * a value between 0.0 and 1.0.
     */
    innerRadiusExtentScale?: number;
    /**
     * The title to display for the component.
     */
    title?: string;
    /**
     * The css font property to use for the title.
     */
    titleTextStyle?: string;
    /**
     * The margin to display around the title of the axis.
     */
    titleMargin?: number;
    /**
     * the horizontal alignment to use for the title.
     *
     * Valid values:
     * "left" left aligns the title.
     * "center" center aligns the title.
     * "right" right aligns the title.
     */
    titleHorizontalAlignment?: any;
    /**
     * the vertical alignment to use for the title.
     *
     * Valid values:
     * "center" center aligns the title.
     */
    titleVerticalAlignment?: any;
    /**
     * the position to use for the title.
     *
     * Valid values:
     * "auto" the title is positioned automatically.
     * "left" the title is positioned on the left of the labels, if applicable.
     * "right" the title is positioned on the right of the labels, if applicable.
     * "top" the title is positioned on the top of the labels, if applicable.
     * "bottom" the title is positioned on the bottom of the labels, if applicable.
     */
    titlePosition?: any;
    /**
     * The top margin to use for the title.
     */
    titleTopMargin?: number;
    /**
     * The left margin to use for the title.
     */
    titleLeftMargin?: number;
    /**
     * The right margin to use for the title.
     */
    titleRightMargin?: number;
    /**
     * The bottom margin to use for the title.
     */
    titleBottomMargin?: number;
    /**
     * the horizontal alignment to use for the labels. Only applicable to vertical axes.
     *
     * Valid values:
     * "left" left aligns the labels.
     * "center" center aligns the labels.
     * "right" right aligns the labels.
     */
    labelHorizontalAlignment?: any;
    /**
     * the vertical alignment to use for the labels. Only applicable to horizontal axes.
     *
     * Valid values:
     * "top" top aligns the labels.
     * "center" center aligns the labels.
     * "bottom" bottom aligns the labels.
     */
    labelVerticalAlignment?: any;
    /**
     * The margin to use for the labels.
     */
    labelMargin?: number;
    /**
     * The top margin to use for the labels.
     */
    labelTopMargin?: number;
    /**
     * The left margin to use for the labels.
     */
    labelLeftMargin?: number;
    /**
     * The right margin to use for the labels.
     */
    labelRightMargin?: number;
    /**
     * The bottom margin to use for the labels.
     */
    labelBottomMargin?: number;
    /**
     * Sets whether or not to show the first label on the axis.
     */
    showFirstLabel?: boolean;
    /**
     * The angle to use for the axis title.
     */
    titleAngle?: number;
    /**
     * The length of the tickmarks to display for this axis.
     */
    tickLength?: number;
    /**
     * The stroke thickness to use for the tickmarks.
     */
    tickStrokeThickness?: number;
    /**
     * The color to use for the tickmarks.
     */
    tickStroke?: any;
    /**
     * Gets or sets whether the cateogory axis should use clustering display mode even if no series are present that would force clustering mode.
     */
    useClusteringMode?: boolean;
    /**
     * Option for IgDataChartAxes
     */
    [optionName: string]: any;
}
interface IgDataChartSeriesLegend {
    /**
     * The name of the element to turn into a legend.
     */
    element?: string;
    /**
     * Type of the legend.
     *
     * Valid values:
     * "item" Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.
     * "legend" Specify the legend as legend. It is supported by all types of series in the igDataChart control.
     */
    type?: any;
    /**
     * The width of the legend.
     */
    width?: any;
    /**
     * The height of the legend.
     */
    height?: any;
    /**
     * Option for IgDataChartSeriesLegend
     */
    [optionName: string]: any;
}
interface IgDataChartSeries {
    /**
     * Type of the series.
     *
     * Valid values:
     * "area" Specify the series as Area series.
     * "bar" Specify the series as Bar series.
     * "column" Specify the series as Column series.
     * "line" Specify the series as Line series.
     * "rangeArea" Specify the series as Range Area series.
     * "rangeColumn" Specify the series as Range Column series.
     * "splineArea" Specify the series as Spline Area series.
     * "spline" Specify the series as Spline series.
     * "stepArea" Specify the series as Step Area series.
     * "stepLine" Specify the series as Step Line series.
     * "waterfall" Specify the series as Waterfall series.
     * "financial" Specify the series as Financial series.
     * "typicalPriceIndicator" Specify the series as Typical Price Indicator series.
     * "polarArea" Specify the series as Polar Area series.
     * "polarLine" Specify the series as Polar Line series.
     * "polarScatter" Specify the series as Polar Scatter series.
     * "radialColumn" Specify the series as Radial Column series.
     * "radialLine" Specify the series as Radial Line series.
     * "radialPie" Specify the series as Radial Pie series.
     * "scatter" Specify the series as Scatter series.
     * "scatterLine" Specify the series as Scatter Line series.
     * "bubble" Specify the series as Bubble series.
     * "absoluteVolumeOscillatorIndicator" Specify the series as Absolute Volume Oscillator Indicator series.
     * "averageTrueRangeIndicator" Specify the series as Average True Range Indicator series.
     * "accumulationDistributionIndicator" Specify the series as Accumulation Distribution Indicator series
     * "averageDirectionalIndexIndicator" Specify the series as Average Directional Index Indicator series.
     */
    type?: any;
    /**
     * The unique identifier of the series.
     */
    name?: string;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Set to true in order to have an existing series removed from the chart, by name
     */
    remove?: boolean;
    /**
     * Whether the chart should render a tooltip.
     */
    showTooltip?: boolean;
    /**
     * The name of template or the template itself that chart tooltip will use to render.
     */
    tooltipTemplate?: string;
    /**
     * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
     */
    legend?: IgDataChartSeriesLegend;
    /**
     * Gets or sets the legend item visibility for the current series object.
     *
     * Valid values:
     * "visible" The legend item should be visible.
     * "collapsed" The legend item should not be visible.
     */
    legendItemVisibility?: any;
    /**
     * Gets or sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the series object itself.
     * The provided object should have properties called render and optionally measure.
     * These are functions which will be called that will be called to handle the user specified custom rendering.
     * measure will be passed an object that looks like this:
     * {
     * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
     * width: [if value is present, specifies the available width, user may set to desired width for content],
     * height: [if value is present, specifies the available height, user may set to desired height for content],
     * isConstant: [user should set to true if desired with and height will always be the same for this template],
     * data: [if present, represents the contextual data for this template]
     * }
     * render will be passed an object that looks like this:
     * {
     * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
     * xPosition: [if present, specifies the x position at which to render the content],
     * yPosition: [if present, specifies the y position at which to render the content],
     * availableWidth: [if present, specifies the available width in which to render the content],
     * availableHeight: [if present, specifies the available height in which to render the content],
     * data: [if present, specifies the data that is in context for this content],
     * isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
     * }
     */
    legendItemBadgeTemplate?: any;
    /**
     * Gets or sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the series object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    legendItemTemplate?: any;
    /**
     * Gets or sets the DiscreteLegendItemTemplate property.
     * The legend item control content is created according to the DiscreteLegendItemTemplate on-demand by
     * the series object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    discreteLegendItemTemplate?: any;
    /**
     * Gets or sets the duration of the current series's morph.
     */
    transitionDuration?: number;
    /**
     * Provides an easing function to use for the transitions. This should either be a well known name of an easing function (The only currently supported name is cubic), or it should be a function that takes a number and returns the output with the function applied.
     */
    transitionEasingFunction?: any;
    /**
     * Gets or sets the current series object's rendering resolution.
     */
    resolution?: number;
    /**
     * Gets or sets the Title property.
     * The legend item control is created according to the Title on-demand by
     * the series object itself.
     */
    title?: string;
    /**
     * Gets or sets the brush to use for the series.
     */
    brush?: string;
    /**
     * Gets or sets the brush to use for the outline of the series.
     * Some series types, such as LineSeries, do not display outlines.  Therefore, this property does not affect some charts.
     */
    outline?: string;
    /**
     * Gets or sets the width of the current series object's line thickness.
     */
    thickness?: number;
    /**
     * Gets or gets the coercion methods to use when loading data from data sources.
     * Should be specified before setting any member paths, if being used. Setting it later
     * will not cause data to be reimported into the chart.
     */
    coercionMethods?: any;
    /**
     * Gets or sets the marker type for the current series object. If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
     *
     * Valid values:
     * "unset" Marker hasn't been set.
     * "none" No markerItems.
     * "automatic" Automatic marker shape.
     * "circle" Circle marker shape.
     * "triangle" Flat-top triangle marker shape.
     * "pyramid" Flat-base triangle marker shape.
     * "square" Square marker shape.
     * "diamond" Diamond marker shape.
     * "pentagon" Pentagon marker shape.
     * "hexagon" Hexagon marker shape.
     * "tetragram" Four-pointed star marker shape.
     * "pentagram" Five-pointed star marker shape.
     * "hexagram" Six-pointed star marker shape.
     */
    markerType?: any;
    /**
     * Gets or sets the MarkerTemplate for the current series object.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    markerTemplate?: any;
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
     */
    markerBrush?: string;
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
     */
    markerOutline?: string;
    /**
     * Gets or sets the effective x-axis for the current object.
     */
    xAxis?: string;
    /**
     * Gets or sets the effective y-axis for the current object.
     */
    yAxis?: string;
    /**
     * Gets or sets the value mapping property for the current series object.
     */
    xMemberPath?: string;
    /**
     * Gets or sets the value mapping property for the current series object.
     */
    yMemberPath?: string;
    /**
     * Gets or sets the trend type for the current scatter series.
     *
     * Valid values:
     * "none" No trendline should display.
     * "linearFit" Linear fit.
     * "quadraticFit" Quadratic polynomial fit.
     * "cubicFit" Cubic polynomial fit.
     * "quarticFit" Quartic polynomial fit.
     * "quinticFit" Quintic polynomial fit.
     * "logarithmicFit" Logarithmic fit.
     * "exponentialFit" Exponential fit.
     * "powerLawFit" Powerlaw fit.
     * "simpleAverage" Simple moving average.
     * "exponentialAverage" Exponential moving average.
     * "modifiedAverage" Modified moving average.
     * "cumulativeAverage" Cumulative moving average.
     * "weightedAverage" Weighted moving average.
     */
    trendLineType?: any;
    /**
     * Gets or sets the brush to use to draw the trend line.
     */
    trendLineBrush?: string;
    /**
     * Gets or sets the thickness of the current scatter series object's trend line.
     */
    trendLineThickness?: number;
    /**
     * Gets or sets the moving average period for the current scatter series object.
     * The typical, and initial, value for trend line period is 7.
     */
    trendLinePeriod?: number;
    /**
     * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.
     */
    trendLineZIndex?: number;
    /**
     * Gets or sets the maximum number of markerItems displayed by the current series.
     * If more than the specified number of markerItems are visible, the series will automatically
     * choose a representative set.
     */
    maximumMarkers?: number;
    /**
     * Determines how unknown values will be plotted on the chart. Null and Double.NaN are two examples of unknown values.
     *
     * Valid values:
     * "linearInterpolate" Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
     * "dontPlot" Do not plot the unknown value on the chart.
     */
    unknownValuePlotting?: any;
    /**
     * Gets or sets the radius mapping property for the current series object.
     */
    radiusMemberPath?: string;
    /**
     * Gets or sets the radius size scale for the bubbles.
     */
    radiusScale?: any;
    /**
     * Gets or sets the Label mapping property for the current series object.
     */
    labelMemberPath?: string;
    /**
     * Gets or sets the fill mapping property for the current series object.
     */
    fillMemberPath?: string;
    /**
     * Gets or sets the brush scale for the marker brush.
     */
    fillScale?: any;
    /**
     * Gets the effective angle axis for the current series object.
     */
    angleAxis?: string;
    /**
     * Gets the effective value axis for the current series object.
     */
    valueAxis?: string;
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this to true can effect performance.
     */
    clipSeriesToBounds?: boolean;
    /**
     * Gets or sets the item path that provides the values for the current series.
     */
    valueMemberPath?: string;
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
     */
    radiusX?: number;
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
     */
    radiusY?: number;
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
     */
    angleMemberPath?: number;
    /**
     * Gets the effective radius axis for the current series object.
     */
    radiusAxis?: string;
    /**
     * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
     * spiral based interpolation.
     */
    useCartesianInterpolation?: boolean;
    /**
     * Gets or sets the brush to use for negative portions of the series.
     */
    negativeBrush?: string;
    /**
     * Gets or sets the type of spline to be rendered.
     *
     * Valid values:
     * "natural" Calculates the spline using a natural spline calculation formula.
     * "clamped" Calculated the spline using a clamped spline calculation formula.
     */
    splineType?: any;
    /**
     * Gets or sets the value mapping property for the current series object.
     */
    lowMemberPath?: string;
    /**
     * Gets or sets the value mapping property for the current series object.
     */
    highMemberPath?: string;
    /**
     * Gets or sets the open mapping property for the current series object.
     */
    openMemberPath?: string;
    /**
     * Gets or sets the close mapping property for the current series object.
     */
    closeMemberPath?: string;
    /**
     * Gets or sets the volume mapping property for the current series object.
     */
    volumeMemberPath?: string;
    /**
     * Gets or sets the display for the current FinancialIndicator object.
     *
     * Valid values:
     * "candlestick" Displays prices as a Japanese Candlestick.
     * "OHLC" Displays prices as an OHLC bar.
     */
    displayType?: any;
    /**
     * Gets or sets the number of values to hide at the beginning of the indicator.
     */
    ignoreFirst?: number;
    /**
     * Gets or sets the moving average period for the current AverageDirectionalIndexIndicator object.
     * The typical, and initial, value for AverageDirectionalIndexIndicator periods is 14.
     */
    period?: number;
    /**
     * Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
     * The typical, and initial, value for short AVO periods is 10.
     */
    shortPeriod?: number;
    /**
     * Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
     * The typical, and initial, value for long AVO periods is 30.
     */
    longPeriod?: number;
    /**
     * Gets or sets the MarkerCollisionAvoidance
     *
     * Valid values:
     * "none" No collision avoidance is attempted.
     * "omit" Markers that collide will be omitted.
     * "fade" Markers that collide will be faded in opacity.
     * "omitAndShift" Markers that collide may be shifted or omitted.
     */
    markerCollisionAvoidance?: any;
    /**
     * Sets or Gets whether to increase marker fidelity for extreme data shapes that have lots of Y variation over short X intervals.
     */
    useHighMarkerFidelity?: boolean;
    /**
     * Gets or sets the whether to use use brute force mode.
     */
    useBruteForce?: boolean;
    /**
     * Gets or sets the whether to progressively load the data into the chart.
     */
    progressiveLoad?: boolean;
    /**
     * Gets or sets the whether the chart reacts to mouse move events.
     */
    mouseOverEnabled?: boolean;
    /**
     * Gets or sets the whether to use squares when halting a render traversal rather than the shape of the coalesced area.
     */
    useSquareCutoffStyle?: boolean;
    /**
     * Gets or sets the density value that maps to the minimum heat color.
     */
    heatMinimum?: number;
    /**
     * Gets or sets the value that maps to the maximum heat color.
     */
    heatMaximum?: number;
    /**
     * Gets or sets the minimum heat color for the density scale.
     */
    heatMinimumColor?: any;
    /**
     * Gets or sets the maximum heat color for the density scale.
     */
    heatMaximumColor?: any;
    /**
     * Gets or sets the series for stacked charts. It should contain array of series objects. Each item in array should represent a series with  and it may have most options supported by top-level series object, such as xAxis, yAxis, valueMemberPath, etc.
     */
    series?: any[];
    /**
     * Gets or sets whether drop shadow should be enabled for this series.
     */
    isDropShadowEnabled?: boolean;
    /**
     * Gets or sets whether drop shadow is applied to the whole series visual or to each of the individual shapes forming the series.
     */
    useSingleShadow?: boolean;
    /**
     * Gets or sets the color to use for the drop shadow.
     */
    shadowColor?: any;
    /**
     * Gets or sets the blur amount to use for the drop shadow.
     */
    shadowBlur?: number;
    /**
     * Gets or sets the x offset amount to use for the drop shadow.
     */
    shadowOffsetX?: number;
    /**
     * Gets or sets the y offset amount to use for the drop shadow.
     */
    shadowOffsetY?: number;
    /**
     * Gets or sets if the series should play a transition in animation when the data source is assigned. Note: Transitions are not currently supported for stacked series.
     */
    isTransitionInEnabled?: boolean;
    /**
     * Gets or sets the speed to transition in the series data points.
     *
     * Valid values:
     * "auto" A speed type is automatically selected.
     * "normal" All speeds are normal, data points will arrive at the same time.
     * "valueScaled" Data points will arrive later if their value is further from the start point.
     * "indexScaled" Data points will arrive later if their index is further from the axis origin.
     * "random" Data points will arrive at random times.
     */
    transitionInSpeedType?: any;
    /**
     * Gets or sets the method to transition in the series. Note: Transitions are not currently supported for stacked series.
     *
     * Valid values:
     * "auto" Series transitions in an automatically chosen way.
     * "fromZero" Series transitions in from the reference value of the value axis.
     * "sweepFromLeft" Series sweeps in from the left.
     * "sweepFromRight" Series sweeps in from the right.
     * "sweepFromTop" Series sweeps in from the top.
     * "sweepFromBottom" Series sweeps in from the bottom.
     * "sweepFromCenter" Series sweeps in from the center.
     * "accordionFromLeft" Series accordions in from the left.
     * "accordionFromRight" Series accordions in from the right.
     * "accordionFromTop" Series accordions in from the top.
     * "accordionFromBottom" Series accordions in from the bottom.
     * "expand" Series expands from the value midpoints.
     * "sweepFromCategoryAxisMinimum" Series sweeps in from the category axis minimum.
     * "sweepFromCategoryAxisMaximum" Series sweeps in from the category axis maximum.
     * "sweepFromValueAxisMinimum" Series sweeps in from the value axis minimum.
     * "sweepFromValueAxisMaximum" Series sweeps in from the value axis maximum.
     * "accordionFromCategoryAxisMinimum" Series accordions in from the category axis minimum.
     * "accordionFromCategoryAxisMaximum" Series accordions in from the category axis maximum.
     * "accordionFromValueAxisMinimum" Series accordions in from the value axis minimum.
     * "accordionFromValueAxisMaximum" Series accordions in from the value axis maximum.
     */
    transitionInMode?: any;
    /**
     * Gets or sets the duration of the current series's transition in morph in milliseconds.
     */
    transitionInDuration?: number;
    /**
     * Gets or sets the corner radius to use for the series, if applicable.
     */
    radius?: number;
    /**
     * Gets or sets the opacity modifier to apply to the area fill shape of the series, if applicable.
     */
    areaFillOpacity?: number;
    /**
     * Gets or sets whether the series should expect that its data source members need to be called as functions to get their values.
     */
    expectFunctions?: boolean;
    /**
     * Gets or sets whether the hover layer should use interpolation to position itself relative the closest values.
     */
    useInterpolation?: boolean;
    /**
     * Gets or sets whether the hover layer should skip unknown values when trying to find the closest values.
     */
    skipUnknownValues?: boolean;
    /**
     * Gets or sets whether the vertical crosshair portion of the layer should be visible.
     */
    verticalLineVisibility?: boolean;
    /**
     * Gets or sets whether the horizontal crosshair portion of the layer should be visible.
     */
    horizontalLineVisibility?: boolean;
    /**
     * Gets or sets the name of the target series for the layer, if desired. Setting the target series will scope the layer to target just that series.
     */
    targetSeries?: string;
    /**
     * Gets or sets the name of the target axis for the layer, if desired. Setting the target axis will scope the layer to target just that axis.
     */
    targetAxis?: string;
    /**
     * Gets or sets whether a custom category style is allowed. Setting this to true will case the assigningCategoryStyle event to get fired, if provided.
     */
    isCustomCategoryStyleAllowed?: boolean;
    /**
     * Gets or sets whether a custom category marker style is allowed. Setting this to true will case the assigningCategoryMarkerStyle event to get fired, if provided.
     */
    isCustomCategoryMarkerStyleAllowed?: boolean;
    /**
     * Gets or sets whether highlighting should be enabled for the series, if supported.
     */
    isHighlightingEnabled?: boolean;
    /**
     * Gets or sets the width to use for the highlight region if highlighting items in a grid aligned series (line, spline, etc), with a banded shape.
     */
    bandHighlightWidth?: number;
    /**
     * Gets or sets which type of highlight shape to use when highlighting items.
     *
     * Valid values:
     * "auto" use an automatic highlight type for this series.
     * "marker" use a marker highlight type for this series.
     * "shape" use a shape highlight type for this series.
     */
    highlightType?: any;
    /**
     * Gets or sets the Position to apply to the tooltip containers.
     *
     * Valid values:
     * "auto" use an automatic position for the category tooltips.
     * "outsideStart" position the category tooltip at the outside start of the value axis.
     * "insideStart" position the category tooltip at the inside start of the value axis.
     * "insideEnd" position the category tooltip at the inside end of the value axis.
     * "outsideEnd" position the category tooltip at the outside end of the value axis.
     */
    tooltipPosition?: any;
    /**
     * Sets the position a cursor position to use instead of the current mouse cursor position for displaying the annotations in this layer.
     * Should be an object with an x and a y property in world coordinates (ranging from 0 to 1)
     */
    cursorPosition?: any;
    /**
     * Sets if the presence of this layer should disable the default crosshair behavior of the chart, if present.
     */
    isDefaultCrosshairDisabled?: boolean;
    /**
     * Sets if the current layer should take up a brush/ordering index in the series collection to derive its color automatically.
     */
    useIndex?: boolean;
    /**
     * Sets if the current layer should have an entry in the legend of the chart. By default annotation layers are not present in the legend.
     */
    useLegend?: boolean;
    /**
     * Option for IgDataChartSeries
     */
    [optionName: string]: any;
}
interface TooltipShowingEvent {
    (event: Event, ui: TooltipShowingEventUIParam): void;
}
interface TooltipShowingEventUIParam {
    /**
     * Used to get reference to tooltip DOM element.
     */
    element?: any;
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
}
interface TooltipShownEvent {
    (event: Event, ui: TooltipShownEventUIParam): void;
}
interface TooltipShownEventUIParam {
    /**
     * Used to get reference to tooltip DOM element.
     */
    element?: any;
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
}
interface TooltipHidingEvent {
    (event: Event, ui: TooltipHidingEventUIParam): void;
}
interface TooltipHidingEventUIParam {
    /**
     * Used to get reference to tooltip DOM element.
     */
    element?: any;
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
}
interface TooltipHiddenEvent {
    (event: Event, ui: TooltipHiddenEventUIParam): void;
}
interface TooltipHiddenEventUIParam {
    /**
     * Used to get reference to tooltip DOM element.
     */
    element?: any;
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
}
interface BrowserNotSupportedEvent {
    (event: Event, ui: BrowserNotSupportedEventUIParam): void;
}
interface BrowserNotSupportedEventUIParam {
}
interface SeriesCursorMouseMoveEvent {
    (event: Event, ui: SeriesCursorMouseMoveEventUIParam): void;
}
interface SeriesCursorMouseMoveEventUIParam {
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get mouse X position.
     */
    positionX?: any;
    /**
     * Used to get mouse Y position.
     */
    positionY?: any;
}
interface SeriesMouseLeftButtonDownEvent {
    (event: Event, ui: SeriesMouseLeftButtonDownEventUIParam): void;
}
interface SeriesMouseLeftButtonDownEventUIParam {
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get mouse X position.
     */
    positionX?: any;
    /**
     * Used to get mouse Y position.
     */
    positionY?: any;
}
interface SeriesMouseLeftButtonUpEvent {
    (event: Event, ui: SeriesMouseLeftButtonUpEventUIParam): void;
}
interface SeriesMouseLeftButtonUpEventUIParam {
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get mouse X position.
     */
    positionX?: any;
    /**
     * Used to get mouse Y position.
     */
    positionY?: any;
}
interface SeriesMouseMoveEvent {
    (event: Event, ui: SeriesMouseMoveEventUIParam): void;
}
interface SeriesMouseMoveEventUIParam {
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get mouse X position.
     */
    positionX?: any;
    /**
     * Used to get mouse Y position.
     */
    positionY?: any;
}
interface SeriesMouseEnterEvent {
    (event: Event, ui: SeriesMouseEnterEventUIParam): void;
}
interface SeriesMouseEnterEventUIParam {
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get mouse X position.
     */
    positionX?: any;
    /**
     * Used to get mouse Y position.
     */
    positionY?: any;
}
interface SeriesMouseLeaveEvent {
    (event: Event, ui: SeriesMouseLeaveEventUIParam): void;
}
interface SeriesMouseLeaveEventUIParam {
    /**
     * Used to get reference to current series item object.
     */
    item?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get mouse X position.
     */
    positionX?: any;
    /**
     * Used to get mouse Y position.
     */
    positionY?: any;
}
interface WindowRectChangedEvent {
    (event: Event, ui: WindowRectChangedEventUIParam): void;
}
interface WindowRectChangedEventUIParam {
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get new height value.
     */
    newHeight?: any;
    /**
     * Used to get new left value.
     */
    newLeft?: any;
    /**
     * Used to get new top value.
     */
    newTop?: any;
    /**
     * Used to get new top value.
     */
    newWidth?: any;
    /**
     * Used to get old height value.
     */
    oldHeight?: any;
    /**
     * Used to get old left value.
     */
    oldLeft?: any;
    /**
     * Used to get old top value.
     */
    oldTop?: any;
    /**
     * Used to get old top value.
     */
    oldWidth?: any;
}
interface GridAreaRectChangedEvent {
    (event: Event, ui: GridAreaRectChangedEventUIParam): void;
}
interface GridAreaRectChangedEventUIParam {
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get new height value.
     */
    newHeight?: any;
    /**
     * Used to get new left value.
     */
    newLeft?: any;
    /**
     * Used to get new top value.
     */
    newTop?: any;
    /**
     * Used to get new top value.
     */
    newWidth?: any;
    /**
     * Used to get old height value.
     */
    oldHeight?: any;
    /**
     * Used to get old left value.
     */
    oldLeft?: any;
    /**
     * Used to get old top value.
     */
    oldTop?: any;
    /**
     * Used to get old top value.
     */
    oldWidth?: any;
}
interface RefreshCompletedEvent {
    (event: Event, ui: RefreshCompletedEventUIParam): void;
}
interface RefreshCompletedEventUIParam {
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
}
interface AxisRangeChangedEvent {
    (event: Event, ui: AxisRangeChangedEventUIParam): void;
}
interface AxisRangeChangedEventUIParam {
    /**
     * Used to get reference to current chart axis object.
     */
    axis?: any;
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get new maximum value.
     */
    newMaximumValue?: any;
    /**
     * Used to get new minimum value.
     */
    newMinimumValue?: any;
    /**
     * Used to get old maximum value.
     */
    oldMaximumValue?: any;
    /**
     * Used to get old minimum value.
     */
    oldMinimumValue?: any;
}
interface TypicalBasedOnEvent {
    (event: Event, ui: TypicalBasedOnEventUIParam): void;
}
interface TypicalBasedOnEventUIParam {
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get the number of positions that should be calculated from the start.
     */
    count?: any;
    /**
     * Used to get the beginning position that should be calculated from.
     */
    position?: any;
    /**
     * Used to get the supporting calculations to use in the calculation.
     */
    supportingCalculations?: any;
    /**
     * Used to get the data to use for the calculation.
     */
    dataSource?: any;
    /**
     * Used to specify which columns changing will invalidate the series and cause it to be recalculated.
     */
    basedOn?: any;
}
interface ProgressiveLoadStatusChangedEvent {
    (event: Event, ui: ProgressiveLoadStatusChangedEventUIParam): void;
}
interface ProgressiveLoadStatusChangedEventUIParam {
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get current status.
     */
    currentStatus?: any;
}
interface AssigningCategoryStyleEvent {
    (event: Event, ui: AssigningCategoryStyleEventUIParam): void;
}
interface AssigningCategoryStyleEventUIParam {
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get the start index for the current items.
     */
    startIndex?: any;
    /**
     * Used to get the end index for the current items.
     */
    endIndex?: any;
    /**
     * Used to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
     */
    hasDateRange?: any;
    startDate?: any;
    endDate?: any;
    /**
     * Used to get all the items associated with the event (only if necessary).
     */
    getItems?: any;
    /**
     * Used to get or set the fill to use for the current item.
     */
    fill?: any;
    /**
     * Used to get or set the stroke to use for the current item.
     */
    stroke?: any;
    /**
     * Used to get or set the opacity to use for the current item.
     */
    opacity?: any;
    /**
     * Used to set if the default highlighting behavior should not run, given that you are handling it in this event.
     */
    highlightingHandled?: any;
    /**
     * Used to get the maximum highlighted progress across all series.
     */
    maxAllSeriesHighlightingProgress?: any;
    /**
     * Used to get the sum of highlighting progtess across all series.
     */
    sumAllSeriesHighlightingProgress?: any;
}
interface AssigningCategoryMarkerStyleEvent {
    (event: Event, ui: AssigningCategoryMarkerStyleEventUIParam): void;
}
interface AssigningCategoryMarkerStyleEventUIParam {
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get the start index for the current items.
     */
    startIndex?: any;
    /**
     * Used to get the end index for the current items.
     */
    endIndex?: any;
    /**
     * Used to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
     */
    hasDateRange?: any;
    startDate?: any;
    endDate?: any;
    /**
     * Used to get all the items associated with the event (only if necessary).
     */
    getItems?: any;
    /**
     * Used to get or set the fill to use for the current item.
     */
    fill?: any;
    /**
     * Used to get or set the stroke to use for the current item.
     */
    stroke?: any;
    /**
     * Used to get or set the opacity to use for the current item.
     */
    opacity?: any;
    /**
     * Used to set if the default highlighting behavior should not run, given that you are handling it in this event.
     */
    highlightingHandled?: any;
    /**
     * Used to get the maximum highlighted progress across all series.
     */
    maxAllSeriesHighlightingProgress?: any;
    /**
     * Used to get the sum of highlighting progtess across all series.
     */
    sumAllSeriesHighlightingProgress?: any;
}
interface IgDataChart {
    /**
     * The channel name to use to sync this chart with other charts.
     */
    syncChannel?: string;
    /**
     * Whether the chart should be synchronized vertically
     */
    synchronizeVertically?: boolean;
    /**
     * Whether the chart should be synchronized horizontally
     */
    syncrhonizeHorizontally?: boolean;
    /**
     * Gets or sets the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
     */
    crosshairPoint?: IgDataChartCrosshairPoint;
    /**
     * A rectangle representing the portion of the chart currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
     * The provided object should have numeric properties called left, top, width and height.
     */
    windowRect?: any;
    /**
     * Gets or sets the current Chart's horizontal zoomability.
     */
    horizontalZoomable?: boolean;
    /**
     * Gets or sets the current Chart's vertical zoomability.
     */
    verticalZoomable?: boolean;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
     *
     * Valid values:
     * "deferred" Defer the view update until after the user action is complete.
     * "immediate" Update the view immediately while the user action is happening.
     */
    windowResponse?: any;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     */
    windowRectMinWidth?: number;
    /**
     * The visibility of the OverviewPlusDetailPane.
     *
     * Valid values:
     * "visible" The overview pane should be visible.
     * "collapsed" The overview pane should not be visible.
     */
    overviewPlusDetailPaneVisibility?: any;
    /**
     * Gets or sets the current Chart's crosshair visibility override.
     *
     * Valid values:
     * "visible" Crosshair should be visible.
     * "collapsed" Crosshair should not be visible.
     */
    crosshairVisibility?: any;
    /**
     * Gets or sets the brush used as the background for the current Chart object's plot area.
     */
    plotAreaBackground?: string;
    /**
     * Gets or sets the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
     *
     * Valid values:
     * "none" User gesture will not change the state of the chart.
     * "dragZoom" User gesture will start a drag rectangle to zoom the chart.
     * "dragPan" User gesture will start a pan action to move the chart's window.
     */
    defaultInteraction?: any;
    /**
     * Gets or sets the current Chart's DragModifier property.
     *
     * Valid values:
     * "none" No modifier key is set.
     * "alt" The modifier is set to alt key.
     * "control" The modifier is set to control key.
     * "shift" The modifier is set to shift key.
     */
    dragModifier?: any;
    /**
     * Gets or sets the current Chart's PanModifier property.
     *
     * Valid values:
     * "none" No modifier key is set.
     * "alt" The modifier is set to alt key.
     * "control" The modifier is set to control key.
     * "shift" The modifier is set to shift key.
     */
    panModifier?: any;
    /**
     * Gets or sets the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
     * The provided object should have numeric properties called left, top, width and height.
     */
    previewRect?: any;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
     */
    windowPositionHorizontal?: number;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
     */
    windowPositionVertical?: number;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the WindowRect property.
     */
    windowScaleHorizontal?: number;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the WindowRect property.
     */
    windowScaleVertical?: number;
    /**
     * Gets or sets the template to use for circle markers on the chart.
     * Defines the marker template used for
     * series with a marker type of circle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    circleMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for triangle markers on the chart.
     * Defines the marker template used for
     * series with a marker type of triangle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    triangleMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for pyramid markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pyramid.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    pyramidMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for square markers on the chart.
     * Defines the marker template used for
     * series with a marker type of square.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    squareMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for diamond markers on the chart.
     * Defines the marker template used for
     * series with a marker type of diamond.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    diamondMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for pentagon markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pentagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    pentagonMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for hexagon markers on the chart.
     * Defines the marker template used for
     * series with a marker type of hexagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    hexagonMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for tetragram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of tetragram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    tetragramMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for pentragram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pentagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    pentagramMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for hexagram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of hexagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    hexagramMarkerTemplate?: any;
    /**
     * Sets or gets the top margin to use around the chart content in the canvas.
     */
    topMargin?: number;
    /**
     * Sets or gets the left margin to use around the chart content in the canvas.
     */
    leftMargin?: number;
    /**
     * Sets or gets the right margin to use around the chart content in the canvas.
     */
    rightMargin?: number;
    /**
     * Sets or gets the bottom margin to use around the chart content in the canvas.
     */
    bottomMargin?: number;
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the chart.
     */
    autoMarginWidth?: number;
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the chart.
     */
    autoMarginHeight?: number;
    /**
     * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
     */
    isSquare?: boolean;
    /**
     * Gets or sets the GridMode property.
     *
     * Valid values:
     * "none" No chart grid.
     * "beforeSeries" Chart grid should be rendered before or in front of the data series.
     * "behindSeries" Chart grid should be rendered behind or in back of the data series.
     */
    gridMode?: any;
    /**
     * Gets or sets the Brushes property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    brushes?: any;
    /**
     * Gets or sets the MarkerBrushes property.
     * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    markerBrushes?: any;
    /**
     * Gets or sets the Outlines property.
     * The outlines property defines the palette from which automatically assigned series outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    outlines?: any;
    /**
     * Gets or sets the MarkerOutlines property.
     * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    markerOutlines?: any;
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
     */
    size?: any;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Set to true in order to disable any interactions with the plot surface.
     */
    isSurfaceInteractionDisabled?: boolean;
    /**
     * Set to true in order to override the default behavior in which series do not animate if an axis range changes
     */
    animateSeriesWhenAxisRangeChanges?: boolean;
    /**
     * The title to display for the component.
     */
    title?: string;
    /**
     * The subtitle to display for the component.
     */
    subtitle?: string;
    /**
     * The css font property to use for the title.
     */
    titleTextStyle?: string;
    /**
     * The top margin to use for the title.
     */
    titleTopMargin?: number;
    /**
     * The left margin to use for the title.
     */
    titleLeftMargin?: number;
    /**
     * The right margin to use for the title.
     */
    titleRightMargin?: number;
    /**
     * The bottom margin to use for the title.
     */
    titleBottomMargin?: number;
    /**
     * The css font property to use for the title.
     */
    subtitleTextStyle?: string;
    /**
     * The top margin to use for the subtitle.
     */
    subtitleTopMargin?: number;
    /**
     * The left margin to use for the subtitle.
     */
    subtitleLeftMargin?: number;
    /**
     * The right margin to use for the subtitle.
     */
    subtitleRightMargin?: number;
    /**
     * The bottom margin to use for the subtitle.
     */
    subtitleBottomMargin?: number;
    /**
     * The color to use for the title.
     */
    titleTextColor?: any;
    /**
     * The color to use for the subtitle.
     */
    subtitleTextColor?: any;
    /**
     * the horizontal alignment to use for the title.
     *
     * Valid values:
     * "left" left aligns the title.
     * "center" center aligns the title.
     * "right" right aligns the title.
     */
    titleHorizontalAlignment?: any;
    /**
     * the horizontal alignment to use for the subtitle.
     *
     * Valid values:
     * "left" left aligns the subtitle.
     * "center" center aligns the subtitle.
     * "right" right aligns the subtitle.
     */
    subtitleHorizontalAlignment?: any;
    /**
     * The length, in milliseconds of the highlighting transition.
     */
    highlightingTransitionDuration?: number;
    /**
     * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
     */
    useTiledZooming?: boolean;
    /**
     * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
     */
    preferHigherResolutionTiles?: boolean;
    /**
     * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
     */
    zoomTileCacheSize?: number;
    /**
     * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
     */
    legend?: IgDataChartLegend;
    /**
     * An array of axis objects
     */
    axes?: IgDataChartAxes[];
    /**
     * An array of series objects
     */
    series?: IgDataChartSeries[];
    /**
     * The swatch used to style this widget
     */
    theme?: string;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipShowing?: TooltipShowingEvent;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipShown?: TooltipShownEvent;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipHiding?: TooltipHidingEvent;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipHidden?: TooltipHiddenEvent;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     */
    browserNotSupported?: BrowserNotSupportedEvent;
    /**
     * Occurs when the cursors are moved over a series in this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesCursorMouseMove?: SeriesCursorMouseMoveEvent;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseLeftButtonDown?: SeriesMouseLeftButtonDownEvent;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseLeftButtonUp?: SeriesMouseLeftButtonUpEvent;
    /**
     * Occurs when the left mouse pointer moves while over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseMove?: SeriesMouseMoveEvent;
    /**
     * Occurs when the left mouse pointer enters an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseEnter?: SeriesMouseEnterEvent;
    /**
     * Occurs when the left mouse pointer leaves an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseLeave?: SeriesMouseLeaveEvent;
    /**
     * Occurs just after the current Chart's window rectangle is changed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     */
    windowRectChanged?: WindowRectChangedEvent;
    /**
     * Occurs just after the current Chart's grid area rectangle is changed.
     * The grid area may change as the result of the Chart being resized, or
     * of an axis being added or changing size, possibly in another Chart.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     */
    gridAreaRectChanged?: GridAreaRectChangedEvent;
    /**
     * Raised when the chart's processing for an update has completed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     */
    refreshCompleted?: RefreshCompletedEvent;
    /**
     * Event fired when the range of and axis on the chart changes.
     * Function takes arguments evt and ui.
     * Use ui.axis to get reference to current chart axis object.
     * Use ui.chart to get reference to chart object.
     * Use ui.newMaximumValue to get new maximum value.
     * Use ui.newMinimumValue to get new minimum value.
     * Use ui.oldMaximumValue to get old maximum value.
     * Use ui.oldMinimumValue to get old minimum value.
     */
    axisRangeChanged?: AxisRangeChangedEvent;
    /**
     * Handle this event in order to specify which columns the Typical price calculation is based on.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.count to get the number of positions that should be calculated from the start.
     * Use ui.position to get the beginning position that should be calculated from.
     * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
     * Use ui.dataSource to get the data to use for the calculation.
     * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
     */
    typicalBasedOn?: TypicalBasedOnEvent;
    /**
     * Event fired when the progressive loading state of the series has changed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.currentStatus to get current status.
     */
    progressiveLoadStatusChanged?: ProgressiveLoadStatusChangedEvent;
    /**
     * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.startIndex to get the start index for the current items.
     * Use ui.endIndex to get the end index for the current items.
     * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
     * Use ui.startDate if ui.hasDateRange is true.
     * Use ui.endDate if ui.hasDateRange is true.
     * Use ui.getItems to get all the items associated with the event (only if necessary).
     * Use ui.fill to get or set the fill to use for the current item.
     * Use ui.stroke to get or set the stroke to use for the current item.
     * Use ui.opacity to get or set the opacity to use for the current item.
     * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
     * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
     * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
     * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
     * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
     */
    assigningCategoryStyle?: AssigningCategoryStyleEvent;
    /**
     * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.startIndex to get the start index for the current items.
     * Use ui.endIndex to get the end index for the current items.
     * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
     * Use ui.startDate if ui.hasDateRange is true.
     * Use ui.endDate if ui.hasDateRange is true.
     * Use ui.getItems to get all the items associated with the event (only if necessary).
     * Use ui.fill to get or set the fill to use for the current item.
     * Use ui.stroke to get or set the stroke to use for the current item.
     * Use ui.opacity to get or set the opacity to use for the current item.
     * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
     * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
     * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
     * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
     * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
     */
    assigningCategoryMarkerStyle?: AssigningCategoryMarkerStyleEvent;
    /**
     * Option for igDataChart
     */
    [optionName: string]: any;
}
interface IgDataChartMethods {
    option(): void;
    /**
     * Returns the element holding the chart.
     */
    widget(): void;
    /**
     * Returns the ID of parent element holding the chart.
     */
    id(): string;
    /**
     * Exports the chart to a PNG image.
     *
     * @param width     The width of the image.
     * @param height     The height of the image.
     */
    exportImage(width?: Object, height?: Object): Object;
    /**
     * Destroys the widget.
     */
    destroy(): void;
    /**
     * Notify the chart that styles it draws colors from may have been updated.
     */
    styleUpdated(): Object;
    /**
     * Resets the zoom level of the chart to default.
     */
    resetZoom(): Object;
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param item     The item that we want to add to the data source.
     * @param targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     */
    addItem(item: Object, targetName: string): void;
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param item     the new item that we want to insert in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     * @param targetName     The name of the series or axis bound to the data source.
     */
    insertItem(item: Object, index: number, targetName: string): void;
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param index     The index in the data source from where the item will be been removed.
     * @param targetName     The name of the series or axis bound to the data source. This is required only when the data is bound to series or axis. If the data is bound to dataSource of igDataChart, the second parameter should not be set.
     */
    removeItem(index: number, targetName: string): void;
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param index     The index of the item in the data source that we want to change.
     * @param item     The new item object that will be set in the data source.
     * @param targetName     The name of the series or axis bound to the data source.
     */
    setItem(index: number, item: Object, targetName: string): void;
    /**
     * Notifies the chart that an item has been set in an associated data source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source that has been changed.
     * @param newItem     the new item that has been set in the collection.
     * @param oldItem     the old item that has been overwritten in the collection.
     */
    notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
    /**
     * Notifies the chart that the items have been cleared from an associated data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     */
    notifyClearItems(dataSource: Object): Object;
    /**
     * Notifies the target axis or series that an item has been inserted at the specified index in its data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source where the new item has been inserted.
     * @param newItem     the new item that has been set in the collection.
     */
    notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;
    /**
     * Notifies the target axis or series that an item has been removed from the specified index in its data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource     The data source in which the change happened.
     * @param index     The index in the items source from where the old item has been removed.
     * @param oldItem     the old item that has been removed from the collection.
     */
    notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;
    /**
     * Notifies the target axis or series that it should scroll the requested data item into view.
     *
     * @param targetName     The name of the axis or series notify.
     * @param item     The data item to bring into view, if possible.
     */
    scrollIntoView(targetName: string, item: Object): Object;
    /**
     * Notifies the target axis that it should scale the requested value into chart space from axis space.
     * For example you can use this method if you want to find where value 50 of the x axis stands scaled to chart's width.
     *
     * @param targetName     The name of the axis to notify.
     * @param unscaledValue     The value in axis space to translate into chart space.
     */
    scaleValue(targetName: string, unscaledValue: number): number;
    /**
     * Notifies the target axis that it should unscale the requested value into axis space from chart space.
     * For example you can use this method if you want to find what is the value of x axis unscaled from 0 width of the chart.
     *
     * @param targetName     The name of the axis to notify.
     * @param scaledValue     The value in chart space to translate into axis space.
     */
    unscaleValue(targetName: string, scaledValue: number): number;
    /**
     * Notifies the target series that something that affects its visual properties has changed and the visual output needs a repaint.
     *
     * @param targetName     The name of the series to notify.
     */
    notifyVisualPropertiesChanged(targetName: string): Object;
    /**
     * Forces any pending deferred work to render on the chart before continuing
     */
    flush(): void;
    /**
     * Exports visual data from the chart to aid in unit testing
     */
    exportVisualData(): void;
    /**
     * Gets the actual minimum value of the target numeric or date time axis
     *
     * @param targetName    The name of the axis from which to get the minimum value.
     */
    getActualMinimumValue(targetName: string): void;
    /**
     * Gets the actual maximum value of the target numeric or date time axis
     *
     * @param targetName    The name of the axis from which to get the maximum value.
     */
    getActualMaximumValue(targetName: string): void;
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     */
    print(): void;
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param targetName     The name of the series to render.
     * @param animate     Whether the change should be animated, if possible.
     */
    renderSeries(targetName: string, animate: boolean): void;
    /**
     * Gets the item item index associated with the specified world position.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     */
    getItemIndex(targetName: string, worldPoint: Object): number;
    /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     */
    getItem(targetName: string, worldPoint: Object): Object;
    /**
     * For a category plotted series, gets the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
     *
     * @param targetName    The name of the series to target.
     */
    getItemSpan(targetName: string): number;
    /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    /**
     * If possible, will return the best available main value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    /**
     * If possible, will return the best available main value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesHighValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesHighValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    /**
     * If possible, will return the best available high value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesHighValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    /**
     * If possible, will return the best available high value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesHighValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesLowValue(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesLowValuePosition(targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    /**
     * If possible, will return the best available low value position of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} that represents a position within the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesLowValuePositionFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    /**
     * If possible, will return the best available low value of the series for a given world coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     * @param useInterpolation    If true, interpolation should be used to get in-between values, rather than only the actual values in the data set.
     * @param skipUnknowns    If true, unknown values should be skipped.
     */
    getSeriesLowValueFromSeriesPixel(targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    /**
     * Gets the item item index associated with the specified series pixel coordinate.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The world position (in the form {x: [number from 0 to 1], y: [number from 0 to 1]} ) that represents a position in the space of the axes.
     */
    getItemIndexFromSeriesPixel(targetName: string, seriesPoint: Object): number;
    /**
     * Gets the item that is the best match for the specified world coordinates.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The series pixel position (in the form {x: [number], y: [number]} ) that represents a position in the pixel space of the series.
     */
    getItemFromSeriesPixel(targetName: string, seriesPoint: Object): Object;
    /**
     * Gets the category offset for a series, if applicable.
     *
     * @param targetName    The name of the series to target.
     */
    getSeriesOffsetValue(targetName: string): number;
    /**
     * Gets the category width for a series, if applicable.
     *
     * @param targetName    The name of the series to target.
     */
    getSeriesCategoryWidth(targetName: string): number;
    /**
     * Replays the transition in animation for a series, if applicable.
     *
     * @param targetName    The name of the series to target.
     */
    replayTransitionIn(targetName: string): Object;
    /**
     * Simulates a hover interaction over a given point in the viewport of a series.
     *
     * @param targetName    The name of the series to target.
     * @param seriesPoint    The point at which to hover. Should have an x property with type number and a y property with type number.
     */
    simulateHover(targetName: string, seriesPoint: Object): Object;
    /**
     * Moves the cursor point of the target annotation layer to the desired world coordinates.
     *
     * @param targetName    The name of the series to target.
     * @param worldPoint    The point to which to move the cursor. Should have an x property with type number and a y property with type number.
     */
    moveCursorPoint(targetName: string, worldPoint: Object): Object;
    /**
     * Manually starts a tiled zoom if one isn't already running.
     */
    startTiledZoomingIfNecessary(): void;
    /**
     * Manually ends a tiled zoom if one is running.
     */
    endTiledZoomingIfRunning(): void;
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
     */
    clearTileZoomCache(): void;
}
interface JQuery {
    data(propertyName: "igDataChart"): IgDataChartMethods;
}
interface IgPieChartLegend {
    /**
     * The name of the element to turn into a legend.
     */
    element?: string;
    /**
     * Type of the legend.
     *
     * Valid values:
     * "item" Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.
     * "legend" Specify the legend as legend. It is supported by all types of series in the igDataChart control.
     */
    type?: any;
    /**
     * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: number;
    /**
     * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: number;
    /**
     * Option for IgPieChartLegend
     */
    [optionName: string]: any;
}
interface SliceClickEvent {
    (event: Event, ui: SliceClickEventUIParam): void;
}
interface SliceClickEventUIParam {
    /**
     * Used to get reference to chart object.
     */
    chart?: any;
    /**
     * Used to get reference to slice object.
     */
    slice?: any;
}
interface IgPieChart {
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Gets or Sets the property name that contains the values.
     */
    valueMemberPath?: string;
    /**
     * Gets or sets the property name that contains the labels.
     */
    labelMemberPath?: string;
    /**
     * Gets or sets the position of chart labels.
     *
     * Valid values:
     * "none" No labels will be displayed.
     * "center" Labels will be displayed in the center.
     * "insideEnd" Labels will be displayed inside and by the edge of the container.
     * "outsideEnd" Labels will be displayed outside the container.
     * "bestFit" Labels will automatically decide their location.
     */
    labelsPosition?: any;
    /**
     * Gets or sets whether the leader lines are visible.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    leaderLineVisibility?: any;
    /**
     * Gets or sets what type of leader lines will be used for the outside end labels.
     *
     * Valid values:
     * "straight"
     * "arc"
     * "spline"
     */
    leaderLineType?: any;
    /**
     * Gets or sets the margin between a label and the end of its leader line.
     */
    leaderLineMargin?: number;
    /**
     * Gets or sets the threshold value that determines if slices are grouped into the Others slice.
     */
    othersCategoryThreshold?: number;
    /**
     * Gets or sets the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
     * Use context.item to get the item associated with the slice, if any.
     * Use context.actualItemBrush to get the brush used to paint the slice.
     * Use context.outline to get the outline brush used to paint the slice.
     * Use context.itemLabel to get the label object that would be used for the slice.
     * Use context.percentValue to see the percentage value that is associated with the slice.
     * Use context.isOthersSlice to tell if the associated slice is the others slice.
     * Should return a string value that should be used for the label.
     */
    formatLabel?: Function;
    /**
     * Gets or sets a style object that can be used to override the style settings on the others category slice.
     */
    othersCategoryStyle?: any;
    /**
     * Gets or sets whether to use numeric or percent-based threshold value.
     *
     * Valid values:
     * "percent" Data value is compared to OthersCategoryThreshold as a percentage of the total.
     */
    othersCategoryType?: any;
    /**
     * Gets or sets the label of the Others slice.
     */
    othersCategoryText?: string;
    /**
     * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
     */
    explodedRadius?: number;
    /**
     * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.
     */
    radiusFactor?: number;
    /**
     * Gets or sets whether the slices can be selected.
     */
    allowSliceSelection?: boolean;
    /**
     * Gets or sets whether the slices can be exploded.
     */
    allowSliceExplosion?: boolean;
    /**
     * Gets or sets the collection of exploded slice indices.
     * Should be an array of integers that indicate the indexes of the slices to explode.
     */
    explodedSlices?: any[];
    /**
     * Whether the chart should render a tooltip.
     */
    showTooltip?: boolean;
    /**
     * The name of template or the template itself that chart tooltip will use to render.
     */
    tooltipTemplate?: string;
    /**
     * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
     */
    legend?: IgPieChartLegend;
    /**
     * Gets or sets the pixel amount, by which the labels are offset from the edge of the slices.
     */
    labelExtent?: number;
    /**
     * Gets or sets the starting angle of the chart.
     * The default zero value is equivalent to 3 o'clock.
     */
    startAngle?: number;
    /**
     * Gets or sets the rotational direction of the chart.
     *
     * Valid values:
     * "counterclockwise"
     * "clockwise"
     */
    sweepDirection?: any;
    /**
     * Gets or sets the style used when a slice is selected.
     */
    selectedStyle?: any;
    /**
     * Gets or sets the Brushes property.
     * The brushes property defines the palette from which automatically assigned slice brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    brushes?: any;
    /**
     * Gets or sets the Outlines property.
     * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    outlines?: any;
    /**
     * Gets or sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the chart object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    legendItemTemplate?: any;
    /**
     * Gets or sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the chart object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    legendItemBadgeTemplate?: any;
    /**
     * Overrides the style used for text in the pie chart.
     */
    textStyle?: string;
    /**
     * The swatch used to style this widget
     */
    theme?: string;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     */
    tooltipShowing?: TooltipShowingEvent;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     */
    tooltipShown?: TooltipShownEvent;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     */
    tooltipHiding?: TooltipHidingEvent;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     */
    tooltipHidden?: TooltipHiddenEvent;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     */
    browserNotSupported?: BrowserNotSupportedEvent;
    /**
     * Raised when the slice is clicked.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.slice to get reference to slice object.
     * Use ui.slice.item to get reference to current pie chart item.
     * Use ui.slice.isExploded to get is the slice exploded.
     * Use ui.slice.isSelected to get is the slice selected.
     */
    sliceClick?: SliceClickEvent;
    /**
     * Option for igPieChart
     */
    [optionName: string]: any;
}
interface IgPieChartMethods {
    option(): void;
    /**
     * Adds a new item to the data source and notifies the chart.
     *
     * @param item     the new item that will be added to the data source.
     */
    addItem(item: Object): void;
    /**
     * Inserts a new item to the data source and notifies the chart.
     *
     * @param item     the new item that will be inserted in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     */
    insertItem(item: Object, index: number): void;
    /**
     * Deletes an item from the data source and notifies the chart.
     *
     * @param index     The index in the data source from where the item will be been removed.
     */
    removeItem(index: number): void;
    /**
     * Updates an item in the data source and notifies the chart.
     *
     * @param index     The index in the data source that we want to change.
     * @param item     the new item that we want to set in the data source.
     */
    setItem(index: number, item: Object): void;
    /**
     * Exports the chart to a PNG image.
     *
     * @param width     The width of the image.
     * @param height     The height of the image.
     */
    exportImage(width?: Object, height?: Object): Object;
    /**
     * Destroys the widget.
     */
    destroy(): void;
    /**
     * Returns the ID of parent element holding the chart.
     */
    id(): string;
    /**
     * Returns the element holding the chart.
     */
    widget(): void;
    /**
     * Creates a print preview page with the chart, hiding all other elements on the page.
     */
    print(): void;
    /**
     * Exports visual data from the pie chart to aid in unit testing
     */
    exportVisualData(): void;
}
interface JQuery {
    data(propertyName: "igPieChart"): IgPieChartMethods;
}
interface JQuery {
    igDataChart(methodName: "option"): void;
    igDataChart(methodName: "widget"): void;
    igDataChart(methodName: "id"): string;
    igDataChart(methodName: "exportImage", width?: Object, height?: Object): Object;
    igDataChart(methodName: "destroy"): void;
    igDataChart(methodName: "styleUpdated"): Object;
    igDataChart(methodName: "resetZoom"): Object;
    igDataChart(methodName: "addItem", item: Object, targetName: string): void;
    igDataChart(methodName: "insertItem", item: Object, index: number, targetName: string): void;
    igDataChart(methodName: "removeItem", index: number, targetName: string): void;
    igDataChart(methodName: "setItem", index: number, item: Object, targetName: string): void;
    igDataChart(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
    igDataChart(methodName: "notifyClearItems", dataSource: Object): Object;
    igDataChart(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
    igDataChart(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
    igDataChart(methodName: "scrollIntoView", targetName: string, item: Object): Object;
    igDataChart(methodName: "scaleValue", targetName: string, unscaledValue: number): number;
    igDataChart(methodName: "unscaleValue", targetName: string, scaledValue: number): number;
    igDataChart(methodName: "notifyVisualPropertiesChanged", targetName: string): Object;
    igDataChart(methodName: "flush"): void;
    igDataChart(methodName: "exportVisualData"): void;
    igDataChart(methodName: "getActualMinimumValue", targetName: string): void;
    igDataChart(methodName: "getActualMaximumValue", targetName: string): void;
    igDataChart(methodName: "print"): void;
    igDataChart(methodName: "renderSeries", targetName: string, animate: boolean): void;
    igDataChart(methodName: "getItemIndex", targetName: string, worldPoint: Object): number;
    igDataChart(methodName: "getItem", targetName: string, worldPoint: Object): Object;
    igDataChart(methodName: "getItemSpan", targetName: string): number;
    igDataChart(methodName: "getSeriesValue", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    igDataChart(methodName: "getSeriesValuePosition", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    igDataChart(methodName: "getSeriesValuePositionFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    igDataChart(methodName: "getSeriesValueFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    igDataChart(methodName: "getSeriesHighValue", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    igDataChart(methodName: "getSeriesHighValuePosition", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    igDataChart(methodName: "getSeriesHighValuePositionFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    igDataChart(methodName: "getSeriesHighValueFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    igDataChart(methodName: "getSeriesLowValue", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    igDataChart(methodName: "getSeriesLowValuePosition", targetName: string, worldPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    igDataChart(methodName: "getSeriesLowValuePositionFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): Object;
    igDataChart(methodName: "getSeriesLowValueFromSeriesPixel", targetName: string, seriesPoint: Object, useInterpolation: boolean, skipUnknowns: boolean): number;
    igDataChart(methodName: "getItemIndexFromSeriesPixel", targetName: string, seriesPoint: Object): number;
    igDataChart(methodName: "getItemFromSeriesPixel", targetName: string, seriesPoint: Object): Object;
    igDataChart(methodName: "getSeriesOffsetValue", targetName: string): number;
    igDataChart(methodName: "getSeriesCategoryWidth", targetName: string): number;
    igDataChart(methodName: "replayTransitionIn", targetName: string): Object;
    igDataChart(methodName: "simulateHover", targetName: string, seriesPoint: Object): Object;
    igDataChart(methodName: "moveCursorPoint", targetName: string, worldPoint: Object): Object;
    igDataChart(methodName: "startTiledZoomingIfNecessary"): void;
    igDataChart(methodName: "endTiledZoomingIfRunning"): void;
    igDataChart(methodName: "clearTileZoomCache"): void;
    /**
     * The channel name to use to sync this chart with other charts.
     */
    igDataChart(optionLiteral: 'option', optionName: "syncChannel"): string;
    /**
     * The channel name to use to sync this chart with other charts.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "syncChannel", optionValue: string): void;
    /**
     * Whether the chart should be synchronized vertically
     */
    igDataChart(optionLiteral: 'option', optionName: "synchronizeVertically"): boolean;
    /**
     * Whether the chart should be synchronized vertically
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "synchronizeVertically", optionValue: boolean): void;
    /**
     * Whether the chart should be synchronized horizontally
     */
    igDataChart(optionLiteral: 'option', optionName: "syncrhonizeHorizontally"): boolean;
    /**
     * Whether the chart should be synchronized horizontally
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "syncrhonizeHorizontally", optionValue: boolean): void;
    /**
     * Gets  the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
     */
    igDataChart(optionLiteral: 'option', optionName: "crosshairPoint"): IgDataChartCrosshairPoint;
    /**
     * Sets the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "crosshairPoint", optionValue: IgDataChartCrosshairPoint): void;
    /**
     * A rectangle representing the portion of the chart currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
     * The provided object should have numeric properties called left, top, width and height.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowRect"): any;
    /**
     * A rectangle representing the portion of the chart currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
     * The provided object should have numeric properties called left, top, width and height.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowRect", optionValue: any): void;
    /**
     * Gets  the current Chart's horizontal zoomability.
     */
    igDataChart(optionLiteral: 'option', optionName: "horizontalZoomable"): boolean;
    /**
     * Sets the current Chart's horizontal zoomability.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "horizontalZoomable", optionValue: boolean): void;
    /**
     * Gets  the current Chart's vertical zoomability.
     */
    igDataChart(optionLiteral: 'option', optionName: "verticalZoomable"): boolean;
    /**
     * Sets the current Chart's vertical zoomability.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "verticalZoomable", optionValue: boolean): void;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowResponse"): any;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowResponse", optionValue: any): void;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowRectMinWidth"): number;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowRectMinWidth", optionValue: number): void;
    /**
     * The visibility of the OverviewPlusDetailPane.
     */
    igDataChart(optionLiteral: 'option', optionName: "overviewPlusDetailPaneVisibility"): any;
    /**
     * The visibility of the OverviewPlusDetailPane.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "overviewPlusDetailPaneVisibility", optionValue: any): void;
    /**
     * Gets  the current Chart's crosshair visibility override.
     */
    igDataChart(optionLiteral: 'option', optionName: "crosshairVisibility"): any;
    /**
     * Sets the current Chart's crosshair visibility override.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "crosshairVisibility", optionValue: any): void;
    /**
     * Gets  the brush used as the background for the current Chart object's plot area.
     */
    igDataChart(optionLiteral: 'option', optionName: "plotAreaBackground"): string;
    /**
     * Sets the brush used as the background for the current Chart object's plot area.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "plotAreaBackground", optionValue: string): void;
    /**
     * Gets  the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
     */
    igDataChart(optionLiteral: 'option', optionName: "defaultInteraction"): any;
    /**
     * Sets the DefaultInteraction property. The default interaction state defines the chart's response to mouse events.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "defaultInteraction", optionValue: any): void;
    /**
     * Gets  the current Chart's DragModifier property.
     */
    igDataChart(optionLiteral: 'option', optionName: "dragModifier"): any;
    /**
     * Sets the current Chart's DragModifier property.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "dragModifier", optionValue: any): void;
    /**
     * Gets  the current Chart's PanModifier property.
     */
    igDataChart(optionLiteral: 'option', optionName: "panModifier"): any;
    /**
     * Sets the current Chart's PanModifier property.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "panModifier", optionValue: any): void;
    /**
     * Gets  the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
     * The provided object should have numeric properties called left, top, width and height.
     */
    igDataChart(optionLiteral: 'option', optionName: "previewRect"): any;
    /**
     * Sets the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
     * The provided object should have numeric properties called left, top, width and height.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "previewRect", optionValue: any): void;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowPositionHorizontal"): number;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowPositionHorizontal", optionValue: number): void;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowPositionVertical"): number;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowPositionVertical", optionValue: number): void;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the WindowRect property.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowScaleHorizontal"): number;
    /**
     * A number between 0 and 1 determining the scale of the horizontal zoom.
     * This property is effectively a shortcut to the Width of the WindowRect property.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowScaleHorizontal", optionValue: number): void;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the WindowRect property.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowScaleVertical"): number;
    /**
     * A number between 0 and 1 determining the scale of the vertical zoom.
     * This property is effectively a shortcut to the Height of the WindowRect property.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowScaleVertical", optionValue: number): void;
    /**
     * Gets  the template to use for circle markers on the chart.
     * Defines the marker template used for
     * series with a marker type of circle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "circleMarkerTemplate"): any;
    /**
     * Sets the template to use for circle markers on the chart.
     * Defines the marker template used for
     * series with a marker type of circle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "circleMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for triangle markers on the chart.
     * Defines the marker template used for
     * series with a marker type of triangle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "triangleMarkerTemplate"): any;
    /**
     * Sets the template to use for triangle markers on the chart.
     * Defines the marker template used for
     * series with a marker type of triangle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "triangleMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for pyramid markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pyramid.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "pyramidMarkerTemplate"): any;
    /**
     * Sets the template to use for pyramid markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pyramid.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "pyramidMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for square markers on the chart.
     * Defines the marker template used for
     * series with a marker type of square.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "squareMarkerTemplate"): any;
    /**
     * Sets the template to use for square markers on the chart.
     * Defines the marker template used for
     * series with a marker type of square.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "squareMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for diamond markers on the chart.
     * Defines the marker template used for
     * series with a marker type of diamond.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "diamondMarkerTemplate"): any;
    /**
     * Sets the template to use for diamond markers on the chart.
     * Defines the marker template used for
     * series with a marker type of diamond.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "diamondMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for pentagon markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pentagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "pentagonMarkerTemplate"): any;
    /**
     * Sets the template to use for pentagon markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pentagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "pentagonMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for hexagon markers on the chart.
     * Defines the marker template used for
     * series with a marker type of hexagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "hexagonMarkerTemplate"): any;
    /**
     * Sets the template to use for hexagon markers on the chart.
     * Defines the marker template used for
     * series with a marker type of hexagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "hexagonMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for tetragram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of tetragram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "tetragramMarkerTemplate"): any;
    /**
     * Sets the template to use for tetragram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of tetragram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "tetragramMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for pentragram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pentagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "pentagramMarkerTemplate"): any;
    /**
     * Sets the template to use for pentragram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of pentagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "pentagramMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for hexagram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of hexagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igDataChart(optionLiteral: 'option', optionName: "hexagramMarkerTemplate"): any;
    /**
     * Sets the template to use for hexagram markers on the chart.
     * Defines the marker template used for
     * series with a marker type of hexagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "hexagramMarkerTemplate", optionValue: any): void;
    /**
     * Sets or gets the top margin to use around the chart content in the canvas.
     */
    igDataChart(optionLiteral: 'option', optionName: "topMargin"): number;
    /**
     * Sets or gets the top margin to use around the chart content in the canvas.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "topMargin", optionValue: number): void;
    /**
     * Sets or gets the left margin to use around the chart content in the canvas.
     */
    igDataChart(optionLiteral: 'option', optionName: "leftMargin"): number;
    /**
     * Sets or gets the left margin to use around the chart content in the canvas.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "leftMargin", optionValue: number): void;
    /**
     * Sets or gets the right margin to use around the chart content in the canvas.
     */
    igDataChart(optionLiteral: 'option', optionName: "rightMargin"): number;
    /**
     * Sets or gets the right margin to use around the chart content in the canvas.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "rightMargin", optionValue: number): void;
    /**
     * Sets or gets the bottom margin to use around the chart content in the canvas.
     */
    igDataChart(optionLiteral: 'option', optionName: "bottomMargin"): number;
    /**
     * Sets or gets the bottom margin to use around the chart content in the canvas.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "bottomMargin", optionValue: number): void;
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the chart.
     */
    igDataChart(optionLiteral: 'option', optionName: "autoMarginWidth"): number;
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the chart.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "autoMarginWidth", optionValue: number): void;
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the chart.
     */
    igDataChart(optionLiteral: 'option', optionName: "autoMarginHeight"): number;
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the chart.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "autoMarginHeight", optionValue: number): void;
    /**
     * Gets  whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
     */
    igDataChart(optionLiteral: 'option', optionName: "isSquare"): boolean;
    /**
     * Sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "isSquare", optionValue: boolean): void;
    /**
     * Gets  the GridMode property.
     */
    igDataChart(optionLiteral: 'option', optionName: "gridMode"): any;
    /**
     * Sets the GridMode property.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "gridMode", optionValue: any): void;
    /**
     * Gets  the Brushes property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igDataChart(optionLiteral: 'option', optionName: "brushes"): any;
    /**
     * Sets the Brushes property.
     * The brushes property defines the palette from which automatically assigned series brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;
    /**
     * Gets  the MarkerBrushes property.
     * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igDataChart(optionLiteral: 'option', optionName: "markerBrushes"): any;
    /**
     * Sets the MarkerBrushes property.
     * The marker brushes property defines the palette from which automatically assigned marker brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "markerBrushes", optionValue: any): void;
    /**
     * Gets  the Outlines property.
     * The outlines property defines the palette from which automatically assigned series outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igDataChart(optionLiteral: 'option', optionName: "outlines"): any;
    /**
     * Sets the Outlines property.
     * The outlines property defines the palette from which automatically assigned series outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;
    /**
     * Gets  the MarkerOutlines property.
     * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igDataChart(optionLiteral: 'option', optionName: "markerOutlines"): any;
    /**
     * Sets the MarkerOutlines property.
     * The marker outlines property defines the palette from which automatically assigned marker outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "markerOutlines", optionValue: any): void;
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igDataChart(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igDataChart(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
     */
    igDataChart(optionLiteral: 'option', optionName: "size"): any;
    /**
     * To set both dimensions of the chart simultaneously an object with a width and height property can be provided
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "size", optionValue: any): void;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    igDataChart(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    igDataChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;
    /**
     * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    igDataChart(optionLiteral: 'option', optionName: "dataSourceType"): string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;
    /**
     * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
     */
    igDataChart(optionLiteral: 'option', optionName: "responseDataKey"): string;
    /**
     * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;
    /**
     * Set to true in order to disable any interactions with the plot surface.
     */
    igDataChart(optionLiteral: 'option', optionName: "isSurfaceInteractionDisabled"): boolean;
    /**
     * Set to true in order to disable any interactions with the plot surface.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "isSurfaceInteractionDisabled", optionValue: boolean): void;
    /**
     * Set to true in order to override the default behavior in which series do not animate if an axis range changes
     */
    igDataChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges"): boolean;
    /**
     * Set to true in order to override the default behavior in which series do not animate if an axis range changes
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "animateSeriesWhenAxisRangeChanges", optionValue: boolean): void;
    /**
     * The title to display for the component.
     */
    igDataChart(optionLiteral: 'option', optionName: "title"): string;
    /**
     * The title to display for the component.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "title", optionValue: string): void;
    /**
     * The subtitle to display for the component.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitle"): string;
    /**
     * The subtitle to display for the component.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitle", optionValue: string): void;
    /**
     * The css font property to use for the title.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleTextStyle"): string;
    /**
     * The css font property to use for the title.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleTextStyle", optionValue: string): void;
    /**
     * The top margin to use for the title.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleTopMargin"): number;
    /**
     * The top margin to use for the title.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleTopMargin", optionValue: number): void;
    /**
     * The left margin to use for the title.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleLeftMargin"): number;
    /**
     * The left margin to use for the title.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleLeftMargin", optionValue: number): void;
    /**
     * The right margin to use for the title.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleRightMargin"): number;
    /**
     * The right margin to use for the title.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleRightMargin", optionValue: number): void;
    /**
     * The bottom margin to use for the title.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleBottomMargin"): number;
    /**
     * The bottom margin to use for the title.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleBottomMargin", optionValue: number): void;
    /**
     * The css font property to use for the title.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleTextStyle"): string;
    /**
     * The css font property to use for the title.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleTextStyle", optionValue: string): void;
    /**
     * The top margin to use for the subtitle.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleTopMargin"): number;
    /**
     * The top margin to use for the subtitle.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleTopMargin", optionValue: number): void;
    /**
     * The left margin to use for the subtitle.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleLeftMargin"): number;
    /**
     * The left margin to use for the subtitle.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleLeftMargin", optionValue: number): void;
    /**
     * The right margin to use for the subtitle.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleRightMargin"): number;
    /**
     * The right margin to use for the subtitle.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleRightMargin", optionValue: number): void;
    /**
     * The bottom margin to use for the subtitle.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleBottomMargin"): number;
    /**
     * The bottom margin to use for the subtitle.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleBottomMargin", optionValue: number): void;
    /**
     * The color to use for the title.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleTextColor"): any;
    /**
     * The color to use for the title.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleTextColor", optionValue: any): void;
    /**
     * The color to use for the subtitle.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleTextColor"): any;
    /**
     * The color to use for the subtitle.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleTextColor", optionValue: any): void;
    /**
     * The horizontal alignment to use for the title.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleHorizontalAlignment"): any;
    /**
     * The horizontal alignment to use for the title.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "titleHorizontalAlignment", optionValue: any): void;
    /**
     * The horizontal alignment to use for the subtitle.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleHorizontalAlignment"): any;
    /**
     * The horizontal alignment to use for the subtitle.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "subtitleHorizontalAlignment", optionValue: any): void;
    /**
     * The length, in milliseconds of the highlighting transition.
     */
    igDataChart(optionLiteral: 'option', optionName: "highlightingTransitionDuration"): number;
    /**
     * The length, in milliseconds of the highlighting transition.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "highlightingTransitionDuration", optionValue: number): void;
    /**
     * Whether the series viewer should use cached tiles during zooms rather than the default live content.
     */
    igDataChart(optionLiteral: 'option', optionName: "useTiledZooming"): boolean;
    /**
     * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "useTiledZooming", optionValue: boolean): void;
    /**
     * Whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
     */
    igDataChart(optionLiteral: 'option', optionName: "preferHigherResolutionTiles"): boolean;
    /**
     * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "preferHigherResolutionTiles", optionValue: boolean): void;
    /**
     * The maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
     */
    igDataChart(optionLiteral: 'option', optionName: "zoomTileCacheSize"): number;
    /**
     * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "zoomTileCacheSize", optionValue: number): void;
    /**
     * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
     */
    igDataChart(optionLiteral: 'option', optionName: "legend"): IgDataChartLegend;
    /**
     * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "legend", optionValue: IgDataChartLegend): void;
    /**
     * An array of axis objects
     */
    igDataChart(optionLiteral: 'option', optionName: "axes"): IgDataChartAxes[];
    /**
     * An array of axis objects
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "axes", optionValue: IgDataChartAxes[]): void;
    /**
     * An array of series objects
     */
    igDataChart(optionLiteral: 'option', optionName: "series"): IgDataChartSeries[];
    /**
     * An array of series objects
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "series", optionValue: IgDataChartSeries[]): void;
    /**
     * The swatch used to style this widget
     */
    igDataChart(optionLiteral: 'option', optionName: "theme"): string;
    /**
     * The swatch used to style this widget
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "theme", optionValue: string): void;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igDataChart(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igDataChart(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igDataChart(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igDataChart(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     */
    igDataChart(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;
    /**
     * Occurs when the cursors are moved over a series in this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesCursorMouseMove"): SeriesCursorMouseMoveEvent;
    /**
     * Occurs when the cursors are moved over a series in this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesCursorMouseMove", optionValue: SeriesCursorMouseMoveEvent): void;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeftButtonDown"): SeriesMouseLeftButtonDownEvent;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeftButtonDown", optionValue: SeriesMouseLeftButtonDownEvent): void;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeftButtonUp"): SeriesMouseLeftButtonUpEvent;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeftButtonUp", optionValue: SeriesMouseLeftButtonUpEvent): void;
    /**
     * Occurs when the left mouse pointer moves while over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseMove"): SeriesMouseMoveEvent;
    /**
     * Occurs when the left mouse pointer moves while over an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseMove", optionValue: SeriesMouseMoveEvent): void;
    /**
     * Occurs when the left mouse pointer enters an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseEnter"): SeriesMouseEnterEvent;
    /**
     * Occurs when the left mouse pointer enters an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseEnter", optionValue: SeriesMouseEnterEvent): void;
    /**
     * Occurs when the left mouse pointer leaves an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeave"): SeriesMouseLeaveEvent;
    /**
     * Occurs when the left mouse pointer leaves an element of this chart.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "seriesMouseLeave", optionValue: SeriesMouseLeaveEvent): void;
    /**
     * Occurs just after the current Chart's window rectangle is changed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowRectChanged"): WindowRectChangedEvent;
    /**
     * Occurs just after the current Chart's window rectangle is changed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "windowRectChanged", optionValue: WindowRectChangedEvent): void;
    /**
     * Occurs just after the current Chart's grid area rectangle is changed.
     * The grid area may change as the result of the Chart being resized, or
     * of an axis being added or changing size, possibly in another Chart.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     */
    igDataChart(optionLiteral: 'option', optionName: "gridAreaRectChanged"): GridAreaRectChangedEvent;
    /**
     * Occurs just after the current Chart's grid area rectangle is changed.
     * The grid area may change as the result of the Chart being resized, or
     * of an axis being added or changing size, possibly in another Chart.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "gridAreaRectChanged", optionValue: GridAreaRectChangedEvent): void;
    /**
     * Raised when the chart's processing for an update has completed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     */
    igDataChart(optionLiteral: 'option', optionName: "refreshCompleted"): RefreshCompletedEvent;
    /**
     * Raised when the chart's processing for an update has completed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "refreshCompleted", optionValue: RefreshCompletedEvent): void;
    /**
     * Event fired when the range of and axis on the chart changes.
     * Function takes arguments evt and ui.
     * Use ui.axis to get reference to current chart axis object.
     * Use ui.chart to get reference to chart object.
     * Use ui.newMaximumValue to get new maximum value.
     * Use ui.newMinimumValue to get new minimum value.
     * Use ui.oldMaximumValue to get old maximum value.
     * Use ui.oldMinimumValue to get old minimum value.
     */
    igDataChart(optionLiteral: 'option', optionName: "axisRangeChanged"): AxisRangeChangedEvent;
    /**
     * Event fired when the range of and axis on the chart changes.
     * Function takes arguments evt and ui.
     * Use ui.axis to get reference to current chart axis object.
     * Use ui.chart to get reference to chart object.
     * Use ui.newMaximumValue to get new maximum value.
     * Use ui.newMinimumValue to get new minimum value.
     * Use ui.oldMaximumValue to get old maximum value.
     * Use ui.oldMinimumValue to get old minimum value.
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "axisRangeChanged", optionValue: AxisRangeChangedEvent): void;
    /**
     * Handle this event in order to specify which columns the Typical price calculation is based on.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.count to get the number of positions that should be calculated from the start.
     * Use ui.position to get the beginning position that should be calculated from.
     * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
     * Use ui.dataSource to get the data to use for the calculation.
     * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
     */
    igDataChart(optionLiteral: 'option', optionName: "typicalBasedOn"): TypicalBasedOnEvent;
    /**
     * Handle this event in order to specify which columns the Typical price calculation is based on.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.count to get the number of positions that should be calculated from the start.
     * Use ui.position to get the beginning position that should be calculated from.
     * Use ui.supportingCalculations to get the supporting calculations to use in the calculation.
     * Use ui.dataSource to get the data to use for the calculation.
     * Use ui.basedOn to specify which columns changing will invalidate the series and cause it to be recalculated.
     *
     * @optionValue New value to be set.
     */
    igDataChart(optionLiteral: 'option', optionName: "typicalBasedOn", optionValue: TypicalBasedOnEvent): void;
    /**
     * Event fired when the progressive loading state of the series has changed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.currentStatus to get current status.
     */
    igDataChart(optionLiteral: 'option', optionName: "progressiveLoadStatusChanged"): ProgressiveLoadStatusChangedEvent;
    /**
     * Event fired when the progressive loading state of the series has changed.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.currentStatus to get current status.
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "progressiveLoadStatusChanged", optionValue: ProgressiveLoadStatusChangedEvent): void;
    /**
     * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.startIndex to get the start index for the current items.
     * Use ui.endIndex to get the end index for the current items.
     * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
     * Use ui.startDate if ui.hasDateRange is true.
     * Use ui.endDate if ui.hasDateRange is true.
     * Use ui.getItems to get all the items associated with the event (only if necessary).
     * Use ui.fill to get or set the fill to use for the current item.
     * Use ui.stroke to get or set the stroke to use for the current item.
     * Use ui.opacity to get or set the opacity to use for the current item.
     * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
     * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
     * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
     * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
     * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
     */
    igDataChart(optionLiteral: 'option', optionName: "assigningCategoryStyle"): AssigningCategoryStyleEvent;
    /**
     * Event fired to allow you to override the style of items in a category or financial series. Only fires if you set allowCustomCategoryStyle to true for a series.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.startIndex to get the start index for the current items.
     * Use ui.endIndex to get the end index for the current items.
     * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
     * Use ui.startDate if ui.hasDateRange is true.
     * Use ui.endDate if ui.hasDateRange is true.
     * Use ui.getItems to get all the items associated with the event (only if necessary).
     * Use ui.fill to get or set the fill to use for the current item.
     * Use ui.stroke to get or set the stroke to use for the current item.
     * Use ui.opacity to get or set the opacity to use for the current item.
     * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
     * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
     * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
     * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
     * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "assigningCategoryStyle", optionValue: AssigningCategoryStyleEvent): void;
    /**
     * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.startIndex to get the start index for the current items.
     * Use ui.endIndex to get the end index for the current items.
     * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
     * Use ui.startDate if ui.hasDateRange is true.
     * Use ui.endDate if ui.hasDateRange is true.
     * Use ui.getItems to get all the items associated with the event (only if necessary).
     * Use ui.fill to get or set the fill to use for the current item.
     * Use ui.stroke to get or set the stroke to use for the current item.
     * Use ui.opacity to get or set the opacity to use for the current item.
     * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
     * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
     * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
     * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
     * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
     */
    igDataChart(optionLiteral: 'option', optionName: "assigningCategoryMarkerStyle"): AssigningCategoryMarkerStyleEvent;
    /**
     * Event fired to allow you to override the style of markers for the items in a category or financial series. Only fires if you set allowCustomCategoryMarkerStyle to true for a series.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.startIndex to get the start index for the current items.
     * Use ui.endIndex to get the end index for the current items.
     * Use ui.hasDateRange to tell if you should use the startDate and endDate to know the current items instead of startIndex/endIndex.
     * Use ui.startDate if ui.hasDateRange is true.
     * Use ui.endDate if ui.hasDateRange is true.
     * Use ui.getItems to get all the items associated with the event (only if necessary).
     * Use ui.fill to get or set the fill to use for the current item.
     * Use ui.stroke to get or set the stroke to use for the current item.
     * Use ui.opacity to get or set the opacity to use for the current item.
     * Use ui.highlightingHandled to set if the default highlighting behavior should not run, given that you are handling it in this event.
     * Use ui.maxAllSeriesHighlightingProgress to get the maximum highlighted progress across all series.
     * Use ui.sumAllSeriesHighlightingProgress to get the sum of highlighting progtess across all series.
     * Use ui.highlightingInfo.progress to tell what the highlighting progress is for the current item, if highlightingInfo is not null.
     * Use ui.highlightingInfo.state to tell whether the current item is currently highlighting in or out, is static, if highlightingInfo is not null.
     *
     * @optionValue Define event handler function.
     */
    igDataChart(optionLiteral: 'option', optionName: "assigningCategoryMarkerStyle", optionValue: AssigningCategoryMarkerStyleEvent): void;
    igDataChart(options: IgDataChart): JQuery;
    igDataChart(optionLiteral: 'option', optionName: string): any;
    igDataChart(optionLiteral: 'option', options: IgDataChart): JQuery;
    igDataChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igDataChart(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igPieChart(methodName: "option"): void;
    igPieChart(methodName: "addItem", item: Object): void;
    igPieChart(methodName: "insertItem", item: Object, index: number): void;
    igPieChart(methodName: "removeItem", index: number): void;
    igPieChart(methodName: "setItem", index: number, item: Object): void;
    igPieChart(methodName: "exportImage", width?: Object, height?: Object): Object;
    igPieChart(methodName: "destroy"): void;
    igPieChart(methodName: "id"): string;
    igPieChart(methodName: "widget"): void;
    igPieChart(methodName: "print"): void;
    igPieChart(methodName: "exportVisualData"): void;
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igPieChart(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igPieChart(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    igPieChart(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    igPieChart(optionLiteral: 'option', optionName: "dataSourceUrl"): string;
    /**
     * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    igPieChart(optionLiteral: 'option', optionName: "dataSourceType"): string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;
    /**
     * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
     */
    igPieChart(optionLiteral: 'option', optionName: "responseDataKey"): string;
    /**
     * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;
    /**
     * Gets or Sets the property name that contains the values.
     */
    igPieChart(optionLiteral: 'option', optionName: "valueMemberPath"): string;
    /**
     * Sets the property name that contains the values.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "valueMemberPath", optionValue: string): void;
    /**
     * Gets  the property name that contains the labels.
     */
    igPieChart(optionLiteral: 'option', optionName: "labelMemberPath"): string;
    /**
     * Sets the property name that contains the labels.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "labelMemberPath", optionValue: string): void;
    /**
     * Gets  the position of chart labels.
     */
    igPieChart(optionLiteral: 'option', optionName: "labelsPosition"): any;
    /**
     * Sets the position of chart labels.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "labelsPosition", optionValue: any): void;
    /**
     * Gets  whether the leader lines are visible.
     */
    igPieChart(optionLiteral: 'option', optionName: "leaderLineVisibility"): any;
    /**
     * Sets whether the leader lines are visible.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "leaderLineVisibility", optionValue: any): void;
    /**
     * Gets  what type of leader lines will be used for the outside end labels.
     */
    igPieChart(optionLiteral: 'option', optionName: "leaderLineType"): any;
    /**
     * Sets what type of leader lines will be used for the outside end labels.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "leaderLineType", optionValue: any): void;
    /**
     * Gets  the margin between a label and the end of its leader line.
     */
    igPieChart(optionLiteral: 'option', optionName: "leaderLineMargin"): number;
    /**
     * Sets the margin between a label and the end of its leader line.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "leaderLineMargin", optionValue: number): void;
    /**
     * Gets  the threshold value that determines if slices are grouped into the Others slice.
     */
    igPieChart(optionLiteral: 'option', optionName: "othersCategoryThreshold"): number;
    /**
     * Sets the threshold value that determines if slices are grouped into the Others slice.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "othersCategoryThreshold", optionValue: number): void;
    /**
     * Gets  the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
     * Use context.item to get the item associated with the slice, if any.
     * Use context.actualItemBrush to get the brush used to paint the slice.
     * Use context.outline to get the outline brush used to paint the slice.
     * Use context.itemLabel to get the label object that would be used for the slice.
     * Use context.percentValue to see the percentage value that is associated with the slice.
     * Use context.isOthersSlice to tell if the associated slice is the others slice.
     * Should return a string value that should be used for the label.
     */
    igPieChart(optionLiteral: 'option', optionName: "formatLabel"): Function;
    /**
     * Sets the function to use to transform a pie slice data context into a label for the slice. Function takes one argument of type object.
     * Use context.item to get the item associated with the slice, if any.
     * Use context.actualItemBrush to get the brush used to paint the slice.
     * Use context.outline to get the outline brush used to paint the slice.
     * Use context.itemLabel to get the label object that would be used for the slice.
     * Use context.percentValue to see the percentage value that is associated with the slice.
     * Use context.isOthersSlice to tell if the associated slice is the others slice.
     * Should return a string value that should be used for the label.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "formatLabel", optionValue: Function): void;
    /**
     * Gets  a style object that can be used to override the style settings on the others category slice.
     */
    igPieChart(optionLiteral: 'option', optionName: "othersCategoryStyle"): any;
    /**
     * Sets a style object that can be used to override the style settings on the others category slice.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "othersCategoryStyle", optionValue: any): void;
    /**
     * Gets  whether to use numeric or percent-based threshold value.
     */
    igPieChart(optionLiteral: 'option', optionName: "othersCategoryType"): any;
    /**
     * Sets whether to use numeric or percent-based threshold value.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "othersCategoryType", optionValue: any): void;
    /**
     * Gets  the label of the Others slice.
     */
    igPieChart(optionLiteral: 'option', optionName: "othersCategoryText"): string;
    /**
     * Sets the label of the Others slice.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "othersCategoryText", optionValue: string): void;
    /**
     * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
     */
    igPieChart(optionLiteral: 'option', optionName: "explodedRadius"): number;
    /**
     * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "explodedRadius", optionValue: number): void;
    /**
     * Gets  the scaling factor of the chart's radius. Value between 0 and 1.
     */
    igPieChart(optionLiteral: 'option', optionName: "radiusFactor"): number;
    /**
     * Sets the scaling factor of the chart's radius. Value between 0 and 1.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "radiusFactor", optionValue: number): void;
    /**
     * Gets  whether the slices can be selected.
     */
    igPieChart(optionLiteral: 'option', optionName: "allowSliceSelection"): boolean;
    /**
     * Sets whether the slices can be selected.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "allowSliceSelection", optionValue: boolean): void;
    /**
     * Gets  whether the slices can be exploded.
     */
    igPieChart(optionLiteral: 'option', optionName: "allowSliceExplosion"): boolean;
    /**
     * Sets whether the slices can be exploded.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "allowSliceExplosion", optionValue: boolean): void;
    /**
     * Gets  the collection of exploded slice indices.
     * Should be an array of integers that indicate the indexes of the slices to explode.
     */
    igPieChart(optionLiteral: 'option', optionName: "explodedSlices"): any[];
    /**
     * Sets the collection of exploded slice indices.
     * Should be an array of integers that indicate the indexes of the slices to explode.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "explodedSlices", optionValue: any[]): void;
    /**
     * Whether the chart should render a tooltip.
     */
    igPieChart(optionLiteral: 'option', optionName: "showTooltip"): boolean;
    /**
     * Whether the chart should render a tooltip.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "showTooltip", optionValue: boolean): void;
    /**
     * The name of template or the template itself that chart tooltip will use to render.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipTemplate"): string;
    /**
     * The name of template or the template itself that chart tooltip will use to render.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;
    /**
     * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
     */
    igPieChart(optionLiteral: 'option', optionName: "legend"): IgPieChartLegend;
    /**
     * Can be any valid options accepted by $.ig.ChartLegend, or an instance of an $.ig.ChartLegend itself.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "legend", optionValue: IgPieChartLegend): void;
    /**
     * Gets  the pixel amount, by which the labels are offset from the edge of the slices.
     */
    igPieChart(optionLiteral: 'option', optionName: "labelExtent"): number;
    /**
     * Sets the pixel amount, by which the labels are offset from the edge of the slices.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "labelExtent", optionValue: number): void;
    /**
     * Gets  the starting angle of the chart.
     * The default zero value is equivalent to 3 o'clock.
     */
    igPieChart(optionLiteral: 'option', optionName: "startAngle"): number;
    /**
     * Sets the starting angle of the chart.
     * The default zero value is equivalent to 3 o'clock.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "startAngle", optionValue: number): void;
    /**
     * Gets  the rotational direction of the chart.
     */
    igPieChart(optionLiteral: 'option', optionName: "sweepDirection"): any;
    /**
     * Sets the rotational direction of the chart.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "sweepDirection", optionValue: any): void;
    /**
     * Gets  the style used when a slice is selected.
     */
    igPieChart(optionLiteral: 'option', optionName: "selectedStyle"): any;
    /**
     * Sets the style used when a slice is selected.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "selectedStyle", optionValue: any): void;
    /**
     * Gets  the Brushes property.
     * The brushes property defines the palette from which automatically assigned slice brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igPieChart(optionLiteral: 'option', optionName: "brushes"): any;
    /**
     * Sets the Brushes property.
     * The brushes property defines the palette from which automatically assigned slice brushes are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;
    /**
     * Gets  the Outlines property.
     * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igPieChart(optionLiteral: 'option', optionName: "outlines"): any;
    /**
     * Sets the Outlines property.
     * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
     * The value provided should be an array of css color strings. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;
    /**
     * Gets  the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the chart object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igPieChart(optionLiteral: 'option', optionName: "legendItemTemplate"): any;
    /**
     * Sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the chart object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "legendItemTemplate", optionValue: any): void;
    /**
     * Gets  the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the chart object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igPieChart(optionLiteral: 'option', optionName: "legendItemBadgeTemplate"): any;
    /**
     * Sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the chart object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "legendItemBadgeTemplate", optionValue: any): void;
    /**
     * Overrides the style used for text in the pie chart.
     */
    igPieChart(optionLiteral: 'option', optionName: "textStyle"): string;
    /**
     * Overrides the style used for text in the pie chart.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "textStyle", optionValue: string): void;
    /**
     * The swatch used to style this widget
     */
    igPieChart(optionLiteral: 'option', optionName: "theme"): string;
    /**
     * The swatch used to style this widget
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "theme", optionValue: string): void;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     *
     * @optionValue Define event handler function.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     *
     * @optionValue Define event handler function.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     *
     * @optionValue Define event handler function.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current pie chart item.
     * Use ui.chart to get reference to chart object.
     *
     * @optionValue Define event handler function.
     */
    igPieChart(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     */
    igPieChart(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     *
     * @optionValue Define event handler function.
     */
    igPieChart(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;
    /**
     * Raised when the slice is clicked.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.slice to get reference to slice object.
     * Use ui.slice.item to get reference to current pie chart item.
     * Use ui.slice.isExploded to get is the slice exploded.
     * Use ui.slice.isSelected to get is the slice selected.
     */
    igPieChart(optionLiteral: 'option', optionName: "sliceClick"): SliceClickEvent;
    /**
     * Raised when the slice is clicked.
     * Function takes arguments evt and ui.
     * Use ui.chart to get reference to chart object.
     * Use ui.slice to get reference to slice object.
     * Use ui.slice.item to get reference to current pie chart item.
     * Use ui.slice.isExploded to get is the slice exploded.
     * Use ui.slice.isSelected to get is the slice selected.
     *
     * @optionValue New value to be set.
     */
    igPieChart(optionLiteral: 'option', optionName: "sliceClick", optionValue: SliceClickEvent): void;
    igPieChart(options: IgPieChart): JQuery;
    igPieChart(optionLiteral: 'option', optionName: string): any;
    igPieChart(optionLiteral: 'option', options: IgPieChart): JQuery;
    igPieChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igPieChart(methodName: string, ...methodParams: any[]): any;
}
interface LegendItemMouseLeftButtonDownEvent {
    (event: Event, ui: LegendItemMouseLeftButtonDownEventUIParam): void;
}
interface LegendItemMouseLeftButtonDownEventUIParam {
    /**
     * Used to get reference to current legend object.
     */
    legend?: any;
    /**
     * Used to get reference to chart owner object.
     */
    chart?: any;
    /**
     * Used to get reference to current series owner object.
     */
    series?: any;
    /**
     * Used to get legend item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series owner brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get reference to chart item related to event.
     */
    item?: any;
}
interface LegendItemMouseLeftButtonUpEvent {
    (event: Event, ui: LegendItemMouseLeftButtonUpEventUIParam): void;
}
interface LegendItemMouseLeftButtonUpEventUIParam {
    /**
     * Used to get reference to current legend object.
     */
    legend?: any;
    /**
     * Used to get reference to chart owner object.
     */
    chart?: any;
    /**
     * Used to get reference to current series owner object.
     */
    series?: any;
    /**
     * Used to get legend item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series owner brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get reference to chart item related to event.
     */
    item?: any;
}
interface LegendItemMouseEnterEvent {
    (event: Event, ui: LegendItemMouseEnterEventUIParam): void;
}
interface LegendItemMouseEnterEventUIParam {
    /**
     * Used to get reference to current legend object.
     */
    legend?: any;
    /**
     * Used to get reference to chart owner object.
     */
    chart?: any;
    /**
     * Used to get reference to current series owner object.
     */
    series?: any;
    /**
     * Used to get legend item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series owner brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get reference to chart item related to event.
     */
    item?: any;
}
interface LegendItemMouseLeaveEvent {
    (event: Event, ui: LegendItemMouseLeaveEventUIParam): void;
}
interface LegendItemMouseLeaveEventUIParam {
    /**
     * Used to get reference to current legend object.
     */
    legend?: any;
    /**
     * Used to get reference to chart owner object.
     */
    chart?: any;
    /**
     * Used to get reference to current series owner object.
     */
    series?: any;
    /**
     * Used to get legend item brush.
     */
    actualItemBrush?: any;
    /**
     * Used to get series owner brush.
     */
    actualSeriesBrush?: any;
    /**
     * Used to get reference to chart item related to event.
     */
    item?: any;
}
interface IgChartLegend {
    /**
     * Type of the legend.
     *
     * Valid values:
     * "item" Specify the legend as item legend. It displays a legend item for each pie in the igPieChart control.
     * "legend" Specify the legend as legend. It is supported by all types of series in the igDataChart control.
     * "scale" Specify the legend as a scale legend. It displays a color/size scale for the bubble series.
     */
    type?: any;
    /**
     * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * The swatch used to style this widget
     */
    theme?: string;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     */
    legendItemMouseLeftButtonDown?: LegendItemMouseLeftButtonDownEvent;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     */
    legendItemMouseLeftButtonUp?: LegendItemMouseLeftButtonUpEvent;
    /**
     * Occurs when the left mouse pointer enters an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     */
    legendItemMouseEnter?: LegendItemMouseEnterEvent;
    /**
     * Occurs when the left mouse pointer leaves an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     */
    legendItemMouseLeave?: LegendItemMouseLeaveEvent;
    /**
     * Option for igChartLegend
     */
    [optionName: string]: any;
}
interface IgChartLegendMethods {
    exportVisualData(): void;
    /**
     * Destroys the widget.
     */
    destroy(): void;
    /**
     * Returns the element holding the legend.
     */
    widget(): void;
    /**
     * Returns the ID of the DOM element holding the legend.
     */
    id(): string;
}
interface JQuery {
    data(propertyName: "igChartLegend"): IgChartLegendMethods;
}
interface JQuery {
    igChartLegend(methodName: "exportVisualData"): void;
    igChartLegend(methodName: "destroy"): void;
    igChartLegend(methodName: "widget"): void;
    igChartLegend(methodName: "id"): string;
    /**
     * Type of the legend.
     */
    igChartLegend(optionLiteral: 'option', optionName: "type"): any;
    /**
     * Type of the legend.
     *
     * @optionValue New value to be set.
     */
    igChartLegend(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igChartLegend(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the legend. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igChartLegend(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igChartLegend(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the legend. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igChartLegend(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * The swatch used to style this widget
     */
    igChartLegend(optionLiteral: 'option', optionName: "theme"): string;
    /**
     * The swatch used to style this widget
     *
     * @optionValue New value to be set.
     */
    igChartLegend(optionLiteral: 'option', optionName: "theme", optionValue: string): void;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     */
    igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeftButtonDown"): LegendItemMouseLeftButtonDownEvent;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     *
     * @optionValue New value to be set.
     */
    igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeftButtonDown", optionValue: LegendItemMouseLeftButtonDownEvent): void;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     */
    igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeftButtonUp"): LegendItemMouseLeftButtonUpEvent;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     *
     * @optionValue New value to be set.
     */
    igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeftButtonUp", optionValue: LegendItemMouseLeftButtonUpEvent): void;
    /**
     * Occurs when the left mouse pointer enters an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     */
    igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseEnter"): LegendItemMouseEnterEvent;
    /**
     * Occurs when the left mouse pointer enters an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     *
     * @optionValue New value to be set.
     */
    igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseEnter", optionValue: LegendItemMouseEnterEvent): void;
    /**
     * Occurs when the left mouse pointer leaves an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     */
    igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeave"): LegendItemMouseLeaveEvent;
    /**
     * Occurs when the left mouse pointer leaves an element of this legend.
     * Function takes arguments evt and ui.
     * Use ui.legend to get reference to current legend object.
     * Use ui.chart to get reference to chart owner object.
     * Use ui.series to get reference to current series owner object.
     * Use ui.actualItemBrush to get legend item brush.
     * Use ui.actualSeriesBrush to get series owner brush.
     * Use ui.item to get reference to chart item related to event.
     *
     * @optionValue New value to be set.
     */
    igChartLegend(optionLiteral: 'option', optionName: "legendItemMouseLeave", optionValue: LegendItemMouseLeaveEvent): void;
    igChartLegend(options: IgChartLegend): JQuery;
    igChartLegend(optionLiteral: 'option', optionName: string): any;
    igChartLegend(optionLiteral: 'option', options: IgChartLegend): JQuery;
    igChartLegend(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igChartLegend(methodName: string, ...methodParams: any[]): any;
}
interface ColorSelectedEvent {
    (event: Event, ui: ColorSelectedEventUIParam): void;
}
interface ColorSelectedEventUIParam {
}
interface IgColorPicker {
    /**
     * Default colors.
     */
    colors?: any[];
    /**
     * Standard colors.
     */
    standardColors?: any[];
    /**
     * Event fired after the color is selected.
     */
    colorSelected?: ColorSelectedEvent;
    /**
     * Option for igColorPicker
     */
    [optionName: string]: any;
}
interface IgColorPickerMethods {
    /**
     * Select a given color to the widget.
     *
     * @param color
     */
    selectColor(color: Object): void;
}
interface JQuery {
    data(propertyName: "igColorPicker"): IgColorPickerMethods;
}
interface JQuery {
    igColorPicker(methodName: "selectColor", color: Object): void;
    /**
     * Default colors.
     */
    igColorPicker(optionLiteral: 'option', optionName: "colors"): any[];
    /**
     * Default colors.
     *
     * @optionValue New value to be set.
     */
    igColorPicker(optionLiteral: 'option', optionName: "colors", optionValue: any[]): void;
    /**
     * Standard colors.
     */
    igColorPicker(optionLiteral: 'option', optionName: "standardColors"): any[];
    /**
     * Standard colors.
     *
     * @optionValue New value to be set.
     */
    igColorPicker(optionLiteral: 'option', optionName: "standardColors", optionValue: any[]): void;
    /**
     * Event fired after the color is selected.
     */
    igColorPicker(optionLiteral: 'option', optionName: "colorSelected"): ColorSelectedEvent;
    /**
     * Event fired after the color is selected.
     *
     * @optionValue Define event handler function.
     */
    igColorPicker(optionLiteral: 'option', optionName: "colorSelected", optionValue: ColorSelectedEvent): void;
    igColorPicker(options: IgColorPicker): JQuery;
    igColorPicker(optionLiteral: 'option', optionName: string): any;
    igColorPicker(optionLiteral: 'option', options: IgColorPicker): JQuery;
    igColorPicker(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igColorPicker(methodName: string, ...methodParams: any[]): any;
}
interface ClickEvent {
    (event: Event, ui: ClickEventUIParam): void;
}
interface ClickEventUIParam {
}
interface ExpandedEvent {
    (event: Event, ui: ExpandedEventUIParam): void;
}
interface ExpandedEventUIParam {
}
interface ExpandingEvent {
    (event: Event, ui: ExpandingEventUIParam): void;
}
interface ExpandingEventUIParam {
}
interface CollapsedEvent {
    (event: Event, ui: CollapsedEventUIParam): void;
}
interface CollapsedEventUIParam {
}
interface CollapsingEvent {
    (event: Event, ui: CollapsingEventUIParam): void;
}
interface CollapsingEventUIParam {
}
interface IgColorPickerSplitButton {
    /**
     * Button items.
     */
    items?: any[];
    /**
     * Default color.
     */
    defaultColor?: string;
    /**
     * With or withour icon.
     */
    hasDefaultIcon?: boolean;
    /**
     * Default button item.
     */
    defaultItemName?: string;
    /**
     * Specifies whether the default button will be switched when another button is selected.
     */
    swapDefaultEnabled?: boolean;
    click?: ClickEvent;
    /**
     * Event fired after the button is expanded.
     */
    expanded?: ExpandedEvent;
    /**
     * Event fired before a button item is expanded.
     */
    expanding?: ExpandingEvent;
    /**
     * Event fired after the button is collapsed.
     */
    collapsed?: CollapsedEvent;
    /**
     * Event fired before a button item is collapsed.
     */
    collapsing?: CollapsingEvent;
    /**
     * Option for igColorPickerSplitButton
     */
    [optionName: string]: any;
}
interface IgColorPickerSplitButtonMethods {
    /**
     * Collapse the widget.
     *
     * @param e
     */
    collapse(e: Object): void;
    /**
     * Expands the widget.
     *
     * @param e
     */
    expand(e: Object): void;
    /**
     * Sets the color of the split button
     *
     * @param color
     */
    setColor(color: Object): void;
    /**
     * Destroys the widget.
     */
    destroy(): void;
    /**
     * Switch to given button.
     *
     * @param button . The button to which we are going to switch.
     */
    switchToButton(button: Object): void;
    widget(): void;
    /**
     * Toggle widget state between collapsed and expanded.
     *
     * @param e
     */
    toggle(e: Object): void;
}
interface JQuery {
    data(propertyName: "igColorPickerSplitButton"): IgColorPickerSplitButtonMethods;
}
interface JQuery {
    igColorPickerSplitButton(methodName: "collapse", e: Object): void;
    igColorPickerSplitButton(methodName: "expand", e: Object): void;
    igColorPickerSplitButton(methodName: "setColor", color: Object): void;
    igColorPickerSplitButton(methodName: "destroy"): void;
    igColorPickerSplitButton(methodName: "switchToButton", button: Object): void;
    igColorPickerSplitButton(methodName: "widget"): void;
    igColorPickerSplitButton(methodName: "toggle", e: Object): void;
    /**
     * Button items.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "items"): any[];
    /**
     * Button items.
     *
     * @optionValue New value to be set.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "items", optionValue: any[]): void;
    /**
     * Default color.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "defaultColor"): string;
    /**
     * Default color.
     *
     * @optionValue New value to be set.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "defaultColor", optionValue: string): void;
    /**
     * With or withour icon.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "hasDefaultIcon"): boolean;
    /**
     * With or withour icon.
     *
     * @optionValue New value to be set.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "hasDefaultIcon", optionValue: boolean): void;
    /**
     * Default button item.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "defaultItemName"): string;
    /**
     * Default button item.
     *
     * @optionValue New value to be set.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "defaultItemName", optionValue: string): void;
    /**
     * Gets whether the default button will be switched when another button is selected.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "swapDefaultEnabled"): boolean;
    /**
     * Sets whether the default button will be switched when another button is selected.
     *
     * @optionValue New value to be set.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "swapDefaultEnabled", optionValue: boolean): void;
    /**
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "click"): ClickEvent;
    /**
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "click", optionValue: ClickEvent): void;
    /**
     * Event fired after the button is expanded.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "expanded"): ExpandedEvent;
    /**
     * Event fired after the button is expanded.
     *
     * @optionValue Define event handler function.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "expanded", optionValue: ExpandedEvent): void;
    /**
     * Event fired before a button item is expanded.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "expanding"): ExpandingEvent;
    /**
     * Event fired before a button item is expanded.
     *
     * @optionValue Define event handler function.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "expanding", optionValue: ExpandingEvent): void;
    /**
     * Event fired after the button is collapsed.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "collapsed"): CollapsedEvent;
    /**
     * Event fired after the button is collapsed.
     *
     * @optionValue Define event handler function.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "collapsed", optionValue: CollapsedEvent): void;
    /**
     * Event fired before a button item is collapsed.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "collapsing"): CollapsingEvent;
    /**
     * Event fired before a button item is collapsed.
     *
     * @optionValue Define event handler function.
     */
    igColorPickerSplitButton(optionLiteral: 'option', optionName: "collapsing", optionValue: CollapsingEvent): void;
    igColorPickerSplitButton(options: IgColorPickerSplitButton): JQuery;
    igColorPickerSplitButton(optionLiteral: 'option', optionName: string): any;
    igColorPickerSplitButton(optionLiteral: 'option', options: IgColorPickerSplitButton): JQuery;
    igColorPickerSplitButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igColorPickerSplitButton(methodName: string, ...methodParams: any[]): any;
}
interface IgComboLoadOnDemandSettings {
    /**
     * Gets sets option to enable load on demand.
     */
    enabled?: boolean;
    /**
     * Gets sets number of records loaded on each request.
     */
    pageSize?: number;
    /**
     * Option for IgComboLoadOnDemandSettings
     */
    [optionName: string]: any;
}
interface IgComboMultiSelection {
    /**
     * Set enabled to true to turn multi selection on. Set to true by default when target element for the combo is a select with the multiple attribute set.
     */
    enabled?: boolean;
    /**
     * Set addWithKeyModifier to true to disable the additive selection, then additive selection can be done by ctrl + mouse click / enter.
     */
    addWithKeyModifier?: boolean;
    /**
     * Set showCheckboxes to true to render check boxes in front of each drop down item.
     */
    showCheckboxes?: boolean;
    /**
     * Use itemSeparator to set what string to be rendered between items in field.
     */
    itemSeparator?: string;
    /**
     * Option for IgComboMultiSelection
     */
    [optionName: string]: any;
}
interface IgComboGrouping {
    /**
     * Gets sets name of column by which the records to be grouped. Setting this option enables the grouping.
     */
    key?: string;
    /**
     * Specifies the sort order - ascending or descending
     */
    dir?: any;
    /**
     * Option for IgComboGrouping
     */
    [optionName: string]: any;
}
interface IgComboInitialSelectedItem {
    /**
     * Optional="true" Index of item in list. Value should be larger than -1 and less than number of items in list (rows in  dataSource)
     */
    index?: number;
    /**
     * Optional="true" Value matching the valueKey property of the item
     */
    value?: any;
    /**
     * Option for IgComboInitialSelectedItem
     */
    [optionName: string]: any;
}
interface RenderedEvent {
    (event: Event, ui: RenderedEventUIParam): void;
}
interface RenderedEventUIParam {
    /**
     * Used to get a reference to the combo performing rendering.
     */
    owner?: any;
    /**
     * Used to get a reference to the main/top combo element.
     */
    element?: any;
}
interface FilteringEvent {
    (event: Event, ui: FilteringEventUIParam): void;
}
interface FilteringEventUIParam {
    /**
     * Used to obtain reference to igCombo.
     */
    owner?: any;
    /**
     * Used to obtain reference to array which contains expressions supported by $.ig.DataSource.
     */
    expression?: any;
}
interface FilteredEvent {
    (event: Event, ui: FilteredEventUIParam): void;
}
interface FilteredEventUIParam {
    /**
     * Used to obtain reference to igCombo.
     */
    owner?: any;
    /**
     * Used to obtain a jquery reference to the rendered filtered elements.
     */
    elements?: any;
}
interface ItemsRenderingEvent {
    (event: Event, ui: ItemsRenderingEventUIParam): void;
}
interface ItemsRenderingEventUIParam {
    /**
     * Used to get a reference to the combo performing rendering.
     */
    owner?: any;
    /**
     * Used to get a reference to the $.ig.DataSource combo is databound to.
     */
    dataSource?: any;
}
interface ItemsRenderedEvent {
    (event: Event, ui: ItemsRenderedEventUIParam): void;
}
interface ItemsRenderedEventUIParam {
    /**
     * Used to get a reference to the combo performing rendering.
     */
    owner?: any;
    /**
     * Used to get a reference to the $.ig.DataSource combo is databound to.
     */
    dataSource?: any;
}
interface DropDownOpeningEvent {
    (event: Event, ui: DropDownOpeningEventUIParam): void;
}
interface DropDownOpeningEventUIParam {
    /**
     * Used to obtain reference to igCombo.
     */
    owner?: any;
    /**
     * Used to obtain reference to jquery DOM element which represents drop down list container.
     */
    list?: any;
}
interface DropDownOpenedEvent {
    (event: Event, ui: DropDownOpenedEventUIParam): void;
}
interface DropDownOpenedEventUIParam {
    /**
     * Used to obtain reference to igCombo.
     */
    owner?: any;
    /**
     * Used to obtain reference to jquery DOM element which represents drop down list container.
     */
    list?: any;
}
interface DropDownClosingEvent {
    (event: Event, ui: DropDownClosingEventUIParam): void;
}
interface DropDownClosingEventUIParam {
    /**
     * Used to obtain reference to igCombo.
     */
    owner?: any;
    /**
     * Used to obtain reference to jquery DOM element which represents drop down list container.
     */
    list?: any;
}
interface DropDownClosedEvent {
    (event: Event, ui: DropDownClosedEventUIParam): void;
}
interface DropDownClosedEventUIParam {
    /**
     * Used to obtain reference to igCombo.
     */
    owner?: any;
    /**
     * Used to obtain reference to jquery DOM element which represents drop down list container.
     */
    list?: any;
}
interface SelectionChangingEvent {
    (event: Event, ui: SelectionChangingEventUIParam): void;
}
interface SelectionChangingEventUIParam {
    /**
     * Used to obtain reference to igCombo.
     */
    owner?: any;
    /**
     * Used to obtain reference to array of the selected items before the new selection has happened. That can be null.
     */
    currentItems?: any;
    /**
     * Used to obtain reference to array of all items that will be selected after the selection finish. That can be null.
     */
    items?: any;
}
interface SelectionChangedEvent {
    (event: Event, ui: SelectionChangedEventUIParam): void;
}
interface SelectionChangedEventUIParam {
    /**
     * Used to obtain reference to igCombo.
     */
    owner?: any;
    /**
     * Used to obtain reference to array of new selected items. That can be null.
     */
    items?: any;
    /**
     * Used to obtain reference to array of old selected items. That can be null.
     */
    oldItems?: any;
}
interface IgCombo {
    /**
     * Gets sets width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
     */
    width?: any;
    /**
     * Gets sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
     */
    height?: any;
    /**
     * Gets sets width of drop down list in pixels
     */
    dropDownWidth?: any;
    /**
     * Gets sets a valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONDataSource is used.
     */
    dataSource?: any;
    /**
     * Gets sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
     */
    dataSourceType?: string;
    /**
     * Gets sets url which is used for sending JSON on request for remote filtering (MVC for example). That option is required when load on demand is enabled and its type is remote.
     */
    dataSourceUrl?: string;
    /**
     * See $.ig.DataSource. property in the response specifying the total number of records on the server.
     */
    responseTotalRecCountKey?: string;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType
     *
     * Valid values:
     * "json"
     * "xml"
     * "html"
     * "script"
     * "jsonp"
     * "text"
     */
    responseDataType?: any;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     */
    responseContentType?: string;
    /**
     * Specifies the HTTP verb to be used to issue the request
     */
    requestType?: string;
    /**
     * Gets sets name of column which contains the "value". If it is missing, then name of first column will be used.
     */
    valueKey?: string;
    /**
     * Gets sets name of column which contains the displayed text. If it is missing, then "valueKey" option will be used.
     */
    textKey?: string;
    /**
     * Gets sets template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
     *     More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine
     */
    itemTemplate?: string;
    /**
     * Gets sets template used to render header in drop-down list. The template is rendered inside of DIV html element.
     */
    headerTemplate?: string;
    /**
     * Gets sets template used to render footer in drop-down list.
     * Notes:
     * 1. The template is rendered inside of DIV html element.
     * 2. The following variables can be used:
     * - {0}: Number of records in igCombo (view of dataSource)
     * - {1}: Number of records in dataSource
     * - {2}: Number of (filtered) records on server
     * - {3}: Number of all records on server
     */
    footerTemplate?: string;
    /**
     * Gets sets name of the hidden INPUT element, which is used when submiting data. Its value will be set to values of selected items valueKeys separated by ', ' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name
     */
    inputName?: string;
    /**
     * Gets sets show drop-down list animation duration in milliseconds.
     */
    animationShowDuration?: number;
    /**
     * Gets sets hide drop-down list animation duration in milliseconds.
     */
    animationHideDuration?: number;
    /**
     * Gets sets ability to append container of drop-down list to the body or to the parent of combo.
     */
    dropDownAttachedToBody?: boolean;
    /**
     * Gets sets type of filtering.Note:If this option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
     *
     * Valid values:
     * "remote" filtering is performed by server
     * "local" filtering is performed by $.ig.DataSource
     * "none" filtering is disabled
     */
    filteringType?: any;
    /**
     * Gets sets url key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     */
    filterExprUrlKey?: string;
    /**
     * Gets sets condition used for filtering.Note: When auto complete is enabled, the filtering condition is always "startsWith"
     */
    filteringCondition?: any;
    /**
     * Gets sets filtering logic.
     */
    filteringLogic?: any;
    /**
     * Gets sets text of list item for condition when "filteringType" option is enabled and no match was found. That is an override for the $.ig.Combo.locale.noMatchFoundText.
     */
    noMatchFoundText?: string;
    /**
     * Gets sets container of variables which define load on demand functionality.
     * Notes:
     * That option has effect only when data is loaded remotely using dataSourceUrl.
     * Selection is supported only for already loaded items.
     */
    loadOnDemandSettings?: IgComboLoadOnDemandSettings;
    /**
     * Gets sets how many items should be shown at once.
     *    Notes:
     *    That options is used for virtualization in order to render initial list items.
     */
    visibleItemsCount?: number;
    /**
     * Gets sets value that is displayed when input field is empty. That is an override for the $.ig.Combo.locale.placeHolder.
     */
    placeHolder?: string;
    /**
     * Sets gets functionality mode.
     *
     * Valid values:
     * "editable" Allows to modify value by edit field and drop-down list.
     * "dropdown" Allows to modify value by drop-down list only.
     * "readonlylist" Allows to open list, but does not allow any changes in field or selection in drop-down list. If selection is not set, then first item in dataSource is automatically selected.
     * "readonly" Does not allow to open list or change value in field. If selection is not set, then first item in dataSource is automatically selected.
     */
    mode?: any;
    /**
     * Gets sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
     * If that option is enabled, then only visible items are created and top edge of first visible item in list is aligned to the top edge of list.
     */
    virtualization?: boolean;
    /**
     * Gets sets object specifying multi selection feature options. The object has following properties enabled, addWithKeyModifier, showCheckboxes and itemSeparator. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
     */
    multiSelection?: IgComboMultiSelection;
    /**
     * Gets sets object specifying grouping feature options. The option has key and dir properties
     */
    grouping?: IgComboGrouping;
    /**
     * Gets or sets object which contains options supported by igValidator.
     * Notes: in order for validator to work, application should ensure that igValidator is loaded (ig.ui.validator.js/css files).
     * Example:
     * $('#combo1').igCombo({ validatorOptions: { required: true } });
     */
    validatorOptions?: any;
    /**
     * Gets sets condition used for highlighting of matching parts in items of drop-down list.
     *
     * Valid values:
     * "multi" multiple matches in a single item are rendered
     * "contains" match at any position in item is rendered
     * "startsWith" only match which starts from the beginning of text is rendered
     * "full" only fully matched items are rendered
     */
    highlightMatchesMode?: any;
    /**
     * Gets sets whether filtering and auto selection should be case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Gets sets whether the first matching item should be auto selected when typing in input. When multi selection is enabled this option will instead put the active item on the matching element.
     */
    autoSelectFirstMatch?: boolean;
    /**
     * Gets sets ability to autocomplete field from first matching item in list.
     * Note: When "autoComplete" option is enabled, then the "startsWith" is used for "filteringCondition" option
     */
    autoComplete?: boolean;
    /**
     * Gets sets the ability to enter and keep custom value in the input field.
     * Notes for enabled:
     * 1. Allows custom value input only with single selection.
     * 2. Custom values will be auto completed to the closest value if autoComplete is enabled.
     */
    allowCustomValue?: boolean;
    /**
     * Gets sets ability to close drop-down list when control loses focus.
     */
    closeDropDownOnBlur?: boolean;
    /**
     * Specifies the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
     */
    delayInputChangeProcessing?: number;
    /**
     * Gets sets tabIndex for field of combo.
     */
    tabIndex?: number;
    /**
     * Gets sets ability to show drop down list when combo gets focus. This option has effect only if mode is 'editable'
     */
    dropDownOnFocus?: boolean;
    /**
     * Gets sets ability to close drop down list when single item in the list is selected with mouse click or enter press. The default value when multi selection is enabled will be false. This option will not close the drop down when multiple selection is enabled and additive selection is performed.
     */
    closeDropDownOnSelect?: boolean;
    /**
     * Gets sets ability to select items by space button press
     */
    selectItemBySpaceKey?: boolean;
    /**
     * Gets sets list of items to be selected when combo is initialized. It should contain array of objects with index or value property, then on initialization matching items will be selected. When mode is drop down with single selection, readonly, readonlylist or combo is initialized on select element the first item will be selected if this option is not set.
     * Note: Only items loaded on initialization can be selected. When load-on-demand attempt to select not loaded item will fail.
     */
    initialSelectedItems?: IgComboInitialSelectedItem[];
    /**
     * Gets sets ability to prevent form submitting on enter key press
     */
    preventSubmitOnEnter?: boolean;
    /**
     * Gets or sets the format string that is used to format the text display values in the combo.
     * Valid options are:
     * "auto" (default) - uses automatic formatting for Date and number objects.
     * "none", "", or null - will disable formatting
     *
     * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
     *
     * Custom format strings should match the data type in "textKey" column.
     */
    format?: string;
    /**
     * Specifies whether the clear button should be rendered. When mode is drop down with single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
     */
    enableClearButton?: boolean;
    /**
     * Gets sets title for html element which represend drop-down button. That is an override for the $.ig.Combo.locale.dropDownButtonTitle.
     */
    dropDownButtonTitle?: string;
    /**
     * Gets sets title for html element which represend clear button. That is an override for the $.ig.Combo.locale.clearButtonTitle.
     */
    clearButtonTitle?: string;
    /**
     * Gets sets drop down opening orientation for the drop down list when open button is clicked
     */
    dropDownOrientation?: any;
    /**
     * Event which is raised after rendering of the combo completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.element to get a reference to the main/top combo element.
     */
    rendered?: RenderedEvent;
    /**
     * Event which is raised before data binding is performed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to igCombo performing the databinding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is to be databound to.
     */
    dataBinding?: DataBindingEvent;
    /**
     * Event which is raised after data binding is complete.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo performing the data binding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     * Use ui.success to see if the databinding was performed correctly.
     * Use ui.errorMessage to get the error message if the databinding failed.
     */
    dataBound?: DataBoundEvent;
    /**
     * Event which is raised before data filtering.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.expression to obtain reference to array which contains expressions supported by $.ig.DataSource.
     * Each expression-item contains following members: fieldName (textKey), cond (filteringCondition), expr (value/string to filter).
     */
    filtering?: FilteringEvent;
    /**
     * Event which is raised after filtering.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser. That can be null.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
     */
    filtered?: FilteredEvent;
    /**
     * Event which is raised before rendering of the combo items is performed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     */
    itemsRendering?: ItemsRenderingEvent;
    /**
     * Event which is raised after rendering of the combo items completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     */
    itemsRendered?: ItemsRenderedEvent;
    /**
     * Event which is raised before drop-down list is opened.
     * Return false in order to cancel drop-down action.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     */
    dropDownOpening?: DropDownOpeningEvent;
    /**
     * Event which is raised after drop-down list was opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     */
    dropDownOpened?: DropDownOpenedEvent;
    /**
     * Event which is raised before drop-down list is closed.
     * Return false in order to cancel hide action.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     */
    dropDownClosing?: DropDownClosingEvent;
    /**
     * Event which is raised after drop-down list was closed.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     */
    dropDownClosed?: DropDownClosedEvent;
    /**
     * Event which is raised before selection change.
     * Return false in order to cancel change.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
     * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
     */
    selectionChanging?: SelectionChangingEvent;
    /**
     * Event which is raised after selection change.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.items to obtain reference to array of new selected items. That can be null.
     * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
     */
    selectionChanged?: SelectionChangedEvent;
    /**
     * Option for igCombo
     */
    [optionName: string]: any;
}
interface IgComboMethods {
    /**
     * Performs databinding on the combo box. The databinding event is always rised.
     */
    dataBind(): Object;
    /**
     * Forces an update of the igCombo value according to the current text in the igCombo input.
     * The refresh is primarily intended to be used with allowCustomValue=true.
     * The refresh will take the current text and, if no selection is applied, will set it as igCombo value provided that allowCustomValue=true.
     */
    refreshValue(): Object;
    /**
     * Gets the associated data of an item by value matching it's valueKey property
     *
     * @param value Value matching the valueKey property of item to be tested if it is selected
     */
    dataForValue(value: Object): Object;
    /**
     * Gets the associated data of li element in the combo
     *
     * @param $element jQuery element of item in the drop down list
     */
    dataForElement($element: Object): Object;
    /**
     * Gets object represening li element in the combo by element
     *
     * @param $element jQuery object with drop down list item element or elements
     */
    itemsFromElement($element: Object): Object;
    /**
     * Gets object represening li element in the combo by value
     *
     * @param value Value of item in the drop down list or array with values.
     */
    itemsFromValue(value: Object): Object;
    /**
     * Gets object represening li element in the combo by index
     *
     * @param index Index or array of indexes of items in the drop down list
     */
    itemsFromIndex(index: number): Object;
    /**
     * Gets array with objects representing li elements in combo box
     */
    items(): any[];
    /**
     * Gets array with objects representing the filtered li elements in combo box
     */
    filteredItems(): any[];
    /**
     * Gets array with objects representing selected li elements in combo box
     */
    selectedItems(): any[];
    /**
     * Trigger filtering.
     *
     * @param texts Filter by string, or array of strings.
     * @param event Reference to browser event.
     */
    filter(texts?: Object, event?: Object): Object;
    /**
     * Clear filtering.
     *
     * @param event
     */
    clearFiltering(event: Object): Object;
    /**
     * Opens the drop down
     *
     * @param callback Specifies callback function to be executed when open animation is completed.
     * @param focusCombo Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger drop down opened event.
     * @param event Set to false to not focus combo's text input after the drop down is opened. By default the combo's input is focused.
     */
    openDropDown(callback?: Function, focusCombo?: Object, event?: boolean): Object;
    /**
     * Closes the drop down
     *
     * @param callback Specifies callback function to be executed when close animation is completed.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger drop down closed event.
     */
    closeDropDown(callback?: Function, event?: Object): Object;
    /**
     * Clears the input text, resets highlighting, filtering and selection.
     *
     * @param event
     */
    clearInput(event: Object): Object;
    /**
     * Verifies whether the specified li is selected
     *
     * @param $item jQuery object with item to verify whether it is selected.
     */
    isSelected($item: Object): boolean;
    /**
     * Verifies whether the li with specified value is selected
     *
     * @param value Value matching the valueKey property of item to be tested if it is selected
     */
    isValueSelected(value: Object): boolean;
    /**
     * Verifies whether the li representing the data source's record at the specified index is selected
     *
     * @param index Index of data source record
     */
    isIndexSelected(index: Object): boolean;
    /**
     * Selects list item/items from the drop down list by specified value or array of values. When called witout params will return the value of the selected item or if multiple selection is enabled array of selected values.
     *
     * @param value Value or array of values matching the valueKey property of item/items to be selected
     * @param options Object with set of options controling the behavior of this api method.
                    closeDropDown (boolean): Set to true to close the drop down list after the selection.
                    focusCombo (boolean): Set to true to focus combo after the selection.
                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger selection changed event.
     */
    value(value?: Object, options?: Object, event?: Object): Object;
    /**
     * Selects a list item from the drop down list
     *
     * @param $items jQuery object with item or items to be selected
     * @param options Object with set of options controling the behavior of this api method.
                    closeDropDown (boolean): Set to true to close the drop down list after the selection.
                    focusCombo (boolean): Set to true to focus combo after the selection.
                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger selection changed event.
     */
    select($items: Object, options?: Object, event?: Object): Object;
    /**
     * Selects a list item from the drop down list by specified index.
     *
     * @param index Index or array of indexes of items to be selected
     * @param options Object with set of options controling the behavior of this api method.
                    closeDropDown (boolean): Set to true to close the drop down list after the selection.
                    focusCombo (boolean): Set to true to focus combo after the selection.
                    additive (boolean): Set to true to select the item without losing other selection. Works only when multi selection is enabled.
                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger selection changed event.
     */
    index(index?: Object, options?: Object, event?: Object): Object;
    /**
     * Selects all items from the drop down list
     *
     * @param options Object with set of options controling the behavior of this api method.
                    closeDropDown (boolean): Set to true to close the drop down list after the selection.
                    focusCombo (boolean): Set to true to focus combo after the selection.
                    keepFiltering (boolean): Set to true to keep filtering after the selection. By default the filtering is cleared.
                    keepInputText (boolean): Set to true to keep input text unchanged after the selection. By default input text is updated.
                    keepHighlighting (boolean): Set to true to keep highlighting unchanged after the selection. By default highlighting is removed.
                    keepNavItem (boolean): Set to true to keep current navigation item unchanged after the selection. By default the navigation item is changed to the new selected item.
                    keepScrollPosition (boolean): Set to true to keep current scroll position. By default the scroll position will change so that the last selected item is visible.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger selection changed event.
     */
    selectAll(options?: Object, event?: Object): Object;
    /**
     * Deselects a list item from the drop down list by value
     *
     * @param value Value or array of values matching the valueKey property of item/items to be deselected
     * @param options Object with set of options controling the behavior of this api method.
                    focusCombo (boolean): Set to true to focus combo after the deselection.
                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger selection changed event.
     */
    deselectByValue(value: Object, options?: Object, event?: Object): Object;
    /**
     * Deselects a list item from the drop down list
     *
     * @param $items jQuery object with item or items to be deselected
     * @param options Object with set of options controling the behavior of this api method.
                    focusCombo (boolean): Set to true to focus combo after the deselection.
                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger selection changed event.
     */
    deselect($items: Object, options?: Object, event?: Object): Object;
    /**
     * Deselects a list item from the drop down list by index
     *
     * @param index Index or array of indexes of items to be selected
     * @param options Object with set of options controling the behavior of this api method.
                    focusCombo (boolean): Set to true to focus combo after the deselection.
                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger selection changed event.
     */
    deselectByIndex(index: Object, options?: Object, event?: Object): Object;
    /**
     * Deselects all selected items from the drop down list
     *
     * @param options Object with set of options controling the behavior of this api method.
                    focusCombo (boolean): Set to true to focus combo after the deselection.
                    keepInputText (boolean): Set to true to keep input text unchanged after the deselection. By default input text is updated.
     * @param event Indicates the browser event which triggered this action (not API). Calling the method with this param set to "true" will trigger selection changed event.
     */
    deselectAll(options?: Object, event?: Object): Object;
    /**
     * Gets sets index of active item in list.
     * returnType="number|object" Returns index of active item in list or -1, if parameter is undefined. Otherwise, it returns reference to this igCombo.
     *
     * @param index New active index for list. In order to clear active item, use -1.
     */
    activeIndex(index?: number): void;
    /**
     * Gets sets text in text input field.
     * returnType="string|object" If parameter is undefined, then current text in field is returned. Otherwise, it returns reference to this igCombo.
     *
     * @param text New text value for combo's input field.
     */
    text(text?: string): void;
    /**
     * Gets sets scrollTop attribute of html element, which scrolls drop-down list of items.
     * returnType="number|object" If parameter is undefined, then scrollTop is returned. Otherwise, it returns reference to this igCombo.
     *
     * @param value New value for scroll top in list. Note: if list is closed and new value is provided, then openDropDown() is called automatically.
     */
    listScrollTop(value?: number): void;
    /**
     * Gets jQuery objects representing all rendered list items in the combo drop down list
     */
    listItems(): Object;
    /**
     * Gets jQuery object of the outer element of the combo
     */
    comboWrapper(): Object;
    /**
     * Gets jQuery object of the drop down associated with this combo widget
     */
    dropDown(): Object;
    /**
     * Gets jQuery object of the container that holds the list with items
     */
    list(): Object;
    /**
     * Gets jQuery object of the text input associated with this combo widget
     */
    textInput(): Object;
    /**
     * Gets jQuery object of the value input associated with this combo widget
     */
    valueInput(): Object;
    /**
     * Gets reference to igValidator used by igCombo.
     *
     * @param destroy Request to destroy validator.
     */
    validator(destroy?: boolean): Object;
    /**
     * Trigger validation.
     */
    validate(): boolean;
    /**
     * Returns boolean representing whether the combo drop down list is opened.
     */
    dropDownOpened(): boolean;
    /**
     * Repositions drop down under combo input. Has effect only when the drop down is attach to body.
     */
    positionDropDown(): Object;
    /**
     * Destroys the igCombo widget.
     */
    destroy(): Object;
}
interface JQuery {
    data(propertyName: "igCombo"): IgComboMethods;
}
interface JQuery {
    igCombo(methodName: "dataBind"): Object;
    igCombo(methodName: "refreshValue"): Object;
    igCombo(methodName: "dataForValue", value: Object): Object;
    igCombo(methodName: "dataForElement", $element: Object): Object;
    igCombo(methodName: "itemsFromElement", $element: Object): Object;
    igCombo(methodName: "itemsFromValue", value: Object): Object;
    igCombo(methodName: "itemsFromIndex", index: number): Object;
    igCombo(methodName: "items"): any[];
    igCombo(methodName: "filteredItems"): any[];
    igCombo(methodName: "selectedItems"): any[];
    igCombo(methodName: "filter", texts?: Object, event?: Object): Object;
    igCombo(methodName: "clearFiltering", event: Object): Object;
    igCombo(methodName: "openDropDown", callback?: Function, focusCombo?: Object, event?: boolean): Object;
    igCombo(methodName: "closeDropDown", callback?: Function, event?: Object): Object;
    igCombo(methodName: "clearInput", event: Object): Object;
    igCombo(methodName: "isSelected", $item: Object): boolean;
    igCombo(methodName: "isValueSelected", value: Object): boolean;
    igCombo(methodName: "isIndexSelected", index: Object): boolean;
    igCombo(methodName: "value", value?: Object, options?: Object, event?: Object): Object;
    igCombo(methodName: "select", $items: Object, options?: Object, event?: Object): Object;
    igCombo(methodName: "index", index?: Object, options?: Object, event?: Object): Object;
    igCombo(methodName: "selectAll", options?: Object, event?: Object): Object;
    igCombo(methodName: "deselectByValue", value: Object, options?: Object, event?: Object): Object;
    igCombo(methodName: "deselect", $items: Object, options?: Object, event?: Object): Object;
    igCombo(methodName: "deselectByIndex", index: Object, options?: Object, event?: Object): Object;
    igCombo(methodName: "deselectAll", options?: Object, event?: Object): Object;
    igCombo(methodName: "activeIndex", index?: number): void;
    igCombo(methodName: "text", text?: string): void;
    igCombo(methodName: "listScrollTop", value?: number): void;
    igCombo(methodName: "listItems"): Object;
    igCombo(methodName: "comboWrapper"): Object;
    igCombo(methodName: "dropDown"): Object;
    igCombo(methodName: "list"): Object;
    igCombo(methodName: "textInput"): Object;
    igCombo(methodName: "valueInput"): Object;
    igCombo(methodName: "validator", destroy?: boolean): Object;
    igCombo(methodName: "validate"): boolean;
    igCombo(methodName: "dropDownOpened"): boolean;
    igCombo(methodName: "positionDropDown"): Object;
    igCombo(methodName: "destroy"): Object;
    /**
     * Gets  width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
     */
    igCombo(optionLiteral: 'option', optionName: "width"): any;
    /**
     * Sets width of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * Gets  height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
     */
    igCombo(optionLiteral: 'option', optionName: "height"): any;
    /**
     * Sets height of combo. The numeric and string values (valid html units for size) are supported. It includes %, px, em and other units.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  width of drop down list in pixels
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownWidth"): any;
    /**
     * Sets width of drop down list in pixels
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownWidth", optionValue: any): void;
    /**
     * Gets  a valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONDataSource is used.
     */
    igCombo(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * Sets a valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     * Note: if it is set to string and "dataSourceType" option is not set, then $.ig.JSONDataSource is used.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * Gets  data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
     */
    igCombo(optionLiteral: 'option', optionName: "dataSourceType"): string;
    /**
     * Sets data source type (such as "json", "xml", etc). Please refer to the documentation of $.ig.DataSource and its type property
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;
    /**
     * Gets  url which is used for sending JSON on request for remote filtering (MVC for example). That option is required when load on demand is enabled and its type is remote.
     */
    igCombo(optionLiteral: 'option', optionName: "dataSourceUrl"): string;
    /**
     * Sets url which is used for sending JSON on request for remote filtering (MVC for example). That option is required when load on demand is enabled and its type is remote.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;
    /**
     * See $.ig.DataSource. property in the response specifying the total number of records on the server.
     */
    igCombo(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;
    /**
     * See $.ig.DataSource. property in the response specifying the total number of records on the server.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
     */
    igCombo(optionLiteral: 'option', optionName: "responseDataKey"): string;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;
    /**
     * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType
     */
    igCombo(optionLiteral: 'option', optionName: "responseDataType"): any;
    /**
     * Response type when a URL is set as the data source. See http://api.jquery.com/jQuery.ajax/ => dataType
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "responseDataType", optionValue: any): void;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     */
    igCombo(optionLiteral: 'option', optionName: "responseContentType"): string;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;
    /**
     * Specifies the HTTP verb to be used to issue the request
     */
    igCombo(optionLiteral: 'option', optionName: "requestType"): string;
    /**
     * Specifies the HTTP verb to be used to issue the request
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;
    /**
     * Gets  name of column which contains the "value". If it is missing, then name of first column will be used.
     */
    igCombo(optionLiteral: 'option', optionName: "valueKey"): string;
    /**
     * Sets name of column which contains the "value". If it is missing, then name of first column will be used.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "valueKey", optionValue: string): void;
    /**
     * Gets  name of column which contains the displayed text. If it is missing, then "valueKey" option will be used.
     */
    igCombo(optionLiteral: 'option', optionName: "textKey"): string;
    /**
     * Sets name of column which contains the displayed text. If it is missing, then "valueKey" option will be used.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "textKey", optionValue: string): void;
    /**
     * Gets  template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
     *     More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine
     */
    igCombo(optionLiteral: 'option', optionName: "itemTemplate"): string;
    /**
     * Sets template used to render an item in list. The igCombo utilizes igTemplating for generating node content templates.
     *     More info on the templating engine can be found here: http://www.igniteui.com/help/infragistics-templating-engine
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "itemTemplate", optionValue: string): void;
    /**
     * Gets  template used to render header in drop-down list. The template is rendered inside of DIV html element.
     */
    igCombo(optionLiteral: 'option', optionName: "headerTemplate"): string;
    /**
     * Sets template used to render header in drop-down list. The template is rendered inside of DIV html element.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "headerTemplate", optionValue: string): void;
    /**
     * Gets  template used to render footer in drop-down list.
     * Notes:
     * 1. The template is rendered inside of DIV html element.
     * 2. The following variables can be used:
     * - {0}: Number of records in igCombo (view of dataSource)
     * - {1}: Number of records in dataSource
     * - {2}: Number of (filtered) records on server
     * - {3}: Number of all records on server
     */
    igCombo(optionLiteral: 'option', optionName: "footerTemplate"): string;
    /**
     * Sets template used to render footer in drop-down list.
     * Notes:
     * 1. The template is rendered inside of DIV html element.
     * 2. The following variables can be used:
     * - {0}: Number of records in igCombo (view of dataSource)
     * - {1}: Number of records in dataSource
     * - {2}: Number of (filtered) records on server
     * - {3}: Number of all records on server
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "footerTemplate", optionValue: string): void;
    /**
     * Gets  name of the hidden INPUT element, which is used when submiting data. Its value will be set to values of selected items valueKeys separated by ', ' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name
     */
    igCombo(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets name of the hidden INPUT element, which is used when submiting data. Its value will be set to values of selected items valueKeys separated by ', ' character on any change in igCombo. If the combo element has 'name' attribute and this option is not set, the 'name' attribute will be used for the input name
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Gets  show drop-down list animation duration in milliseconds.
     */
    igCombo(optionLiteral: 'option', optionName: "animationShowDuration"): number;
    /**
     * Sets show drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "animationShowDuration", optionValue: number): void;
    /**
     * Gets  hide drop-down list animation duration in milliseconds.
     */
    igCombo(optionLiteral: 'option', optionName: "animationHideDuration"): number;
    /**
     * Sets hide drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "animationHideDuration", optionValue: number): void;
    /**
     * Gets  ability to append container of drop-down list to the body or to the parent of combo.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;
    /**
     * Sets ability to append container of drop-down list to the body or to the parent of combo.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;
    /**
     * Gets  type of filtering.Note:If this option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
     */
    igCombo(optionLiteral: 'option', optionName: "filteringType"): any;
    /**
     * Sets type of filtering.Note:If this option is set to "remote", then the "css.waitFiltering" is applied to combo and its drop-down list.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "filteringType", optionValue: any): void;
    /**
     * Gets  url key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     */
    igCombo(optionLiteral: 'option', optionName: "filterExprUrlKey"): string;
    /**
     * Sets url key name that specifies how the remote filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "filterExprUrlKey", optionValue: string): void;
    /**
     * Gets  condition used for filtering.Note: When auto complete is enabled, the filtering condition is always "startsWith"
     */
    igCombo(optionLiteral: 'option', optionName: "filteringCondition"): any;
    /**
     * Sets condition used for filtering.Note: When auto complete is enabled, the filtering condition is always "startsWith"
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "filteringCondition", optionValue: any): void;
    /**
     * Gets  filtering logic.
     */
    igCombo(optionLiteral: 'option', optionName: "filteringLogic"): any;
    /**
     * Sets filtering logic.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "filteringLogic", optionValue: any): void;
    /**
     * Gets  text of list item for condition when "filteringType" option is enabled and no match was found. That is an override for the $.ig.Combo.locale.noMatchFoundText.
     */
    igCombo(optionLiteral: 'option', optionName: "noMatchFoundText"): string;
    /**
     * Sets text of list item for condition when "filteringType" option is enabled and no match was found. That is an override for the $.ig.Combo.locale.noMatchFoundText.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "noMatchFoundText", optionValue: string): void;
    /**
     * Gets  container of variables which define load on demand functionality.
     * Notes:
     * That option has effect only when data is loaded remotely using dataSourceUrl.
     * Selection is supported only for already loaded items.
     */
    igCombo(optionLiteral: 'option', optionName: "loadOnDemandSettings"): IgComboLoadOnDemandSettings;
    /**
     * Sets container of variables which define load on demand functionality.
     * Notes:
     * That option has effect only when data is loaded remotely using dataSourceUrl.
     * Selection is supported only for already loaded items.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "loadOnDemandSettings", optionValue: IgComboLoadOnDemandSettings): void;
    /**
     * Gets  how many items should be shown at once.
     *    Notes:
     *    That options is used for virtualization in order to render initial list items.
     */
    igCombo(optionLiteral: 'option', optionName: "visibleItemsCount"): number;
    /**
     * Sets how many items should be shown at once.
     *    Notes:
     *    That options is used for virtualization in order to render initial list items.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;
    /**
     * Gets  value that is displayed when input field is empty. That is an override for the $.ig.Combo.locale.placeHolder.
     */
    igCombo(optionLiteral: 'option', optionName: "placeHolder"): string;
    /**
     * Sets value that is displayed when input field is empty. That is an override for the $.ig.Combo.locale.placeHolder.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
    /**
     * Sets gets functionality mode.
     */
    igCombo(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Sets gets functionality mode.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Gets  ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
     * If that option is enabled, then only visible items are created and top edge of first visible item in list is aligned to the top edge of list.
     */
    igCombo(optionLiteral: 'option', optionName: "virtualization"): boolean;
    /**
     * Sets ability to use virtual rendering for drop-down list. Enable to boost performance when combo has lots of records.
     * If that option is enabled, then only visible items are created and top edge of first visible item in list is aligned to the top edge of list.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "virtualization", optionValue: boolean): void;
    /**
     * Gets  object specifying multi selection feature options. The object has following properties enabled, addWithKeyModifier, showCheckboxes and itemSeparator. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
     */
    igCombo(optionLiteral: 'option', optionName: "multiSelection"): IgComboMultiSelection;
    /**
     * Sets object specifying multi selection feature options. The object has following properties enabled, addWithKeyModifier, showCheckboxes and itemSeparator. Note showCheckboxes and itemSeparator has effect only if multi selection is enabled.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "multiSelection", optionValue: IgComboMultiSelection): void;
    /**
     * Gets  object specifying grouping feature options. The option has key and dir properties
     */
    igCombo(optionLiteral: 'option', optionName: "grouping"): IgComboGrouping;
    /**
     * Sets object specifying grouping feature options. The option has key and dir properties
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "grouping", optionValue: IgComboGrouping): void;
    /**
     * Gets  object which contains options supported by igValidator.
     * Notes: in order for validator to work, application should ensure that igValidator is loaded (ig.ui.validator.js/css files).
     * Example:
     * $('#combo1').igCombo({ validatorOptions: { required: true } });
     */
    igCombo(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets object which contains options supported by igValidator.
     * Notes: in order for validator to work, application should ensure that igValidator is loaded (ig.ui.validator.js/css files).
     * Example:
     * $('#combo1').igCombo({ validatorOptions: { required: true } });
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    /**
     * Gets  condition used for highlighting of matching parts in items of drop-down list.
     */
    igCombo(optionLiteral: 'option', optionName: "highlightMatchesMode"): any;
    /**
     * Sets condition used for highlighting of matching parts in items of drop-down list.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "highlightMatchesMode", optionValue: any): void;
    /**
     * Gets  whether filtering and auto selection should be case sensitive
     */
    igCombo(optionLiteral: 'option', optionName: "caseSensitive"): boolean;
    /**
     * Sets whether filtering and auto selection should be case sensitive
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;
    /**
     * Gets  whether the first matching item should be auto selected when typing in input. When multi selection is enabled this option will instead put the active item on the matching element.
     */
    igCombo(optionLiteral: 'option', optionName: "autoSelectFirstMatch"): boolean;
    /**
     * Sets whether the first matching item should be auto selected when typing in input. When multi selection is enabled this option will instead put the active item on the matching element.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "autoSelectFirstMatch", optionValue: boolean): void;
    /**
     * Gets  ability to autocomplete field from first matching item in list.
     * Note: When "autoComplete" option is enabled, then the "startsWith" is used for "filteringCondition" option
     */
    igCombo(optionLiteral: 'option', optionName: "autoComplete"): boolean;
    /**
     * Sets ability to autocomplete field from first matching item in list.
     * Note: When "autoComplete" option is enabled, then the "startsWith" is used for "filteringCondition" option
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "autoComplete", optionValue: boolean): void;
    /**
     * Gets  the ability to enter and keep custom value in the input field.
     * Notes for enabled:
     * 1. Allows custom value input only with single selection.
     * 2. Custom values will be auto completed to the closest value if autoComplete is enabled.
     */
    igCombo(optionLiteral: 'option', optionName: "allowCustomValue"): boolean;
    /**
     * Sets the ability to enter and keep custom value in the input field.
     * Notes for enabled:
     * 1. Allows custom value input only with single selection.
     * 2. Custom values will be auto completed to the closest value if autoComplete is enabled.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "allowCustomValue", optionValue: boolean): void;
    /**
     * Gets  ability to close drop-down list when control loses focus.
     */
    igCombo(optionLiteral: 'option', optionName: "closeDropDownOnBlur"): boolean;
    /**
     * Sets ability to close drop-down list when control loses focus.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "closeDropDownOnBlur", optionValue: boolean): void;
    /**
     * Gets the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
     */
    igCombo(optionLiteral: 'option', optionName: "delayInputChangeProcessing"): number;
    /**
     * Sets the delay duration before processing the changes in the input. Useful to boost performance by lowering the count of selection, filtering, auto complete and highlighting operations executed on each input change.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "delayInputChangeProcessing", optionValue: number): void;
    /**
     * Gets  tabIndex for field of combo.
     */
    igCombo(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets tabIndex for field of combo.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Gets  ability to show drop down list when combo gets focus. This option has effect only if mode is 'editable'
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownOnFocus"): boolean;
    /**
     * Sets ability to show drop down list when combo gets focus. This option has effect only if mode is 'editable'
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownOnFocus", optionValue: boolean): void;
    /**
     * Gets  ability to close drop down list when single item in the list is selected with mouse click or enter press. The default value when multi selection is enabled will be false. This option will not close the drop down when multiple selection is enabled and additive selection is performed.
     */
    igCombo(optionLiteral: 'option', optionName: "closeDropDownOnSelect"): boolean;
    /**
     * Sets ability to close drop down list when single item in the list is selected with mouse click or enter press. The default value when multi selection is enabled will be false. This option will not close the drop down when multiple selection is enabled and additive selection is performed.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "closeDropDownOnSelect", optionValue: boolean): void;
    /**
     * Gets  ability to select items by space button press
     */
    igCombo(optionLiteral: 'option', optionName: "selectItemBySpaceKey"): boolean;
    /**
     * Sets ability to select items by space button press
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "selectItemBySpaceKey", optionValue: boolean): void;
    /**
     * Gets  list of items to be selected when combo is initialized. It should contain array of objects with index or value property, then on initialization matching items will be selected. When mode is drop down with single selection, readonly, readonlylist or combo is initialized on select element the first item will be selected if this option is not set.
     * Note: Only items loaded on initialization can be selected. When load-on-demand attempt to select not loaded item will fail.
     */
    igCombo(optionLiteral: 'option', optionName: "initialSelectedItems"): IgComboInitialSelectedItem[];
    /**
     * Sets list of items to be selected when combo is initialized. It should contain array of objects with index or value property, then on initialization matching items will be selected. When mode is drop down with single selection, readonly, readonlylist or combo is initialized on select element the first item will be selected if this option is not set.
     * Note: Only items loaded on initialization can be selected. When load-on-demand attempt to select not loaded item will fail.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "initialSelectedItems", optionValue: IgComboInitialSelectedItem[]): void;
    /**
     * Gets  ability to prevent form submitting on enter key press
     */
    igCombo(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;
    /**
     * Sets ability to prevent form submitting on enter key press
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;
    /**
     * Gets  the format string that is used to format the text display values in the combo.
     * Valid options are:
     * "auto" (default) - uses automatic formatting for Date and number objects.
     * "none", "", or null - will disable formatting
     *
     * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
     *
     * Custom format strings should match the data type in "textKey" column.
     */
    igCombo(optionLiteral: 'option', optionName: "format"): string;
    /**
     * Sets the format string that is used to format the text display values in the combo.
     * Valid options are:
     * "auto" (default) - uses automatic formatting for Date and number objects.
     * "none", "", or null - will disable formatting
     *
     * Custom values can be something like "currency", "percent", "dateLong", "time", "MMM-dd-yyyy H:mm tt", etc.
     *
     * Custom format strings should match the data type in "textKey" column.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "format", optionValue: string): void;
    /**
     * Gets whether the clear button should be rendered. When mode is drop down with single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
     */
    igCombo(optionLiteral: 'option', optionName: "enableClearButton"): boolean;
    /**
     * Sets whether the clear button should be rendered. When mode is drop down with single selection, readonly or readonlylist this option will default to false. It can still be enabled when it is specifically set to true.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "enableClearButton", optionValue: boolean): void;
    /**
     * Gets  title for html element which represend drop-down button. That is an override for the $.ig.Combo.locale.dropDownButtonTitle.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownButtonTitle"): string;
    /**
     * Sets title for html element which represend drop-down button. That is an override for the $.ig.Combo.locale.dropDownButtonTitle.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownButtonTitle", optionValue: string): void;
    /**
     * Gets  title for html element which represend clear button. That is an override for the $.ig.Combo.locale.clearButtonTitle.
     */
    igCombo(optionLiteral: 'option', optionName: "clearButtonTitle"): string;
    /**
     * Sets title for html element which represend clear button. That is an override for the $.ig.Combo.locale.clearButtonTitle.
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "clearButtonTitle", optionValue: string): void;
    /**
     * Gets  drop down opening orientation for the drop down list when open button is clicked
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownOrientation"): any;
    /**
     * Sets drop down opening orientation for the drop down list when open button is clicked
     *
     * @optionValue New value to be set.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: any): void;
    /**
     * Event which is raised after rendering of the combo completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.element to get a reference to the main/top combo element.
     */
    igCombo(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Event which is raised after rendering of the combo completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.element to get a reference to the main/top combo element.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Event which is raised before data binding is performed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to igCombo performing the databinding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is to be databound to.
     */
    igCombo(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;
    /**
     * Event which is raised before data binding is performed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to igCombo performing the databinding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is to be databound to.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;
    /**
     * Event which is raised after data binding is complete.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo performing the data binding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     * Use ui.success to see if the databinding was performed correctly.
     * Use ui.errorMessage to get the error message if the databinding failed.
     */
    igCombo(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;
    /**
     * Event which is raised after data binding is complete.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo performing the data binding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     * Use ui.success to see if the databinding was performed correctly.
     * Use ui.errorMessage to get the error message if the databinding failed.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;
    /**
     * Event which is raised before data filtering.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.expression to obtain reference to array which contains expressions supported by $.ig.DataSource.
     * Each expression-item contains following members: fieldName (textKey), cond (filteringCondition), expr (value/string to filter).
     */
    igCombo(optionLiteral: 'option', optionName: "filtering"): FilteringEvent;
    /**
     * Event which is raised before data filtering.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.expression to obtain reference to array which contains expressions supported by $.ig.DataSource.
     * Each expression-item contains following members: fieldName (textKey), cond (filteringCondition), expr (value/string to filter).
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "filtering", optionValue: FilteringEvent): void;
    /**
     * Event which is raised after filtering.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser. That can be null.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
     */
    igCombo(optionLiteral: 'option', optionName: "filtered"): FilteredEvent;
    /**
     * Event which is raised after filtering.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser. That can be null.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.elements to obtain a jquery reference to the rendered filtered elements.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "filtered", optionValue: FilteredEvent): void;
    /**
     * Event which is raised before rendering of the combo items is performed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     */
    igCombo(optionLiteral: 'option', optionName: "itemsRendering"): ItemsRenderingEvent;
    /**
     * Event which is raised before rendering of the combo items is performed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "itemsRendering", optionValue: ItemsRenderingEvent): void;
    /**
     * Event which is raised after rendering of the combo items completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     */
    igCombo(optionLiteral: 'option', optionName: "itemsRendered"): ItemsRenderedEvent;
    /**
     * Event which is raised after rendering of the combo items completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the combo performing rendering.
     * Use ui.dataSource to get a reference to the $.ig.DataSource combo is databound to.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "itemsRendered", optionValue: ItemsRenderedEvent): void;
    /**
     * Event which is raised before drop-down list is opened.
     * Return false in order to cancel drop-down action.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownOpening"): DropDownOpeningEvent;
    /**
     * Event which is raised before drop-down list is opened.
     * Return false in order to cancel drop-down action.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownOpening", optionValue: DropDownOpeningEvent): void;
    /**
     * Event which is raised after drop-down list was opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownOpened"): DropDownOpenedEvent;
    /**
     * Event which is raised after drop-down list was opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownOpened", optionValue: DropDownOpenedEvent): void;
    /**
     * Event which is raised before drop-down list is closed.
     * Return false in order to cancel hide action.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownClosing"): DropDownClosingEvent;
    /**
     * Event which is raised before drop-down list is closed.
     * Return false in order to cancel hide action.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownClosing", optionValue: DropDownClosingEvent): void;
    /**
     * Event which is raised after drop-down list was closed.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownClosed"): DropDownClosedEvent;
    /**
     * Event which is raised after drop-down list was closed.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.list to obtain reference to jquery DOM element which represents drop down list container.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "dropDownClosed", optionValue: DropDownClosedEvent): void;
    /**
     * Event which is raised before selection change.
     * Return false in order to cancel change.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
     * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
     */
    igCombo(optionLiteral: 'option', optionName: "selectionChanging"): SelectionChangingEvent;
    /**
     * Event which is raised before selection change.
     * Return false in order to cancel change.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.currentItems to obtain reference to array of the selected items before the new selection has happened. That can be null.
     * Use ui.items to obtain reference to array of all items that will be selected after the selection finish. That can be null.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "selectionChanging", optionValue: SelectionChangingEvent): void;
    /**
     * Event which is raised after selection change.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.items to obtain reference to array of new selected items. That can be null.
     * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
     */
    igCombo(optionLiteral: 'option', optionName: "selectionChanged"): SelectionChangedEvent;
    /**
     * Event which is raised after selection change.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igCombo.
     * Use ui.items to obtain reference to array of new selected items. That can be null.
     * Use ui.oldItems to obtain reference to array of old selected items. That can be null.
     *
     * @optionValue Define event handler function.
     */
    igCombo(optionLiteral: 'option', optionName: "selectionChanged", optionValue: SelectionChangedEvent): void;
    igCombo(options: IgCombo): JQuery;
    igCombo(optionLiteral: 'option', optionName: string): any;
    igCombo(optionLiteral: 'option', options: IgCombo): JQuery;
    igCombo(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igCombo(methodName: string, ...methodParams: any[]): any;
}
interface StateChangingEvent {
    (event: Event, ui: StateChangingEventUIParam): void;
}
interface StateChangingEventUIParam {
    /**
     * Used to obtain reference to igDialog.
     */
    owner?: any;
    /**
     * Used ton to obtain name of button, which triggered event. Note: if state was modified from codes, then "button" is undefined.
     */
    button?: any;
    /**
     * Used to obtain old state of dialog, which can be one of following: "opened", "minimized", "maximized", "closed".
     */
    oldState?: any;
    /**
     * Used to obtain boolean value of old pin state of dialog.
     */
    oldPinned?: any;
    /**
     * Used to obtain name of action. That can be one of the following:
     */
    action?: any;
}
interface StateChangedEvent {
    (event: Event, ui: StateChangedEventUIParam): void;
}
interface StateChangedEventUIParam {
    /**
     * Used to obtain reference to igDialog.
     */
    owner?: any;
    /**
     * Used ton to obtain name of button, which triggered event. Note: if state was modified from codes, then "button" is undefined.
     */
    button?: any;
    /**
     * Used to obtain old state of dialog, which can be one of following: "opened", "minimized", "maximized", "closed".
     */
    oldState?: any;
    /**
     * Used to obtain boolean value of old pin state of dialog.
     */
    oldPinned?: any;
    /**
     * Used to obtain name of action. That can be one of the following:
     */
    action?: any;
}
interface AnimationEndedEvent {
    (event: Event, ui: AnimationEndedEventUIParam): void;
}
interface AnimationEndedEventUIParam {
    /**
     * Used to obtain reference to igDialog.
     */
    owner?: any;
    /**
     * Used to obtain name of action, which triggered animation.
     */
    action?: any;
}
interface FocusEvent {
    (event: Event, ui: FocusEventUIParam): void;
}
interface FocusEventUIParam {
    /**
     * Used to obtain reference to igDialog.
     */
    owner?: any;
}
interface BlurEvent {
    (event: Event, ui: BlurEventUIParam): void;
}
interface BlurEventUIParam {
    /**
     * Used to obtain reference to igDialog.
     */
    owner?: any;
}
interface IgDialog {
    /**
     * Sets gets jquery DIV object which is used as main container for dialog.
     * Notes:
     * 1. That object is optional and it should not contain any children.
     * 2. It should not have parent.
     * 3. It should not contain attributes which might destroy laout or appearance of dialog.
     * 4. Change of that option is not supported.
     */
    mainElement?: Element;
    /**
     * Sets gets state of dialog.Note: when dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
     *
     * Valid values:
     * "opened" Dialog is opened.
     * "minimized" Dialog is minimized.
     * "maximized" Dialog is maximized.
     * "closed" Dialog is closed.
     */
    state?: any;
    /**
     * Sets gets pinned state of dialog.
     * When dialog is pinned, then the html element of dialog is moved to the original container where target element was located and position:absolute is removed.
     * Pinned dialog does not support modal state, maximized state and it can not be moved.
     * Notes:
     * 1. If parent element of original target-element is invisible, then pinned dialog becomes invisible as well.
     * 2. Pinned state is not supported for modal dialog.
     */
    pinned?: boolean;
    /**
     * Sets gets ability to close dialog on Esc key.
     */
    closeOnEscape?: boolean;
    /**
     * Sets gets visibility of close button in header.
     */
    showCloseButton?: boolean;
    /**
     * Sets gets visibility of maximize button in header.
     */
    showMaximizeButton?: boolean;
    /**
     * Sets gets visibility of minimize button in header.
     */
    showMinimizeButton?: boolean;
    /**
     * Sets gets visibility of pin button in header.
     */
    showPinButton?: boolean;
    /**
     * Sets gets ability to automatically pin dialog when dialog was minimized.
     */
    pinOnMinimized?: boolean;
    /**
     * Sets gets name of css class which is applied to the SPAN element located on the left side of header.
     */
    imageClass?: string;
    /**
     * Sets gets text which appears in header of dialog.
     */
    headerText?: string;
    /**
     * Sets gets visibility of header.
     */
    showHeader?: boolean;
    /**
     * Sets gets visibility of footer.
     */
    showFooter?: boolean;
    /**
     * Sets gets text which appears in footer of dialog.
     */
    footerText?: string;
    /**
     * Sets gets name of css class which is applied to the main DIV element of dialog.
     */
    dialogClass?: string;
    /**
     * Sets gets container html element for dialog.
     * That can be reference to html element, jquery selector or jquery object.
     * By default the parent form of original target element is used. If form is not found, then body is used.
     * Note: If the "position" of container is not set or it is "static", then position is set to "relative".
     */
    container?: any;
    /**
     * Sets gets initial height of dialog in pixels for normal state.
     * Besides numeric values, following units are supported: "px", "em" and "%".
     * In case of "%", the size of browser window is used and it has effect only on open action.
     */
    height?: number;
    /**
     * Sets gets initial width of dialog in pixels for normal state.
     * Besides numeric values, following units are supported: "px", "em" and "%".
     * In case of "%", the size of browser window is used and it has effect only on open action.
     */
    width?: number;
    /**
     * Sets gets minimal height of dialog in normal state.
     */
    minHeight?: number;
    /**
     * Sets gets minimal width of dialog in normal state.
     */
    minWidth?: number;
    /**
     * Sets gets maximal height of dialog in normal state. Note: that option has effect only while resizing dialog by end user.
     */
    maxHeight?: number;
    /**
     * Sets gets maximal width of dialog in normal state. Note: that option has effect only while resizing dialog by end user.
     */
    maxWidth?: number;
    /**
     * Sets gets ability to drag dialog by end user.
     */
    draggable?: boolean;
    /**
     * Sets gets initial position of dialog. That should be object, which contains "top" and "left" members or object
     * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
     */
    position?: any;
    /**
     * Sets gets ability to resize dialog by end user.
     */
    resizable?: boolean;
    /**
     * Sets gets value for tabIndex attribute applied to main html element of dialog.
     */
    tabIndex?: number;
    /**
     * Sets gets animation applied to dialog when it is opened. That can be any object supported by jquery show(param) method.
     */
    openAnimation?: any;
    /**
     * Sets gets animation applied to dialog when it is closed. That can be any object supported by jquery hide(param) method.
     */
    closeAnimation?: any;
    /**
     * Sets gets value of zIndex applied to the main html element of dialog. If value is not set, then 1000 is used.
     */
    zIndex?: number;
    /**
     * Sets gets modal state of dialog.
     * If there are more than 1 modal igDialog, then last opened dialog wins and becomes on the top.
     * Note: modal functionality is not supported when dialog is minimized or pinned, because that will trigger misbehavior.
     */
    modal?: boolean;
    /**
     * Sets gets ability to process focus and blur events of child elements located in dialog in order to maintain focused state.
     * Notes:
     * If that option is enabled, then focus and blur event handlers are added to all child elements of dialog.
     * If dialog is modal or it can be maximized, then it is not recommended to disable that option.
     * If that option is modified after igDialog was already created, then depending on current state of dialog, it will be temporary closed-opened or opened-closed.
     */
    trackFocus?: boolean;
    /**
     * Sets gets title/tooltip for close button in dialog. That is override for $.ig.Dialog.locale.closeButtonTitle.
     */
    closeButtonTitle?: string;
    /**
     * Sets gets title/tooltip for minimize button in dialog. That is override for $.ig.Dialog.locale.minimizeButtonTitle.
     */
    minimizeButtonTitle?: string;
    /**
     * Sets gets title/tooltip for maximize button in dialog. That is override for $.ig.Dialog.locale.maximizeButtonTitle.
     */
    maximizeButtonTitle?: string;
    /**
     * Sets gets title/tooltip for pin button in dialog. That is override for $.ig.Dialog.locale.pinButtonTitle.
     */
    pinButtonTitle?: string;
    /**
     * Sets gets title/tooltip for unpin button in dialog. That is override for $.ig.Dialog.locale.unpinButtonTitle.
     */
    unpinButtonTitle?: string;
    /**
     * Sets gets title/tooltip for restore button in dialog. That is override for $.ig.Dialog.locale.restoreButtonTitle.
     */
    restoreButtonTitle?: string;
    /**
     * Sets gets temporary value for src, which is used while changing parent of base element if it is instance of IFRAME. That is allows to get around possible javascript exceptions under IE.
     */
    temporaryUrl?: string;
    /**
     * Sets gets ability to adjust state of header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
     */
    enableHeaderFocus?: boolean;
    /**
     * Sets gets processing dblclick on dialog-header.If option is not false and dialog was minimized, then its state will be set to normal.If option is set to "auto" and showMaximizeButton is enabled or if option is set to true, then dialog will be maximized when it was in normal state,and dialog-state will be set to normal if it was maximized.
     */
    enableDblclick?: any;
    /**
     * Event which is raised before state of dialog was changed.
     * Return false in order to cancel action.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event. That parameter can be null if state was modified from codes.
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.button to obtain name of button, which triggered event. Note: if state was modified from codes, then "button" is undefined.
     * Use ui.oldState to obtain old state of dialog, which can be one of following: "opened", "minimized", "maximized", "closed".
     * Use ui.oldPinned to obtain boolean value of old pin state of dialog.
     * Use ui.action to obtain name of action. That can be one of the following:
     * "open" - request to open dialog
     * "close" - request to close dialog
     * "minimize" - request to minimize dialog
     * "maximize" - request to maximize dialog
     * "restore" - request to restore dialog from minimized or maximized state
     * "pin" - request to pin dialog
     * "unpin" - request to unpin dialog
     */
    stateChanging?: StateChangingEvent;
    /**
     * Event which is raised after state of dialog was changed.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event. That parameter can be null if state was modified from codes.
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.button to obtain name of button, which triggered event. Note: if state was modified from codes, then "button" is undefined.
     * Use ui.oldState to obtain old state of dialog, which can be one of following: "opened", "minimized", "maximized", "closed".
     * Use ui.oldPinned to obtain boolean value of old pin state of dialog.
     * Use ui.action to obtain name of action. That can be one of the following:
     * "open" - dialog was opened. Note: event is raised before possible "openAnimation" started.
     * "close" - dialog was closed. Note: event is raised before possible "closeAnimation" started.
     * "minimize" - dialog was minimized
     * "maximize" - dialog was maximized
     * "restore" - dialog was restored from minimized or maximized state
     * "pin" - dialog was pinned
     * "unpin" - dialog was unpinned
     */
    stateChanged?: StateChangedEvent;
    /**
     * Event which is raised after end animation when dialod was closed or opened.
     * Function takes arguments "evt" and "ui".
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.action to obtain name of action, which triggered animation.
     * "open" - dialog was opened
     * "close" - dialog was closed
     */
    animationEnded?: AnimationEndedEvent;
    /**
     * Event which is raised when dialog or its content gets focus.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event.
     * Use ui.owner to obtain reference to igDialog.
     */
    focus?: FocusEvent;
    /**
     * Event which is raised when dialog or its content loses focus.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event.
     * Use ui.owner to obtain reference to igDialog.
     */
    blur?: BlurEvent;
    /**
     * Option for igDialog
     */
    [optionName: string]: any;
}
interface IgDialogMethods {
    /**
     * Destroys igDialog and moves target element to its original parent.
     */
    destroy(): Object;
    /**
     * Gets sets state of editor.
     * Note: If state of dialog changes, then stateChanging and stateChanged events are raised.
     *
     * @param state     New state.
     */
    state(state?: string): string;
    /**
     * Gets reference to dynamically created DIV element which represents dialog.
     */
    mainElement(): Element;
    /**
     * Closes dialog if it is opened.
     * Notes:
     * 1. If state of dialog changes, then stateChanging and stateChanged events are raised.
     * 2. That method does not change minimized or maximized state of dialog.
     * It means that method "open" will open dialog and keep previous minimized or maximized state.
     *
     * @param e     Browser event: internal use only.
     */
    close(e?: Object): Object;
    /**
     * Opens dialog if it is closed. Notes:
     * 1. If state of dialog changes, then stateChanging and stateChanged events are raised.
     * 2. That method does not change minimized or maximized state of dialog. It means that if dialog was closed by "close" method, then dialog and keep previous minimized or maximized state.
     */
    open(): Object;
    /**
     * Minimizes dialog if it is not minimized.
     * Note: If state of dialog changes, then stateChanging and stateChanged events are raised.
     */
    minimize(): Object;
    /**
     * Maximizes dialog if it is not maximized.
     * Note: If state of dialog changes, then stateChanging and stateChanged events are raised.
     */
    maximize(): Object;
    /**
     * Sets normal state for dialog which was maximized or minimized.
     * Note: If state of dialog changes, then stateChanging and stateChanged events are raised.
     */
    restore(): Object;
    /**
     * Pins dialog if it is not pinned.
     * When dialog is pinned, then the html element of dialog is moved to the original container where target element was located and position:absolute is removed.
     * Pinned dialog does not support modal state, maximized state and it can not be moved.
     * Notes:
     * 1. If parent element of original target-element is invisible, then pinned dialog becomes invisible as well.
     * 2. If state of dialog changes, then stateChanging and stateChanged events are raised.
     */
    pin(): Object;
    /**
     * Unpins dialog if it is pinned.
     * Note: If state of dialog changes, then stateChanging and stateChanged events are raised.
     */
    unpin(): Object;
    /**
     * Gets reference to the top modal dialog.
     */
    getTopModal(): Object;
    /**
     * Checks if dialog is modal and it is currently active.
     */
    isTopModal(): boolean;
    /**
     * Moves not modal dialog to the top.
     *
     * @param e     Original event of browser.
     */
    moveToTop(e?: Object): Object;
    /**
     * Retrieves the igDialog content container or sets its content to be the new content provided.
     *
     * @param newContent     The new html content provided as a string. If the parameter is provided then the method acts as a setter.
     */
    content(newContent?: string): Object;
}
interface JQuery {
    data(propertyName: "igDialog"): IgDialogMethods;
}
interface JQuery {
    igDialog(methodName: "destroy"): Object;
    igDialog(methodName: "state", state?: string): string;
    igDialog(methodName: "mainElement"): Element;
    igDialog(methodName: "close", e?: Object): Object;
    igDialog(methodName: "open"): Object;
    igDialog(methodName: "minimize"): Object;
    igDialog(methodName: "maximize"): Object;
    igDialog(methodName: "restore"): Object;
    igDialog(methodName: "pin"): Object;
    igDialog(methodName: "unpin"): Object;
    igDialog(methodName: "getTopModal"): Object;
    igDialog(methodName: "isTopModal"): boolean;
    igDialog(methodName: "moveToTop", e?: Object): Object;
    igDialog(methodName: "content", newContent?: string): Object;
    /**
     * Sets gets jquery DIV object which is used as main container for dialog.
     * Notes:
     * 1. That object is optional and it should not contain any children.
     * 2. It should not have parent.
     * 3. It should not contain attributes which might destroy laout or appearance of dialog.
     * 4. Change of that option is not supported.
     */
    igDialog(optionLiteral: 'option', optionName: "mainElement"): Element;
    /**
     * Sets gets jquery DIV object which is used as main container for dialog.
     * Notes:
     * 1. That object is optional and it should not contain any children.
     * 2. It should not have parent.
     * 3. It should not contain attributes which might destroy laout or appearance of dialog.
     * 4. Change of that option is not supported.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "mainElement", optionValue: Element): void;
    /**
     * Sets gets state of dialog.Note: when dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
     */
    igDialog(optionLiteral: 'option', optionName: "state"): any;
    /**
     * Sets gets state of dialog.Note: when dialog is modal, then pinned and minimized states are not supported, because that will trigger misbehavior.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "state", optionValue: any): void;
    /**
     * Sets gets pinned state of dialog.
     * When dialog is pinned, then the html element of dialog is moved to the original container where target element was located and position:absolute is removed.
     * Pinned dialog does not support modal state, maximized state and it can not be moved.
     * Notes:
     * 1. If parent element of original target-element is invisible, then pinned dialog becomes invisible as well.
     * 2. Pinned state is not supported for modal dialog.
     */
    igDialog(optionLiteral: 'option', optionName: "pinned"): boolean;
    /**
     * Sets gets pinned state of dialog.
     * When dialog is pinned, then the html element of dialog is moved to the original container where target element was located and position:absolute is removed.
     * Pinned dialog does not support modal state, maximized state and it can not be moved.
     * Notes:
     * 1. If parent element of original target-element is invisible, then pinned dialog becomes invisible as well.
     * 2. Pinned state is not supported for modal dialog.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "pinned", optionValue: boolean): void;
    /**
     * Sets gets ability to close dialog on Esc key.
     */
    igDialog(optionLiteral: 'option', optionName: "closeOnEscape"): boolean;
    /**
     * Sets gets ability to close dialog on Esc key.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "closeOnEscape", optionValue: boolean): void;
    /**
     * Sets gets visibility of close button in header.
     */
    igDialog(optionLiteral: 'option', optionName: "showCloseButton"): boolean;
    /**
     * Sets gets visibility of close button in header.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "showCloseButton", optionValue: boolean): void;
    /**
     * Sets gets visibility of maximize button in header.
     */
    igDialog(optionLiteral: 'option', optionName: "showMaximizeButton"): boolean;
    /**
     * Sets gets visibility of maximize button in header.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "showMaximizeButton", optionValue: boolean): void;
    /**
     * Sets gets visibility of minimize button in header.
     */
    igDialog(optionLiteral: 'option', optionName: "showMinimizeButton"): boolean;
    /**
     * Sets gets visibility of minimize button in header.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "showMinimizeButton", optionValue: boolean): void;
    /**
     * Sets gets visibility of pin button in header.
     */
    igDialog(optionLiteral: 'option', optionName: "showPinButton"): boolean;
    /**
     * Sets gets visibility of pin button in header.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "showPinButton", optionValue: boolean): void;
    /**
     * Sets gets ability to automatically pin dialog when dialog was minimized.
     */
    igDialog(optionLiteral: 'option', optionName: "pinOnMinimized"): boolean;
    /**
     * Sets gets ability to automatically pin dialog when dialog was minimized.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "pinOnMinimized", optionValue: boolean): void;
    /**
     * Sets gets name of css class which is applied to the SPAN element located on the left side of header.
     */
    igDialog(optionLiteral: 'option', optionName: "imageClass"): string;
    /**
     * Sets gets name of css class which is applied to the SPAN element located on the left side of header.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "imageClass", optionValue: string): void;
    /**
     * Sets gets text which appears in header of dialog.
     */
    igDialog(optionLiteral: 'option', optionName: "headerText"): string;
    /**
     * Sets gets text which appears in header of dialog.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "headerText", optionValue: string): void;
    /**
     * Sets gets visibility of header.
     */
    igDialog(optionLiteral: 'option', optionName: "showHeader"): boolean;
    /**
     * Sets gets visibility of header.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "showHeader", optionValue: boolean): void;
    /**
     * Sets gets visibility of footer.
     */
    igDialog(optionLiteral: 'option', optionName: "showFooter"): boolean;
    /**
     * Sets gets visibility of footer.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "showFooter", optionValue: boolean): void;
    /**
     * Sets gets text which appears in footer of dialog.
     */
    igDialog(optionLiteral: 'option', optionName: "footerText"): string;
    /**
     * Sets gets text which appears in footer of dialog.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "footerText", optionValue: string): void;
    /**
     * Sets gets name of css class which is applied to the main DIV element of dialog.
     */
    igDialog(optionLiteral: 'option', optionName: "dialogClass"): string;
    /**
     * Sets gets name of css class which is applied to the main DIV element of dialog.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "dialogClass", optionValue: string): void;
    /**
     * Sets gets container html element for dialog.
     * That can be reference to html element, jquery selector or jquery object.
     * By default the parent form of original target element is used. If form is not found, then body is used.
     * Note: If the "position" of container is not set or it is "static", then position is set to "relative".
     */
    igDialog(optionLiteral: 'option', optionName: "container"): any;
    /**
     * Sets gets container html element for dialog.
     * That can be reference to html element, jquery selector or jquery object.
     * By default the parent form of original target element is used. If form is not found, then body is used.
     * Note: If the "position" of container is not set or it is "static", then position is set to "relative".
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "container", optionValue: any): void;
    /**
     * Sets gets initial height of dialog in pixels for normal state.
     * Besides numeric values, following units are supported: "px", "em" and "%".
     * In case of "%", the size of browser window is used and it has effect only on open action.
     */
    igDialog(optionLiteral: 'option', optionName: "height"): number;
    /**
     * Sets gets initial height of dialog in pixels for normal state.
     * Besides numeric values, following units are supported: "px", "em" and "%".
     * In case of "%", the size of browser window is used and it has effect only on open action.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "height", optionValue: number): void;
    /**
     * Sets gets initial width of dialog in pixels for normal state.
     * Besides numeric values, following units are supported: "px", "em" and "%".
     * In case of "%", the size of browser window is used and it has effect only on open action.
     */
    igDialog(optionLiteral: 'option', optionName: "width"): number;
    /**
     * Sets gets initial width of dialog in pixels for normal state.
     * Besides numeric values, following units are supported: "px", "em" and "%".
     * In case of "%", the size of browser window is used and it has effect only on open action.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "width", optionValue: number): void;
    /**
     * Sets gets minimal height of dialog in normal state.
     */
    igDialog(optionLiteral: 'option', optionName: "minHeight"): number;
    /**
     * Sets gets minimal height of dialog in normal state.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "minHeight", optionValue: number): void;
    /**
     * Sets gets minimal width of dialog in normal state.
     */
    igDialog(optionLiteral: 'option', optionName: "minWidth"): number;
    /**
     * Sets gets minimal width of dialog in normal state.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "minWidth", optionValue: number): void;
    /**
     * Sets gets maximal height of dialog in normal state. Note: that option has effect only while resizing dialog by end user.
     */
    igDialog(optionLiteral: 'option', optionName: "maxHeight"): number;
    /**
     * Sets gets maximal height of dialog in normal state. Note: that option has effect only while resizing dialog by end user.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "maxHeight", optionValue: number): void;
    /**
     * Sets gets maximal width of dialog in normal state. Note: that option has effect only while resizing dialog by end user.
     */
    igDialog(optionLiteral: 'option', optionName: "maxWidth"): number;
    /**
     * Sets gets maximal width of dialog in normal state. Note: that option has effect only while resizing dialog by end user.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "maxWidth", optionValue: number): void;
    /**
     * Sets gets ability to drag dialog by end user.
     */
    igDialog(optionLiteral: 'option', optionName: "draggable"): boolean;
    /**
     * Sets gets ability to drag dialog by end user.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "draggable", optionValue: boolean): void;
    /**
     * Sets gets initial position of dialog. That should be object, which contains "top" and "left" members or object
     * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
     */
    igDialog(optionLiteral: 'option', optionName: "position"): any;
    /**
     * Sets gets initial position of dialog. That should be object, which contains "top" and "left" members or object
     * supported by jquery.position(param) method. Examples: { left: 100, top: 200 }, { my: "left top", at: "left top", offset: "100 200" }
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "position", optionValue: any): void;
    /**
     * Sets gets ability to resize dialog by end user.
     */
    igDialog(optionLiteral: 'option', optionName: "resizable"): boolean;
    /**
     * Sets gets ability to resize dialog by end user.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "resizable", optionValue: boolean): void;
    /**
     * Sets gets value for tabIndex attribute applied to main html element of dialog.
     */
    igDialog(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets gets value for tabIndex attribute applied to main html element of dialog.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets animation applied to dialog when it is opened. That can be any object supported by jquery show(param) method.
     */
    igDialog(optionLiteral: 'option', optionName: "openAnimation"): any;
    /**
     * Sets gets animation applied to dialog when it is opened. That can be any object supported by jquery show(param) method.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "openAnimation", optionValue: any): void;
    /**
     * Sets gets animation applied to dialog when it is closed. That can be any object supported by jquery hide(param) method.
     */
    igDialog(optionLiteral: 'option', optionName: "closeAnimation"): any;
    /**
     * Sets gets animation applied to dialog when it is closed. That can be any object supported by jquery hide(param) method.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "closeAnimation", optionValue: any): void;
    /**
     * Sets gets value of zIndex applied to the main html element of dialog. If value is not set, then 1000 is used.
     */
    igDialog(optionLiteral: 'option', optionName: "zIndex"): number;
    /**
     * Sets gets value of zIndex applied to the main html element of dialog. If value is not set, then 1000 is used.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "zIndex", optionValue: number): void;
    /**
     * Sets gets modal state of dialog.
     * If there are more than 1 modal igDialog, then last opened dialog wins and becomes on the top.
     * Note: modal functionality is not supported when dialog is minimized or pinned, because that will trigger misbehavior.
     */
    igDialog(optionLiteral: 'option', optionName: "modal"): boolean;
    /**
     * Sets gets modal state of dialog.
     * If there are more than 1 modal igDialog, then last opened dialog wins and becomes on the top.
     * Note: modal functionality is not supported when dialog is minimized or pinned, because that will trigger misbehavior.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "modal", optionValue: boolean): void;
    /**
     * Sets gets ability to process focus and blur events of child elements located in dialog in order to maintain focused state.
     * Notes:
     * If that option is enabled, then focus and blur event handlers are added to all child elements of dialog.
     * If dialog is modal or it can be maximized, then it is not recommended to disable that option.
     * If that option is modified after igDialog was already created, then depending on current state of dialog, it will be temporary closed-opened or opened-closed.
     */
    igDialog(optionLiteral: 'option', optionName: "trackFocus"): boolean;
    /**
     * Sets gets ability to process focus and blur events of child elements located in dialog in order to maintain focused state.
     * Notes:
     * If that option is enabled, then focus and blur event handlers are added to all child elements of dialog.
     * If dialog is modal or it can be maximized, then it is not recommended to disable that option.
     * If that option is modified after igDialog was already created, then depending on current state of dialog, it will be temporary closed-opened or opened-closed.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "trackFocus", optionValue: boolean): void;
    /**
     * Sets gets title/tooltip for close button in dialog. That is override for $.ig.Dialog.locale.closeButtonTitle.
     */
    igDialog(optionLiteral: 'option', optionName: "closeButtonTitle"): string;
    /**
     * Sets gets title/tooltip for close button in dialog. That is override for $.ig.Dialog.locale.closeButtonTitle.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "closeButtonTitle", optionValue: string): void;
    /**
     * Sets gets title/tooltip for minimize button in dialog. That is override for $.ig.Dialog.locale.minimizeButtonTitle.
     */
    igDialog(optionLiteral: 'option', optionName: "minimizeButtonTitle"): string;
    /**
     * Sets gets title/tooltip for minimize button in dialog. That is override for $.ig.Dialog.locale.minimizeButtonTitle.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "minimizeButtonTitle", optionValue: string): void;
    /**
     * Sets gets title/tooltip for maximize button in dialog. That is override for $.ig.Dialog.locale.maximizeButtonTitle.
     */
    igDialog(optionLiteral: 'option', optionName: "maximizeButtonTitle"): string;
    /**
     * Sets gets title/tooltip for maximize button in dialog. That is override for $.ig.Dialog.locale.maximizeButtonTitle.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "maximizeButtonTitle", optionValue: string): void;
    /**
     * Sets gets title/tooltip for pin button in dialog. That is override for $.ig.Dialog.locale.pinButtonTitle.
     */
    igDialog(optionLiteral: 'option', optionName: "pinButtonTitle"): string;
    /**
     * Sets gets title/tooltip for pin button in dialog. That is override for $.ig.Dialog.locale.pinButtonTitle.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "pinButtonTitle", optionValue: string): void;
    /**
     * Sets gets title/tooltip for unpin button in dialog. That is override for $.ig.Dialog.locale.unpinButtonTitle.
     */
    igDialog(optionLiteral: 'option', optionName: "unpinButtonTitle"): string;
    /**
     * Sets gets title/tooltip for unpin button in dialog. That is override for $.ig.Dialog.locale.unpinButtonTitle.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "unpinButtonTitle", optionValue: string): void;
    /**
     * Sets gets title/tooltip for restore button in dialog. That is override for $.ig.Dialog.locale.restoreButtonTitle.
     */
    igDialog(optionLiteral: 'option', optionName: "restoreButtonTitle"): string;
    /**
     * Sets gets title/tooltip for restore button in dialog. That is override for $.ig.Dialog.locale.restoreButtonTitle.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "restoreButtonTitle", optionValue: string): void;
    /**
     * Sets gets temporary value for src, which is used while changing parent of base element if it is instance of IFRAME. That is allows to get around possible javascript exceptions under IE.
     */
    igDialog(optionLiteral: 'option', optionName: "temporaryUrl"): string;
    /**
     * Sets gets temporary value for src, which is used while changing parent of base element if it is instance of IFRAME. That is allows to get around possible javascript exceptions under IE.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "temporaryUrl", optionValue: string): void;
    /**
     * Sets gets ability to adjust state of header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
     */
    igDialog(optionLiteral: 'option', optionName: "enableHeaderFocus"): boolean;
    /**
     * Sets gets ability to adjust state of header depending on focused and not-focused states. Note: the "trackFocus" option should be enabled.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "enableHeaderFocus", optionValue: boolean): void;
    /**
     * Sets gets processing dblclick on dialog-header.If option is not false and dialog was minimized, then its state will be set to normal.If option is set to "auto" and showMaximizeButton is enabled or if option is set to true, then dialog will be maximized when it was in normal state,and dialog-state will be set to normal if it was maximized.
     */
    igDialog(optionLiteral: 'option', optionName: "enableDblclick"): any;
    /**
     * Sets gets processing dblclick on dialog-header.If option is not false and dialog was minimized, then its state will be set to normal.If option is set to "auto" and showMaximizeButton is enabled or if option is set to true, then dialog will be maximized when it was in normal state,and dialog-state will be set to normal if it was maximized.
     *
     * @optionValue New value to be set.
     */
    igDialog(optionLiteral: 'option', optionName: "enableDblclick", optionValue: any): void;
    /**
     * Event which is raised before state of dialog was changed.
     * Return false in order to cancel action.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event. That parameter can be null if state was modified from codes.
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.button to obtain name of button, which triggered event. Note: if state was modified from codes, then "button" is undefined.
     * Use ui.oldState to obtain old state of dialog, which can be one of following: "opened", "minimized", "maximized", "closed".
     * Use ui.oldPinned to obtain boolean value of old pin state of dialog.
     * Use ui.action to obtain name of action. That can be one of the following:
     * "open" - request to open dialog
     * "close" - request to close dialog
     * "minimize" - request to minimize dialog
     * "maximize" - request to maximize dialog
     * "restore" - request to restore dialog from minimized or maximized state
     * "pin" - request to pin dialog
     * "unpin" - request to unpin dialog
     */
    igDialog(optionLiteral: 'option', optionName: "stateChanging"): StateChangingEvent;
    /**
     * Event which is raised before state of dialog was changed.
     * Return false in order to cancel action.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event. That parameter can be null if state was modified from codes.
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.button to obtain name of button, which triggered event. Note: if state was modified from codes, then "button" is undefined.
     * Use ui.oldState to obtain old state of dialog, which can be one of following: "opened", "minimized", "maximized", "closed".
     * Use ui.oldPinned to obtain boolean value of old pin state of dialog.
     * Use ui.action to obtain name of action. That can be one of the following:
     * "open" - request to open dialog
     * "close" - request to close dialog
     * "minimize" - request to minimize dialog
     * "maximize" - request to maximize dialog
     * "restore" - request to restore dialog from minimized or maximized state
     * "pin" - request to pin dialog
     * "unpin" - request to unpin dialog
     *
     * @optionValue Define event handler function.
     */
    igDialog(optionLiteral: 'option', optionName: "stateChanging", optionValue: StateChangingEvent): void;
    /**
     * Event which is raised after state of dialog was changed.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event. That parameter can be null if state was modified from codes.
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.button to obtain name of button, which triggered event. Note: if state was modified from codes, then "button" is undefined.
     * Use ui.oldState to obtain old state of dialog, which can be one of following: "opened", "minimized", "maximized", "closed".
     * Use ui.oldPinned to obtain boolean value of old pin state of dialog.
     * Use ui.action to obtain name of action. That can be one of the following:
     * "open" - dialog was opened. Note: event is raised before possible "openAnimation" started.
     * "close" - dialog was closed. Note: event is raised before possible "closeAnimation" started.
     * "minimize" - dialog was minimized
     * "maximize" - dialog was maximized
     * "restore" - dialog was restored from minimized or maximized state
     * "pin" - dialog was pinned
     * "unpin" - dialog was unpinned
     */
    igDialog(optionLiteral: 'option', optionName: "stateChanged"): StateChangedEvent;
    /**
     * Event which is raised after state of dialog was changed.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event. That parameter can be null if state was modified from codes.
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.button to obtain name of button, which triggered event. Note: if state was modified from codes, then "button" is undefined.
     * Use ui.oldState to obtain old state of dialog, which can be one of following: "opened", "minimized", "maximized", "closed".
     * Use ui.oldPinned to obtain boolean value of old pin state of dialog.
     * Use ui.action to obtain name of action. That can be one of the following:
     * "open" - dialog was opened. Note: event is raised before possible "openAnimation" started.
     * "close" - dialog was closed. Note: event is raised before possible "closeAnimation" started.
     * "minimize" - dialog was minimized
     * "maximize" - dialog was maximized
     * "restore" - dialog was restored from minimized or maximized state
     * "pin" - dialog was pinned
     * "unpin" - dialog was unpinned
     *
     * @optionValue Define event handler function.
     */
    igDialog(optionLiteral: 'option', optionName: "stateChanged", optionValue: StateChangedEvent): void;
    /**
     * Event which is raised after end animation when dialod was closed or opened.
     * Function takes arguments "evt" and "ui".
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.action to obtain name of action, which triggered animation.
     * "open" - dialog was opened
     * "close" - dialog was closed
     */
    igDialog(optionLiteral: 'option', optionName: "animationEnded"): AnimationEndedEvent;
    /**
     * Event which is raised after end animation when dialod was closed or opened.
     * Function takes arguments "evt" and "ui".
     * Use ui.owner to obtain reference to igDialog.
     * Use ui.action to obtain name of action, which triggered animation.
     * "open" - dialog was opened
     * "close" - dialog was closed
     *
     * @optionValue Define event handler function.
     */
    igDialog(optionLiteral: 'option', optionName: "animationEnded", optionValue: AnimationEndedEvent): void;
    /**
     * Event which is raised when dialog or its content gets focus.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event.
     * Use ui.owner to obtain reference to igDialog.
     */
    igDialog(optionLiteral: 'option', optionName: "focus"): FocusEvent;
    /**
     * Event which is raised when dialog or its content gets focus.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event.
     * Use ui.owner to obtain reference to igDialog.
     *
     * @optionValue Define event handler function.
     */
    igDialog(optionLiteral: 'option', optionName: "focus", optionValue: FocusEvent): void;
    /**
     * Event which is raised when dialog or its content loses focus.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event.
     * Use ui.owner to obtain reference to igDialog.
     */
    igDialog(optionLiteral: 'option', optionName: "blur"): BlurEvent;
    /**
     * Event which is raised when dialog or its content loses focus.
     * Function takes arguments "evt" and "ui".
     * Use evt to obtain browser event.
     * Use ui.owner to obtain reference to igDialog.
     *
     * @optionValue Define event handler function.
     */
    igDialog(optionLiteral: 'option', optionName: "blur", optionValue: BlurEvent): void;
    igDialog(options: IgDialog): JQuery;
    igDialog(optionLiteral: 'option', optionName: string): any;
    igDialog(optionLiteral: 'option', options: IgDialog): JQuery;
    igDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igDialog(methodName: string, ...methodParams: any[]): any;
}
interface IgDoughnutChartSeries {
    /**
     * Gets or sets the current series type.
     *
     * Valid values:
     * "flat" Series has flat 1-dimensional data.
     */
    type?: any;
    /**
     * Whether the series should render a tooltip.
     */
    showTooltip?: boolean;
    /**
     * The name of template or the template itself that chart tooltip will use to render.
     */
    tooltipTemplate?: string;
    /**
     * Gets or sets the data source for the chart.
     */
    itemsSource?: any;
    /**
     * Gets or Sets the property name that contains the values.
     */
    valueMemberPath?: string;
    /**
     * Gets or sets the property name that contains the labels.
     */
    labelMemberPath?: string;
    /**
     * Gets or sets the position of chart labels.
     *
     * Valid values:
     * "none" No labels will be displayed.
     * "center" Labels will be displayed in the center.
     * "insideEnd" Labels will be displayed inside and by the edge of the container.
     * "outsideEnd" Labels will be displayed outside the container.
     * "bestFit" Labels will automatically decide their location.
     */
    labelsPosition?: any;
    /**
     * Gets or sets whether the leader lines are visible.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    leaderLineVisibility?: any;
    /**
     * Gets or sets the style for the leader lines.
     */
    leaderLineStyle?: any;
    /**
     * Gets or sets what type of leader lines will be used for the outside end labels.
     *
     * Valid values:
     * "straight" A straight line is drawn between the slice and its label.
     * "arc" A curved line is drawn between the slice and its label. The line follows makes a natural turn from the slice to the label.
     * "spline" A curved line is drawn between the slice and its label. The line starts radially from the slice and then turns to the label.
     */
    leaderLineType?: any;
    /**
     * Gets or sets the margin between a label and its leader line. The default is 6 pixels.
     */
    leaderLineMargin?: number;
    /**
     * Gets or sets the threshold value that determines if slices are grouped into the Others slice.
     */
    othersCategoryThreshold?: number;
    /**
     * Gets or sets whether to use numeric or percent-based threshold value.
     *
     * Valid values:
     * "percent" Data value is compared to OthersCategoryThreshold as a percentage of the total.
     */
    othersCategoryType?: any;
    /**
     * Gets or sets the label of the Others slice.
     */
    othersCategoryText?: string;
    /**
     * Gets or sets the legend used for the current chart.
     */
    legend?: any;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
     */
    formatLabel?: any;
    /**
     * Gets or sets the pixel amount, by which the labels are offset from the edge of the slices.
     */
    labelExtent?: number;
    /**
     * Gets or sets the starting angle of the chart.
     * The default zero value is equivalent to 3 o'clock.
     */
    startAngle?: number;
    /**
     * Gets or sets the style used when a slice is selected.
     */
    selectedStyle?: any;
    /**
     * Gets or sets the Brushes property.
     * The brushes property defines the palette from which automatically assigned slice brushes are selected.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    brushes?: any;
    /**
     * Gets or sets the Outlines property.
     * The Outlines property defines the palette from which automatically assigned slice outlines are selected.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    outlines?: any;
    /**
     * Gets or sets whether all surface interactions with the plot area should be disabled.
     */
    isSurfaceInteractionDisabled?: any;
    /**
     * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.
     */
    radiusFactor?: number;
    /**
     * Option for IgDoughnutChartSeries
     */
    [optionName: string]: any;
}
interface HoleDimensionsChangedEvent {
    (event: Event, ui: HoleDimensionsChangedEventUIParam): void;
}
interface HoleDimensionsChangedEventUIParam {
}
interface IgDoughnutChart {
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * An array of series objects.
     */
    series?: IgDoughnutChartSeries[];
    /**
     * Gets or sets whether the slices can be selected.
     */
    allowSliceSelection?: boolean;
    /**
     * Gets or sets whether all surface interactions with the plot area should be disabled.
     */
    isSurfaceInteractionDisabled?: any;
    /**
     * Gets or sets whether the slices can be exploded.
     */
    allowSliceExplosion?: boolean;
    /**
     * Gets or sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.
     */
    innerExtent?: number;
    /**
     * Gets or sets the style used when a slice is selected.
     */
    selectedStyle?: any;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipShowing?: TooltipShowingEvent;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipShown?: TooltipShownEvent;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipHiding?: TooltipHidingEvent;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipHidden?: TooltipHiddenEvent;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     */
    browserNotSupported?: BrowserNotSupportedEvent;
    /**
     * Raised when the slice is clicked.
     */
    sliceClick?: SliceClickEvent;
    /**
     * Raised when the dimensions (center point or radius) of the doughnut hole change.
     */
    holeDimensionsChanged?: HoleDimensionsChangedEvent;
    /**
     * Option for igDoughnutChart
     */
    [optionName: string]: any;
}
interface IgDoughnutChartMethods {
    /**
     * Adds a new series to the doughnut chart.
     *
     * @param seriesObj     The series object to be added.
     */
    addSeries(seriesObj: Object): void;
    /**
     * Removes the specified series from the doughnut chart.
     *
     * @param seriesObj     The series object identifying the series to be removed.
     */
    removeSeries(seriesObj: Object): void;
    /**
     * Updates the series with the specified name with the specified new property values.
     *
     * @param value     The series object identifying the series to be updated.
     */
    updateSeries(value: Object): void;
    /**
     * Returns the center of the doughnut chart.
     */
    getCenterCoordinates(): Object;
    /**
     * Returns the radius of the chart's hole.
     */
    getHoleRadius(): number;
    /**
     * Returns information about how the doughnut chart is rendered.
     */
    exportVisualData(): Object;
    /**
     * Causes all of the series that have pending changes e.g. by changed property values to be rendered immediately.
     */
    flush(): void;
    /**
     * Destroys the widget.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igDoughnutChart"): IgDoughnutChartMethods;
}
interface JQuery {
    igDoughnutChart(methodName: "addSeries", seriesObj: Object): void;
    igDoughnutChart(methodName: "removeSeries", seriesObj: Object): void;
    igDoughnutChart(methodName: "updateSeries", value: Object): void;
    igDoughnutChart(methodName: "getCenterCoordinates"): Object;
    igDoughnutChart(methodName: "getHoleRadius"): number;
    igDoughnutChart(methodName: "exportVisualData"): Object;
    igDoughnutChart(methodName: "flush"): void;
    igDoughnutChart(methodName: "destroy"): void;
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the chart. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * An array of series objects.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "series"): IgDoughnutChartSeries[];
    /**
     * An array of series objects.
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "series", optionValue: IgDoughnutChartSeries[]): void;
    /**
     * Gets  whether the slices can be selected.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "allowSliceSelection"): boolean;
    /**
     * Sets whether the slices can be selected.
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "allowSliceSelection", optionValue: boolean): void;
    /**
     * Gets  whether all surface interactions with the plot area should be disabled.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "isSurfaceInteractionDisabled"): any;
    /**
     * Sets whether all surface interactions with the plot area should be disabled.
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "isSurfaceInteractionDisabled", optionValue: any): void;
    /**
     * Gets  whether the slices can be exploded.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "allowSliceExplosion"): boolean;
    /**
     * Sets whether the slices can be exploded.
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "allowSliceExplosion", optionValue: boolean): void;
    /**
     * Gets  the inner extent of the doughnut chart. It is percent from the outer ring's radius.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "innerExtent"): number;
    /**
     * Sets the inner extent of the doughnut chart. It is percent from the outer ring's radius.
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "innerExtent", optionValue: number): void;
    /**
     * Gets  the style used when a slice is selected.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "selectedStyle"): any;
    /**
     * Sets the style used when a slice is selected.
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "selectedStyle", optionValue: any): void;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.chart to get reference to chart object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     *
     * @optionValue Define event handler function.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;
    /**
     * Raised when the slice is clicked.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "sliceClick"): SliceClickEvent;
    /**
     * Raised when the slice is clicked.
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "sliceClick", optionValue: SliceClickEvent): void;
    /**
     * Raised when the dimensions (center point or radius) of the doughnut hole change.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "holeDimensionsChanged"): HoleDimensionsChangedEvent;
    /**
     * Raised when the dimensions (center point or radius) of the doughnut hole change.
     *
     * @optionValue New value to be set.
     */
    igDoughnutChart(optionLiteral: 'option', optionName: "holeDimensionsChanged", optionValue: HoleDimensionsChangedEvent): void;
    igDoughnutChart(options: IgDoughnutChart): JQuery;
    igDoughnutChart(optionLiteral: 'option', optionName: string): any;
    igDoughnutChart(optionLiteral: 'option', options: IgDoughnutChart): JQuery;
    igDoughnutChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igDoughnutChart(methodName: string, ...methodParams: any[]): any;
}
interface RenderingEvent {
    (event: Event, ui: RenderingEventUIParam): void;
}
interface RenderingEventUIParam {
    /**
     * Used to get a reference to the editor performing rendering.
     */
    owner?: any;
    /**
     * Used to get a reference to the editor element.
     */
    element?: any;
}
interface MousedownEvent {
    (event: Event, ui: MousedownEventUIParam): void;
}
interface MousedownEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     */
    elementType?: any;
    /**
     * Used to obtain flag which represents html element under mouse.
     */
    id?: any;
}
interface MouseupEvent {
    (event: Event, ui: MouseupEventUIParam): void;
}
interface MouseupEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     */
    elementType?: any;
    /**
     * Used to obtain flag which represents html element under mouse.
     */
    id?: any;
}
interface MousemoveEvent {
    (event: Event, ui: MousemoveEventUIParam): void;
}
interface MousemoveEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     */
    elementType?: any;
    /**
     * Used to obtain flag which represents html element under mouse.
     */
    id?: any;
}
interface MouseoverEvent {
    (event: Event, ui: MouseoverEventUIParam): void;
}
interface MouseoverEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     */
    elementType?: any;
    /**
     * Used to obtain flag which represents html element under mouse.
     */
    id?: any;
}
interface MouseoutEvent {
    (event: Event, ui: MouseoutEventUIParam): void;
}
interface MouseoutEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     */
    elementType?: any;
    /**
     * Used to obtain flag which represents html element under mouse.
     */
    id?: any;
}
interface ValueChangingEvent {
    (event: Event, ui: ValueChangingEventUIParam): void;
}
interface ValueChangingEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain new value and ui.oldValue to obtain old value.
     */
    value?: any;
}
interface ValueChangedEvent {
    (event: Event, ui: ValueChangedEventUIParam): void;
}
interface ValueChangedEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain new value and ui.oldValue to obtain old value.
     */
    value?: any;
}
interface IgBaseEditor {
    width?: any;
    height?: any;
    /**
     * Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    value?: any;
    /**
     * Gets sets value in tabIndex for editor.
     */
    tabIndex?: number;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    allowNullValue?: boolean;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    rendering?: RenderingEvent;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    rendered?: RenderedEvent;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mousedown?: MousedownEvent;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseup?: MouseupEvent;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mousemove?: MousemoveEvent;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseover?: MouseoverEvent;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseout?: MouseoutEvent;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    blur?: BlurEvent;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    focus?: FocusEvent;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    valueChanging?: ValueChangingEvent;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    valueChanged?: ValueChangedEvent;
    /**
     * Option for igBaseEditor
     */
    [optionName: string]: any;
}
interface IgBaseEditorMethods {
    /**
     * Gets sets name attribute applied to the editor element.
     *
     * @param newValue     The new input name.
     */
    inputName(newValue?: string): string;
    value(newValue: Object): void;
    /**
     * Gets the visual editor element.
     * returnType="$" The visual editor element.
     */
    field(): void;
    /**
     * Gets reference to jquery object which is used as top/outer element of igEditor.
     * returnType="$" The container editor element.
     */
    editorContainer(): void;
    /**
     * Checks if editor has focus.
     */
    hasFocus(): boolean;
    /**
     * Set focus to editor with delay.
     *
     * @param delay     The delay before focusing the editor.
     */
    setFocus(delay?: number): void;
    /**
     * Hides editor.
     */
    hide(): void;
    /**
     * Shows editor.
     */
    show(): void;
    /**
     * Gets reference to igValidator used by the editor.
     */
    validator(): Object;
    /**
     * Checks if value in editor is valid. Note: This function will not trigger automatic notifications.
     */
    isValid(): boolean;
    /**
     * Triggers validation of editor and show potential warning message.
     */
    validate(): void;
    /**
     * Destructor of the widget
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igBaseEditor"): IgBaseEditorMethods;
}
interface KeydownEvent {
    (event: Event, ui: KeydownEventUIParam): void;
}
interface KeydownEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain value of keyCode.
     */
    key?: any;
}
interface KeypressEvent {
    (event: Event, ui: KeypressEventUIParam): void;
}
interface KeypressEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain value of keyCode.
     */
    key?: any;
}
interface KeyupEvent {
    (event: Event, ui: KeyupEventUIParam): void;
}
interface KeyupEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain value of keyCode.
     */
    key?: any;
}
interface DropDownListOpeningEvent {
    (event: Event, ui: DropDownListOpeningEventUIParam): void;
}
interface DropDownListOpeningEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used torInput to obtain reference to the editable input
     */
    editorInput?: any;
    /**
     * Used to obtain reference to the list contaier.
     */
    list?: any;
}
interface DropDownListOpenedEvent {
    (event: Event, ui: DropDownListOpenedEventUIParam): void;
}
interface DropDownListOpenedEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used torInput to obtain reference to the editable input
     */
    editorInput?: any;
    /**
     * Used to obtain reference to the list contaier.
     */
    list?: any;
}
interface DropDownListClosingEvent {
    (event: Event, ui: DropDownListClosingEventUIParam): void;
}
interface DropDownListClosingEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used torInput to obtain reference to the editable input
     */
    editorInput?: any;
    /**
     * Used to obtain reference to the list contaier.
     */
    list?: any;
}
interface DropDownListClosedEvent {
    (event: Event, ui: DropDownListClosedEventUIParam): void;
}
interface DropDownListClosedEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used torInput to obtain reference to the editable input
     */
    editorInput?: any;
    /**
     * Used to obtain reference to the list contaier.
     */
    list?: any;
}
interface DropDownItemSelectingEvent {
    (event: Event, ui: DropDownItemSelectingEventUIParam): void;
}
interface DropDownItemSelectingEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used torInput to obtain reference to the editable input
     */
    editorInput?: any;
    /**
     * Used to obtain reference to the list contaier.
     */
    list?: any;
    /**
     * Used to obtain reference to the list item which is about to be selected.
     */
    item?: any;
}
interface DropDownItemSelectedEvent {
    (event: Event, ui: DropDownItemSelectedEventUIParam): void;
}
interface DropDownItemSelectedEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used torInput to obtain reference to the editable input
     */
    editorInput?: any;
    /**
     * Used to obtain reference to the list contaier.
     */
    list?: any;
    /**
     * Used to obtain reference to the list item which is selected.
     */
    item?: any;
}
interface TextChangedEvent {
    (event: Event, ui: TextChangedEventUIParam): void;
}
interface TextChangedEventUIParam {
    /**
     * Used to obtain reference to igEditor.
     */
    owner?: any;
    /**
     * Used to obtain new text
     */
    text?: any;
    /**
     * Used to obtain the old text.
     */
    oldTExt?: any;
}
interface IgTextEditor {
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     *
     * Valid values:
     * "dropdown" button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "clear" button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "spin" spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).
     */
    buttonType?: any;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    listItems?: any[];
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    listWidth?: number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    listItemHoverDuration?: number;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    dropDownAttachedToBody?: boolean;
    /**
     * Gets sets show/hide drop-down list animation duration in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * Gets sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    visibleItemsCount?: number;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    includeKeys?: string;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    excludeKeys?: string;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * Valid values:
     * "left"
     * "right"
     * "center"
     */
    textAlign?: any;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    placeHolder?: string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    selectionOnFocus?: string;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * Valid values:
     * "text" Single line text editor based on INPUT element is created.
     * "password" Editor based on INPUT element with type password is created.
     * "multiline" multiline editor based on TEXTAREA element is created.
     */
    textMode?: any;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     */
    spinWrapAround?: boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    isLimitedToListValues?: boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    revertIfNotValid?: boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    preventSubmitOnEnter?: boolean;
    /**
     * Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    dropDownOrientation?: any;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     */
    maxLength?: number;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    dropDownOnReadOnly?: boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toUpper?: boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toLower?: boolean;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    locale?: any;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    suppressNotifications?: boolean;
    width?: any;
    height?: any;
    /**
     * Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    value?: any;
    /**
     * Gets sets value in tabIndex for editor.
     */
    tabIndex?: number;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    allowNullValue?: boolean;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    keydown?: KeydownEvent;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     */
    keypress?: KeypressEvent;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    keyup?: KeyupEvent;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListOpening?: DropDownListOpeningEvent;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListOpened?: DropDownListOpenedEvent;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListClosing?: DropDownListClosingEvent;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListClosed?: DropDownListClosedEvent;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     */
    dropDownItemSelecting?: DropDownItemSelectingEvent;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     */
    dropDownItemSelected?: DropDownItemSelectedEvent;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     */
    textChanged?: TextChangedEvent;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    rendering?: RenderingEvent;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    rendered?: RenderedEvent;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mousedown?: MousedownEvent;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseup?: MouseupEvent;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mousemove?: MousemoveEvent;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseover?: MouseoverEvent;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseout?: MouseoutEvent;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    blur?: BlurEvent;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    focus?: FocusEvent;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    valueChanging?: ValueChangingEvent;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    valueChanged?: ValueChangedEvent;
    /**
     * Option for igTextEditor
     */
    [optionName: string]: any;
}
interface IgTextEditorMethods {
    /**
     * Gets visible text in the editor.
     */
    displayValue(): string;
    /**
     * Gets reference to jquery object which is used as container of drop-down.
     * returnType="$" Returns reference to jquery object.
     */
    dropDownContainer(): void;
    /**
     * Shows the drop down list.
     */
    showDropDown(): void;
    /**
     * Hides the drop down list.
     */
    hideDropDown(): void;
    /**
     * Returns a reference to the clear button UI element of the editor.
     * returnType="$" Returns reference to jquery object.
     */
    dropDownButton(): void;
    /**
     * Returns the visibility state of the drop down listing the items.
     */
    dropDownVisible(): boolean;
    /**
     * Returns a reference to the clear button UI element of the editor.
     * returnType="$" Returns reference to jquery object.
     */
    clearButton(): void;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param text     The text to search for in the drop down list.
     * @param matchType     The rule that is applied for searching the text.
     */
    findListItemIndex(text: string, matchType?: Object): number;
    /**
     * Gets/Sets selected list item index.
     *
     * @param index     The index of the item that needs to be selected.
     */
    selectedListIndex(index?: number): number;
    /**
     * Gets selected list item.
     * returnType="$" Selected list item.
     */
    getSelectedListItem(): void;
    /**
     * Gets selected text in editor.
     */
    getSelectedText(): string;
    /**
     * Gets start index of the selected text in editor.
     */
    getSelectionStart(): number;
    /**
     * Gets end index of the selected text in editor.
     */
    getSelectionEnd(): number;
    /**
     * Paste text at location of caret. Note: method raises the "valueChanged" event.
     *
     * @param string     The string to be inserted.
     */
    insert(string: string): void;
    /**
     * Selects text in editor. If parameters are equal, then than method sets location of caret. That method has effect only when editor has focus.
     *
     * @param start     Start of the selection.
     * @param end     End of the selection.
     */
    select(start: number, end: number): void;
    /**
     * Increments hovered index in the list.
     */
    spinUp(): void;
    /**
     * Decrements hovered index in the list.
     */
    spinDown(): void;
    /**
     * Returns a reference to the spin up UI element of the editor.
     * returnType="$" The jQuery object representing the spin up UI element of the editor.
     */
    spinUpButton(): void;
    /**
     * Returns a reference to the spin down UI element of the editor.
     * returnType="$" The jQuery object representing the spin down UI element of the editor.
     */
    spinDownButton(): void;
    /**
     * Gets sets name attribute applied to the editor element.
     *
     * @param newValue     The new input name.
     */
    inputName(newValue?: string): string;
    value(newValue: Object): void;
    /**
     * Gets the visual editor element.
     * returnType="$" The visual editor element.
     */
    field(): void;
    /**
     * Gets reference to jquery object which is used as top/outer element of igEditor.
     * returnType="$" The container editor element.
     */
    editorContainer(): void;
    /**
     * Checks if editor has focus.
     */
    hasFocus(): boolean;
    /**
     * Set focus to editor with delay.
     *
     * @param delay     The delay before focusing the editor.
     */
    setFocus(delay?: number): void;
    /**
     * Hides editor.
     */
    hide(): void;
    /**
     * Shows editor.
     */
    show(): void;
    /**
     * Gets reference to igValidator used by the editor.
     */
    validator(): Object;
    /**
     * Checks if value in editor is valid. Note: This function will not trigger automatic notifications.
     */
    isValid(): boolean;
    /**
     * Triggers validation of editor and show potential warning message.
     */
    validate(): void;
    /**
     * Destructor of the widget
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igTextEditor"): IgTextEditorMethods;
}
interface IgNumericEditor {
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    regional?: any;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    negativeSign?: string;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    negativePattern?: string;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    decimalSeparator?: string;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    groupSeparator?: string;
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    groups?: any[];
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    maxDecimals?: number;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    minDecimals?: number;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * Valid values:
     * "left"
     * "right"
     * "center"
     */
    textAlign?: any;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * Valid values:
     * "double" the Number object is used with limits of double and if value is not set, then the null or Number.NaN is used depending on the option 'nullable'. Note: that is used as default.
     * "float" the Number object is used with limits of float and if value is not set, then the null or Number.NaN is used depending on the option 'nullable'.
     * "long" the Number object is used with limits of signed long and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "ulong" the Number object is used with limits of unsigned long and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "int" the Number object is used with limits of signed int and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "uint" the Number object is used with limits of unsigned int and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "short" the Number object is used with limits of signed short and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "ushort" the Number object is used with limits of unsigned short and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "sbyte" the Number object is used with limits of signed byte and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "byte" the Number object is used with limits of unsigned byte and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     */
    dataMode?: any;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     */
    minValue?: number;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     */
    maxValue?: number;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     */
    allowNullValue?: boolean;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    spinDelta?: number;
    /**
     * Sets gets support for E-power format in edit mode.
     *
     * Valid values:
     * "E" scientific format is enabled and the "E" character is used.
     * "e" scientific format is enabled and the "e" character is used.
     * "E+" scientific format is enabled and the "E" character is used. The "E+" is used for positive values in display mode.
     * "e+" scientific format is enabled and the "e" character is used. The "e+" is used for positive values in display mode.
     */
    scientificFormat?: any;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     */
    spinWrapAround?: boolean;
    /**
     * Removed from numeric editor options
     */
    maxLength?: any;
    /**
     * Removed from numeric editor options
     */
    excludeKeys?: any;
    /**
     * Removed from numeric editor options
     */
    includeKeys?: any;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     *
     * Valid values:
     * "dropdown" button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "clear" button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "spin" spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).
     */
    buttonType?: any;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    listItems?: any[];
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    listWidth?: number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    listItemHoverDuration?: number;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    dropDownAttachedToBody?: boolean;
    /**
     * Gets sets show/hide drop-down list animation duration in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * Gets sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    visibleItemsCount?: number;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    placeHolder?: string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    selectionOnFocus?: string;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * Valid values:
     * "text" Single line text editor based on INPUT element is created.
     * "password" Editor based on INPUT element with type password is created.
     * "multiline" multiline editor based on TEXTAREA element is created.
     */
    textMode?: any;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    isLimitedToListValues?: boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    revertIfNotValid?: boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    preventSubmitOnEnter?: boolean;
    /**
     * Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    dropDownOrientation?: any;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    dropDownOnReadOnly?: boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toUpper?: boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toLower?: boolean;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    locale?: any;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    suppressNotifications?: boolean;
    width?: any;
    height?: any;
    /**
     * Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    value?: any;
    /**
     * Gets sets value in tabIndex for editor.
     */
    tabIndex?: number;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    keydown?: KeydownEvent;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     */
    keypress?: KeypressEvent;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    keyup?: KeyupEvent;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListOpening?: DropDownListOpeningEvent;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListOpened?: DropDownListOpenedEvent;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListClosing?: DropDownListClosingEvent;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListClosed?: DropDownListClosedEvent;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     */
    dropDownItemSelecting?: DropDownItemSelectingEvent;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     */
    dropDownItemSelected?: DropDownItemSelectedEvent;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     */
    textChanged?: TextChangedEvent;
    /**
     * Option for igNumericEditor
     */
    [optionName: string]: any;
}
interface IgNumericEditorMethods {
    /**
     * Gets/Sets editor value.
     *
     * @param newValue     New editor value.
     */
    value(newValue?: number): number;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number     The text to search for.
     */
    findListItemIndex(number: number): number;
    getSelectedText(): void;
    getSelectionStart(): void;
    getSelectionEnd(): void;
    /**
     * Increments value in editor according to the parameter.
     *
     * @param delta     Increments value.
     */
    spinUp(delta?: number): void;
    /**
     * Decrements  value in editor according to the parameter.
     *
     * @param delta     Decrement value.
     */
    spinDown(delta?: number): void;
    /**
     * Moves the hovered index to the item that appears above the current one in the list.
     */
    selectListIndexUp(): void;
    /**
     * Moves the hovered index to the item that appears above the current one in the list.
     */
    selectListIndexDown(): void;
    /**
     * Get current regional.
     */
    getRegionalOption(): string;
    /**
     * Gets visible text in the editor.
     */
    displayValue(): string;
    /**
     * Gets reference to jquery object which is used as container of drop-down.
     * returnType="$" Returns reference to jquery object.
     */
    dropDownContainer(): void;
    /**
     * Shows the drop down list.
     */
    showDropDown(): void;
    /**
     * Hides the drop down list.
     */
    hideDropDown(): void;
    /**
     * Returns a reference to the clear button UI element of the editor.
     * returnType="$" Returns reference to jquery object.
     */
    dropDownButton(): void;
    /**
     * Returns the visibility state of the drop down listing the items.
     */
    dropDownVisible(): boolean;
    /**
     * Returns a reference to the clear button UI element of the editor.
     * returnType="$" Returns reference to jquery object.
     */
    clearButton(): void;
    /**
     * Gets/Sets selected list item index.
     *
     * @param index     The index of the item that needs to be selected.
     */
    selectedListIndex(index?: number): number;
    /**
     * Gets selected list item.
     * returnType="$" Selected list item.
     */
    getSelectedListItem(): void;
    /**
     * Paste text at location of caret. Note: method raises the "valueChanged" event.
     *
     * @param string     The string to be inserted.
     */
    insert(string: string): void;
    /**
     * Selects text in editor. If parameters are equal, then than method sets location of caret. That method has effect only when editor has focus.
     *
     * @param start     Start of the selection.
     * @param end     End of the selection.
     */
    select(start: number, end: number): void;
    /**
     * Returns a reference to the spin up UI element of the editor.
     * returnType="$" The jQuery object representing the spin up UI element of the editor.
     */
    spinUpButton(): void;
    /**
     * Returns a reference to the spin down UI element of the editor.
     * returnType="$" The jQuery object representing the spin down UI element of the editor.
     */
    spinDownButton(): void;
}
interface JQuery {
    data(propertyName: "igNumericEditor"): IgNumericEditorMethods;
}
interface IgCurrencyEditor {
    positivePattern?: any;
    currencySymbol?: any;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    regional?: any;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    negativeSign?: string;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    negativePattern?: string;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    decimalSeparator?: string;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    groupSeparator?: string;
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    groups?: any[];
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    maxDecimals?: number;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    minDecimals?: number;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * Valid values:
     * "left"
     * "right"
     * "center"
     */
    textAlign?: any;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * Valid values:
     * "double" the Number object is used with limits of double and if value is not set, then the null or Number.NaN is used depending on the option 'nullable'. Note: that is used as default.
     * "float" the Number object is used with limits of float and if value is not set, then the null or Number.NaN is used depending on the option 'nullable'.
     * "long" the Number object is used with limits of signed long and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "ulong" the Number object is used with limits of unsigned long and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "int" the Number object is used with limits of signed int and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "uint" the Number object is used with limits of unsigned int and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "short" the Number object is used with limits of signed short and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "ushort" the Number object is used with limits of unsigned short and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "sbyte" the Number object is used with limits of signed byte and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "byte" the Number object is used with limits of unsigned byte and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     */
    dataMode?: any;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     */
    minValue?: number;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     */
    maxValue?: number;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     */
    allowNullValue?: boolean;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    spinDelta?: number;
    /**
     * Sets gets support for E-power format in edit mode.
     *
     * Valid values:
     * "E" scientific format is enabled and the "E" character is used.
     * "e" scientific format is enabled and the "e" character is used.
     * "E+" scientific format is enabled and the "E" character is used. The "E+" is used for positive values in display mode.
     * "e+" scientific format is enabled and the "e" character is used. The "e+" is used for positive values in display mode.
     */
    scientificFormat?: any;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     */
    spinWrapAround?: boolean;
    /**
     * Removed from numeric editor options
     */
    maxLength?: any;
    /**
     * Removed from numeric editor options
     */
    excludeKeys?: any;
    /**
     * Removed from numeric editor options
     */
    includeKeys?: any;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     *
     * Valid values:
     * "dropdown" button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "clear" button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "spin" spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).
     */
    buttonType?: any;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    listItems?: any[];
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    listWidth?: number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    listItemHoverDuration?: number;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    dropDownAttachedToBody?: boolean;
    /**
     * Gets sets show/hide drop-down list animation duration in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * Gets sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    visibleItemsCount?: number;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    placeHolder?: string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    selectionOnFocus?: string;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * Valid values:
     * "text" Single line text editor based on INPUT element is created.
     * "password" Editor based on INPUT element with type password is created.
     * "multiline" multiline editor based on TEXTAREA element is created.
     */
    textMode?: any;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    isLimitedToListValues?: boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    revertIfNotValid?: boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    preventSubmitOnEnter?: boolean;
    /**
     * Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    dropDownOrientation?: any;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    dropDownOnReadOnly?: boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toUpper?: boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toLower?: boolean;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    locale?: any;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    suppressNotifications?: boolean;
    width?: any;
    height?: any;
    /**
     * Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    value?: any;
    /**
     * Gets sets value in tabIndex for editor.
     */
    tabIndex?: number;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Option for igCurrencyEditor
     */
    [optionName: string]: any;
}
interface IgCurrencyEditorMethods {
    /**
     * Gets/sets a string that is used as the currency symbol shown with the number in the input. The value provided as a param is propagated to the currencySymbol option and thus has the same priority as the option.
     *
     * @param symbol     New currency symbol.
     */
    currencySymbol(symbol?: Object): string;
    /**
     * Gets/Sets editor value.
     *
     * @param newValue     New editor value.
     */
    value(newValue?: number): number;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number     The text to search for.
     */
    findListItemIndex(number: number): number;
    getSelectedText(): void;
    getSelectionStart(): void;
    getSelectionEnd(): void;
    /**
     * Increments value in editor according to the parameter.
     *
     * @param delta     Increments value.
     */
    spinUp(delta?: number): void;
    /**
     * Decrements  value in editor according to the parameter.
     *
     * @param delta     Decrement value.
     */
    spinDown(delta?: number): void;
    /**
     * Moves the hovered index to the item that appears above the current one in the list.
     */
    selectListIndexUp(): void;
    /**
     * Moves the hovered index to the item that appears above the current one in the list.
     */
    selectListIndexDown(): void;
    /**
     * Get current regional.
     */
    getRegionalOption(): string;
}
interface JQuery {
    data(propertyName: "igCurrencyEditor"): IgCurrencyEditorMethods;
}
interface IgPercentEditor {
    /**
     * Sets gets the pattern for positive numeric values, which is used in display (no focus) state.
     * The "$" flag represents "numericSymbol" and the "n" flag represents the value of number.
     * Note: this option has priority over possible regional settings.
     */
    positivePattern?: string;
    /**
     * Sets gets symbol, which is used in display (no focus) state.
     * Note: this option has priority over possible regional settings.
     */
    percentSymbol?: string;
    /**
     * Sets gets the factor which used for the get and set of the "value" method.
     * On the get number (string) entered by user is divided by that factor and on the set the number (string) displayed in editor is multiplied by that factor.
     * For example, if factor is 100 and the "value" is set to 0.123, then editor will show string "12.3".
     * Possible values: 1, or 100.
     * Note: this option has priority over possible regional settings.
     */
    displayFactor?: number;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * Valid values:
     * "double" the Number object is used with limits of double and if value is not set, then the null or Number.NaN is used depending on the option 'nullable'. Note: that is used as default.
     * "float" the Number object is used with limits of float and if value is not set, then the null or Number.NaN is used depending on the option 'nullable'.
     * "long" the Number object is used with limits of signed long and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "ulong" the Number object is used with limits of unsigned long and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "int" the Number object is used with limits of signed int and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "uint" the Number object is used with limits of unsigned int and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "short" the Number object is used with limits of signed short and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "ushort" the Number object is used with limits of unsigned short and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "sbyte" the Number object is used with limits of signed byte and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     * "byte" the Number object is used with limits of unsigned byte and if value is not set, then the null or 0 is used depending on the option 'nullable'.
     */
    dataMode?: any;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    spinDelta?: number;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    regional?: any;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    negativeSign?: string;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    negativePattern?: string;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    decimalSeparator?: string;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    groupSeparator?: string;
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    groups?: any[];
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    maxDecimals?: number;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    minDecimals?: number;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * Valid values:
     * "left"
     * "right"
     * "center"
     */
    textAlign?: any;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     */
    minValue?: number;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     */
    maxValue?: number;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     */
    allowNullValue?: boolean;
    /**
     * Sets gets support for E-power format in edit mode.
     *
     * Valid values:
     * "E" scientific format is enabled and the "E" character is used.
     * "e" scientific format is enabled and the "e" character is used.
     * "E+" scientific format is enabled and the "E" character is used. The "E+" is used for positive values in display mode.
     * "e+" scientific format is enabled and the "e" character is used. The "e+" is used for positive values in display mode.
     */
    scientificFormat?: any;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     */
    spinWrapAround?: boolean;
    /**
     * Removed from numeric editor options
     */
    maxLength?: any;
    /**
     * Removed from numeric editor options
     */
    excludeKeys?: any;
    /**
     * Removed from numeric editor options
     */
    includeKeys?: any;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     *
     * Valid values:
     * "dropdown" button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "clear" button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "spin" spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).
     */
    buttonType?: any;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    listItems?: any[];
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    listWidth?: number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    listItemHoverDuration?: number;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    dropDownAttachedToBody?: boolean;
    /**
     * Gets sets show/hide drop-down list animation duration in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * Gets sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    visibleItemsCount?: number;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    placeHolder?: string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    selectionOnFocus?: string;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * Valid values:
     * "text" Single line text editor based on INPUT element is created.
     * "password" Editor based on INPUT element with type password is created.
     * "multiline" multiline editor based on TEXTAREA element is created.
     */
    textMode?: any;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    isLimitedToListValues?: boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    revertIfNotValid?: boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    preventSubmitOnEnter?: boolean;
    /**
     * Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    dropDownOrientation?: any;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    dropDownOnReadOnly?: boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toUpper?: boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toLower?: boolean;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    locale?: any;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    suppressNotifications?: boolean;
    width?: any;
    height?: any;
    /**
     * Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    value?: any;
    /**
     * Gets sets value in tabIndex for editor.
     */
    tabIndex?: number;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Option for igPercentEditor
     */
    [optionName: string]: any;
}
interface IgPercentEditorMethods {
    /**
     * Gets/sets a string that is used as the percent symbol shown with the number in the input. The value provided as a param is propagated to the percentSymbol option and thus has the same priority as the option.
     *
     * @param symbol     New percent symbol.
     */
    percentSymbol(symbol?: Object): string;
    /**
     * Gets/Sets editor value.
     *
     * @param newValue     New editor value.
     */
    value(newValue?: number): number;
    /**
     * Finds index of list item by text that matches with the search parameters.
     *
     * @param number     The text to search for.
     */
    findListItemIndex(number: number): number;
    getSelectedText(): void;
    getSelectionStart(): void;
    getSelectionEnd(): void;
    /**
     * Increments value in editor according to the parameter.
     *
     * @param delta     Increments value.
     */
    spinUp(delta?: number): void;
    /**
     * Decrements  value in editor according to the parameter.
     *
     * @param delta     Decrement value.
     */
    spinDown(delta?: number): void;
    /**
     * Moves the hovered index to the item that appears above the current one in the list.
     */
    selectListIndexUp(): void;
    /**
     * Moves the hovered index to the item that appears above the current one in the list.
     */
    selectListIndexDown(): void;
    /**
     * Get current regional.
     */
    getRegionalOption(): string;
}
interface JQuery {
    data(propertyName: "igPercentEditor"): IgPercentEditorMethods;
}
interface IgMaskEditor {
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    regional?: any;
    /**
     * Sets gets visibility of spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
     *
     * Valid values:
     * "clear" button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "spin" spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).
     */
    buttonType?: any;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     */
    inputMask?: string;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * Valid values:
     * "rawText" only entered text. All unfilled prompts (positions) and literals are ignored (removed).
     * "rawTextWithRequiredPrompts" only entered text and required prompts (positions). All optional unfilled prompts and literals are ignored (removed)
     * "rawTextWithAllPrompts" only entered text and prompts (positions). All literals are ignored (removed).
     * "rawTextWithLiterals" only entered text and literals. All unfilled prompts are ignored (removed).
     * "rawTextWithRequiredPromptsAndLiterals" only entered text, required prompts (positions) and literals. All optional unfilled prompts are ignored (removed).
     * "allText" entered text, all prompts (positions) and literals. Note: that is used as default.
     */
    dataMode?: any;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     */
    unfilledCharsPrompt?: string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     */
    padChar?: string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     */
    emptyChar?: string;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    listItems?: any[];
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    listWidth?: number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    listItemHoverDuration?: number;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    dropDownAttachedToBody?: boolean;
    /**
     * Gets sets show/hide drop-down list animation duration in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * Gets sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    visibleItemsCount?: number;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    includeKeys?: string;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    excludeKeys?: string;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * Valid values:
     * "left"
     * "right"
     * "center"
     */
    textAlign?: any;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    placeHolder?: string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    selectionOnFocus?: string;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * Valid values:
     * "text" Single line text editor based on INPUT element is created.
     * "password" Editor based on INPUT element with type password is created.
     * "multiline" multiline editor based on TEXTAREA element is created.
     */
    textMode?: any;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     */
    spinWrapAround?: boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    isLimitedToListValues?: boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    revertIfNotValid?: boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    preventSubmitOnEnter?: boolean;
    /**
     * Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    dropDownOrientation?: any;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     */
    maxLength?: number;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    dropDownOnReadOnly?: boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toUpper?: boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toLower?: boolean;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    locale?: any;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    suppressNotifications?: boolean;
    width?: any;
    height?: any;
    /**
     * Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    value?: any;
    /**
     * Gets sets value in tabIndex for editor.
     */
    tabIndex?: number;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    allowNullValue?: boolean;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    keydown?: KeydownEvent;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     */
    keypress?: KeypressEvent;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    keyup?: KeyupEvent;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListOpening?: DropDownListOpeningEvent;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListOpened?: DropDownListOpenedEvent;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListClosing?: DropDownListClosingEvent;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    dropDownListClosed?: DropDownListClosedEvent;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     */
    dropDownItemSelecting?: DropDownItemSelectingEvent;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     */
    dropDownItemSelected?: DropDownItemSelectedEvent;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     */
    textChanged?: TextChangedEvent;
    /**
     * Option for igMaskEditor
     */
    [optionName: string]: any;
}
interface IgMaskEditorMethods {
    /**
     * Gets/Sets mask editor value.
     *
     * @param newValue     New mask editor value.
     */
    value(newValue?: string): string;
    dropDownContainer(): void;
    showDropDown(): void;
    hideDropDown(): void;
    dropDownButton(): void;
    spinUpButton(): void;
    spinDownButton(): void;
    dropDownVisible(): void;
    findListItemIndex(): void;
    selectedListIndex(): void;
    getSelectedListItem(): void;
    spinUp(): void;
    spinDown(): void;
    /**
     * Checks if value in editor is valid. Note: This function will not trigger automatic notifications.
     */
    isValid(): boolean;
    /**
     * Gets visible text in the editor.
     */
    displayValue(): string;
    /**
     * Returns a reference to the clear button UI element of the editor.
     * returnType="$" Returns reference to jquery object.
     */
    clearButton(): void;
    /**
     * Gets selected text in editor.
     */
    getSelectedText(): string;
    /**
     * Gets start index of the selected text in editor.
     */
    getSelectionStart(): number;
    /**
     * Gets end index of the selected text in editor.
     */
    getSelectionEnd(): number;
    /**
     * Paste text at location of caret. Note: method raises the "valueChanged" event.
     *
     * @param string     The string to be inserted.
     */
    insert(string: string): void;
    /**
     * Selects text in editor. If parameters are equal, then than method sets location of caret. That method has effect only when editor has focus.
     *
     * @param start     Start of the selection.
     * @param end     End of the selection.
     */
    select(start: number, end: number): void;
}
interface JQuery {
    data(propertyName: "igMaskEditor"): IgMaskEditorMethods;
}
interface IgDateEditor {
    /**
     * Gets sets value in editor.  Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it as value. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     */
    value?: Object;
    /**
     * Sets gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     */
    minValue?: Object;
    /**
     * Sets gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date
     */
    maxValue?: Object;
    /**
     * Sets gets format of date while editor has no focus.
     *                 Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
     *                 If value is not set, then the dateInputFormat is used automatically.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them:
     *                     C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name
     *                 "MMMM": month field as long month name
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name
     *                 "dddd": day of the week as long name
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     */
    dateDisplayFormat?: string;
    /**
     * Sets gets format of date while editor has focus.
     *                 Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 If option is not set, then the "date" is used automatically.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name. Note: in focused state the MM is used.
     *                 "MMMM": month field as long month name. Note: in focused state the MM is used.
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name. Note: in focused state that field is skipped.
     *                 "dddd": day of the week as long name. Note: in focused state that field is skipped.
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     */
    dateInputFormat?: string;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * Valid values:
     * "date" The Date object is used. When that mode is set the value send to the server on submit is string value converter from the javascript Date object using "toISOString" method.
     * "displayModeText" The String object is used and the "text" in display mode (no focus) format (pattern).
     * "editModeText" The String object is used and the "text" in edit mode (focus) format (pattern).
     */
    dataMode?: any;
    /**
     * Sets gets visibility of spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
     *
     * Valid values:
     * "clear" button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "spin" spin buttons are located on the right side of input-field (or left side if base html element has direction:rtl).
     */
    buttonType?: any;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    spinDelta?: number;
    /**
     * Sets gets ability to modify only 1 date field on spin events.
     *                 Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
     *                 Value true modifies only value of one field.
     */
    limitSpinToCurrentField?: boolean;
    /**
     * Sets gets formatting of the dates as UTC.
     *                 That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
     *                 Notes:
     *                 That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
     *                 When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
     *                 When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
     *                 When that option is modified after initialization, then displayed text and internal Date-value are not affected.
     *                 It is not recommended to change that option without resetting Date-value.
     */
    enableUTCDates?: boolean;
    /**
     * Sets gets year for auto detection of 20th and 21st centuries.
     * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
     * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
     */
    centuryThreshold?: number;
    /**
     * Sets gets difference between year in Gregorian calendar and displayed year.
     */
    yearShift?: number;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    regional?: any;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     */
    inputMask?: string;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     */
    unfilledCharsPrompt?: string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     */
    padChar?: string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     */
    emptyChar?: string;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    listItems?: any[];
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    listWidth?: number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    listItemHoverDuration?: number;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    dropDownAttachedToBody?: boolean;
    /**
     * Gets sets show/hide drop-down list animation duration in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * Gets sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    visibleItemsCount?: number;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    includeKeys?: string;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    excludeKeys?: string;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * Valid values:
     * "left"
     * "right"
     * "center"
     */
    textAlign?: any;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    placeHolder?: string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    selectionOnFocus?: string;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * Valid values:
     * "text" Single line text editor based on INPUT element is created.
     * "password" Editor based on INPUT element with type password is created.
     * "multiline" multiline editor based on TEXTAREA element is created.
     */
    textMode?: any;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     */
    spinWrapAround?: boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    isLimitedToListValues?: boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    revertIfNotValid?: boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    preventSubmitOnEnter?: boolean;
    /**
     * Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    dropDownOrientation?: any;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     */
    maxLength?: number;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    dropDownOnReadOnly?: boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toUpper?: boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toLower?: boolean;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    locale?: any;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    suppressNotifications?: boolean;
    width?: any;
    height?: any;
    /**
     * Gets sets value in tabIndex for editor.
     */
    tabIndex?: number;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    allowNullValue?: boolean;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Option for igDateEditor
     */
    [optionName: string]: any;
}
interface IgDateEditorMethods {
    /**
     * Gets/Sets editor value.
     * Note! This option doesn't use the displayInputFormat to extract the date
     *
     * @param newValue     New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     */
    value(newValue?: Object): Object;
    /**
     * Gets selected date.
     */
    getSelectedDate(): Object;
    /**
     * Sets selected date.
     *
     * @param date
     */
    selectDate(date: Object): void;
    /**
     * Increase date-time period, depending on the cursor position.
     *
     * @param delta     The increase delta.
     */
    spinUp(delta?: number): void;
    /**
     * Decrease date-time period, depending on the cursor position.
     *
     * @param delta     The decrease delta.
     */
    spinDown(delta?: number): void;
    /**
     * Returns a reference to the spin up UI element of the editor.
     * returnType="$" The jQuery object representing the spin up UI element of the editor.
     */
    spinUpButton(): void;
    /**
     * Returns a reference to the spin down UI element of the editor.
     * returnType="$" The jQuery object representing the spin down UI element of the editor.
     */
    spinDownButton(): void;
    /**
     * Checks if value in editor is valid. Note: This function will not trigger automatic notifications.
     */
    isValid(): boolean;
    dropDownContainer(): void;
    showDropDown(): void;
    hideDropDown(): void;
    dropDownButton(): void;
    dropDownVisible(): void;
    findListItemIndex(): void;
    selectedListIndex(): void;
    getSelectedListItem(): void;
}
interface JQuery {
    data(propertyName: "igDateEditor"): IgDateEditorMethods;
}
interface IgDatePicker {
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    regional?: any;
    /**
     * Sets gets visibility of clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,clear' or 'dropdownclear' are supported too.
     *
     * Valid values:
     * "dropdown" button to open list is located on the right side of input-field (or left side if base html element has direction:rtl);
     * "clear" button to clear value is located on the right side of input-field (or left side if base html element has direction:rtl);
     */
    buttonType?: any;
    /**
     * Sets gets options supported by the jquery.ui.datepicker. Only options related to drop-down calendar are supported.
     */
    datepickerOptions?: any;
    /**
     * Gets sets value in editor.  Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it as value. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     */
    value?: Object;
    /**
     * Sets gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     */
    minValue?: Object;
    /**
     * Sets gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date
     */
    maxValue?: Object;
    /**
     * Sets gets format of date while editor has no focus.
     *                 Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
     *                 If value is not set, then the dateInputFormat is used automatically.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them:
     *                     C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name
     *                 "MMMM": month field as long month name
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name
     *                 "dddd": day of the week as long name
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     */
    dateDisplayFormat?: string;
    /**
     * Sets gets format of date while editor has focus.
     *                 Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 If option is not set, then the "date" is used automatically.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name. Note: in focused state the MM is used.
     *                 "MMMM": month field as long month name. Note: in focused state the MM is used.
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name. Note: in focused state that field is skipped.
     *                 "dddd": day of the week as long name. Note: in focused state that field is skipped.
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     */
    dateInputFormat?: string;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * Valid values:
     * "date" The Date object is used. When that mode is set the value send to the server on submit is string value converter from the javascript Date object using "toISOString" method.
     * "displayModeText" The String object is used and the "text" in display mode (no focus) format (pattern).
     * "editModeText" The String object is used and the "text" in edit mode (focus) format (pattern).
     */
    dataMode?: any;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    spinDelta?: number;
    /**
     * Sets gets ability to modify only 1 date field on spin events.
     *                 Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
     *                 Value true modifies only value of one field.
     */
    limitSpinToCurrentField?: boolean;
    /**
     * Sets gets formatting of the dates as UTC.
     *                 That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
     *                 Notes:
     *                 That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
     *                 When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
     *                 When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
     *                 When that option is modified after initialization, then displayed text and internal Date-value are not affected.
     *                 It is not recommended to change that option without resetting Date-value.
     */
    enableUTCDates?: boolean;
    /**
     * Sets gets year for auto detection of 20th and 21st centuries.
     * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
     * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
     */
    centuryThreshold?: number;
    /**
     * Sets gets difference between year in Gregorian calendar and displayed year.
     */
    yearShift?: number;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     */
    inputMask?: string;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     */
    unfilledCharsPrompt?: string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     */
    padChar?: string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     */
    emptyChar?: string;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    listItems?: any[];
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    listWidth?: number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    listItemHoverDuration?: number;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    dropDownAttachedToBody?: boolean;
    /**
     * Gets sets show/hide drop-down list animation duration in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * Gets sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    visibleItemsCount?: number;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    includeKeys?: string;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    excludeKeys?: string;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * Valid values:
     * "left"
     * "right"
     * "center"
     */
    textAlign?: any;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    placeHolder?: string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    selectionOnFocus?: string;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * Valid values:
     * "text" Single line text editor based on INPUT element is created.
     * "password" Editor based on INPUT element with type password is created.
     * "multiline" multiline editor based on TEXTAREA element is created.
     */
    textMode?: any;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     */
    spinWrapAround?: boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    isLimitedToListValues?: boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    revertIfNotValid?: boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    preventSubmitOnEnter?: boolean;
    /**
     * Gets sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    dropDownOrientation?: any;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     */
    maxLength?: number;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    dropDownOnReadOnly?: boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toUpper?: boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    toLower?: boolean;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    locale?: any;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    suppressNotifications?: boolean;
    width?: any;
    height?: any;
    /**
     * Gets sets value in tabIndex for editor.
     */
    tabIndex?: number;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    allowNullValue?: boolean;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Option for igDatePicker
     */
    [optionName: string]: any;
}
interface IgDatePickerMethods {
    /**
     * Returns a reference to the jQuery calendar used as a picker selector
     * returnType="$" Returns reference to jquery object.
     */
    getCalendar(): void;
    dropDownContainer(): void;
    /**
     * Shows the drop down list.
     */
    showDropDown(): void;
    /**
     * Hides the drop down list.
     */
    hideDropDown(): void;
    /**
     * Returns a reference to the calendar button UI element of the editor.
     * returnType="$" Returns reference to jquery object.
     */
    dropDownButton(): void;
    /**
     * Returns the visibility state of the calendar.
     */
    dropDownVisible(): boolean;
    /**
     * Gets/Sets editor value.
     * Note! This option doesn't use the displayInputFormat to extract the date
     *
     * @param newValue     New editor value. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     */
    value(newValue?: Object): Object;
    /**
     * Gets selected date.
     */
    getSelectedDate(): Object;
    /**
     * Sets selected date.
     *
     * @param date
     */
    selectDate(date: Object): void;
    /**
     * Increase date-time period, depending on the cursor position.
     *
     * @param delta     The increase delta.
     */
    spinUp(delta?: number): void;
    /**
     * Decrease date-time period, depending on the cursor position.
     *
     * @param delta     The decrease delta.
     */
    spinDown(delta?: number): void;
    /**
     * Returns a reference to the spin up UI element of the editor.
     * returnType="$" The jQuery object representing the spin up UI element of the editor.
     */
    spinUpButton(): void;
    /**
     * Returns a reference to the spin down UI element of the editor.
     * returnType="$" The jQuery object representing the spin down UI element of the editor.
     */
    spinDownButton(): void;
    /**
     * Checks if value in editor is valid. Note: This function will not trigger automatic notifications.
     */
    isValid(): boolean;
}
interface JQuery {
    data(propertyName: "igDatePicker"): IgDatePickerMethods;
}
interface IgCheckboxEditor {
    /**
     * Gets sets either the editor is checked or not.
     */
    checked?: number;
    /**
     * Gets sets size of the checkbox based on preset styles. For different sizes, define 'width' and 'height' options instead.verysmall The size of the Checkbox editor is very small.small The size of the Checkbox editor is small.normal The size of the Checkbox editor is normal.large The size of the Checkbox editor is large.
     *
     * Valid values:
     * "verysmall"
     * "small"
     * "normal"
     * "large"
     */
    size?: any;
    /**
     * Applies custom class on the checkbox, so that custom image can be used.
     * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
     */
    iconClass?: string;
    /**
     * Gets sets value in tabIndex for Checkbox Editor.
     */
    tabIndex?: number;
    width?: any;
    height?: any;
    /**
     * Gets sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    value?: any;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    allowNullValue?: boolean;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    nullValue?: any;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    inputName?: string;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    readOnly?: boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    disabled?: boolean;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    validatorOptions?: any;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    keydown?: KeydownEvent;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     */
    keypress?: KeypressEvent;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    keyup?: KeyupEvent;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    rendering?: RenderingEvent;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    rendered?: RenderedEvent;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mousedown?: MousedownEvent;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseup?: MouseupEvent;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mousemove?: MousemoveEvent;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseover?: MouseoverEvent;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    mouseout?: MouseoutEvent;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    blur?: BlurEvent;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    focus?: FocusEvent;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    valueChanging?: ValueChangingEvent;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    valueChanged?: ValueChangedEvent;
    /**
     * Option for igCheckboxEditor
     */
    [optionName: string]: any;
}
interface IgCheckboxEditorMethods {
    /**
     * Checks if value in editor is valid. Note: This function always returns true for the igCheckboxEditor
     */
    isValid(): boolean;
    /**
     * Gets/Sets Current checked state/Value of the igCheckboxEditor that will be submitted by the HTML form.
     * 1. If the 'value' option IS NOT defined, then 'value' method will match the checked state of the editor.
     * This is a good option when the checkbox is intended to operate as a Boolean editor.
     * 2. If the 'value' option IS defined, then 'value' method will return the 'value' option,
     * the one that is going to be submitted by the HTML form to the server.
     * To get checked state regardless of the 'value' option, use $("checkBox").igCheckboxEditor("option", "checked");
     * returnType="boolean|string" Current checked state or the value of the igCheckboxEditor that will be submitted by the HTML form.
     *
     * @param newValue
     */
    value(newValue: Object): void;
    /**
     * Toggles the state of the checkbox.
     */
    toggle(): void;
    /**
     * Gets sets name attribute applied to the editor element.
     *
     * @param newValue     The new input name.
     */
    inputName(newValue?: string): string;
    /**
     * Gets the visual editor element.
     * returnType="$" The visual editor element.
     */
    field(): void;
    /**
     * Gets reference to jquery object which is used as top/outer element of igEditor.
     * returnType="$" The container editor element.
     */
    editorContainer(): void;
    /**
     * Checks if editor has focus.
     */
    hasFocus(): boolean;
    /**
     * Set focus to editor with delay.
     *
     * @param delay     The delay before focusing the editor.
     */
    setFocus(delay?: number): void;
    /**
     * Hides editor.
     */
    hide(): void;
    /**
     * Shows editor.
     */
    show(): void;
    /**
     * Gets reference to igValidator used by the editor.
     */
    validator(): Object;
    /**
     * Triggers validation of editor and show potential warning message.
     */
    validate(): void;
    /**
     * Destructor of the widget
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igCheckboxEditor"): IgCheckboxEditorMethods;
}
interface JQuery {
    igBaseEditor(methodName: "inputName", newValue?: string): string;
    igBaseEditor(methodName: "value", newValue: Object): void;
    igBaseEditor(methodName: "field"): void;
    igBaseEditor(methodName: "editorContainer"): void;
    igBaseEditor(methodName: "hasFocus"): boolean;
    igBaseEditor(methodName: "setFocus", delay?: number): void;
    igBaseEditor(methodName: "hide"): void;
    igBaseEditor(methodName: "show"): void;
    igBaseEditor(methodName: "validator"): Object;
    igBaseEditor(methodName: "isValid"): boolean;
    igBaseEditor(methodName: "validate"): void;
    igBaseEditor(methodName: "destroy"): void;
    /**
     */
    igBaseEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igBaseEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igBaseEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igBaseEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "value"): any;
    /**
     * Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     *
     * @optionValue New value to be set.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;
    /**
     * Gets  value in tabIndex for editor.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for editor.
     *
     * @optionValue New value to be set.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     *
     * @optionValue New value to be set.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igBaseEditor(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igBaseEditor(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mousedown"): MousedownEvent;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mousedown", optionValue: MousedownEvent): void;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mouseup"): MouseupEvent;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mouseup", optionValue: MouseupEvent): void;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mousemove"): MousemoveEvent;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mousemove", optionValue: MousemoveEvent): void;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mouseover"): MouseoverEvent;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mouseover", optionValue: MouseoverEvent): void;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mouseout"): MouseoutEvent;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "mouseout", optionValue: MouseoutEvent): void;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "blur"): BlurEvent;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "blur", optionValue: BlurEvent): void;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "focus"): FocusEvent;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "focus", optionValue: FocusEvent): void;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "valueChanging"): ValueChangingEvent;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "valueChanging", optionValue: ValueChangingEvent): void;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "valueChanged"): ValueChangedEvent;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     *
     * @optionValue Define event handler function.
     */
    igBaseEditor(optionLiteral: 'option', optionName: "valueChanged", optionValue: ValueChangedEvent): void;
    igBaseEditor(options: IgBaseEditor): JQuery;
    igBaseEditor(optionLiteral: 'option', optionName: string): any;
    igBaseEditor(optionLiteral: 'option', options: IgBaseEditor): JQuery;
    igBaseEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igBaseEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igTextEditor(methodName: "displayValue"): string;
    igTextEditor(methodName: "dropDownContainer"): void;
    igTextEditor(methodName: "showDropDown"): void;
    igTextEditor(methodName: "hideDropDown"): void;
    igTextEditor(methodName: "dropDownButton"): void;
    igTextEditor(methodName: "dropDownVisible"): boolean;
    igTextEditor(methodName: "clearButton"): void;
    igTextEditor(methodName: "findListItemIndex", text: string, matchType?: Object): number;
    igTextEditor(methodName: "selectedListIndex", index?: number): number;
    igTextEditor(methodName: "getSelectedListItem"): void;
    igTextEditor(methodName: "getSelectedText"): string;
    igTextEditor(methodName: "getSelectionStart"): number;
    igTextEditor(methodName: "getSelectionEnd"): number;
    igTextEditor(methodName: "insert", string: string): void;
    igTextEditor(methodName: "select", start: number, end: number): void;
    igTextEditor(methodName: "spinUp"): void;
    igTextEditor(methodName: "spinDown"): void;
    igTextEditor(methodName: "spinUpButton"): void;
    igTextEditor(methodName: "spinDownButton"): void;
    igTextEditor(methodName: "inputName", newValue?: string): string;
    igTextEditor(methodName: "value", newValue: Object): void;
    igTextEditor(methodName: "field"): void;
    igTextEditor(methodName: "editorContainer"): void;
    igTextEditor(methodName: "hasFocus"): boolean;
    igTextEditor(methodName: "setFocus", delay?: number): void;
    igTextEditor(methodName: "hide"): void;
    igTextEditor(methodName: "show"): void;
    igTextEditor(methodName: "validator"): Object;
    igTextEditor(methodName: "isValid"): boolean;
    igTextEditor(methodName: "validate"): void;
    igTextEditor(methodName: "destroy"): void;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     */
    igTextEditor(optionLiteral: 'option', optionName: "buttonType"): any;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: any): void;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    igTextEditor(optionLiteral: 'option', optionName: "listItems"): any[];
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    igTextEditor(optionLiteral: 'option', optionName: "listWidth"): number;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    igTextEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;
    /**
     * Gets  show/hide drop-down list animation duration in milliseconds.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * Sets show/hide drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * Gets  how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    igTextEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;
    /**
     * Sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    igTextEditor(optionLiteral: 'option', optionName: "includeKeys"): string;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    igTextEditor(optionLiteral: 'option', optionName: "excludeKeys"): string;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     */
    igTextEditor(optionLiteral: 'option', optionName: "textAlign"): any;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: any): void;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    igTextEditor(optionLiteral: 'option', optionName: "placeHolder"): string;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    igTextEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     */
    igTextEditor(optionLiteral: 'option', optionName: "textMode"): any;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     */
    igTextEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    igTextEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    igTextEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    igTextEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;
    /**
     * Gets  drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): any;
    /**
     * Sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: any): void;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     */
    igTextEditor(optionLiteral: 'option', optionName: "maxLength"): number;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: number): void;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igTextEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igTextEditor(optionLiteral: 'option', optionName: "toLower"): boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    igTextEditor(optionLiteral: 'option', optionName: "locale"): any;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    igTextEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;
    /**
     */
    igTextEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igTextEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igTextEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igTextEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    igTextEditor(optionLiteral: 'option', optionName: "value"): any;
    /**
     * Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;
    /**
     * Gets  value in tabIndex for editor.
     */
    igTextEditor(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for editor.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    igTextEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igTextEditor(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igTextEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igTextEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igTextEditor(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igTextEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igTextEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    igTextEditor(optionLiteral: 'option', optionName: "keydown"): KeydownEvent;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "keydown", optionValue: KeydownEvent): void;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     */
    igTextEditor(optionLiteral: 'option', optionName: "keypress"): KeypressEvent;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "keypress", optionValue: KeypressEvent): void;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    igTextEditor(optionLiteral: 'option', optionName: "keyup"): KeyupEvent;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "keyup", optionValue: KeyupEvent): void;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     */
    igTextEditor(optionLiteral: 'option', optionName: "textChanged"): TextChangedEvent;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "textChanged", optionValue: TextChangedEvent): void;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    igTextEditor(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    igTextEditor(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mousedown"): MousedownEvent;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mousedown", optionValue: MousedownEvent): void;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mouseup"): MouseupEvent;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mouseup", optionValue: MouseupEvent): void;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mousemove"): MousemoveEvent;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mousemove", optionValue: MousemoveEvent): void;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mouseover"): MouseoverEvent;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mouseover", optionValue: MouseoverEvent): void;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mouseout"): MouseoutEvent;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "mouseout", optionValue: MouseoutEvent): void;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    igTextEditor(optionLiteral: 'option', optionName: "blur"): BlurEvent;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "blur", optionValue: BlurEvent): void;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    igTextEditor(optionLiteral: 'option', optionName: "focus"): FocusEvent;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "focus", optionValue: FocusEvent): void;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    igTextEditor(optionLiteral: 'option', optionName: "valueChanging"): ValueChangingEvent;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "valueChanging", optionValue: ValueChangingEvent): void;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    igTextEditor(optionLiteral: 'option', optionName: "valueChanged"): ValueChangedEvent;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     *
     * @optionValue Define event handler function.
     */
    igTextEditor(optionLiteral: 'option', optionName: "valueChanged", optionValue: ValueChangedEvent): void;
    igTextEditor(options: IgTextEditor): JQuery;
    igTextEditor(optionLiteral: 'option', optionName: string): any;
    igTextEditor(optionLiteral: 'option', options: IgTextEditor): JQuery;
    igTextEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTextEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igNumericEditor(methodName: "value", newValue?: number): number;
    igNumericEditor(methodName: "findListItemIndex", number: number): number;
    igNumericEditor(methodName: "getSelectedText"): void;
    igNumericEditor(methodName: "getSelectionStart"): void;
    igNumericEditor(methodName: "getSelectionEnd"): void;
    igNumericEditor(methodName: "spinUp", delta?: number): void;
    igNumericEditor(methodName: "spinDown", delta?: number): void;
    igNumericEditor(methodName: "selectListIndexUp"): void;
    igNumericEditor(methodName: "selectListIndexDown"): void;
    igNumericEditor(methodName: "getRegionalOption"): string;
    igNumericEditor(methodName: "displayValue"): string;
    igNumericEditor(methodName: "dropDownContainer"): void;
    igNumericEditor(methodName: "showDropDown"): void;
    igNumericEditor(methodName: "hideDropDown"): void;
    igNumericEditor(methodName: "dropDownButton"): void;
    igNumericEditor(methodName: "dropDownVisible"): boolean;
    igNumericEditor(methodName: "clearButton"): void;
    igNumericEditor(methodName: "selectedListIndex", index?: number): number;
    igNumericEditor(methodName: "getSelectedListItem"): void;
    igNumericEditor(methodName: "insert", string: string): void;
    igNumericEditor(methodName: "select", start: number, end: number): void;
    igNumericEditor(methodName: "spinUpButton"): void;
    igNumericEditor(methodName: "spinDownButton"): void;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "regional"): any;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "regional", optionValue: any): void;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "negativeSign"): string;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "negativeSign", optionValue: string): void;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "negativePattern"): string;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "negativePattern", optionValue: string): void;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "decimalSeparator"): string;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "decimalSeparator", optionValue: string): void;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "groupSeparator"): string;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "groupSeparator", optionValue: string): void;
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "groups"): any[];
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "groups", optionValue: any[]): void;
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "maxDecimals"): number;
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "maxDecimals", optionValue: number): void;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "minDecimals"): number;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "minDecimals", optionValue: number): void;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "textAlign"): any;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: any): void;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dataMode"): any;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: any): void;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "minValue"): number;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "minValue", optionValue: number): void;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "maxValue"): number;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "maxValue", optionValue: number): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     */
    igNumericEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "spinDelta"): number;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "spinDelta", optionValue: number): void;
    /**
     * Sets gets support for E-power format in edit mode.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "scientificFormat"): any;
    /**
     * Sets gets support for E-power format in edit mode.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "scientificFormat", optionValue: any): void;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;
    /**
     * Removed from numeric editor options
     */
    igNumericEditor(optionLiteral: 'option', optionName: "maxLength"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;
    /**
     * Removed from numeric editor options
     */
    igNumericEditor(optionLiteral: 'option', optionName: "excludeKeys"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: any): void;
    /**
     * Removed from numeric editor options
     */
    igNumericEditor(optionLiteral: 'option', optionName: "includeKeys"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: any): void;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "buttonType"): any;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: any): void;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "listItems"): any[];
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "listWidth"): number;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;
    /**
     * Gets  show/hide drop-down list animation duration in milliseconds.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * Sets show/hide drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * Gets  how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;
    /**
     * Sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "placeHolder"): string;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "textMode"): any;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    igNumericEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;
    /**
     * Gets  drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): any;
    /**
     * Sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: any): void;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "toLower"): boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "locale"): any;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;
    /**
     */
    igNumericEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igNumericEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igNumericEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igNumericEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "value"): any;
    /**
     * Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;
    /**
     * Gets  value in tabIndex for editor.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for editor.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igNumericEditor(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igNumericEditor(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "keydown"): KeydownEvent;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "keydown", optionValue: KeydownEvent): void;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "keypress"): KeypressEvent;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "keypress", optionValue: KeypressEvent): void;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "keyup"): KeyupEvent;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "keyup", optionValue: KeyupEvent): void;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "textChanged"): TextChangedEvent;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     *
     * @optionValue Define event handler function.
     */
    igNumericEditor(optionLiteral: 'option', optionName: "textChanged", optionValue: TextChangedEvent): void;
    igNumericEditor(options: IgNumericEditor): JQuery;
    igNumericEditor(optionLiteral: 'option', optionName: string): any;
    igNumericEditor(optionLiteral: 'option', options: IgNumericEditor): JQuery;
    igNumericEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igNumericEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igCurrencyEditor(methodName: "currencySymbol", symbol?: Object): string;
    igCurrencyEditor(methodName: "value", newValue?: number): number;
    igCurrencyEditor(methodName: "findListItemIndex", number: number): number;
    igCurrencyEditor(methodName: "getSelectedText"): void;
    igCurrencyEditor(methodName: "getSelectionStart"): void;
    igCurrencyEditor(methodName: "getSelectionEnd"): void;
    igCurrencyEditor(methodName: "spinUp", delta?: number): void;
    igCurrencyEditor(methodName: "spinDown", delta?: number): void;
    igCurrencyEditor(methodName: "selectListIndexUp"): void;
    igCurrencyEditor(methodName: "selectListIndexDown"): void;
    igCurrencyEditor(methodName: "getRegionalOption"): string;
    /**
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "positivePattern"): any;
    /**
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "positivePattern", optionValue: any): void;
    /**
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "currencySymbol"): any;
    /**
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "currencySymbol", optionValue: any): void;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "regional"): any;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "regional", optionValue: any): void;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "negativeSign"): string;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "negativeSign", optionValue: string): void;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "negativePattern"): string;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "negativePattern", optionValue: string): void;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "decimalSeparator"): string;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "decimalSeparator", optionValue: string): void;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "groupSeparator"): string;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "groupSeparator", optionValue: string): void;
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "groups"): any[];
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "groups", optionValue: any[]): void;
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "maxDecimals"): number;
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "maxDecimals", optionValue: number): void;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "minDecimals"): number;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "minDecimals", optionValue: number): void;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "textAlign"): any;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: any): void;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dataMode"): any;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: any): void;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "minValue"): number;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "minValue", optionValue: number): void;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "maxValue"): number;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "maxValue", optionValue: number): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "spinDelta"): number;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "spinDelta", optionValue: number): void;
    /**
     * Sets gets support for E-power format in edit mode.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "scientificFormat"): any;
    /**
     * Sets gets support for E-power format in edit mode.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "scientificFormat", optionValue: any): void;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;
    /**
     * Removed from numeric editor options
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "maxLength"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;
    /**
     * Removed from numeric editor options
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "excludeKeys"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: any): void;
    /**
     * Removed from numeric editor options
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "includeKeys"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: any): void;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "buttonType"): any;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: any): void;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "listItems"): any[];
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "listWidth"): number;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;
    /**
     * Gets  show/hide drop-down list animation duration in milliseconds.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * Sets show/hide drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * Gets  how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;
    /**
     * Sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "placeHolder"): string;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "textMode"): any;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;
    /**
     * Gets  drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): any;
    /**
     * Sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: any): void;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "toLower"): boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "locale"): any;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;
    /**
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "value"): any;
    /**
     * Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;
    /**
     * Gets  value in tabIndex for editor.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for editor.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igCurrencyEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    igCurrencyEditor(options: IgCurrencyEditor): JQuery;
    igCurrencyEditor(optionLiteral: 'option', optionName: string): any;
    igCurrencyEditor(optionLiteral: 'option', options: IgCurrencyEditor): JQuery;
    igCurrencyEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igCurrencyEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igPercentEditor(methodName: "percentSymbol", symbol?: Object): string;
    igPercentEditor(methodName: "value", newValue?: number): number;
    igPercentEditor(methodName: "findListItemIndex", number: number): number;
    igPercentEditor(methodName: "getSelectedText"): void;
    igPercentEditor(methodName: "getSelectionStart"): void;
    igPercentEditor(methodName: "getSelectionEnd"): void;
    igPercentEditor(methodName: "spinUp", delta?: number): void;
    igPercentEditor(methodName: "spinDown", delta?: number): void;
    igPercentEditor(methodName: "selectListIndexUp"): void;
    igPercentEditor(methodName: "selectListIndexDown"): void;
    igPercentEditor(methodName: "getRegionalOption"): string;
    /**
     * Sets gets the pattern for positive numeric values, which is used in display (no focus) state.
     * The "$" flag represents "numericSymbol" and the "n" flag represents the value of number.
     * Note: this option has priority over possible regional settings.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "positivePattern"): string;
    /**
     * Sets gets the pattern for positive numeric values, which is used in display (no focus) state.
     * The "$" flag represents "numericSymbol" and the "n" flag represents the value of number.
     * Note: this option has priority over possible regional settings.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "positivePattern", optionValue: string): void;
    /**
     * Sets gets symbol, which is used in display (no focus) state.
     * Note: this option has priority over possible regional settings.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "percentSymbol"): string;
    /**
     * Sets gets symbol, which is used in display (no focus) state.
     * Note: this option has priority over possible regional settings.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "percentSymbol", optionValue: string): void;
    /**
     * Sets gets the factor which used for the get and set of the "value" method.
     * On the get number (string) entered by user is divided by that factor and on the set the number (string) displayed in editor is multiplied by that factor.
     * For example, if factor is 100 and the "value" is set to 0.123, then editor will show string "12.3".
     * Possible values: 1, or 100.
     * Note: this option has priority over possible regional settings.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "displayFactor"): number;
    /**
     * Sets gets the factor which used for the get and set of the "value" method.
     * On the get number (string) entered by user is divided by that factor and on the set the number (string) displayed in editor is multiplied by that factor.
     * For example, if factor is 100 and the "value" is set to 0.123, then editor will show string "12.3".
     * Possible values: 1, or 100.
     * Note: this option has priority over possible regional settings.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "displayFactor", optionValue: number): void;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dataMode"): any;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: any): void;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "spinDelta"): number;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "spinDelta", optionValue: number): void;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "regional"): any;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "regional", optionValue: any): void;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "negativeSign"): string;
    /**
     * Sets gets the character, which is used as negative sign.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "negativeSign", optionValue: string): void;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "negativePattern"): string;
    /**
     * Sets gets the string, which is used as negative pattern. The "n" flag represents the value of number. The "-" and "()" flags are static part of pattern.
     * Note: This option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "negativePattern", optionValue: string): void;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "decimalSeparator"): string;
    /**
     * Sets gets the character, which is used as decimal separator.
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "decimalSeparator", optionValue: string): void;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "groupSeparator"): string;
    /**
     * Sets gets the character, which is used as separator for groups (like thousands).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "groupSeparator", optionValue: string): void;
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "groups"): any[];
    /**
     * (array of number objects) Sets gets the number of digits in integer part of number, which are divided into groups.
     * The "groupSeparator" is inserted between groups.
     * If the sum of all values in array is smaller than the length of integer part, then the last item in array is used for all following groups.
     * Count of groups starts from the decimal point (from right to left).
     * That option has effect only in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "groups", optionValue: any[]): void;
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "maxDecimals"): number;
    /**
     * Sets gets the maximum number of decimal places which are used in display mode(no focus).
     * Note: this option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "maxDecimals", optionValue: number): void;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "minDecimals"): number;
    /**
     * Sets gets the minimum number of decimal places which are used in display (no focus) state.
     * If number of digits in fractional part of number is less than the value of this option, then the "0" characters are used to fill missing digits.
     * Note: This option has priority over possible regional settings.
     * Note: In case of min decimals value higher than max decimals - max decimals are equaled to min decimals property.
     * Note: Even if the default value is null - if internationalization file is provided and it contains default values for those properties the values are imlicitly set.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "minDecimals", optionValue: number): void;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "textAlign"): any;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: any): void;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "minValue"): number;
    /**
     * Sets gets the minimum value which can be entered in editor by end user.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "minValue", optionValue: number): void;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "maxValue"): number;
    /**
     * Sets gets the maximum value which can be entered in editor by end user.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "maxValue", optionValue: number): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     */
    igPercentEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is disabled, and editor has no value, then value is set to 0 (or minValue/maxValue).
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets support for E-power format in edit mode.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "scientificFormat"): any;
    /**
     * Sets gets support for E-power format in edit mode.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "scientificFormat", optionValue: any): void;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;
    /**
     * Sets gets ability to automatically set value in editor to opposite limit, when spin action reached minimum or maximum limit.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;
    /**
     * Removed from numeric editor options
     */
    igPercentEditor(optionLiteral: 'option', optionName: "maxLength"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: any): void;
    /**
     * Removed from numeric editor options
     */
    igPercentEditor(optionLiteral: 'option', optionName: "excludeKeys"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: any): void;
    /**
     * Removed from numeric editor options
     */
    igPercentEditor(optionLiteral: 'option', optionName: "includeKeys"): any;
    /**
     * Removed from numeric editor options
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: any): void;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "buttonType"): any;
    /**
     * Sets gets visibility of spin and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,spin' or 'spinclear' are supported too.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: any): void;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "listItems"): any[];
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "listWidth"): number;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;
    /**
     * Gets  show/hide drop-down list animation duration in milliseconds.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * Sets show/hide drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * Gets  how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;
    /**
     * Sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "placeHolder"): string;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "textMode"): any;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    igPercentEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;
    /**
     * Gets  drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): any;
    /**
     * Sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: any): void;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "toLower"): boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "locale"): any;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;
    /**
     */
    igPercentEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igPercentEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igPercentEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igPercentEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "value"): any;
    /**
     * Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;
    /**
     * Gets  value in tabIndex for editor.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for editor.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igPercentEditor(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igPercentEditor(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igPercentEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    igPercentEditor(options: IgPercentEditor): JQuery;
    igPercentEditor(optionLiteral: 'option', optionName: string): any;
    igPercentEditor(optionLiteral: 'option', options: IgPercentEditor): JQuery;
    igPercentEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igPercentEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igMaskEditor(methodName: "value", newValue?: string): string;
    igMaskEditor(methodName: "dropDownContainer"): void;
    igMaskEditor(methodName: "showDropDown"): void;
    igMaskEditor(methodName: "hideDropDown"): void;
    igMaskEditor(methodName: "dropDownButton"): void;
    igMaskEditor(methodName: "spinUpButton"): void;
    igMaskEditor(methodName: "spinDownButton"): void;
    igMaskEditor(methodName: "dropDownVisible"): void;
    igMaskEditor(methodName: "findListItemIndex"): void;
    igMaskEditor(methodName: "selectedListIndex"): void;
    igMaskEditor(methodName: "getSelectedListItem"): void;
    igMaskEditor(methodName: "spinUp"): void;
    igMaskEditor(methodName: "spinDown"): void;
    igMaskEditor(methodName: "isValid"): boolean;
    igMaskEditor(methodName: "displayValue"): string;
    igMaskEditor(methodName: "clearButton"): void;
    igMaskEditor(methodName: "getSelectedText"): string;
    igMaskEditor(methodName: "getSelectionStart"): number;
    igMaskEditor(methodName: "getSelectionEnd"): number;
    igMaskEditor(methodName: "insert", string: string): void;
    igMaskEditor(methodName: "select", start: number, end: number): void;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "regional"): any;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "regional", optionValue: any): void;
    /**
     * Sets gets visibility of spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "buttonType"): any;
    /**
     * Sets gets visibility of spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: any): void;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "inputMask"): string;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "inputMask", optionValue: string): void;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dataMode"): any;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: any): void;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "unfilledCharsPrompt"): string;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "unfilledCharsPrompt", optionValue: string): void;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     */
    igMaskEditor(optionLiteral: 'option', optionName: "padChar"): string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "padChar", optionValue: string): void;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "emptyChar"): string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "emptyChar", optionValue: string): void;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "listItems"): any[];
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "listWidth"): number;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;
    /**
     * Gets  show/hide drop-down list animation duration in milliseconds.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * Sets show/hide drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * Gets  how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;
    /**
     * Sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "includeKeys"): string;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "excludeKeys"): string;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "textAlign"): any;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: any): void;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "placeHolder"): string;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "textMode"): any;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    igMaskEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;
    /**
     * Gets  drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): any;
    /**
     * Sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: any): void;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "maxLength"): number;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: number): void;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "toLower"): boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "locale"): any;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;
    /**
     */
    igMaskEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igMaskEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igMaskEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igMaskEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "value"): any;
    /**
     * Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;
    /**
     * Gets  value in tabIndex for editor.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for editor.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igMaskEditor(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igMaskEditor(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "keydown"): KeydownEvent;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "keydown", optionValue: KeydownEvent): void;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "keypress"): KeypressEvent;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "keypress", optionValue: KeypressEvent): void;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "keyup"): KeyupEvent;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "keyup", optionValue: KeyupEvent): void;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownListOpening"): DropDownListOpeningEvent;
    /**
     * Event which is raised when the drop down is opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownListOpening", optionValue: DropDownListOpeningEvent): void;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownListOpened"): DropDownListOpenedEvent;
    /**
     * Event which is raised when the drop down is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownListOpened", optionValue: DropDownListOpenedEvent): void;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownListClosing"): DropDownListClosingEvent;
    /**
     * Event which is raised when the drop down is closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownListClosing", optionValue: DropDownListClosingEvent): void;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownListClosed"): DropDownListClosedEvent;
    /**
     * Event which is raised when the drop down is already closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownListClosed", optionValue: DropDownListClosedEvent): void;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting"): DropDownItemSelectingEvent;
    /**
     * Event which is raised when the drop down list item is selecting.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is about to be selected.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownItemSelecting", optionValue: DropDownItemSelectingEvent): void;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownItemSelected"): DropDownItemSelectedEvent;
    /**
     * Event which is raised when the drop down list item is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.editorInput to obtain reference to the editable input
     * Use ui.list to obtain reference to the list contaier.
     * Use ui.item to obtain reference to the list item which is selected.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "dropDownItemSelected", optionValue: DropDownItemSelectedEvent): void;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "textChanged"): TextChangedEvent;
    /**
     * Event which is raised after text in editor was changed. It can be raised when keyUp event occurs,
     * or when the clear button is clicked or when an item from a list is selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.text to obtain new text
     * Use ui.oldTExt to obtain the old text.
     *
     * @optionValue Define event handler function.
     */
    igMaskEditor(optionLiteral: 'option', optionName: "textChanged", optionValue: TextChangedEvent): void;
    igMaskEditor(options: IgMaskEditor): JQuery;
    igMaskEditor(optionLiteral: 'option', optionName: string): any;
    igMaskEditor(optionLiteral: 'option', options: IgMaskEditor): JQuery;
    igMaskEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igMaskEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igDateEditor(methodName: "value", newValue?: Object): Object;
    igDateEditor(methodName: "getSelectedDate"): Object;
    igDateEditor(methodName: "selectDate", date: Object): void;
    igDateEditor(methodName: "spinUp", delta?: number): void;
    igDateEditor(methodName: "spinDown", delta?: number): void;
    igDateEditor(methodName: "spinUpButton"): void;
    igDateEditor(methodName: "spinDownButton"): void;
    igDateEditor(methodName: "isValid"): boolean;
    igDateEditor(methodName: "dropDownContainer"): void;
    igDateEditor(methodName: "showDropDown"): void;
    igDateEditor(methodName: "hideDropDown"): void;
    igDateEditor(methodName: "dropDownButton"): void;
    igDateEditor(methodName: "dropDownVisible"): void;
    igDateEditor(methodName: "findListItemIndex"): void;
    igDateEditor(methodName: "selectedListIndex"): void;
    igDateEditor(methodName: "getSelectedListItem"): void;
    /**
     * Gets  value in editor.  Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it as value. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     */
    igDateEditor(optionLiteral: 'option', optionName: "value"): Object;
    /**
     * Sets value in editor.  Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it as value. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "value", optionValue: Object): void;
    /**
     * Sets gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     */
    igDateEditor(optionLiteral: 'option', optionName: "minValue"): Object;
    /**
     * Sets gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "minValue", optionValue: Object): void;
    /**
     * Sets gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date
     */
    igDateEditor(optionLiteral: 'option', optionName: "maxValue"): Object;
    /**
     * Sets gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "maxValue", optionValue: Object): void;
    /**
     * Sets gets format of date while editor has no focus.
     *                 Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
     *                 If value is not set, then the dateInputFormat is used automatically.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them:
     *                     C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name
     *                 "MMMM": month field as long month name
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name
     *                 "dddd": day of the week as long name
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     */
    igDateEditor(optionLiteral: 'option', optionName: "dateDisplayFormat"): string;
    /**
     * Sets gets format of date while editor has no focus.
     *                 Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
     *                 If value is not set, then the dateInputFormat is used automatically.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them:
     *                     C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name
     *                 "MMMM": month field as long month name
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name
     *                 "dddd": day of the week as long name
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dateDisplayFormat", optionValue: string): void;
    /**
     * Sets gets format of date while editor has focus.
     *                 Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 If option is not set, then the "date" is used automatically.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name. Note: in focused state the MM is used.
     *                 "MMMM": month field as long month name. Note: in focused state the MM is used.
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name. Note: in focused state that field is skipped.
     *                 "dddd": day of the week as long name. Note: in focused state that field is skipped.
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     */
    igDateEditor(optionLiteral: 'option', optionName: "dateInputFormat"): string;
    /**
     * Sets gets format of date while editor has focus.
     *                 Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 If option is not set, then the "date" is used automatically.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name. Note: in focused state the MM is used.
     *                 "MMMM": month field as long month name. Note: in focused state the MM is used.
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name. Note: in focused state that field is skipped.
     *                 "dddd": day of the week as long name. Note: in focused state that field is skipped.
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dateInputFormat", optionValue: string): void;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dataMode"): any;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dataMode", optionValue: any): void;
    /**
     * Sets gets visibility of spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
     */
    igDateEditor(optionLiteral: 'option', optionName: "buttonType"): any;
    /**
     * Sets gets visibility of spin and clear buttons. That option can be set only on initialization. Combinations like 'spin,clear' are supported too.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "buttonType", optionValue: any): void;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    igDateEditor(optionLiteral: 'option', optionName: "spinDelta"): number;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "spinDelta", optionValue: number): void;
    /**
     * Sets gets ability to modify only 1 date field on spin events.
     *                 Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
     *                 Value true modifies only value of one field.
     */
    igDateEditor(optionLiteral: 'option', optionName: "limitSpinToCurrentField"): boolean;
    /**
     * Sets gets ability to modify only 1 date field on spin events.
     *                 Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
     *                 Value true modifies only value of one field.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "limitSpinToCurrentField", optionValue: boolean): void;
    /**
     * Sets gets formatting of the dates as UTC.
     *                 That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
     *                 Notes:
     *                 That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
     *                 When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
     *                 When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
     *                 When that option is modified after initialization, then displayed text and internal Date-value are not affected.
     *                 It is not recommended to change that option without resetting Date-value.
     */
    igDateEditor(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;
    /**
     * Sets gets formatting of the dates as UTC.
     *                 That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
     *                 Notes:
     *                 That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
     *                 When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
     *                 When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
     *                 When that option is modified after initialization, then displayed text and internal Date-value are not affected.
     *                 It is not recommended to change that option without resetting Date-value.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;
    /**
     * Sets gets year for auto detection of 20th and 21st centuries.
     * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
     * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
     */
    igDateEditor(optionLiteral: 'option', optionName: "centuryThreshold"): number;
    /**
     * Sets gets year for auto detection of 20th and 21st centuries.
     * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
     * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "centuryThreshold", optionValue: number): void;
    /**
     * Sets gets difference between year in Gregorian calendar and displayed year.
     */
    igDateEditor(optionLiteral: 'option', optionName: "yearShift"): number;
    /**
     * Sets gets difference between year in Gregorian calendar and displayed year.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "yearShift", optionValue: number): void;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    igDateEditor(optionLiteral: 'option', optionName: "regional"): any;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "regional", optionValue: any): void;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     */
    igDateEditor(optionLiteral: 'option', optionName: "inputMask"): string;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "inputMask", optionValue: string): void;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     */
    igDateEditor(optionLiteral: 'option', optionName: "unfilledCharsPrompt"): string;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "unfilledCharsPrompt", optionValue: string): void;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     */
    igDateEditor(optionLiteral: 'option', optionName: "padChar"): string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "padChar", optionValue: string): void;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     */
    igDateEditor(optionLiteral: 'option', optionName: "emptyChar"): string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "emptyChar", optionValue: string): void;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    igDateEditor(optionLiteral: 'option', optionName: "listItems"): any[];
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    igDateEditor(optionLiteral: 'option', optionName: "listWidth"): number;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    igDateEditor(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;
    /**
     * Gets  show/hide drop-down list animation duration in milliseconds.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * Sets show/hide drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * Gets  how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    igDateEditor(optionLiteral: 'option', optionName: "visibleItemsCount"): number;
    /**
     * Sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    igDateEditor(optionLiteral: 'option', optionName: "includeKeys"): string;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    igDateEditor(optionLiteral: 'option', optionName: "excludeKeys"): string;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     */
    igDateEditor(optionLiteral: 'option', optionName: "textAlign"): any;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "textAlign", optionValue: any): void;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    igDateEditor(optionLiteral: 'option', optionName: "placeHolder"): string;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    igDateEditor(optionLiteral: 'option', optionName: "selectionOnFocus"): string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     */
    igDateEditor(optionLiteral: 'option', optionName: "textMode"): any;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     */
    igDateEditor(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    igDateEditor(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    igDateEditor(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    igDateEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;
    /**
     * Gets  drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dropDownOrientation"): any;
    /**
     * Sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: any): void;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     */
    igDateEditor(optionLiteral: 'option', optionName: "maxLength"): number;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "maxLength", optionValue: number): void;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    igDateEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igDateEditor(optionLiteral: 'option', optionName: "toUpper"): boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igDateEditor(optionLiteral: 'option', optionName: "toLower"): boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    igDateEditor(optionLiteral: 'option', optionName: "locale"): any;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "locale", optionValue: any): void;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    igDateEditor(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;
    /**
     */
    igDateEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igDateEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igDateEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igDateEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in tabIndex for editor.
     */
    igDateEditor(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for editor.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    igDateEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igDateEditor(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igDateEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igDateEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igDateEditor(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igDateEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igDateEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    igDateEditor(options: IgDateEditor): JQuery;
    igDateEditor(optionLiteral: 'option', optionName: string): any;
    igDateEditor(optionLiteral: 'option', options: IgDateEditor): JQuery;
    igDateEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igDateEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igDatePicker(methodName: "getCalendar"): void;
    igDatePicker(methodName: "dropDownContainer"): void;
    igDatePicker(methodName: "showDropDown"): void;
    igDatePicker(methodName: "hideDropDown"): void;
    igDatePicker(methodName: "dropDownButton"): void;
    igDatePicker(methodName: "dropDownVisible"): boolean;
    igDatePicker(methodName: "value", newValue?: Object): Object;
    igDatePicker(methodName: "getSelectedDate"): Object;
    igDatePicker(methodName: "selectDate", date: Object): void;
    igDatePicker(methodName: "spinUp", delta?: number): void;
    igDatePicker(methodName: "spinDown", delta?: number): void;
    igDatePicker(methodName: "spinUpButton"): void;
    igDatePicker(methodName: "spinDownButton"): void;
    igDatePicker(methodName: "isValid"): boolean;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     */
    igDatePicker(optionLiteral: 'option', optionName: "regional"): any;
    /**
     * Sets gets custom regional settings for editor. If it is string, then $.ig.regional[stringValue] is assumed.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "regional", optionValue: any): void;
    /**
     * Sets gets visibility of clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,clear' or 'dropdownclear' are supported too.
     */
    igDatePicker(optionLiteral: 'option', optionName: "buttonType"): any;
    /**
     * Sets gets visibility of clear and drop-down button. That option can be set only on initialization. Combinations like 'dropdown,clear' or 'dropdownclear' are supported too.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "buttonType", optionValue: any): void;
    /**
     * Sets gets options supported by the jquery.ui.datepicker. Only options related to drop-down calendar are supported.
     */
    igDatePicker(optionLiteral: 'option', optionName: "datepickerOptions"): any;
    /**
     * Sets gets options supported by the jquery.ui.datepicker. Only options related to drop-down calendar are supported.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "datepickerOptions", optionValue: any): void;
    /**
     * Gets  value in editor.  Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it as value. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     */
    igDatePicker(optionLiteral: 'option', optionName: "value"): Object;
    /**
     * Sets value in editor.  Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it as value. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "value", optionValue: Object): void;
    /**
     * Sets gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     */
    igDatePicker(optionLiteral: 'option', optionName: "minValue"): Object;
    /**
     * Sets gets the minimum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "minValue", optionValue: Object): void;
    /**
     * Sets gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date
     */
    igDatePicker(optionLiteral: 'option', optionName: "maxValue"): Object;
    /**
     * Sets gets the maximum value which can be entered in editor by user. Date object can be set as value. String value can be passed and the editor will use the javascript Date object constructor to create date object and will use it for the comparison. MVC date format can be used too. For example Date(/"thicks"/).
     *   Note! This option doesn't use the displayInputFormat to extract the date
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "maxValue", optionValue: Object): void;
    /**
     * Sets gets format of date while editor has no focus.
     *                 Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
     *                 If value is not set, then the dateInputFormat is used automatically.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them:
     *                     C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name
     *                 "MMMM": month field as long month name
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name
     *                 "dddd": day of the week as long name
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     */
    igDatePicker(optionLiteral: 'option', optionName: "dateDisplayFormat"): string;
    /**
     * Sets gets format of date while editor has no focus.
     *                 Value of that option can be set to a specific date pattern or to a flag defined by regional settings.
     *                 If value is not set, then the dateInputFormat is used automatically.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them:
     *                     C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name
     *                 "MMMM": month field as long month name
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name
     *                 "dddd": day of the week as long name
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dateDisplayFormat", optionValue: string): void;
    /**
     * Sets gets format of date while editor has focus.
     *                 Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 If option is not set, then the "date" is used automatically.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name. Note: in focused state the MM is used.
     *                 "MMMM": month field as long month name. Note: in focused state the MM is used.
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name. Note: in focused state that field is skipped.
     *                 "dddd": day of the week as long name. Note: in focused state that field is skipped.
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     */
    igDatePicker(optionLiteral: 'option', optionName: "dateInputFormat"): string;
    /**
     * Sets gets format of date while editor has focus.
     *                 Value of that option can be set to explicit date pattern or to a flag defined by regional settings.
     *                 If value is set to explicit date pattern and pattern besides date-flags has explicit characters which match with date-flags or mask-flags, then the "escape" character should be used in front of them.
     *                 If option is not set, then the "date" is used automatically.
     *                 List of predefined regional flags:
     *                 "date": the datePattern member of regional option is used
     *                 "dateLong": the dateLongPattern member of regional option is used
     *                 "time": the timePattern member of regional option is used
     *                 "timeLong": the timeLongPattern member of regional option is used
     *                 "dateTime": the dateTimePattern member of regional option is used
     *                 List of explicit characters, which should have escape \\ character in front of them: C, &, a, A, ?, L, 9, 0, #, >, <, y, M, d, h, H, m, s, t, f.
     *                 List of date-flags when explicit date pattern is used:
     *                 "y": year field without century and without leading zero
     *                 "yy": year field without century and with leading zero
     *                 "yyyy": year field with leading zeros
     *                 "M": month field as digit without leading zero
     *                 "MM": month field as digit with leading zero
     *                 "MMM": month field as short month name. Note: in focused state the MM is used.
     *                 "MMMM": month field as long month name. Note: in focused state the MM is used.
     *                 "d": day of month field without leading zero
     *                 "dd": day of month field with leading zero
     *                 "ddd": day of the week as short name. Note: in focused state that field is skipped.
     *                 "dddd": day of the week as long name. Note: in focused state that field is skipped.
     *                 "t": first character of string which represents AM/PM field
     *                 "tt": 2 characters of string which represents AM/PM field
     *                 "h": hours field in 12-hours format without leading zero
     *                 "hh": hours field in 12-hours format with leading zero
     *                 "H": hours field in 24-hours format without leading zero
     *                 "HH": hours field in 24-hours format with leading zero
     *                 "m": minutes field without leading zero
     *                 "mm": minutes field with leading zero
     *                 "s": seconds field without leading zero
     *                 "ss": seconds field with leading zero
     *                 "f": milliseconds field in hundreds
     *                 "ff": milliseconds field in tenths
     *                 "fff": milliseconds field
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dateInputFormat", optionValue: string): void;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dataMode"): any;
    /**
     * Sets gets type of value returned by the get of value() method. That also affects functionality of the set value(val) method and the copy/paste operations of browser.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dataMode", optionValue: any): void;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     */
    igDatePicker(optionLiteral: 'option', optionName: "spinDelta"): number;
    /**
     * Sets gets delta-value which is used to increment or decrement value in editor on spin events. If value is set to negative value an exception is thrown. Non integer value is supported only for dataMode double and float.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "spinDelta", optionValue: number): void;
    /**
     * Sets gets ability to modify only 1 date field on spin events.
     *                 Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
     *                 Value true modifies only value of one field.
     */
    igDatePicker(optionLiteral: 'option', optionName: "limitSpinToCurrentField"): boolean;
    /**
     * Sets gets ability to modify only 1 date field on spin events.
     *                 Value false enables changes of other date fields when incremented or decremented date-field reaches its limits.
     *                 Value true modifies only value of one field.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "limitSpinToCurrentField", optionValue: boolean): void;
    /**
     * Sets gets formatting of the dates as UTC.
     *                 That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
     *                 Notes:
     *                 That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
     *                 When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
     *                 When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
     *                 When that option is modified after initialization, then displayed text and internal Date-value are not affected.
     *                 It is not recommended to change that option without resetting Date-value.
     */
    igDatePicker(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;
    /**
     * Sets gets formatting of the dates as UTC.
     *                 That option is supported only when dataMode option is 'date' and Date objects are used to get/set value of editor.
     *                 Notes:
     *                 That option affects only functionality of get/set value method and the Date-value, which was set on initialization.
     *                 When application uses the set-value, then internal Date-value and displayed-text is incremented by TimezoneOffset.
     *                 When application uses the get-value, then editor returns internal Date-value decremented by TimezoneOffset.
     *                 When that option is modified after initialization, then displayed text and internal Date-value are not affected.
     *                 It is not recommended to change that option without resetting Date-value.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;
    /**
     * Sets gets year for auto detection of 20th and 21st centuries.
     * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
     * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
     */
    igDatePicker(optionLiteral: 'option', optionName: "centuryThreshold"): number;
    /**
     * Sets gets year for auto detection of 20th and 21st centuries.
     * That option is used to automatically fill century when the user entered only 1 or 2 digits into the year field or when the date pattern contains only 1 or 2 year positions, e.g. "yy" or "y".
     * If user entered value larger than value of this option, then 20th century is used, otherwise the 21st.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "centuryThreshold", optionValue: number): void;
    /**
     * Sets gets difference between year in Gregorian calendar and displayed year.
     */
    igDatePicker(optionLiteral: 'option', optionName: "yearShift"): number;
    /**
     * Sets gets difference between year in Gregorian calendar and displayed year.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "yearShift", optionValue: number): void;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     */
    igDatePicker(optionLiteral: 'option', optionName: "inputMask"): string;
    /**
     * Sets gets input mask. Mask may include filter-flags and literal characters.
     * Literal characters are part of mask which cannot be modified by end user. In order to use a filter-flag as a literal character, the escape "\\" character should be used.
     * Default is "CCCCCCCCCC"
     * Note: optional flags/entries affect the value returned by get of the "value" and "text" methods.
     * List of filter-flags:
     * C: any keyboard character. Entry is optional.
     * &: any keyboard character. Entry is required.
     * a: letter or digit character. Entry is optional.
     * A: letter or digit character. Entry is required.
     * ?: letter character. Entry is optional.
     * L: letter character. Entry is required.
     * 9: digit character. Entry is optional.
     * 0: digit character. Entry is required.
     * #: digit character or "+" or "_". Entry is optional with replacement by "emptyPositionChar" or by "padChar".
     * >: all letters to the right are converted to the upper case. In order to disable conversion, the ">" flag should be used again.
     * <: all letters to the right are converted to the lower case. In order to disable conversion, the "<" flag should be used again.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "inputMask", optionValue: string): void;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     */
    igDatePicker(optionLiteral: 'option', optionName: "unfilledCharsPrompt"): string;
    /**
     * Sets gets character which is used as prompt in edit mode for available entry position.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "unfilledCharsPrompt", optionValue: string): void;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     */
    igDatePicker(optionLiteral: 'option', optionName: "padChar"): string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when editor is in display mode (not focused).
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "padChar", optionValue: string): void;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     */
    igDatePicker(optionLiteral: 'option', optionName: "emptyChar"): string;
    /**
     * Sets gets character which is used as replacement of not-filled required position in mask when application calls get for the "value" or for the "text" methods.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "emptyChar", optionValue: string): void;
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     */
    igDatePicker(optionLiteral: 'option', optionName: "listItems"): any[];
    /**
     * Sets gets list of items which are used for drop-down list.
     * Items in list can be strings, numbers or objects. The items are directly rendered without casting, or manipulating them.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "listItems", optionValue: any[]): void;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     */
    igDatePicker(optionLiteral: 'option', optionName: "listWidth"): number;
    /**
     * Sets gets custom width of drop-down list in pixels. If value is equal to 0 or negative, then the width of editor is used.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "listWidth", optionValue: number): void;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     */
    igDatePicker(optionLiteral: 'option', optionName: "listItemHoverDuration"): number;
    /**
     * Type="number* Sets the hover/unhover animation duration.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "listItemHoverDuration", optionValue: number): void;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dropDownAttachedToBody"): boolean;
    /**
     * Sets gets location of drop-down list.
     * Value false will create html element for list as a child of main html element.
     * Value true creates list as a child of body.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dropDownAttachedToBody", optionValue: boolean): void;
    /**
     * Gets  show/hide drop-down list animation duration in milliseconds.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * Sets show/hide drop-down list animation duration in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * Gets  how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     */
    igDatePicker(optionLiteral: 'option', optionName: "visibleItemsCount"): number;
    /**
     * Sets how many items should be shown at once.
     *    Notes:
     *    That option is overwritten if the number of list items is less than the value. In that case the height of the dropdown is adjusted to the number of items.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "visibleItemsCount", optionValue: number): void;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    igDatePicker(optionLiteral: 'option', optionName: "includeKeys"): string;
    /**
     * Sets gets ability to enter only specific characters in input-field from keyboard and on paste.
     * Notes:
     * If "excludeKeys" option contains same characters as this option, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "includeKeys", optionValue: string): void;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     */
    igDatePicker(optionLiteral: 'option', optionName: "excludeKeys"): string;
    /**
     * Sets gets ability to prevent entering specific characters from keyboard or on paste.
     * Notes:
     * If a character is specified in "includeKeys" option also, then "excludeKeys" has priority.
     * Letters should be set in upper case.
     * Making difference between upper and lower case is not supported.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "excludeKeys", optionValue: string): void;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     */
    igDatePicker(optionLiteral: 'option', optionName: "textAlign"): any;
    /**
     * Sets gets horizontal alignment of text in editor. If that option is not set, then 'right' is used for 'numeric', 'currency' and 'percent' editors and the 'left' is used for all other types of editor.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "textAlign", optionValue: any): void;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     */
    igDatePicker(optionLiteral: 'option', optionName: "placeHolder"): string;
    /**
     * Sets gets text which appears in editor when editor has no focus and "value" in editor is null or empty string.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "placeHolder", optionValue: string): void;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     */
    igDatePicker(optionLiteral: 'option', optionName: "selectionOnFocus"): string;
    /**
     * Type="selectAll|atStart|atEnd|browserDefault Set the action when the editor gets focused. The default value is selectAll.
     * selectAll type="string" Setting this option will select all the text into the editor when the edit mode gets enetered.
     * atStart type="string" Setting this option will move the cursor at the begining the text into the editor when the edit mode gets enetered.
     * atEnd type="string" Setting this option will move the cursor at the end the text into the editor when the edit mode gets enetered.
     * browserDefault type="string" Setting this option won't do any extra logic, but proceed with browser default behavior.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "selectionOnFocus", optionValue: string): void;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     */
    igDatePicker(optionLiteral: 'option', optionName: "textMode"): any;
    /**
     * Sets gets text mode of editor such as: single-line text editor, password editor or multiline editor. That option has effect only on initialization. If based element (selector) is TEXTAREA, then it is used as input-field.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "textMode", optionValue: any): void;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     */
    igDatePicker(optionLiteral: 'option', optionName: "spinWrapAround"): boolean;
    /**
     * Sets gets ability to automatically change the hoverd item into the opened dropdown list to its oposide side. When last item is reached and the spin down is clicked the first item gets hovered and vice versa.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "spinWrapAround", optionValue: boolean): void;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     */
    igDatePicker(optionLiteral: 'option', optionName: "isLimitedToListValues"): boolean;
    /**
     * Sets the ability to allow values only set into the list items. This validation is done only when the editor is blured, or enter key is pressed
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "isLimitedToListValues", optionValue: boolean): void;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     */
    igDatePicker(optionLiteral: 'option', optionName: "revertIfNotValid"): boolean;
    /**
     * Sets the editor to revert value to previous value in case of not valid value on blur, or enter key. If set to false clear is called.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "revertIfNotValid", optionValue: boolean): void;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     */
    igDatePicker(optionLiteral: 'option', optionName: "preventSubmitOnEnter"): boolean;
    /**
     * Sets the ability of the editor to prevent form submition on enter key pressed.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "preventSubmitOnEnter", optionValue: boolean): void;
    /**
     * Gets  drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dropDownOrientation"): any;
    /**
     * Sets drop down opening orientation for the dorp down list when open button is clicked. If auto option is set the component calculates if there is enough space at the bottom, if not checks the space above the component and if in both directions there is not enough space it openes the dropdown down way.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dropDownOrientation", optionValue: any): void;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     */
    igDatePicker(optionLiteral: 'option', optionName: "maxLength"): number;
    /**
     * Sets gets maximum length of text which can be entered by user.
     * Negative values or 0 disables that behavior.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "maxLength", optionValue: number): void;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     */
    igDatePicker(optionLiteral: 'option', optionName: "dropDownOnReadOnly"): boolean;
    /**
     * Sets gets ability to limit editor to be used only from the dropdown list. When set to true the editor input is not editable.
     * Note! In case there are no list items - the editor will reamin readonly
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "dropDownOnReadOnly", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igDatePicker(optionLiteral: 'option', optionName: "toUpper"): boolean;
    /**
     * Sets gets ability to convert input characters to upper case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "toUpper", optionValue: boolean): void;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     */
    igDatePicker(optionLiteral: 'option', optionName: "toLower"): boolean;
    /**
     * Sets gets ability to convert input characters to lower case (true) or keeps characters as they are (false). That option has effect only while keyboard entries and paste.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "toLower", optionValue: boolean): void;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     */
    igDatePicker(optionLiteral: 'option', optionName: "locale"): any;
    /**
     * Sets gets strings used for title of buttons. Value of object should contain pairs or key:value members. Note: any sub-option of locale can appear within the main option of igEditor. In this case those values within main options will have highest priority and override corresponding value in locale.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "locale", optionValue: any): void;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     */
    igDatePicker(optionLiteral: 'option', optionName: "suppressNotifications"): boolean;
    /**
     * Disables default notifications for basic validation scenarios built in the editors such as required list selection, value wrapping around or spin limits.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "suppressNotifications", optionValue: boolean): void;
    /**
     */
    igDatePicker(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igDatePicker(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igDatePicker(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igDatePicker(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in tabIndex for editor.
     */
    igDatePicker(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for editor.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    igDatePicker(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igDatePicker(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igDatePicker(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igDatePicker(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igDatePicker(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igDatePicker(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igDatePicker(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    igDatePicker(options: IgDatePicker): JQuery;
    igDatePicker(optionLiteral: 'option', optionName: string): any;
    igDatePicker(optionLiteral: 'option', options: IgDatePicker): JQuery;
    igDatePicker(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igDatePicker(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igCheckboxEditor(methodName: "isValid"): boolean;
    igCheckboxEditor(methodName: "value", newValue: Object): void;
    igCheckboxEditor(methodName: "toggle"): void;
    igCheckboxEditor(methodName: "inputName", newValue?: string): string;
    igCheckboxEditor(methodName: "field"): void;
    igCheckboxEditor(methodName: "editorContainer"): void;
    igCheckboxEditor(methodName: "hasFocus"): boolean;
    igCheckboxEditor(methodName: "setFocus", delay?: number): void;
    igCheckboxEditor(methodName: "hide"): void;
    igCheckboxEditor(methodName: "show"): void;
    igCheckboxEditor(methodName: "validator"): Object;
    igCheckboxEditor(methodName: "validate"): void;
    igCheckboxEditor(methodName: "destroy"): void;
    /**
     * Gets  either the editor is checked or not.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "checked"): number;
    /**
     * Sets either the editor is checked or not.
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "checked", optionValue: number): void;
    /**
     * Gets  size of the checkbox based on preset styles. For different sizes, define 'width' and 'height' options instead.verysmall The size of the Checkbox editor is very small.small The size of the Checkbox editor is small.normal The size of the Checkbox editor is normal.large The size of the Checkbox editor is large.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "size"): any;
    /**
     * Sets size of the checkbox based on preset styles. For different sizes, define 'width' and 'height' options instead.verysmall The size of the Checkbox editor is very small.small The size of the Checkbox editor is small.normal The size of the Checkbox editor is normal.large The size of the Checkbox editor is large.
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "size", optionValue: any): void;
    /**
     * Applies custom class on the checkbox, so that custom image can be used.
     * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "iconClass"): string;
    /**
     * Applies custom class on the checkbox, so that custom image can be used.
     * The following jQuery classes can be used in addition http://api.jqueryui.com/theming/icons/
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "iconClass", optionValue: string): void;
    /**
     * Gets  value in tabIndex for Checkbox Editor.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Sets value in tabIndex for Checkbox Editor.
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "value"): any;
    /**
     * Sets value in editor. The effect of setting/getting that option depends on type of editor and on dataMode options for every type of editor.
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "value", optionValue: any): void;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "allowNullValue"): boolean;
    /**
     * Sets gets ability to prevent null value.
     * If that option is false, and editor has no value, then value is set to an empty string.
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "allowNullValue", optionValue: boolean): void;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "nullValue"): any;
    /**
     * Sets gets the representation of null value. In case of default the value for the input is set to null, which makes the input to hold an empty string
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "nullValue", optionValue: any): void;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * Sets the name attribute of the value input. This input is used to sent the value to the server. In case the target element is input and it has name attribute, but the developer has set the inputName option, so this option overwrites the value input and removes the attribute from the element.
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "readOnly"): boolean;
    /**
     * Sets the readonly attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is sent into the request.
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "readOnly", optionValue: boolean): void;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "disabled"): boolean;
    /**
     * Sets the disabled attribute.Does not allow editing. Disables all the buttons and iteracitons applied. On submit the current value is not sent into the request
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "disabled", optionValue: boolean): void;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets gets options supported by the igValidator widget.
     * Note: Validation rules of igValidator, such as min and max value/length are applied separately triggering errors,
     *                 while similar options of the editor work to prevent wrong values from being entered.
     *
     * @optionValue New value to be set.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "keydown"): KeydownEvent;
    /**
     * Event which is raised on keydown event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "keydown", optionValue: KeydownEvent): void;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "keypress"): KeypressEvent;
    /**
     * Event which is raised on keypress event.
     * Return false in order to cancel key action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     * Set ui.key to another character which will replace original entry.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "keypress", optionValue: KeypressEvent): void;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "keyup"): KeyupEvent;
    /**
     * Event which is raised on keyup event.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.key to obtain value of keyCode.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "keyup", optionValue: KeyupEvent): void;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;
    /**
     * Event which is raised before rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Event which is raised after rendering of the editor completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the editor performing rendering.
     * Use ui.element to get a reference to the editor element.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mousedown"): MousedownEvent;
    /**
     * Event which is raised on mousedown at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mousedown", optionValue: MousedownEvent): void;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mouseup"): MouseupEvent;
    /**
     * Event which is raised on mouseup at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mouseup", optionValue: MouseupEvent): void;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mousemove"): MousemoveEvent;
    /**
     * Event which is raised on mousemove at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mousemove", optionValue: MousemoveEvent): void;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mouseover"): MouseoverEvent;
    /**
     * Event which is raised on mouseover at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mouseover", optionValue: MouseoverEvent): void;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mouseout"): MouseoutEvent;
    /**
     * Event which is raised on mouseleave at any part of editor including drop-down list.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.elementType to obtain type of html element under mouse, such as field, button, spinUpper, spinLower or item#.
     * Use ui.id and ui.elementType to obtain flag which represents html element under mouse.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "mouseout", optionValue: MouseoutEvent): void;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "blur"): BlurEvent;
    /**
     * Event which is raised when input field of editor loses focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "blur", optionValue: BlurEvent): void;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "focus"): FocusEvent;
    /**
     * Event which is raised when input field of editor gets focus.
     * Function takes argument evt.
     * Use ui.owner to obtain reference to igEditor.
     * Use evt.originalEvent to obtain reference to event of browser.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "focus", optionValue: FocusEvent): void;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "valueChanging"): ValueChangingEvent;
    /**
     * Event which is raised before value in editor was changed.
     * Return false in order to cancel change.
     * It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "valueChanging", optionValue: ValueChangingEvent): void;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "valueChanged"): ValueChangedEvent;
    /**
     * Event which is raised after value in editor was changed. It can be raised on lost focus or on spin events.
     * Function takes arguments evt and ui.
     * Use ui.owner to obtain reference to igEditor.
     * Use ui.value to obtain new value and ui.oldValue to obtain old value.
     *
     * @optionValue Define event handler function.
     */
    igCheckboxEditor(optionLiteral: 'option', optionName: "valueChanged", optionValue: ValueChangedEvent): void;
    igCheckboxEditor(options: IgCheckboxEditor): JQuery;
    igCheckboxEditor(optionLiteral: 'option', optionName: string): any;
    igCheckboxEditor(optionLiteral: 'option', options: IgCheckboxEditor): JQuery;
    igCheckboxEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igCheckboxEditor(methodName: string, ...methodParams: any[]): any;
}
interface SliceClickedEvent {
    (event: Event, ui: SliceClickedEventUIParam): void;
}
interface SliceClickedEventUIParam {
    /**
     * Used to obtain reference to igFunnelChart.
     */
    owner?: any;
    /**
     * Used to obtain index of clicked slice.
     */
    index?: any;
    /**
     * Used to obtain reference to clicked slice item.
     */
    item?: any;
    /**
     * Used to check if slice became selected.
     */
    selected?: any;
}
interface IgFunnelChart {
    /**
     * Gets or sets values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
     * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
     * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
     * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
     * Example:
     * bezierPoints: "0.4 0.1 0.6 1"
     */
    bezierPoints?: string;
    /**
     * Gets or sets the Legend for the chart.
     * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
     * If element was not found, then new DIV element is created and inserted into parent after chart element.
     * Value of that option can be an object with member "element", which contains the id of legend-element.
     * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
     * Examples:
     * legend: {}
     * legend: "idOfDiv"
     * legend: { element: "idOfDiv", width: 300 }
     * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
     */
    legend?: any;
    /**
     * Gets or sets the value member path for the funnel chart.
     */
    valueMemberPath?: string;
    /**
     * Gets or sets the Brushes property.
     * The brushes property defines the palette from which automatically assigned brushes are selected.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    brushes?: any;
    /**
     * Gets or sets the Outlines property.
     * The Outlines property defines the palette from which automatically assigned Outlines are selected.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    outlines?: any;
    /**
     * Gets or sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
     */
    bottomEdgeWidth?: number;
    /**
     * Gets or sets the InnerLabel mapping property for the current series object.
     */
    innerLabelMemberPath?: string;
    /**
     * Gets or sets the OuterLabel mapping property for the current series object.
     */
    outerLabelMemberPath?: string;
    /**
     * Gets or sets whether the inner labels are visible.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    innerLabelVisibility?: any;
    /**
     * Gets or sets whether the outer labels are visible.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    outerLabelVisibility?: any;
    /**
     * Gets or sets which side of the chart the outer labels should appear.
     *
     * Valid values:
     * "left" The labels will be displayed to the left of the chart.
     * "right" The labels will be displayed to the right of the chart.
     */
    outerLabelAlignment?: any;
    /**
     * Gets or sets the how the heights of the funnel slices should be configured.
     *
     * Valid values:
     * "uniform" The slice heights should be uniform.
     * "weighted" The slice heights should be weighted by value.
     */
    funnelSliceDisplay?: any;
    /**
     * Gets or sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
     */
    formatInnerLabel?: any;
    /**
     * Gets or sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
     */
    formatOuterLabel?: any;
    /**
     * Gets or sets how long the animations should take to run.
     */
    transitionDuration?: number;
    /**
     * Gets or sets if the funnel should be rendered inverted.
     */
    isInverted?: boolean;
    /**
     * Gets or sets whether to use a Bezier curve to define the funnel.
     */
    useBezierCurve?: boolean;
    /**
     * Gets or sets whether to allow slices to be selected.
     */
    allowSliceSelection?: boolean;
    /**
     * Gets or sets whether to use the unselected style on unselected slices.
     */
    useUnselectedStyle?: boolean;
    /**
     * Gets or sets the style to use for selected slices.
     * That can be used to set stroke (outline color), fill (background color) and opacity.
     */
    selectedSliceStyle?: any;
    /**
     * Gets or sets the style to use for unselected slices.
     * That can be used to set stroke (outline color), fill (background color) and opacity.
     */
    unselectedSliceStyle?: any;
    /**
     * Gets or sets the LegendItemBadgeTemplate to use for the legend items.
     * The provided object should have properties called render and optionally measure. See definition for option: circleMarkerTemplate
     */
    legendItemBadgeTemplate?: any;
    /**
     * Gets or sets whether to use the outer labels to identify the legend items.
     */
    useOuterLabelsForLegend?: boolean;
    /**
     * Gets or sets the thickness of outline around slices.
     */
    outlineThickness?: number;
    /**
     * Event which is raised when a slice is clicked.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igFunnelChart.
     * Use ui.index to obtain index of clicked slice.
     * Use ui.item to obtain reference to clicked slice item.
     * Use ui.selected to check if slice became selected.
     */
    sliceClicked?: SliceClickedEvent;
    /**
     * Option for igFunnelChart
     */
    [optionName: string]: any;
}
interface IgFunnelChartMethods {
    /**
     * Gets array of selected slice items.
     * returnType="array|object" If parameter is undefined, then array of selected items is returned. Otherwise, it returns reference to igFunnelChart.
     *
     * @param selection     Array or selected slice items.
     */
    selectedSliceItems(selection?: any[]): void;
    /**
     * Gets sets array of indexes of selected slices.
     * returnType="array|object" If parameter is undefined, then array of selected indexes is returned. Otherwise, it returns reference to igFunnelChart.
     *
     * @param selection     Array or selected slice indexes.
     */
    selectedSliceIndexes(selection?: any[]): void;
    /**
     * Checks if slice is selected.
     *
     * @param slice     Index of slice or reference to slice-data-item.
     */
    isSelected(slice: Object): boolean;
    /**
     * Toggles selected state of slice.
     *
     * @param slice     Index of slice or reference to slice-data-item.
     */
    toggleSelection(slice: Object): Object;
    exportVisualData(): void;
    /**
     * Destroys widget.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igFunnelChart"): IgFunnelChartMethods;
}
interface JQuery {
    igFunnelChart(methodName: "selectedSliceItems", selection?: any[]): void;
    igFunnelChart(methodName: "selectedSliceIndexes", selection?: any[]): void;
    igFunnelChart(methodName: "isSelected", slice: Object): boolean;
    igFunnelChart(methodName: "toggleSelection", slice: Object): Object;
    igFunnelChart(methodName: "exportVisualData"): void;
    igFunnelChart(methodName: "destroy"): void;
    /**
     * Gets  values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
     * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
     * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
     * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
     * Example:
     * bezierPoints: "0.4 0.1 0.6 1"
     */
    igFunnelChart(optionLiteral: 'option', optionName: "bezierPoints"): string;
    /**
     * Sets values for upper and lower bezier points. That option has effect only when useBezierCurve is enabled.
     * Value should provide 4 numeric values in range from 0 to 1 separated by space character.
     * The first number defines upper-x position, second: upper-y, third: lower-x, fourth: lower-y.
     * The null or invalid value will reset internal default, which is "0.5 0 0.5 1".
     * Example:
     * bezierPoints: "0.4 0.1 0.6 1"
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "bezierPoints", optionValue: string): void;
    /**
     * Gets  the Legend for the chart.
     * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
     * If element was not found, then new DIV element is created and inserted into parent after chart element.
     * Value of that option can be an object with member "element", which contains the id of legend-element.
     * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
     * Examples:
     * legend: {}
     * legend: "idOfDiv"
     * legend: { element: "idOfDiv", width: 300 }
     * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
     */
    igFunnelChart(optionLiteral: 'option', optionName: "legend"): any;
    /**
     * Sets the Legend for the chart.
     * The value of that option can be a string with the id of existing html element. That element should be empty and it will be used to create igChartLegend widget.
     * If element was not found, then new DIV element is created and inserted into parent after chart element.
     * Value of that option can be an object with member "element", which contains the id of legend-element.
     * In this case, that object also may contain options supported by the igChartLegend widget, such as "width", "height" and events, such as "legendItemMouseLeftButtonDown", "legendItemMouseEnter", etc.
     * Examples:
     * legend: {}
     * legend: "idOfDiv"
     * legend: { element: "idOfDiv", width: 300 }
     * legend: { legendItemMouseLeftButtonDown: function (evt, ui) { ui.chart.toggleSelection(ui.item); } }
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "legend", optionValue: any): void;
    /**
     * Gets  the value member path for the funnel chart.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "valueMemberPath"): string;
    /**
     * Sets the value member path for the funnel chart.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "valueMemberPath", optionValue: string): void;
    /**
     * Gets  the Brushes property.
     * The brushes property defines the palette from which automatically assigned brushes are selected.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "brushes"): any;
    /**
     * Sets the Brushes property.
     * The brushes property defines the palette from which automatically assigned brushes are selected.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "brushes", optionValue: any): void;
    /**
     * Gets  the Outlines property.
     * The Outlines property defines the palette from which automatically assigned Outlines are selected.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outlines"): any;
    /**
     * Sets the Outlines property.
     * The Outlines property defines the palette from which automatically assigned Outlines are selected.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outlines", optionValue: any): void;
    /**
     * Gets  the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "bottomEdgeWidth"): number;
    /**
     * Sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "bottomEdgeWidth", optionValue: number): void;
    /**
     * Gets  the InnerLabel mapping property for the current series object.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "innerLabelMemberPath"): string;
    /**
     * Sets the InnerLabel mapping property for the current series object.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "innerLabelMemberPath", optionValue: string): void;
    /**
     * Gets  the OuterLabel mapping property for the current series object.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outerLabelMemberPath"): string;
    /**
     * Sets the OuterLabel mapping property for the current series object.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outerLabelMemberPath", optionValue: string): void;
    /**
     * Gets  whether the inner labels are visible.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "innerLabelVisibility"): any;
    /**
     * Sets whether the inner labels are visible.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "innerLabelVisibility", optionValue: any): void;
    /**
     * Gets  whether the outer labels are visible.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outerLabelVisibility"): any;
    /**
     * Sets whether the outer labels are visible.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outerLabelVisibility", optionValue: any): void;
    /**
     * Gets  which side of the chart the outer labels should appear.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outerLabelAlignment"): any;
    /**
     * Sets which side of the chart the outer labels should appear.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outerLabelAlignment", optionValue: any): void;
    /**
     * Gets  the how the heights of the funnel slices should be configured.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "funnelSliceDisplay"): any;
    /**
     * Sets the how the heights of the funnel slices should be configured.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "funnelSliceDisplay", optionValue: any): void;
    /**
     * Gets  the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "formatInnerLabel"): any;
    /**
     * Sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "formatInnerLabel", optionValue: any): void;
    /**
     * Gets  the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "formatOuterLabel"): any;
    /**
     * Sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to igFunnelChart.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "formatOuterLabel", optionValue: any): void;
    /**
     * Gets  how long the animations should take to run.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "transitionDuration"): number;
    /**
     * Sets how long the animations should take to run.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;
    /**
     * Gets  if the funnel should be rendered inverted.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "isInverted"): boolean;
    /**
     * Sets if the funnel should be rendered inverted.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "isInverted", optionValue: boolean): void;
    /**
     * Gets  whether to use a Bezier curve to define the funnel.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "useBezierCurve"): boolean;
    /**
     * Sets whether to use a Bezier curve to define the funnel.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "useBezierCurve", optionValue: boolean): void;
    /**
     * Gets  whether to allow slices to be selected.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "allowSliceSelection"): boolean;
    /**
     * Sets whether to allow slices to be selected.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "allowSliceSelection", optionValue: boolean): void;
    /**
     * Gets  whether to use the unselected style on unselected slices.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "useUnselectedStyle"): boolean;
    /**
     * Sets whether to use the unselected style on unselected slices.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "useUnselectedStyle", optionValue: boolean): void;
    /**
     * Gets  the style to use for selected slices.
     * That can be used to set stroke (outline color), fill (background color) and opacity.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "selectedSliceStyle"): any;
    /**
     * Sets the style to use for selected slices.
     * That can be used to set stroke (outline color), fill (background color) and opacity.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "selectedSliceStyle", optionValue: any): void;
    /**
     * Gets  the style to use for unselected slices.
     * That can be used to set stroke (outline color), fill (background color) and opacity.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "unselectedSliceStyle"): any;
    /**
     * Sets the style to use for unselected slices.
     * That can be used to set stroke (outline color), fill (background color) and opacity.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "unselectedSliceStyle", optionValue: any): void;
    /**
     * Gets  the LegendItemBadgeTemplate to use for the legend items.
     * The provided object should have properties called render and optionally measure. See definition for option: circleMarkerTemplate
     */
    igFunnelChart(optionLiteral: 'option', optionName: "legendItemBadgeTemplate"): any;
    /**
     * Sets the LegendItemBadgeTemplate to use for the legend items.
     * The provided object should have properties called render and optionally measure. See definition for option: circleMarkerTemplate
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "legendItemBadgeTemplate", optionValue: any): void;
    /**
     * Gets  whether to use the outer labels to identify the legend items.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "useOuterLabelsForLegend"): boolean;
    /**
     * Sets whether to use the outer labels to identify the legend items.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "useOuterLabelsForLegend", optionValue: boolean): void;
    /**
     * Gets  the thickness of outline around slices.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outlineThickness"): number;
    /**
     * Sets the thickness of outline around slices.
     *
     * @optionValue New value to be set.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "outlineThickness", optionValue: number): void;
    /**
     * Event which is raised when a slice is clicked.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igFunnelChart.
     * Use ui.index to obtain index of clicked slice.
     * Use ui.item to obtain reference to clicked slice item.
     * Use ui.selected to check if slice became selected.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "sliceClicked"): SliceClickedEvent;
    /**
     * Event which is raised when a slice is clicked.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igFunnelChart.
     * Use ui.index to obtain index of clicked slice.
     * Use ui.item to obtain reference to clicked slice item.
     * Use ui.selected to check if slice became selected.
     *
     * @optionValue Define event handler function.
     */
    igFunnelChart(optionLiteral: 'option', optionName: "sliceClicked", optionValue: SliceClickedEvent): void;
    igFunnelChart(options: IgFunnelChart): JQuery;
    igFunnelChart(optionLiteral: 'option', optionName: string): any;
    igFunnelChart(optionLiteral: 'option', options: IgFunnelChart): JQuery;
    igFunnelChart(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igFunnelChart(methodName: string, ...methodParams: any[]): any;
}
interface CellsMergingEvent {
    (event: Event, ui: CellsMergingEventUIParam): void;
}
interface CellsMergingEventUIParam {
    /**
     * Used to get reference to the row the merged group starts in.
     */
    row?: any;
    /**
     * Used to get the index of the row the merged group starts in.
     */
    rowIndex?: any;
    /**
     * Used to get the key of the row the merged group starts in.
     */
    rowKey?: any;
    /**
     * Used to get reference to igGridCellMerging.
     */
    owner?: any;
    /**
     * Used to get reference to the igGrid the igGridCellMerging are initialized for.
     */
    grid?: any;
    /**
     * Used to get the cells value which is repeated and caused the merged group to be created.
     */
    value?: any;
}
interface CellsMergedEvent {
    (event: Event, ui: CellsMergedEventUIParam): void;
}
interface CellsMergedEventUIParam {
    /**
     * Used to get reference to the row the merged group starts in.
     */
    row?: any;
    /**
     * Used to get the index of the row the merged group starts in.
     */
    rowIndex?: any;
    /**
     * Used to get the key of the row the merged group starts in.
     */
    rowKey?: any;
    /**
     * Used to get reference to igGridCellMerging.
     */
    owner?: any;
    /**
     * Used to get reference to the igGrid the igGridCellMerging are initialized for.
     */
    grid?: any;
    /**
     * Used to get the cells value which is repeated and caused the merged group to be created.
     */
    value?: any;
    /**
     * Used to get the total count of cells that were merged.
     */
    count?: any;
}
interface IgGridCellMerging {
    /**
     * controls the initial state
     *
     * Valid values:
     * "regular" the grid won't be initialized with cells merged
     * "merged" the grid will be initialized with cells merged
     */
    initialState?: any;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before a new merged cells group is created.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the merged group starts in.
     * Use ui.rowIndex to get the index of the row the merged group starts in.
     * Use ui.rowKey to get the key of the row the merged group starts in.
     * Use ui.owner to get reference to igGridCellMerging.
     * Use ui.grid to get reference to the igGrid the igGridCellMerging are initialized for.
     * Use ui.value to get the cells value which is repeated and caused the merged group to be created.
     */
    cellsMerging?: CellsMergingEvent;
    /**
     * Use ui.row to get reference to the row the merged group starts in.
     * Use ui.rowIndex to get the index of the row the merged group starts in.
     * Use ui.rowKey to get the key of the row the merged group starts in.
     * Use ui.owner to get reference to igGridCellMerging.
     * Use ui.grid to get reference to the igGrid the igGridCellMerging are initialized for.
     * Use ui.value to get the cells value which is repeated and caused the merged group to be created.
     * Use ui.count to get the total count of cells that were merged.
     */
    cellsMerged?: CellsMergedEvent;
    /**
     * Option for igGridCellMerging
     */
    [optionName: string]: any;
}
interface IgGridCellMergingMethods {
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igGridCellMerging"): IgGridCellMergingMethods;
}
interface JQuery {
    igGridCellMerging(methodName: "destroy"): void;
    /**
     * Controls the initial state
     */
    igGridCellMerging(optionLiteral: 'option', optionName: "initialState"): any;
    /**
     * Controls the initial state
     *
     * @optionValue New value to be set.
     */
    igGridCellMerging(optionLiteral: 'option', optionName: "initialState", optionValue: any): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridCellMerging(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridCellMerging(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before a new merged cells group is created.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the merged group starts in.
     * Use ui.rowIndex to get the index of the row the merged group starts in.
     * Use ui.rowKey to get the key of the row the merged group starts in.
     * Use ui.owner to get reference to igGridCellMerging.
     * Use ui.grid to get reference to the igGrid the igGridCellMerging are initialized for.
     * Use ui.value to get the cells value which is repeated and caused the merged group to be created.
     */
    igGridCellMerging(optionLiteral: 'option', optionName: "cellsMerging"): CellsMergingEvent;
    /**
     * Event fired before a new merged cells group is created.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the merged group starts in.
     * Use ui.rowIndex to get the index of the row the merged group starts in.
     * Use ui.rowKey to get the key of the row the merged group starts in.
     * Use ui.owner to get reference to igGridCellMerging.
     * Use ui.grid to get reference to the igGrid the igGridCellMerging are initialized for.
     * Use ui.value to get the cells value which is repeated and caused the merged group to be created.
     *
     * @optionValue Define event handler function.
     */
    igGridCellMerging(optionLiteral: 'option', optionName: "cellsMerging", optionValue: CellsMergingEvent): void;
    /**
     * Use ui.row to get reference to the row the merged group starts in.
     * Use ui.rowIndex to get the index of the row the merged group starts in.
     * Use ui.rowKey to get the key of the row the merged group starts in.
     * Use ui.owner to get reference to igGridCellMerging.
     * Use ui.grid to get reference to the igGrid the igGridCellMerging are initialized for.
     * Use ui.value to get the cells value which is repeated and caused the merged group to be created.
     * Use ui.count to get the total count of cells that were merged.
     */
    igGridCellMerging(optionLiteral: 'option', optionName: "cellsMerged"): CellsMergedEvent;
    /**
     * Use ui.row to get reference to the row the merged group starts in.
     * Use ui.rowIndex to get the index of the row the merged group starts in.
     * Use ui.rowKey to get the key of the row the merged group starts in.
     * Use ui.owner to get reference to igGridCellMerging.
     * Use ui.grid to get reference to the igGrid the igGridCellMerging are initialized for.
     * Use ui.value to get the cells value which is repeated and caused the merged group to be created.
     * Use ui.count to get the total count of cells that were merged.
     *
     * @optionValue New value to be set.
     */
    igGridCellMerging(optionLiteral: 'option', optionName: "cellsMerged", optionValue: CellsMergedEvent): void;
    igGridCellMerging(options: IgGridCellMerging): JQuery;
    igGridCellMerging(optionLiteral: 'option', optionName: string): any;
    igGridCellMerging(optionLiteral: 'option', options: IgGridCellMerging): JQuery;
    igGridCellMerging(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridCellMerging(methodName: string, ...methodParams: any[]): any;
}
interface IgGridColumnFixingColumnSetting {
    /**
     * Specifies column key. Either key or index must be set in every column setting.
     */
    columnKey?: string;
    /**
     * Specifies column index. Either key or index must be set in every column setting.
     */
    columnIndex?: number;
    /**
     * Specifies whether the column allows to be fixed or not.
     */
    allowFixing?: boolean;
    /**
     * Specifies whether the column to be fixed or not.
     */
    isFixed?: boolean;
    /**
     * Option for IgGridColumnFixingColumnSetting
     */
    [optionName: string]: any;
}
interface ColumnFixingEvent {
    (event: Event, ui: ColumnFixingEventUIParam): void;
}
interface ColumnFixingEventUIParam {
    /**
     * Used to get columnKey or columnIndex
     */
    columnIdentifier?: any;
    /**
     * Used to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     */
    isGroupHeader?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
}
interface ColumnFixedEvent {
    (event: Event, ui: ColumnFixedEventUIParam): void;
}
interface ColumnFixedEventUIParam {
    /**
     * Used to get columnKey or columnIndex
     */
    columnIdentifier?: any;
    /**
     * Used to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     */
    isGroupHeader?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
}
interface ColumnUnfixingEvent {
    (event: Event, ui: ColumnUnfixingEventUIParam): void;
}
interface ColumnUnfixingEventUIParam {
    /**
     * Used to get columnKey or columnIndex
     */
    columnIdentifier?: any;
    /**
     * Used to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     */
    isGroupHeader?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
}
interface ColumnUnfixedEvent {
    (event: Event, ui: ColumnUnfixedEventUIParam): void;
}
interface ColumnUnfixedEventUIParam {
    /**
     * Used to get columnKey or columnIndex
     */
    columnIdentifier?: any;
    /**
     * Used to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     */
    isGroupHeader?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
}
interface ColumnFixingRefusedEvent {
    (event: Event, ui: ColumnFixingRefusedEventUIParam): void;
}
interface ColumnFixingRefusedEventUIParam {
    /**
     * Used to get columnKey or columnIndex
     */
    columnIdentifier?: any;
    /**
     * Used to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     */
    isGroupHeader?: any;
    /**
     * Used to get error message describing the reason fixing has failed
     */
    errorMessage?: any;
    /**
     * Used to get a reference to the grid widget
     */
    owner?: any;
}
interface ColumnUnfixingRefusedEvent {
    (event: Event, ui: ColumnUnfixingRefusedEventUIParam): void;
}
interface ColumnUnfixingRefusedEventUIParam {
    /**
     * Used to get columnKey or columnIndex
     */
    columnIdentifier?: any;
    /**
     * Used to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     */
    isGroupHeader?: any;
    /**
     * Used to get error message describing the reason unfixing has failed
     */
    errorMessage?: any;
    /**
     * Used to get a reference to the grid widget
     */
    owner?: any;
}
interface IgGridColumnFixing {
    /**
     * Specifies altering text on column fixing header icon when column is not fixed
     */
    headerFixButtonText?: string;
    /**
     * Specifies altering text on column fixing header icon when column is fixed
     */
    headerUnfixButtonText?: string;
    /**
     * Option to show column fixing buttons in header cells/feature chooser
     */
    showFixButtons?: boolean;
    /**
     * Option enable syncing heights of rows between fixed/unfixed rows
     */
    syncRowHeights?: boolean;
    /**
     * Option to configure scroll delta when scrolling with mouse wheel or keyboard in fixed columns area
     */
    scrollDelta?: number;
    /**
     * configure on which side to render fixed area
     *
     * Valid values:
     * "left" fixed column are rendered on the left side of the main grid.
     * "right" fixed column are rendered on the right side of the main grid.
     */
    fixingDirection?: any;
    /**
     * A list of column settings that specifies custom column fixing options on a per column basis
     */
    columnSettings?: IgGridColumnFixingColumnSetting[];
    /**
     * Feature chooser text of the fixed column
     */
    featureChooserTextFixedColumn?: string;
    /**
     * Feature chooser text of the unfixed column
     */
    featureChooserTextUnfixedColumn?: string;
    /**
     * minimal visible area for unfixed columns. For instance if you fix a column(or columns) and the width of the fixed columns is such that the width of visible are of unfixed columns is less than this option then fixing will be canceled
     */
    minimalVisibleAreaWidth?: any;
    /**
     * Specify initial fixing of non data columns(like specific rowSelectors columns on the left side of the grid) when fixingDirection is left
     */
    fixNondataColumns?: boolean;
    /**
     * If true then on column fixing when creating table rows all row attributes for the unfixed rows will be set in fixed rows too. Because of performance issue you can set this option to false
     */
    populateDataRowsAttributes?: boolean;
    /**
     * Event which is fired when column fixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    columnFixing?: ColumnFixingEvent;
    /**
     * Event which is fired when column fixing operation is finished
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    columnFixed?: ColumnFixedEvent;
    /**
     * Event which is fired when column unfixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    columnUnfixing?: ColumnUnfixingEvent;
    /**
     * Event which is fired when column unfixing operation is done
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    columnUnfixed?: ColumnUnfixedEvent;
    /**
     * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason fixing has failed
     * use args.owner to get a reference to the grid widget
     */
    columnFixingRefused?: ColumnFixingRefusedEvent;
    /**
     * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason unfixing has failed
     * use args.owner to get a reference to the grid widget
     */
    columnUnfixingRefused?: ColumnUnfixingRefusedEvent;
    /**
     * Option for igGridColumnFixing
     */
    [optionName: string]: any;
}
interface IgGridColumnFixingMethods {
    /**
     * Unfix column by specified column identifier - column key or column index
     *
     * @param colIdentifier    An identifier of the column to be unfixed - column index or column key.
     * @param isGroupHeader    when true indicates that the column is multi-column header.
     * @param target    Key of the column where the unfixed column should move to.
     * @param after    Specifies where the unfixed column should be moved after or before the target column. This parameter is disregarded if there is no target column specified.
     */
    unfixColumn(colIdentifier: Object, isGroupHeader?: boolean, target?: string, after?: boolean): Object;
    /**
     * Check whether heights of fixed and unfixed tables are equal - if not sync them. Similar check is made for heights of table rows.
     */
    checkAndSyncHeights(): void;
    /**
     * Unfix data skipped columns(like row selectors) if any when fixingDirection is left
     */
    unfixDataSkippedColumns(): void;
    /**
     * Unfix all columns
     */
    unfixAllColumns(): void;
    /**
     * Check whether fixing is allowed for the passed argument - columns. It should not be allowed if there is only one visible column in unfixed area and there are hidden unfixed columns
     *
     * @param columns    array of columns - could be column indexes, column keys, column object or mixed
     */
    checkFixingAllowed(columns: any[]): boolean;
    /**
     * Check whether unfixing is allowed for the passed argument - columns. It should not be allowed if there is only one visible column in fixed area and there are hidden fixed columns
     *
     * @param columns    array of columns - could be column indexes, column keys, column object or mixed
     */
    checkUnfixingAllowed(columns: any[]): boolean;
    /**
     * Fix column by specified column identifier - column index or column key
     *
     * @param colIdentifier    An identifier of the column to be fixed - column index or column key.
     * @param isGroupHeader    when true indicates that the column is multi-column header.
     * @param target    Key of the column where the fixed column should move to.
     * @param after    Specifies where the fixed column should be moved after or before the target column. This parameter is disregarded if there is no target column specified.
     */
    fixColumn(colIdentifier: Object, isGroupHeader?: boolean, target?: string, after?: boolean): Object;
    /**
     * Fix data skipped columns(like row selectors) if any when fixing direction is left. If already fixed nothing is done
     */
    fixDataSkippedColumns(): void;
    /**
     * Syncs rows heights between $rows and $anotherRows
     *
     * @param $trs    An array of rows object of fixed/unfixed container.
     * @param $anotherRows    An array of rows object of other unfixed/fixed container.
     */
    syncRowsHeights($trs: any[], $anotherRows: any[]): void;
    /**
     * Calculates width of the fixed columns.
     *
     * @param fCols    Array of grid columns. If not set then it is taken fixed columns of the grid.
     * @param excludeNonDataColumns    If set to true do not calculate the width of non-data fixed columns(like row-selectors)
     * @param includeHidden    If set to true calculates width of the hidden fixed columns(as getting their initial width)
     */
    getWidthOfFixedColumns(fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number;
    /**
     * Destroys the columnfixing widget
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igGridColumnFixing"): IgGridColumnFixingMethods;
}
interface JQuery {
    igGridColumnFixing(methodName: "unfixColumn", colIdentifier: Object, isGroupHeader?: boolean, target?: string, after?: boolean): Object;
    igGridColumnFixing(methodName: "checkAndSyncHeights"): void;
    igGridColumnFixing(methodName: "unfixDataSkippedColumns"): void;
    igGridColumnFixing(methodName: "unfixAllColumns"): void;
    igGridColumnFixing(methodName: "checkFixingAllowed", columns: any[]): boolean;
    igGridColumnFixing(methodName: "checkUnfixingAllowed", columns: any[]): boolean;
    igGridColumnFixing(methodName: "fixColumn", colIdentifier: Object, isGroupHeader?: boolean, target?: string, after?: boolean): Object;
    igGridColumnFixing(methodName: "fixDataSkippedColumns"): void;
    igGridColumnFixing(methodName: "syncRowsHeights", $trs: any[], $anotherRows: any[]): void;
    igGridColumnFixing(methodName: "getWidthOfFixedColumns", fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number;
    igGridColumnFixing(methodName: "destroy"): void;
    /**
     * Gets altering text on column fixing header icon when column is not fixed
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "headerFixButtonText"): string;
    /**
     * Sets altering text on column fixing header icon when column is not fixed
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "headerFixButtonText", optionValue: string): void;
    /**
     * Gets altering text on column fixing header icon when column is fixed
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "headerUnfixButtonText"): string;
    /**
     * Sets altering text on column fixing header icon when column is fixed
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "headerUnfixButtonText", optionValue: string): void;
    /**
     * Option to show column fixing buttons in header cells/feature chooser
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "showFixButtons"): boolean;
    /**
     * Option to show column fixing buttons in header cells/feature chooser
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "showFixButtons", optionValue: boolean): void;
    /**
     * Option enable syncing heights of rows between fixed/unfixed rows
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "syncRowHeights"): boolean;
    /**
     * Option enable syncing heights of rows between fixed/unfixed rows
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "syncRowHeights", optionValue: boolean): void;
    /**
     * Option to configure scroll delta when scrolling with mouse wheel or keyboard in fixed columns area
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "scrollDelta"): number;
    /**
     * Option to configure scroll delta when scrolling with mouse wheel or keyboard in fixed columns area
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "scrollDelta", optionValue: number): void;
    /**
     * Configure on which side to render fixed area
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "fixingDirection"): any;
    /**
     * Configure on which side to render fixed area
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "fixingDirection", optionValue: any): void;
    /**
     * A list of column settings that specifies custom column fixing options on a per column basis
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnSettings"): IgGridColumnFixingColumnSetting[];
    /**
     * A list of column settings that specifies custom column fixing options on a per column basis
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridColumnFixingColumnSetting[]): void;
    /**
     * Feature chooser text of the fixed column
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextFixedColumn"): string;
    /**
     * Feature chooser text of the fixed column
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextFixedColumn", optionValue: string): void;
    /**
     * Feature chooser text of the unfixed column
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextUnfixedColumn"): string;
    /**
     * Feature chooser text of the unfixed column
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextUnfixedColumn", optionValue: string): void;
    /**
     * Minimal visible area for unfixed columns. For instance if you fix a column(or columns) and the width of the fixed columns is such that the width of visible are of unfixed columns is less than this option then fixing will be canceled
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "minimalVisibleAreaWidth"): any;
    /**
     * Minimal visible area for unfixed columns. For instance if you fix a column(or columns) and the width of the fixed columns is such that the width of visible are of unfixed columns is less than this option then fixing will be canceled
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "minimalVisibleAreaWidth", optionValue: any): void;
    /**
     * Specify initial fixing of non data columns(like specific rowSelectors columns on the left side of the grid) when fixingDirection is left
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "fixNondataColumns"): boolean;
    /**
     * Specify initial fixing of non data columns(like specific rowSelectors columns on the left side of the grid) when fixingDirection is left
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "fixNondataColumns", optionValue: boolean): void;
    /**
     * If true then on column fixing when creating table rows all row attributes for the unfixed rows will be set in fixed rows too. Because of performance issue you can set this option to false
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "populateDataRowsAttributes"): boolean;
    /**
     * If true then on column fixing when creating table rows all row attributes for the unfixed rows will be set in fixed rows too. Because of performance issue you can set this option to false
     *
     * @optionValue New value to be set.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "populateDataRowsAttributes", optionValue: boolean): void;
    /**
     * Event which is fired when column fixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixing"): ColumnFixingEvent;
    /**
     * Event which is fired when column fixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixing", optionValue: ColumnFixingEvent): void;
    /**
     * Event which is fired when column fixing operation is finished
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixed"): ColumnFixedEvent;
    /**
     * Event which is fired when column fixing operation is finished
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixed", optionValue: ColumnFixedEvent): void;
    /**
     * Event which is fired when column unfixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixing"): ColumnUnfixingEvent;
    /**
     * Event which is fired when column unfixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixing", optionValue: ColumnUnfixingEvent): void;
    /**
     * Event which is fired when column unfixing operation is done
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixed"): ColumnUnfixedEvent;
    /**
     * Event which is fired when column unfixing operation is done
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixed", optionValue: ColumnUnfixedEvent): void;
    /**
     * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason fixing has failed
     * use args.owner to get a reference to the grid widget
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixingRefused"): ColumnFixingRefusedEvent;
    /**
     * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason fixing has failed
     * use args.owner to get a reference to the grid widget
     *
     * @optionValue Define event handler function.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnFixingRefused", optionValue: ColumnFixingRefusedEvent): void;
    /**
     * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason unfixing has failed
     * use args.owner to get a reference to the grid widget
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixingRefused"): ColumnUnfixingRefusedEvent;
    /**
     * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason unfixing has failed
     * use args.owner to get a reference to the grid widget
     *
     * @optionValue Define event handler function.
     */
    igGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixingRefused", optionValue: ColumnUnfixingRefusedEvent): void;
    igGridColumnFixing(options: IgGridColumnFixing): JQuery;
    igGridColumnFixing(optionLiteral: 'option', optionName: string): any;
    igGridColumnFixing(optionLiteral: 'option', options: IgGridColumnFixing): JQuery;
    igGridColumnFixing(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridColumnFixing(methodName: string, ...methodParams: any[]): any;
}
interface IgGridColumnMovingColumnSetting {
    /**
     * Column key. this is a required property in every column setting if columnIndex is not set.
     */
    columnKey?: string;
    /**
     * Column index. Can be used in place of column key. The preferred way of populating a column setting is to always use the column keys as identifiers.
     */
    columnIndex?: number;
    /**
     * Allows the column to be moved.
     */
    allowMoving?: boolean;
    /**
     * Option for IgGridColumnMovingColumnSetting
     */
    [optionName: string]: any;
}
interface ColumnDragStartEvent {
    (event: Event, ui: ColumnDragStartEventUIParam): void;
}
interface ColumnDragStartEventUIParam {
    /**
     * Used to get the column key of the column being dragged
     */
    columnKey?: any;
    /**
     * Used to get the column index of the column being dragged
     */
    columnIndex?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
    /**
     * Used to get a reference to the orginal th being dragged
     */
    header?: any;
    /**
     * Used to get a reference to cloned DOM element that's actually being dragged
     */
    helper?: any;
}
interface ColumnDragEndEvent {
    (event: Event, ui: ColumnDragEndEventUIParam): void;
}
interface ColumnDragEndEventUIParam {
    /**
     * Used to get the column key of the column that was being dragged
     */
    columnKey?: any;
    /**
     * Used to get the column index of the column that was being dragged
     */
    columnIndex?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
    /**
     * Used to get a reference to the orginal th that was being dragged
     */
    header?: any;
    /**
     * Used to get a reference to cloned DOM element that was actually being dragged
     */
    helper?: any;
}
interface ColumnDragCanceledEvent {
    (event: Event, ui: ColumnDragCanceledEventUIParam): void;
}
interface ColumnDragCanceledEventUIParam {
    /**
     * Used to get the column key of the column that was being dragged
     */
    columnKey?: any;
    /**
     * Used to get the column index of the column that was being dragged
     */
    columnIndex?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
    /**
     * Used to get a reference to the orginal th that was being dragged
     */
    header?: any;
    /**
     * Used to get a reference to cloned DOM element that was actually being dragged
     */
    helper?: any;
}
interface ColumnMovingEvent {
    (event: Event, ui: ColumnMovingEventUIParam): void;
}
interface ColumnMovingEventUIParam {
    /**
     * Used to get the column key of the column that was being moved
     */
    columnKey?: any;
    /**
     * Used to get the column index of the column that was being moved
     */
    columnIndex?: any;
    /**
     * Used to get the new column index of the column that was being moved
     */
    targetIndex?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
}
interface ColumnMovedEvent {
    (event: Event, ui: ColumnMovedEventUIParam): void;
}
interface ColumnMovedEventUIParam {
    /**
     * Used to get the column key of the column that was moved
     */
    columnKey?: any;
    /**
     * Used to get the previous column index of the column that was moved
     */
    oldIndex?: any;
    /**
     * Used to get the new column index of the column that was being moved
     */
    newIndex?: any;
    /**
     * Used to get a reference to the widget
     */
    owner?: any;
}
interface MovingDialogOpeningEvent {
    (event: Event, ui: MovingDialogOpeningEventUIParam): void;
}
interface MovingDialogOpeningEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogElement?: any;
}
interface MovingDialogOpenedEvent {
    (event: Event, ui: MovingDialogOpenedEventUIParam): void;
}
interface MovingDialogOpenedEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogElement?: any;
}
interface MovingDialogDraggedEvent {
    (event: Event, ui: MovingDialogDraggedEventUIParam): void;
}
interface MovingDialogDraggedEventUIParam {
    /**
     * Used to get the reference to the igGridMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogElement?: any;
    /**
     * Used to get the original position of the moving dialog div as { top, left } object, relative to the page.
     */
    originalPosition?: any;
    /**
     * Used to get the current position of the moving dialog div as { top, left } object, relative to the page.
     */
    position?: any;
}
interface MovingDialogClosingEvent {
    (event: Event, ui: MovingDialogClosingEventUIParam): void;
}
interface MovingDialogClosingEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogElement?: any;
}
interface MovingDialogClosedEvent {
    (event: Event, ui: MovingDialogClosedEventUIParam): void;
}
interface MovingDialogClosedEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogElement?: any;
}
interface MovingDialogContentsRenderingEvent {
    (event: Event, ui: MovingDialogContentsRenderingEventUIParam): void;
}
interface MovingDialogContentsRenderingEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialog?: any;
}
interface MovingDialogContentsRenderedEvent {
    (event: Event, ui: MovingDialogContentsRenderedEventUIParam): void;
}
interface MovingDialogContentsRenderedEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialog?: any;
}
interface MovingDialogMoveUpButtonPressedEvent {
    (event: Event, ui: MovingDialogMoveUpButtonPressedEventUIParam): void;
}
interface MovingDialogMoveUpButtonPressedEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialog?: any;
    /**
     * Used to get the column key of the column that was being moved
     */
    columnKey?: any;
    /**
     * Used to get the column index of the column that was being moved
     */
    columnIndex?: any;
    /**
     * Used to get the new column index of the column that was being moved
     */
    targetIndex?: any;
}
interface MovingDialogMoveDownButtonPressedEvent {
    (event: Event, ui: MovingDialogMoveDownButtonPressedEventUIParam): void;
}
interface MovingDialogMoveDownButtonPressedEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialog?: any;
    /**
     * Used to get the column key of the column that was being moved
     */
    columnKey?: any;
    /**
     * Used to get the column index of the column that was being moved
     */
    columnIndex?: any;
    /**
     * Used to get the new column index of the column that was being moved
     */
    targetIndex?: any;
}
interface MovingDialogDragColumnMovingEvent {
    (event: Event, ui: MovingDialogDragColumnMovingEventUIParam): void;
}
interface MovingDialogDragColumnMovingEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialog?: any;
    /**
     * Used to get the column key of the column that was being moved
     */
    columnKey?: any;
    /**
     * Used to get the column index of the column that was being moved
     */
    columnIndex?: any;
    /**
     * Used to get the new column index of the column that was being moved
     */
    targetIndex?: any;
}
interface MovingDialogDragColumnMovedEvent {
    (event: Event, ui: MovingDialogDragColumnMovedEventUIParam): void;
}
interface MovingDialogDragColumnMovedEventUIParam {
    /**
     * Used to get the reference to the igGridColumnMoving widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialog?: any;
    /**
     * Used to get the column key of the column that was being moved
     */
    columnKey?: any;
    /**
     * Used to get the column index of the column that was being moved
     */
    columnIndex?: any;
    /**
     * Used to get the new column index of the column that was being moved
     */
    targetIndex?: any;
}
interface IgGridColumnMoving {
    /**
     * A list of column settings that specifies moving options on a per column basis.
     */
    columnSettings?: IgGridColumnMovingColumnSetting[];
    /**
     * Specify the drag-and-drop mode for the feature
     *
     * Valid values:
     * "immediate" Column headers will rearange as you drag with a space opening under the cursor for the header to be dropped on
     * "deferred" A clone of the header dragged will be created and indicators will be shown between columns to help navigate the drop.
     */
    mode?: any;
    /**
     * Specify the way columns will be rearranged
     *
     * Valid values:
     * "dom" Columns will be rearranged through dom manipulation
     * "render" Columns will not be rearranged but the grid will be rendered again with the new column order. Please note this option is incompatible with immediate move mode.
     */
    moveType?: any;
    /**
     * Specifies if header cells should include an additional button that opens a moving helper dropdown.
     */
    addMovingDropdown?: boolean;
    /**
     * Specifies width of column moving dialog
     */
    movingDialogWidth?: number;
    /**
     * Specifies height of column moving dialog
     */
    movingDialogHeight?: number;
    /**
     * Specifies time in milliseconds for animation duration to show/hide modal dialog
     */
    movingDialogAnimationDuration?: number;
    /**
     * Specifies the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
     */
    movingAcceptanceTolerance?: number;
    /**
     * Specifies the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
     */
    movingScrollTolerance?: number;
    /**
     * Specifies a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
     */
    scrollSpeedMultiplier?: number;
    /**
     * Specifies the length (in pixels) of each individual scroll operation
     */
    scrollDelta?: number;
    /**
     * Specifies whether the contents of the column being dragged will get hidden. The option is only
     * relevant in immediate moving mode.
     */
    hideHeaderContentsDuringDrag?: boolean;
    /**
     * Specifies the opacity of the drag markup, while a column header is being dragged.
     * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
     * will be used with priority over this one.
     */
    dragHelperOpacity?: number;
    /**
     * Specifies caption for each move down button in the column moving dialog
     */
    movingDialogCaptionButtonDesc?: string;
    /**
     * Specifies caption for each move up button in the column moving dialog
     */
    movingDialogCaptionButtonAsc?: string;
    /**
     * Specifies caption text for the column moving dialog
     */
    movingDialogCaptionText?: string;
    /**
     * Specifies caption text for the feature chooser entry
     */
    movingDialogDisplayText?: string;
    /**
     * Specifies text for drop tooltip in column moving dialog
     */
    movingDialogDropTooltipText?: string;
    /**
     * Specifies markup for drop tooltip in column moving dialog
     */
    movingDialogDropTooltipMarkup?: string;
    /**
     * Specifies caption for the move left dropdown button
     */
    dropDownMoveLeftText?: string;
    /**
     * Specifies caption for the move right dropdown button
     */
    dropDownMoveRightText?: string;
    /**
     * Specifies caption for the move first dropdown button
     */
    dropDownMoveFirstText?: string;
    /**
     * Specifies caption for the move last dropdown button
     */
    dropDownMoveLastText?: string;
    /**
     * Specifies tooltip text for the move indicator
     */
    movingToolTipMove?: string;
    /**
     * Specifies caption text for the feature chooser submenu button
     */
    featureChooserSubmenuText?: string;
    /**
     * Controls containment behavior of column moving dialog.
     *                 owner  The dialog will be draggable only in the grid area
     *                 window  The dialog will be draggable in the whole window area
     */
    columnMovingDialogContainment?: string;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event which is fired when a drag operation begins on a column header
     * use args.columnKey to get the column key of the column being dragged
     * use args.columnIndex to get the column index of the column being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th being dragged
     * use args.helper to get a reference to cloned DOM element that's actually being dragged
     */
    columnDragStart?: ColumnDragStartEvent;
    /**
     * Event which is fired when a drag operation ends on a column header
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     */
    columnDragEnd?: ColumnDragEndEvent;
    /**
     * Event which is fired when a drag operation is canceled
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     */
    columnDragCanceled?: ColumnDragCanceledEvent;
    /**
     * Event which is fired when a column moving operation is initiated
     * use args.columnKey to get the column key of the column that was being moved
     * use args.columnIndex to get the column index of the column that was being moved
     * use args.targetIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     */
    columnMoving?: ColumnMovingEvent;
    /**
     * Event which is fired when a column moving operation completes
     * use args.columnKey to get the column key of the column that was moved
     * use args.oldIndex to get the previous column index of the column that was moved
     * use args.newIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     */
    columnMoved?: ColumnMovedEvent;
    /**
     * Event fired before the moving dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogOpening?: MovingDialogOpeningEvent;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogOpened?: MovingDialogOpenedEvent;
    /**
     * Event fired every time the moving dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the moving dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the moving dialog div as { top, left } object, relative to the page.
     */
    movingDialogDragged?: MovingDialogDraggedEvent;
    /**
     * Event fired before the moving dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogClosing?: MovingDialogClosingEvent;
    /**
     * Event fired after the moving dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogClosed?: MovingDialogClosedEvent;
    /**
     * Event fired before the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialogContentsRendering?: MovingDialogContentsRenderingEvent;
    /**
     * Event fired after the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialogContentsRendered?: MovingDialogContentsRenderedEvent;
    /**
     * Event fired when move up button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    movingDialogMoveUpButtonPressed?: MovingDialogMoveUpButtonPressedEvent;
    /**
     * Event fired when move down button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    movingDialogMoveDownButtonPressed?: MovingDialogMoveDownButtonPressedEvent;
    /**
     * Event fired when column moving is initiated through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    movingDialogDragColumnMoving?: MovingDialogDragColumnMovingEvent;
    /**
     * Event fired when column moving is completed through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    movingDialogDragColumnMoved?: MovingDialogDragColumnMovedEvent;
    /**
     * Option for igGridColumnMoving
     */
    [optionName: string]: any;
}
interface IgGridColumnMovingMethods {
    destroy(): void;
    /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param after    Specifies whether the column moved should be moved after or before the target column.
     * @param inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param callback    Specifies a custom function to be called when the column is moved.
     */
    moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
}
interface JQuery {
    data(propertyName: "igGridColumnMoving"): IgGridColumnMovingMethods;
}
interface JQuery {
    igGridColumnMoving(methodName: "destroy"): void;
    igGridColumnMoving(methodName: "moveColumn", column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
    /**
     * A list of column settings that specifies moving options on a per column basis.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnSettings"): IgGridColumnMovingColumnSetting[];
    /**
     * A list of column settings that specifies moving options on a per column basis.
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridColumnMovingColumnSetting[]): void;
    /**
     * Specify the drag-and-drop mode for the feature
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Specify the drag-and-drop mode for the feature
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Specify the way columns will be rearranged
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "moveType"): any;
    /**
     * Specify the way columns will be rearranged
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "moveType", optionValue: any): void;
    /**
     * Gets if header cells should include an additional button that opens a moving helper dropdown.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "addMovingDropdown"): boolean;
    /**
     * Sets if header cells should include an additional button that opens a moving helper dropdown.
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "addMovingDropdown", optionValue: boolean): void;
    /**
     * Gets width of column moving dialog
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogWidth"): number;
    /**
     * Sets width of column moving dialog
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogWidth", optionValue: number): void;
    /**
     * Gets height of column moving dialog
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogHeight"): number;
    /**
     * Sets height of column moving dialog
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogHeight", optionValue: number): void;
    /**
     * Gets time in milliseconds for animation duration to show/hide modal dialog
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogAnimationDuration"): number;
    /**
     * Sets time in milliseconds for animation duration to show/hide modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogAnimationDuration", optionValue: number): void;
    /**
     * Gets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingAcceptanceTolerance"): number;
    /**
     * Sets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingAcceptanceTolerance", optionValue: number): void;
    /**
     * Gets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingScrollTolerance"): number;
    /**
     * Sets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingScrollTolerance", optionValue: number): void;
    /**
     * Gets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "scrollSpeedMultiplier"): number;
    /**
     * Sets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "scrollSpeedMultiplier", optionValue: number): void;
    /**
     * Gets the length (in pixels) of each individual scroll operation
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "scrollDelta"): number;
    /**
     * Sets the length (in pixels) of each individual scroll operation
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "scrollDelta", optionValue: number): void;
    /**
     * Gets whether the contents of the column being dragged will get hidden. The option is only
     * relevant in immediate moving mode.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "hideHeaderContentsDuringDrag"): boolean;
    /**
     * Sets whether the contents of the column being dragged will get hidden. The option is only
     * relevant in immediate moving mode.
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "hideHeaderContentsDuringDrag", optionValue: boolean): void;
    /**
     * Gets the opacity of the drag markup, while a column header is being dragged.
     * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
     * will be used with priority over this one.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dragHelperOpacity"): number;
    /**
     * Sets the opacity of the drag markup, while a column header is being dragged.
     * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
     * will be used with priority over this one.
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dragHelperOpacity", optionValue: number): void;
    /**
     * Gets caption for each move down button in the column moving dialog
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonDesc"): string;
    /**
     * Sets caption for each move down button in the column moving dialog
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonDesc", optionValue: string): void;
    /**
     * Gets caption for each move up button in the column moving dialog
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonAsc"): string;
    /**
     * Sets caption for each move up button in the column moving dialog
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonAsc", optionValue: string): void;
    /**
     * Gets caption text for the column moving dialog
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionText"): string;
    /**
     * Sets caption text for the column moving dialog
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionText", optionValue: string): void;
    /**
     * Gets caption text for the feature chooser entry
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDisplayText"): string;
    /**
     * Sets caption text for the feature chooser entry
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDisplayText", optionValue: string): void;
    /**
     * Gets text for drop tooltip in column moving dialog
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipText"): string;
    /**
     * Sets text for drop tooltip in column moving dialog
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipText", optionValue: string): void;
    /**
     * Gets markup for drop tooltip in column moving dialog
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipMarkup"): string;
    /**
     * Sets markup for drop tooltip in column moving dialog
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipMarkup", optionValue: string): void;
    /**
     * Gets caption for the move left dropdown button
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLeftText"): string;
    /**
     * Sets caption for the move left dropdown button
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLeftText", optionValue: string): void;
    /**
     * Gets caption for the move right dropdown button
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveRightText"): string;
    /**
     * Sets caption for the move right dropdown button
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveRightText", optionValue: string): void;
    /**
     * Gets caption for the move first dropdown button
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveFirstText"): string;
    /**
     * Sets caption for the move first dropdown button
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveFirstText", optionValue: string): void;
    /**
     * Gets caption for the move last dropdown button
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLastText"): string;
    /**
     * Sets caption for the move last dropdown button
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLastText", optionValue: string): void;
    /**
     * Gets tooltip text for the move indicator
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingToolTipMove"): string;
    /**
     * Sets tooltip text for the move indicator
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingToolTipMove", optionValue: string): void;
    /**
     * Gets caption text for the feature chooser submenu button
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "featureChooserSubmenuText"): string;
    /**
     * Sets caption text for the feature chooser submenu button
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "featureChooserSubmenuText", optionValue: string): void;
    /**
     * Controls containment behavior of column moving dialog.
     *                 owner  The dialog will be draggable only in the grid area
     *                 window  The dialog will be draggable in the whole window area
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnMovingDialogContainment"): string;
    /**
     * Controls containment behavior of column moving dialog.
     *                 owner  The dialog will be draggable only in the grid area
     *                 window  The dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnMovingDialogContainment", optionValue: string): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event which is fired when a drag operation begins on a column header
     * use args.columnKey to get the column key of the column being dragged
     * use args.columnIndex to get the column index of the column being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th being dragged
     * use args.helper to get a reference to cloned DOM element that's actually being dragged
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragStart"): ColumnDragStartEvent;
    /**
     * Event which is fired when a drag operation begins on a column header
     * use args.columnKey to get the column key of the column being dragged
     * use args.columnIndex to get the column index of the column being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th being dragged
     * use args.helper to get a reference to cloned DOM element that's actually being dragged
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragStart", optionValue: ColumnDragStartEvent): void;
    /**
     * Event which is fired when a drag operation ends on a column header
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragEnd"): ColumnDragEndEvent;
    /**
     * Event which is fired when a drag operation ends on a column header
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragEnd", optionValue: ColumnDragEndEvent): void;
    /**
     * Event which is fired when a drag operation is canceled
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragCanceled"): ColumnDragCanceledEvent;
    /**
     * Event which is fired when a drag operation is canceled
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnDragCanceled", optionValue: ColumnDragCanceledEvent): void;
    /**
     * Event which is fired when a column moving operation is initiated
     * use args.columnKey to get the column key of the column that was being moved
     * use args.columnIndex to get the column index of the column that was being moved
     * use args.targetIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnMoving"): ColumnMovingEvent;
    /**
     * Event which is fired when a column moving operation is initiated
     * use args.columnKey to get the column key of the column that was being moved
     * use args.columnIndex to get the column index of the column that was being moved
     * use args.targetIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnMoving", optionValue: ColumnMovingEvent): void;
    /**
     * Event which is fired when a column moving operation completes
     * use args.columnKey to get the column key of the column that was moved
     * use args.oldIndex to get the previous column index of the column that was moved
     * use args.newIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnMoved"): ColumnMovedEvent;
    /**
     * Event which is fired when a column moving operation completes
     * use args.columnKey to get the column key of the column that was moved
     * use args.oldIndex to get the previous column index of the column that was moved
     * use args.newIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "columnMoved", optionValue: ColumnMovedEvent): void;
    /**
     * Event fired before the moving dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpening"): MovingDialogOpeningEvent;
    /**
     * Event fired before the moving dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpening", optionValue: MovingDialogOpeningEvent): void;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpened"): MovingDialogOpenedEvent;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpened", optionValue: MovingDialogOpenedEvent): void;
    /**
     * Event fired every time the moving dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the moving dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the moving dialog div as { top, left } object, relative to the page.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragged"): MovingDialogDraggedEvent;
    /**
     * Event fired every time the moving dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the moving dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the moving dialog div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragged", optionValue: MovingDialogDraggedEvent): void;
    /**
     * Event fired before the moving dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosing"): MovingDialogClosingEvent;
    /**
     * Event fired before the moving dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosing", optionValue: MovingDialogClosingEvent): void;
    /**
     * Event fired after the moving dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosed"): MovingDialogClosedEvent;
    /**
     * Event fired after the moving dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosed", optionValue: MovingDialogClosedEvent): void;
    /**
     * Event fired before the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendering"): MovingDialogContentsRenderingEvent;
    /**
     * Event fired before the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendering", optionValue: MovingDialogContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendered"): MovingDialogContentsRenderedEvent;
    /**
     * Event fired after the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendered", optionValue: MovingDialogContentsRenderedEvent): void;
    /**
     * Event fired when move up button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveUpButtonPressed"): MovingDialogMoveUpButtonPressedEvent;
    /**
     * Event fired when move up button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveUpButtonPressed", optionValue: MovingDialogMoveUpButtonPressedEvent): void;
    /**
     * Event fired when move down button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveDownButtonPressed"): MovingDialogMoveDownButtonPressedEvent;
    /**
     * Event fired when move down button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveDownButtonPressed", optionValue: MovingDialogMoveDownButtonPressedEvent): void;
    /**
     * Event fired when column moving is initiated through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoving"): MovingDialogDragColumnMovingEvent;
    /**
     * Event fired when column moving is initiated through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoving", optionValue: MovingDialogDragColumnMovingEvent): void;
    /**
     * Event fired when column moving is completed through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoved"): MovingDialogDragColumnMovedEvent;
    /**
     * Event fired when column moving is completed through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     *
     * @optionValue Define event handler function.
     */
    igGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoved", optionValue: MovingDialogDragColumnMovedEvent): void;
    igGridColumnMoving(options: IgGridColumnMoving): JQuery;
    igGridColumnMoving(optionLiteral: 'option', optionName: string): any;
    igGridColumnMoving(optionLiteral: 'option', options: IgGridColumnMoving): JQuery;
    igGridColumnMoving(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridColumnMoving(methodName: string, ...methodParams: any[]): any;
}
interface IgPopoverHeaderTemplate {
    /**
     * Controls whether the popover renders a functional close button
     */
    closeButton?: boolean;
    /**
     * Sets the content for the popover header
     */
    title?: string;
    /**
     * Option for IgPopoverHeaderTemplate
     */
    [optionName: string]: any;
}
interface ShowingEvent {
    (event: Event, ui: ShowingEventUIParam): void;
}
interface ShowingEventUIParam {
    /**
     * Used to get the element the popover will show for.
     */
    element?: any;
    /**
     * Used to get or set the content to be shown as a string.
     */
    content?: any;
    /**
     * Used to get the popover element showing.
     */
    popover?: any;
    /**
     * Used to get reference to the igPopover widget
     */
    owner?: any;
}
interface ShownEvent {
    (event: Event, ui: ShownEventUIParam): void;
}
interface ShownEventUIParam {
    /**
     * Used to get the element the popover showed for.
     */
    element?: any;
    /**
     * Used to get the content that was shown as a string.
     */
    content?: any;
    /**
     * Used to get the popover element shown.
     */
    popover?: any;
    /**
     * Used to get reference to the igPopover widget
     */
    owner?: any;
}
interface HidingEvent {
    (event: Event, ui: HidingEventUIParam): void;
}
interface HidingEventUIParam {
    /**
     * Used to get the element the popover will hide for.
     */
    element?: any;
    /**
     * Used to get the current content displayed in the popover as a string.
     */
    content?: any;
    /**
     * Used to get the popover element hiding.
     */
    popover?: any;
    /**
     * Used to get reference to the igPopover widget
     */
    owner?: any;
}
interface HiddenEvent {
    (event: Event, ui: HiddenEventUIParam): void;
}
interface HiddenEventUIParam {
    /**
     * Used to get the element the popover is hidden for.
     */
    element?: any;
    /**
     * Used to get the content displayed in the popover as a string.
     */
    content?: any;
    /**
     * Used to get the popover element hidden.
     */
    popover?: any;
    /**
     * Used to get reference to the igPopover widget
     */
    owner?: any;
}
interface IgGridFeatureChooserPopover {
    gridId?: string;
    targetButton?: any;
    closeOnBlur?: boolean;
    containment?: any;
    /**
     * controls the direction in which the control shows relative to the target element
     *
     * Valid values:
     * "auto" lets the control show on the side where enough space is available with the following priority top > bottom > right > left
     * "left" shows popover on the left side of the target element
     * "right" shows popover on the right side of the target element
     * "top" shows popover on the top of the target element
     * "bottom" shows popover on the bottom of the target element
     */
    direction?: any;
    /**
     * controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
     *
     * Valid values:
     * "auto" lets the control choose a position depending on available space with the following priority balanced > end > start
     * "balanced" the popover is positioned at the middle of the target element
     * "start" the popover is positioned at the beginning of the target element
     * "end" the popover is positioned at the end of the target element
     */
    position?: any;
    /**
     * defines width for the popover. leave null for auto.
     */
    width?: any;
    /**
     * defines height for the popover. leave null for auto
     */
    height?: any;
    /**
     * defines width the popover won't go under the value even if no specific one is set.
     */
    minWidth?: any;
    /**
     * defines width the popover won't exceed even if no specific one is set.
     */
    maxWidth?: any;
    /**
     * defines height the popover won't exceed even if no specific one is set.
     */
    maxHeight?: any;
    /**
     * Sets the time popover fades in and out when showing/hiding
     */
    animationDuration?: number;
    /**
     * sets the content for the popover container. If left null the content will be get from the target.string   String content of the popover container
     */
    contentTemplate?: any;
    /**
     * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
     */
    selectors?: string;
    /**
     * Sets the content for the popover header
     */
    headerTemplate?: IgPopoverHeaderTemplate;
    showOn?: any;
    /**
     * Controls where the popover DOM should be attached to.
     *
     * Valid values:
     * "object" A reference to the parent jQuery object
     */
    appendTo?: any;
    /**
     * Event fired before popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will show for.
     * Use ui.content to get or set the content to be shown as a string.
     * Use ui.popover to get the popover element showing.
     * Use ui.owner to get reference to the igPopover widget
     */
    showing?: ShowingEvent;
    /**
     * Event fired after popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover showed for.
     * Use ui.content to get the content that was shown as a string.
     * Use ui.popover to get the popover element shown.
     * Use ui.owner to get reference to the igPopover widget
     */
    shown?: ShownEvent;
    /**
     * Event fired before popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will hide for.
     * Use ui.content to get the current content displayed in the popover as a string.
     * Use ui.popover to get the popover element hiding.
     * Use ui.owner to get reference to the igPopover widget
     */
    hiding?: HidingEvent;
    /**
     * Event fired after popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover is hidden for.
     * Use ui.content to get the content displayed in the popover as a string.
     * Use ui.popover to get the popover element hidden.
     * Use ui.owner to get reference to the igPopover widget
     */
    hidden?: HiddenEvent;
    /**
     * Option for igGridFeatureChooserPopover
     */
    [optionName: string]: any;
}
interface IgGridFeatureChooserPopoverMethods {
    isShown(): void;
    registerElements(elements: Object): void;
    destroy(): void;
    /**
     * Returns the ID of the element the popover is attached to
     */
    id(): string;
    /**
     * Returns the container for the popover contents
     */
    container(): Object;
    /**
     * Shows the popover for the specified target
     *
     * @param trg     The element to show popover for.
     * @param content     The string to set for the popover to show.
     */
    show(trg?: Element, content?: string): void;
    /**
     * Hides the popover for the specified target
     */
    hide(): void;
    /**
     * Gets the currently set content for the popover container
     */
    getContent(): string;
    /**
     * Sets the content for the popover container
     *
     * @param newCnt     The popover content to set.
     */
    setContent(newCnt: string): void;
    /**
     * Gets the popover current target
     */
    target(): Object;
    /**
     * Gets the current coordinates of the popover
     */
    getCoordinates(): Object;
    /**
     * Set the currently coordinates of the popover
     *
     * @param pos     The popover coordinates in pixels.
     */
    setCoordinates(pos: Object): void;
}
interface JQuery {
    data(propertyName: "igGridFeatureChooserPopover"): IgGridFeatureChooserPopoverMethods;
}
interface FeatureChooserRenderingEvent {
    (event: Event, ui: FeatureChooserRenderingEventUIParam): void;
}
interface FeatureChooserRenderingEventUIParam {
}
interface FeatureChooserRenderedEvent {
    (event: Event, ui: FeatureChooserRenderedEventUIParam): void;
}
interface FeatureChooserRenderedEventUIParam {
}
interface FeatureChooserDropDownOpeningEvent {
    (event: Event, ui: FeatureChooserDropDownOpeningEventUIParam): void;
}
interface FeatureChooserDropDownOpeningEventUIParam {
}
interface FeatureChooserDropDownOpenedEvent {
    (event: Event, ui: FeatureChooserDropDownOpenedEventUIParam): void;
}
interface FeatureChooserDropDownOpenedEventUIParam {
}
interface MenuTogglingEvent {
    (event: Event, ui: MenuTogglingEventUIParam): void;
}
interface MenuTogglingEventUIParam {
}
interface FeatureTogglingEvent {
    (event: Event, ui: FeatureTogglingEventUIParam): void;
}
interface FeatureTogglingEventUIParam {
}
interface FeatureToggledEvent {
    (event: Event, ui: FeatureToggledEventUIParam): void;
}
interface FeatureToggledEventUIParam {
}
interface IgGridFeatureChooser {
    dropDownWidth?: any;
    animationDuration?: number;
    featureChooserRendering?: FeatureChooserRenderingEvent;
    featureChooserRendered?: FeatureChooserRenderedEvent;
    featureChooserDropDownOpening?: FeatureChooserDropDownOpeningEvent;
    featureChooserDropDownOpened?: FeatureChooserDropDownOpenedEvent;
    menuToggling?: MenuTogglingEvent;
    featureToggling?: FeatureTogglingEvent;
    featureToggled?: FeatureToggledEvent;
    /**
     * Option for igGridFeatureChooser
     */
    [optionName: string]: any;
}
interface IgGridFeatureChooserMethods {
    shouldShowFeatureIcon(key: Object): void;
    /**
     * Show feature chooser dialog by the specified column key
     *
     * @param columnKey    Key of the column that should be shown.
     */
    showDropDown(columnKey: string): void;
    /**
     * Hide feature chooser dialog by column key
     *
     * @param columnKey    Key of the column that should be hidden.
     */
    hideDropDown(columnKey: string): void;
    /**
     * Get jQuery representation of the div holding dropdown for the specified columnKey
     *
     * @param columnKey    Key of the column
     */
    getDropDownByColumnKey(columnKey: string): void;
    /**
     * Show/hide feature chooser dialog by column key
     *
     * @param columnKey    Key of the column that should be shown/hidden.
     */
    toggleDropDown(columnKey: string): void;
    destroy(e: Object, args: Object): void;
}
interface JQuery {
    data(propertyName: "igGridFeatureChooser"): IgGridFeatureChooserMethods;
}
interface JQuery {
    igGridFeatureChooserPopover(methodName: "isShown"): void;
    igGridFeatureChooserPopover(methodName: "registerElements", elements: Object): void;
    igGridFeatureChooserPopover(methodName: "destroy"): void;
    igGridFeatureChooserPopover(methodName: "id"): string;
    igGridFeatureChooserPopover(methodName: "container"): Object;
    igGridFeatureChooserPopover(methodName: "show", trg?: Element, content?: string): void;
    igGridFeatureChooserPopover(methodName: "hide"): void;
    igGridFeatureChooserPopover(methodName: "getContent"): string;
    igGridFeatureChooserPopover(methodName: "setContent", newCnt: string): void;
    igGridFeatureChooserPopover(methodName: "target"): Object;
    igGridFeatureChooserPopover(methodName: "getCoordinates"): Object;
    igGridFeatureChooserPopover(methodName: "setCoordinates", pos: Object): void;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "gridId"): string;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "gridId", optionValue: string): void;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "targetButton"): any;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "targetButton", optionValue: any): void;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "closeOnBlur"): boolean;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "closeOnBlur", optionValue: boolean): void;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "containment"): any;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "containment", optionValue: any): void;
    /**
     * Controls the direction in which the control shows relative to the target element
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "direction"): any;
    /**
     * Controls the direction in which the control shows relative to the target element
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "direction", optionValue: any): void;
    /**
     * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "position"): any;
    /**
     * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "position", optionValue: any): void;
    /**
     * Defines width for the popover. leave null for auto.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "width"): any;
    /**
     * Defines width for the popover. leave null for auto.
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * Defines height for the popover. leave null for auto
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "height"): any;
    /**
     * Defines height for the popover. leave null for auto
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Defines width the popover won't go under the value even if no specific one is set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "minWidth"): any;
    /**
     * Defines width the popover won't go under the value even if no specific one is set.
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "minWidth", optionValue: any): void;
    /**
     * Defines width the popover won't exceed even if no specific one is set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "maxWidth"): any;
    /**
     * Defines width the popover won't exceed even if no specific one is set.
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "maxWidth", optionValue: any): void;
    /**
     * Defines height the popover won't exceed even if no specific one is set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "maxHeight"): any;
    /**
     * Defines height the popover won't exceed even if no specific one is set.
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "maxHeight", optionValue: any): void;
    /**
     * The time popover fades in and out when showing/hiding
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "animationDuration"): number;
    /**
     * Sets the time popover fades in and out when showing/hiding
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;
    /**
     * The content for the popover container. If left null the content will be get from the target.string   String content of the popover container
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "contentTemplate"): any;
    /**
     * Sets the content for the popover container. If left null the content will be get from the target.string   String content of the popover container
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "contentTemplate", optionValue: any): void;
    /**
     * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "selectors"): string;
    /**
     * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "selectors", optionValue: string): void;
    /**
     * The content for the popover header
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "headerTemplate"): IgPopoverHeaderTemplate;
    /**
     * Sets the content for the popover header
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "headerTemplate", optionValue: IgPopoverHeaderTemplate): void;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "showOn"): any;
    /**
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "showOn", optionValue: any): void;
    /**
     * Controls where the popover DOM should be attached to.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "appendTo"): any;
    /**
     * Controls where the popover DOM should be attached to.
     *
     * @optionValue New value to be set.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "appendTo", optionValue: any): void;
    /**
     * Event fired before popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will show for.
     * Use ui.content to get or set the content to be shown as a string.
     * Use ui.popover to get the popover element showing.
     * Use ui.owner to get reference to the igPopover widget
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "showing"): ShowingEvent;
    /**
     * Event fired before popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will show for.
     * Use ui.content to get or set the content to be shown as a string.
     * Use ui.popover to get the popover element showing.
     * Use ui.owner to get reference to the igPopover widget
     *
     * @optionValue Define event handler function.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "showing", optionValue: ShowingEvent): void;
    /**
     * Event fired after popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover showed for.
     * Use ui.content to get the content that was shown as a string.
     * Use ui.popover to get the popover element shown.
     * Use ui.owner to get reference to the igPopover widget
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "shown"): ShownEvent;
    /**
     * Event fired after popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover showed for.
     * Use ui.content to get the content that was shown as a string.
     * Use ui.popover to get the popover element shown.
     * Use ui.owner to get reference to the igPopover widget
     *
     * @optionValue Define event handler function.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "shown", optionValue: ShownEvent): void;
    /**
     * Event fired before popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will hide for.
     * Use ui.content to get the current content displayed in the popover as a string.
     * Use ui.popover to get the popover element hiding.
     * Use ui.owner to get reference to the igPopover widget
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "hiding"): HidingEvent;
    /**
     * Event fired before popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will hide for.
     * Use ui.content to get the current content displayed in the popover as a string.
     * Use ui.popover to get the popover element hiding.
     * Use ui.owner to get reference to the igPopover widget
     *
     * @optionValue Define event handler function.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "hiding", optionValue: HidingEvent): void;
    /**
     * Event fired after popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover is hidden for.
     * Use ui.content to get the content displayed in the popover as a string.
     * Use ui.popover to get the popover element hidden.
     * Use ui.owner to get reference to the igPopover widget
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "hidden"): HiddenEvent;
    /**
     * Event fired after popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover is hidden for.
     * Use ui.content to get the content displayed in the popover as a string.
     * Use ui.popover to get the popover element hidden.
     * Use ui.owner to get reference to the igPopover widget
     *
     * @optionValue Define event handler function.
     */
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: "hidden", optionValue: HiddenEvent): void;
    igGridFeatureChooserPopover(options: IgGridFeatureChooserPopover): JQuery;
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: string): any;
    igGridFeatureChooserPopover(optionLiteral: 'option', options: IgGridFeatureChooserPopover): JQuery;
    igGridFeatureChooserPopover(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridFeatureChooserPopover(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igGridFeatureChooser(methodName: "shouldShowFeatureIcon", key: Object): void;
    igGridFeatureChooser(methodName: "showDropDown", columnKey: string): void;
    igGridFeatureChooser(methodName: "hideDropDown", columnKey: string): void;
    igGridFeatureChooser(methodName: "getDropDownByColumnKey", columnKey: string): void;
    igGridFeatureChooser(methodName: "toggleDropDown", columnKey: string): void;
    igGridFeatureChooser(methodName: "destroy", e: Object, args: Object): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "dropDownWidth"): any;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "dropDownWidth", optionValue: any): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "animationDuration"): number;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserRendering"): FeatureChooserRenderingEvent;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserRendering", optionValue: FeatureChooserRenderingEvent): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserRendered"): FeatureChooserRenderedEvent;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserRendered", optionValue: FeatureChooserRenderedEvent): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserDropDownOpening"): FeatureChooserDropDownOpeningEvent;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserDropDownOpening", optionValue: FeatureChooserDropDownOpeningEvent): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserDropDownOpened"): FeatureChooserDropDownOpenedEvent;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureChooserDropDownOpened", optionValue: FeatureChooserDropDownOpenedEvent): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "menuToggling"): MenuTogglingEvent;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "menuToggling", optionValue: MenuTogglingEvent): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureToggling"): FeatureTogglingEvent;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureToggling", optionValue: FeatureTogglingEvent): void;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureToggled"): FeatureToggledEvent;
    /**
     */
    igGridFeatureChooser(optionLiteral: 'option', optionName: "featureToggled", optionValue: FeatureToggledEvent): void;
    igGridFeatureChooser(options: IgGridFeatureChooser): JQuery;
    igGridFeatureChooser(optionLiteral: 'option', optionName: string): any;
    igGridFeatureChooser(optionLiteral: 'option', options: IgGridFeatureChooser): JQuery;
    igGridFeatureChooser(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridFeatureChooser(methodName: string, ...methodParams: any[]): any;
}
interface IgGridFilteringColumnSettingDefaultExpressions {
    /**
     * Option for IgGridFilteringColumnSettingDefaultExpressions
     */
    [optionName: string]: any;
}
interface IgGridFilteringColumnSetting {
    /**
     * Specifies column key. Either key or index must be set in every column setting.
     */
    columnKey?: string;
    /**
     * Specifies column index. Either key or index must be set in every column setting.
     */
    columnIndex?: number;
    /**
     * Enables/disables filtering for the column.
     */
    allowFiltering?: boolean;
    /**
     * default filtering condition for the column
     *
     * Valid values:
     * "empty"
     * "notEmpty"
     * "notNull"
     * "equals"
     * "doesNotEqual"
     * "startsWith"
     * "contains"
     * "doesNotContain"
     * "endsWith"
     * "greaterThan"
     * "lessThan"
     * "greaterThanOrEqualTo"
     * "lessThanOrEqualTo"
     * "true"
     * "false"
     * "on"
     * "notOn"
     * "before"
     * "after"
     * "today"
     * "yesterday"
     * "thisMonth"
     * "lastMonth"
     * "nextMonth"
     * "thisYear"
     * "nextYear"
     * "lastYear"
     */
    condition?: any;
    /**
     * An array of strings that determine which conditions to display for this column
     */
    conditionList?: any[];
    /**
     * Initial filtering expressions - if set they will be applied on initialization
     */
    defaultExpressions?: IgGridFilteringColumnSettingDefaultExpressions;
    /**
     * An object used to specify custom filtering conditions as objects for this column
     * labelText  The label as it will appear in the column's condition dropdown
     * expressionText  The text to display in the editor when requireExpr is false
     * requireExpr  If this condition requires the user to input a filtering expression
     * filterImgIcon  Class applied to the dropdown item when in simple mode
     * filterFunc  The custom comparing filter function. Signature: function (value, expression, dataType, ignoreCase, preciseDateFormat)
     */
    customConditions?: any;
    /**
     * Option for IgGridFilteringColumnSetting
     */
    [optionName: string]: any;
}
interface IgGridFilteringNullTexts {
    startsWith?: string;
    endsWith?: string;
    contains?: string;
    doesNotContain?: string;
    equals?: string;
    doesNotEqual?: string;
    greaterThan?: string;
    lessThan?: string;
    greaterThanOrEqualTo?: string;
    lessThanOrEqualTo?: string;
    on?: string;
    notOn?: string;
    after?: string;
    before?: string;
    thisMonth?: string;
    lastMonth?: string;
    nextMonth?: string;
    thisYear?: string;
    lastYear?: string;
    nextYear?: string;
    empty?: string;
    notEmpty?: string;
    null?: string;
    notNull?: string;
    /**
     * Option for IgGridFilteringNullTexts
     */
    [optionName: string]: any;
}
interface IgGridFilteringLabels {
    noFilter?: string;
    clear?: string;
    startsWith?: string;
    endsWith?: string;
    contains?: string;
    doesNotContain?: string;
    equals?: string;
    doesNotEqual?: string;
    greaterThan?: string;
    lessThan?: string;
    greaterThanOrEqualTo?: string;
    lessThanOrEqualTo?: string;
    trueLabel?: string;
    falseLabel?: string;
    after?: string;
    before?: string;
    today?: string;
    yesterday?: string;
    thisMonth?: string;
    lastMonth?: string;
    nextMonth?: string;
    thisYear?: string;
    lastYear?: string;
    nextYear?: string;
    on?: string;
    notOn?: string;
    advancedButtonLabel?: string;
    filterDialogCaptionLabel?: string;
    filterDialogConditionLabel1?: string;
    filterDialogConditionLabel2?: string;
    filterDialogOkLabel?: string;
    filterDialogCancelLabel?: string;
    filterDialogAnyLabel?: string;
    filterDialogAllLabel?: string;
    filterDialogAddLabel?: string;
    filterDialogErrorLabel?: string;
    filterSummaryTitleLabel?: string;
    filterDialogClearAllLabel?: string;
    empty?: string;
    notEmpty?: string;
    nullLabel?: string;
    notNull?: string;
    true?: string;
    false?: string;
    /**
     * Option for IgGridFilteringLabels
     */
    [optionName: string]: any;
}
interface DataFilteringEvent {
    (event: Event, ui: DataFilteringEventUIParam): void;
}
interface DataFilteringEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get column index.
     */
    columnIndex?: any;
    /**
     * Used to get column key.
     */
    columnKey?: any;
    /**
     * Used to get filtering expressions. Filtering expressions could be changed in this event handler and after that data binding is applied. In this way the user could control filtering more easily before applying data-binding.
     */
    newExpressions?: any;
}
interface DataFilteredEvent {
    (event: Event, ui: DataFilteredEventUIParam): void;
}
interface DataFilteredEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get column index.
     */
    columnIndex?: any;
    /**
     * Used to get column key.
     */
    columnKey?: any;
    /**
     * Used to get filtered expressions.
     */
    expressions?: any;
}
interface FilterDialogOpeningEvent {
    (event: Event, ui: FilterDialogOpeningEventUIParam): void;
}
interface FilterDialogOpeningEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get reference to filtering dialog DOM element.
     */
    dialog?: any;
}
interface FilterDialogOpenedEvent {
    (event: Event, ui: FilterDialogOpenedEventUIParam): void;
}
interface FilterDialogOpenedEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get reference to filtering dialog DOM element.
     */
    dialog?: any;
}
interface FilterDialogMovingEvent {
    (event: Event, ui: FilterDialogMovingEventUIParam): void;
}
interface FilterDialogMovingEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get reference to filtering dialog DOM element.
     */
    dialog?: any;
    /**
     * Used to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     */
    originalPosition?: any;
    /**
     * Used to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     */
    position?: any;
}
interface FilterDialogFilterAddingEvent {
    (event: Event, ui: FilterDialogFilterAddingEventUIParam): void;
}
interface FilterDialogFilterAddingEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get reference to filters table body DOM element.
     */
    filtersTableBody?: any;
}
interface FilterDialogFilterAddedEvent {
    (event: Event, ui: FilterDialogFilterAddedEventUIParam): void;
}
interface FilterDialogFilterAddedEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get reference to filters table row DOM element.
     */
    filter?: any;
}
interface FilterDialogClosingEvent {
    (event: Event, ui: FilterDialogClosingEventUIParam): void;
}
interface FilterDialogClosingEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
}
interface FilterDialogClosedEvent {
    (event: Event, ui: FilterDialogClosedEventUIParam): void;
}
interface FilterDialogClosedEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
}
interface FilterDialogContentsRenderingEvent {
    (event: Event, ui: FilterDialogContentsRenderingEventUIParam): void;
}
interface FilterDialogContentsRenderingEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get reference to filtering dialog DOM element.
     */
    dialogElement?: any;
}
interface FilterDialogContentsRenderedEvent {
    (event: Event, ui: FilterDialogContentsRenderedEventUIParam): void;
}
interface FilterDialogContentsRenderedEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get reference to filtering dialog DOM element.
     */
    dialogElement?: any;
}
interface FilterDialogFilteringEvent {
    (event: Event, ui: FilterDialogFilteringEventUIParam): void;
}
interface FilterDialogFilteringEventUIParam {
    /**
     * Used to get reference to igGridFiltering.
     */
    owner?: any;
    /**
     * Used to get reference to filtering dialog DOM element.
     */
    dialog?: any;
}
interface IgGridFiltering {
    /**
     * Enables or disables the filtering case sensitivity. Works only for local filtering.If true, it enables filtering case sensitivity. If false, it disables filtering case sensitivity.
     */
    caseSensitive?: boolean;
    /**
     * Enable/disable footer visibility with summary info about the filter.
     * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
     * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
     */
    filterSummaryAlwaysVisible?: boolean;
    /**
     * Render in feature chooser. Feature chooser is dialog which lists all the enabled features (like Sorting, Filtering, Hiding etc.) of igGrid.
     */
    renderFC?: boolean;
    /**
     * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'
     */
    filterSummaryTemplate?: string;
    /**
     * type of animations for the column filter dropdowns
     *
     * Valid values:
     * "linear"
     * "none"
     */
    filterDropDownAnimations?: any;
    /**
     * Animation duration in milliseconds for the filter dropdown animations
     */
    filterDropDownAnimationDuration?: number;
    /**
     * width of the column filter dropdowns
     */
    filterDropDownWidth?: any;
    /**
     * Height of the column filter dropdowns
     * string The height of the column filter dropdowns in pixels (0px).
     * number The height of the column filter dropdowns as a number (0).
     */
    filterDropDownHeight?: any;
    /**
     * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     */
    filterExprUrlKey?: string;
    /**
     * Enable/disable filter icons visibility.
     *
     * Valid values:
     * "true" all predefined filters in the filter dropdowns will have icons rendered in front of the text
     * "false"
     */
    filterDropDownItemIcons?: any;
    /**
     * A list of column settings that specifies custom filtering options on a per column basis
     */
    columnSettings?: IgGridFilteringColumnSetting[];
    /**
     * Type of filtering. Delegates all filtering functionality to the $.ig.DataSource.
     *
     * Valid values:
     * "remote"
     * "local"
     */
    type?: any;
    /**
     * Time in milliseconds for which widget will wait for keystrokes before sending filtering request.
     */
    filterDelay?: number;
    /**
     * Default is 'simple' for non-virtualized grids, and 'advanced' when virtualization is enabled
     *
     * Valid values:
     * "simple" renders just a filter row
     * "advanced" allows to configure multiple filters from a dialog - Excel style
     */
    mode?: any;
    /**
     * Defines whether to show/hide editors in advanced mode. If false, no editors will be rendered in the advanced mode
     */
    advancedModeEditorsVisible?: boolean;
    /**
     * location of the advanced filtering button when advancedModeEditorsVisible is false (i.e. when the button is rendered in the header)
     *
     * Valid values:
     * "left"
     * "right"
     */
    advancedModeHeaderButtonLocation?: any;
    /**
     * default filter dialog width (used for Advanced filtering)
     */
    filterDialogWidth?: any;
    /**
     * default filter dialog height (used for Advanced filtering)
     */
    filterDialogHeight?: any;
    /**
     * Width of the filtering condition dropdowns in the advanced filter dialog
     */
    filterDialogFilterDropDownDefaultWidth?: any;
    /**
     * width of the filtering expression input boxes in the advanced filter dialog
     */
    filterDialogExprInputDefaultWidth?: any;
    /**
     * Width of the column chooser dropdowns in the advanced filter dialog
     */
    filterDialogColumnDropDownDefaultWidth?: any;
    /**
     * Enable/disable filter button visibility. If false,no filter dropdown buttons will be rendered and predefined list of filters will not be rendered for the columns
     */
    renderFilterButton?: boolean;
    /**
     * the filtering button for filter dropdowns can be rendered either on the left of the filter editor or on the right
     *
     * Valid values:
     * "left"
     * "right"
     */
    filterButtonLocation?: any;
    /**
     * List of configurable and localized null texts that will be used for the filter editors
     */
    nullTexts?: IgGridFilteringNullTexts;
    /**
     * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns.
     */
    labels?: IgGridFilteringLabels;
    /**
     * Custom tooltip template for the filter button, when a filter is applied
     */
    tooltipTemplate?: string;
    /**
     * Custom template for add condition area in the filter dialog.
     * The default template is "<div><span>${label1}</span><div><select></select></div><span>${label2}</span></div>"
     */
    filterDialogAddConditionTemplate?: string;
    /**
     * Custom template for options in dropdown in add condition area in the filter dialog.
     * The default template is "<option value='${value}'>${text}</option>"
     */
    filterDialogAddConditionDropDownTemplate?: string;
    /**
     * Custom template for filter dialog.
     * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
     * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
     * NOTE: The template is supported only with <tr />.
     * The default template is "<tr data-af-row><td><input data-af-col/></td><td><select data-af-cond></select></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>"
     */
    filterDialogFilterTemplate?: string;
    /**
     * Custom template for options in condition list in filter dialog
     * The default template is "<option value='${condition}'>${text}</option>"
     */
    filterDialogFilterConditionTemplate?: string;
    /**
     * add button width - in the advanced filter dialog
     */
    filterDialogAddButtonWidth?: any;
    /**
     * Width of the Ok and Cancel buttons in the advanced filtering dialogs
     */
    filterDialogOkCancelButtonWidth?: any;
    /**
     * Maximum number of filter rows in the advanced filtering dialog. if this number is exceeded, an error message will be rendered
     */
    filterDialogMaxFilterCount?: number;
    /**
     * Controls containment behavior.
     * owner  The filter dialog will be draggable only in the grid area
     * window  The filter dialog will be draggable in the whole window area
     */
    filterDialogContainment?: string;
    /**
     * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns
     */
    showEmptyConditions?: boolean;
    /**
     * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns
     */
    showNullConditions?: boolean;
    /**
     * Feature chooser text when filter is shown and filter mode is simple
     */
    featureChooserText?: string;
    /**
     * Feature chooser text when filter is hidden and filter mode is simple
     */
    featureChooserTextHide?: string;
    /**
     * Feature chooser text when filter mode is advanced
     */
    featureChooserTextAdvancedFilter?: string;
    /**
     * Enables / disables filtering persistence between states
     */
    persist?: boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before a filtering operation is executed (remote request or local).
     * Return false in order to cancel filtering operation.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.newExpressions to get filtering expressions. Filtering expressions could be changed in this event handler and after that data binding is applied. In this way the user could control filtering more easily before applying data-binding.
     */
    dataFiltering?: DataFilteringEvent;
    /**
     * Event fired after the filtering has been executed and results are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.expressions to get filtered expressions.
     */
    dataFiltered?: DataFilteredEvent;
    /**
     * Event fired before the filter dropdown is opened for a specific column.
     * Return false in order to cancel dropdown opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    dropDownOpening?: DropDownOpeningEvent;
    /**
     * Event fired after the filter dropdown is opened for a specific column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    dropDownOpened?: DropDownOpenedEvent;
    /**
     * Event fired before the filter dropdown starts closing.
     * Return false in order to cancel dropdown closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    dropDownClosing?: DropDownClosingEvent;
    /**
     * Event fired after a filter column dropdown is completely closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    dropDownClosed?: DropDownClosedEvent;
    /**
     * Event fired before the advanced filtering dialog is opened.
     * Return false in order to cancel filter dialog opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    filterDialogOpening?: FilterDialogOpeningEvent;
    /**
     * Event fired after the advanced filter dialog is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    filterDialogOpened?: FilterDialogOpenedEvent;
    /**
     * Event fired every time the advanced filter dialog changes its position.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     */
    filterDialogMoving?: FilterDialogMovingEvent;
    /**
     * Event fired before a filter row is added to the advanced filter dialog.
     * Return false in order to cancel filter adding to the advanced filtering dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filtersTableBody to get reference to filters table body DOM element.
     */
    filterDialogFilterAdding?: FilterDialogFilterAddingEvent;
    /**
     * Event fired after a filter row is added to the advanced filter dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filter to get reference to filters table row DOM element.
     */
    filterDialogFilterAdded?: FilterDialogFilterAddedEvent;
    /**
     * Event fired before the advanced filter dialog is closed.
     * Return false in order to cancel filtering dialog closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     */
    filterDialogClosing?: FilterDialogClosingEvent;
    /**
     * Event fired after the advanced filter dialog has been closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     */
    filterDialogClosed?: FilterDialogClosedEvent;
    /**
     * Event fired before the contents of the advanced filter dialog are rendered.
     * Return false in order to cancel filtering dialog rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     */
    filterDialogContentsRendering?: FilterDialogContentsRenderingEvent;
    /**
     * Event fired after the contents of the advanced filter dialog are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     */
    filterDialogContentsRendered?: FilterDialogContentsRenderedEvent;
    /**
     * Event fired when the OK button in the advanced filter dialog is pressed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    filterDialogFiltering?: FilterDialogFilteringEvent;
    /**
     * Option for igGridFiltering
     */
    [optionName: string]: any;
}
interface IgGridFilteringMethods {
    /**
     * Destroys the filtering widget - remove fitler row, unbinds events, returns the grid to its previous state.
     */
    destroy(): void;
    /**
     * Returns the count of data records that match filtering conditions
     */
    getFilteringMatchesCount(): number;
    /**
     * Toggle filter row when mode is simple or advancedModeEditorsVisible is TRUE. Otherwise show/hide advanced dialog
     *
     * @param event     Column key
     */
    toggleFilterRowByFeatureChooser(event: string): void;
    /**
     * Applies filtering programmatically and updates the UI by default
     *
     * @param expressions     An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: "equals", "doesNotEqual", "contains", "doesNotContain", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "true", "false", "null", "notNull", "empty", "notEmpty", "startsWith", "endsWith", "today", "yesterday", "on", "notOn", "thisMonth", "lastMonth", "nextMonth", "before", "after", "thisYear", "lastYear", "nextYear". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.
     * @param updateUI     specifies whether the filter row should be also updated once the grid is filtered
     * @param addedFromAdvanced
     */
    filter(expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void;
    /**
     * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is "lastMonth", "thisMonth", "null", "notNull", "true", "false", etc. then filtering expression is NOT required
     *
     * @param filterCondition    filtering condition - e.g. "true", "false",  "yesterday", "empty", "null", etc.
     */
    requiresFilteringExpression(filterCondition: string): boolean;
}
interface JQuery {
    data(propertyName: "igGridFiltering"): IgGridFilteringMethods;
}
interface JQuery {
    igGridFiltering(methodName: "destroy"): void;
    igGridFiltering(methodName: "getFilteringMatchesCount"): number;
    igGridFiltering(methodName: "toggleFilterRowByFeatureChooser", event: string): void;
    igGridFiltering(methodName: "filter", expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void;
    igGridFiltering(methodName: "requiresFilteringExpression", filterCondition: string): boolean;
    /**
     * Enables or disables the filtering case sensitivity. Works only for local filtering.If true, it enables filtering case sensitivity. If false, it disables filtering case sensitivity.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "caseSensitive"): boolean;
    /**
     * Enables or disables the filtering case sensitivity. Works only for local filtering.If true, it enables filtering case sensitivity. If false, it disables filtering case sensitivity.
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;
    /**
     * Enable/disable footer visibility with summary info about the filter.
     * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
     * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterSummaryAlwaysVisible"): boolean;
    /**
     * Enable/disable footer visibility with summary info about the filter.
     * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
     * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterSummaryAlwaysVisible", optionValue: boolean): void;
    /**
     * Render in feature chooser. Feature chooser is dialog which lists all the enabled features (like Sorting, Filtering, Hiding etc.) of igGrid.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "renderFC"): boolean;
    /**
     * Render in feature chooser. Feature chooser is dialog which lists all the enabled features (like Sorting, Filtering, Hiding etc.) of igGrid.
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "renderFC", optionValue: boolean): void;
    /**
     * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterSummaryTemplate"): string;
    /**
     * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterSummaryTemplate", optionValue: string): void;
    /**
     * Type of animations for the column filter dropdowns
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimations"): any;
    /**
     * Type of animations for the column filter dropdowns
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimations", optionValue: any): void;
    /**
     * Animation duration in milliseconds for the filter dropdown animations
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimationDuration"): number;
    /**
     * Animation duration in milliseconds for the filter dropdown animations
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimationDuration", optionValue: number): void;
    /**
     * Width of the column filter dropdowns
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownWidth"): any;
    /**
     * Width of the column filter dropdowns
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownWidth", optionValue: any): void;
    /**
     * Height of the column filter dropdowns
     * string The height of the column filter dropdowns in pixels (0px).
     * number The height of the column filter dropdowns as a number (0).
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownHeight"): any;
    /**
     * Height of the column filter dropdowns
     * string The height of the column filter dropdowns in pixels (0px).
     * number The height of the column filter dropdowns as a number (0).
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownHeight", optionValue: any): void;
    /**
     * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterExprUrlKey"): string;
    /**
     * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterExprUrlKey", optionValue: string): void;
    /**
     * Enable/disable filter icons visibility.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownItemIcons"): any;
    /**
     * Enable/disable filter icons visibility.
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDropDownItemIcons", optionValue: any): void;
    /**
     * A list of column settings that specifies custom filtering options on a per column basis
     */
    igGridFiltering(optionLiteral: 'option', optionName: "columnSettings"): IgGridFilteringColumnSetting[];
    /**
     * A list of column settings that specifies custom filtering options on a per column basis
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridFilteringColumnSetting[]): void;
    /**
     * Type of filtering. Delegates all filtering functionality to the $.ig.DataSource.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "type"): any;
    /**
     * Type of filtering. Delegates all filtering functionality to the $.ig.DataSource.
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * Time in milliseconds for which widget will wait for keystrokes before sending filtering request.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDelay"): number;
    /**
     * Time in milliseconds for which widget will wait for keystrokes before sending filtering request.
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDelay", optionValue: number): void;
    /**
     * Default is 'simple' for non-virtualized grids, and 'advanced' when virtualization is enabled
     */
    igGridFiltering(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Default is 'simple' for non-virtualized grids, and 'advanced' when virtualization is enabled
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Defines whether to show/hide editors in advanced mode. If false, no editors will be rendered in the advanced mode
     */
    igGridFiltering(optionLiteral: 'option', optionName: "advancedModeEditorsVisible"): boolean;
    /**
     * Defines whether to show/hide editors in advanced mode. If false, no editors will be rendered in the advanced mode
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "advancedModeEditorsVisible", optionValue: boolean): void;
    /**
     * Location of the advanced filtering button when advancedModeEditorsVisible is false (i.e. when the button is rendered in the header)
     */
    igGridFiltering(optionLiteral: 'option', optionName: "advancedModeHeaderButtonLocation"): any;
    /**
     * Location of the advanced filtering button when advancedModeEditorsVisible is false (i.e. when the button is rendered in the header)
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "advancedModeHeaderButtonLocation", optionValue: any): void;
    /**
     * Default filter dialog width (used for Advanced filtering)
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogWidth"): any;
    /**
     * Default filter dialog width (used for Advanced filtering)
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogWidth", optionValue: any): void;
    /**
     * Default filter dialog height (used for Advanced filtering)
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogHeight"): any;
    /**
     * Default filter dialog height (used for Advanced filtering)
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogHeight", optionValue: any): void;
    /**
     * Width of the filtering condition dropdowns in the advanced filter dialog
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterDropDownDefaultWidth"): any;
    /**
     * Width of the filtering condition dropdowns in the advanced filter dialog
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterDropDownDefaultWidth", optionValue: any): void;
    /**
     * Width of the filtering expression input boxes in the advanced filter dialog
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogExprInputDefaultWidth"): any;
    /**
     * Width of the filtering expression input boxes in the advanced filter dialog
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogExprInputDefaultWidth", optionValue: any): void;
    /**
     * Width of the column chooser dropdowns in the advanced filter dialog
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogColumnDropDownDefaultWidth"): any;
    /**
     * Width of the column chooser dropdowns in the advanced filter dialog
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogColumnDropDownDefaultWidth", optionValue: any): void;
    /**
     * Enable/disable filter button visibility. If false,no filter dropdown buttons will be rendered and predefined list of filters will not be rendered for the columns
     */
    igGridFiltering(optionLiteral: 'option', optionName: "renderFilterButton"): boolean;
    /**
     * Enable/disable filter button visibility. If false,no filter dropdown buttons will be rendered and predefined list of filters will not be rendered for the columns
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "renderFilterButton", optionValue: boolean): void;
    /**
     * The filtering button for filter dropdowns can be rendered either on the left of the filter editor or on the right
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterButtonLocation"): any;
    /**
     * The filtering button for filter dropdowns can be rendered either on the left of the filter editor or on the right
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterButtonLocation", optionValue: any): void;
    /**
     * List of configurable and localized null texts that will be used for the filter editors
     */
    igGridFiltering(optionLiteral: 'option', optionName: "nullTexts"): IgGridFilteringNullTexts;
    /**
     * List of configurable and localized null texts that will be used for the filter editors
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "nullTexts", optionValue: IgGridFilteringNullTexts): void;
    /**
     * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "labels"): IgGridFilteringLabels;
    /**
     * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns.
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "labels", optionValue: IgGridFilteringLabels): void;
    /**
     * Custom tooltip template for the filter button, when a filter is applied
     */
    igGridFiltering(optionLiteral: 'option', optionName: "tooltipTemplate"): string;
    /**
     * Custom tooltip template for the filter button, when a filter is applied
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;
    /**
     * Custom template for add condition area in the filter dialog.
     * The default template is "<div><span>${label1}</span><div><select></select></div><span>${label2}</span></div>"
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionTemplate"): string;
    /**
     * Custom template for add condition area in the filter dialog.
     * The default template is "<div><span>${label1}</span><div><select></select></div><span>${label2}</span></div>"
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionTemplate", optionValue: string): void;
    /**
     * Custom template for options in dropdown in add condition area in the filter dialog.
     * The default template is "<option value='${value}'>${text}</option>"
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionDropDownTemplate"): string;
    /**
     * Custom template for options in dropdown in add condition area in the filter dialog.
     * The default template is "<option value='${value}'>${text}</option>"
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionDropDownTemplate", optionValue: string): void;
    /**
     * Custom template for filter dialog.
     * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
     * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
     * NOTE: The template is supported only with <tr />.
     * The default template is "<tr data-af-row><td><input data-af-col/></td><td><select data-af-cond></select></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>"
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterTemplate"): string;
    /**
     * Custom template for filter dialog.
     * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
     * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
     * NOTE: The template is supported only with <tr />.
     * The default template is "<tr data-af-row><td><input data-af-col/></td><td><select data-af-cond></select></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>"
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterTemplate", optionValue: string): void;
    /**
     * Custom template for options in condition list in filter dialog
     * The default template is "<option value='${condition}'>${text}</option>"
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterConditionTemplate"): string;
    /**
     * Custom template for options in condition list in filter dialog
     * The default template is "<option value='${condition}'>${text}</option>"
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterConditionTemplate", optionValue: string): void;
    /**
     * Add button width - in the advanced filter dialog
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddButtonWidth"): any;
    /**
     * Add button width - in the advanced filter dialog
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddButtonWidth", optionValue: any): void;
    /**
     * Width of the Ok and Cancel buttons in the advanced filtering dialogs
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOkCancelButtonWidth"): any;
    /**
     * Width of the Ok and Cancel buttons in the advanced filtering dialogs
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOkCancelButtonWidth", optionValue: any): void;
    /**
     * Maximum number of filter rows in the advanced filtering dialog. if this number is exceeded, an error message will be rendered
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogMaxFilterCount"): number;
    /**
     * Maximum number of filter rows in the advanced filtering dialog. if this number is exceeded, an error message will be rendered
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogMaxFilterCount", optionValue: number): void;
    /**
     * Controls containment behavior.
     * owner  The filter dialog will be draggable only in the grid area
     * window  The filter dialog will be draggable in the whole window area
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContainment"): string;
    /**
     * Controls containment behavior.
     * owner  The filter dialog will be draggable only in the grid area
     * window  The filter dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContainment", optionValue: string): void;
    /**
     * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns
     */
    igGridFiltering(optionLiteral: 'option', optionName: "showEmptyConditions"): boolean;
    /**
     * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "showEmptyConditions", optionValue: boolean): void;
    /**
     * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns
     */
    igGridFiltering(optionLiteral: 'option', optionName: "showNullConditions"): boolean;
    /**
     * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "showNullConditions", optionValue: boolean): void;
    /**
     * Feature chooser text when filter is shown and filter mode is simple
     */
    igGridFiltering(optionLiteral: 'option', optionName: "featureChooserText"): string;
    /**
     * Feature chooser text when filter is shown and filter mode is simple
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;
    /**
     * Feature chooser text when filter is hidden and filter mode is simple
     */
    igGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextHide"): string;
    /**
     * Feature chooser text when filter is hidden and filter mode is simple
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextHide", optionValue: string): void;
    /**
     * Feature chooser text when filter mode is advanced
     */
    igGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextAdvancedFilter"): string;
    /**
     * Feature chooser text when filter mode is advanced
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextAdvancedFilter", optionValue: string): void;
    /**
     * Enables / disables filtering persistence between states
     */
    igGridFiltering(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables filtering persistence between states
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before a filtering operation is executed (remote request or local).
     * Return false in order to cancel filtering operation.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.newExpressions to get filtering expressions. Filtering expressions could be changed in this event handler and after that data binding is applied. In this way the user could control filtering more easily before applying data-binding.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dataFiltering"): DataFilteringEvent;
    /**
     * Event fired before a filtering operation is executed (remote request or local).
     * Return false in order to cancel filtering operation.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.newExpressions to get filtering expressions. Filtering expressions could be changed in this event handler and after that data binding is applied. In this way the user could control filtering more easily before applying data-binding.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dataFiltering", optionValue: DataFilteringEvent): void;
    /**
     * Event fired after the filtering has been executed and results are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.expressions to get filtered expressions.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dataFiltered"): DataFilteredEvent;
    /**
     * Event fired after the filtering has been executed and results are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.expressions to get filtered expressions.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dataFiltered", optionValue: DataFilteredEvent): void;
    /**
     * Event fired before the filter dropdown is opened for a specific column.
     * Return false in order to cancel dropdown opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dropDownOpening"): DropDownOpeningEvent;
    /**
     * Event fired before the filter dropdown is opened for a specific column.
     * Return false in order to cancel dropdown opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dropDownOpening", optionValue: DropDownOpeningEvent): void;
    /**
     * Event fired after the filter dropdown is opened for a specific column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dropDownOpened"): DropDownOpenedEvent;
    /**
     * Event fired after the filter dropdown is opened for a specific column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dropDownOpened", optionValue: DropDownOpenedEvent): void;
    /**
     * Event fired before the filter dropdown starts closing.
     * Return false in order to cancel dropdown closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dropDownClosing"): DropDownClosingEvent;
    /**
     * Event fired before the filter dropdown starts closing.
     * Return false in order to cancel dropdown closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dropDownClosing", optionValue: DropDownClosingEvent): void;
    /**
     * Event fired after a filter column dropdown is completely closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dropDownClosed"): DropDownClosedEvent;
    /**
     * Event fired after a filter column dropdown is completely closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "dropDownClosed", optionValue: DropDownClosedEvent): void;
    /**
     * Event fired before the advanced filtering dialog is opened.
     * Return false in order to cancel filter dialog opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpening"): FilterDialogOpeningEvent;
    /**
     * Event fired before the advanced filtering dialog is opened.
     * Return false in order to cancel filter dialog opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpening", optionValue: FilterDialogOpeningEvent): void;
    /**
     * Event fired after the advanced filter dialog is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpened"): FilterDialogOpenedEvent;
    /**
     * Event fired after the advanced filter dialog is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpened", optionValue: FilterDialogOpenedEvent): void;
    /**
     * Event fired every time the advanced filter dialog changes its position.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogMoving"): FilterDialogMovingEvent;
    /**
     * Event fired every time the advanced filter dialog changes its position.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogMoving", optionValue: FilterDialogMovingEvent): void;
    /**
     * Event fired before a filter row is added to the advanced filter dialog.
     * Return false in order to cancel filter adding to the advanced filtering dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filtersTableBody to get reference to filters table body DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdding"): FilterDialogFilterAddingEvent;
    /**
     * Event fired before a filter row is added to the advanced filter dialog.
     * Return false in order to cancel filter adding to the advanced filtering dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filtersTableBody to get reference to filters table body DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdding", optionValue: FilterDialogFilterAddingEvent): void;
    /**
     * Event fired after a filter row is added to the advanced filter dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filter to get reference to filters table row DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdded"): FilterDialogFilterAddedEvent;
    /**
     * Event fired after a filter row is added to the advanced filter dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filter to get reference to filters table row DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdded", optionValue: FilterDialogFilterAddedEvent): void;
    /**
     * Event fired before the advanced filter dialog is closed.
     * Return false in order to cancel filtering dialog closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosing"): FilterDialogClosingEvent;
    /**
     * Event fired before the advanced filter dialog is closed.
     * Return false in order to cancel filtering dialog closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosing", optionValue: FilterDialogClosingEvent): void;
    /**
     * Event fired after the advanced filter dialog has been closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosed"): FilterDialogClosedEvent;
    /**
     * Event fired after the advanced filter dialog has been closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosed", optionValue: FilterDialogClosedEvent): void;
    /**
     * Event fired before the contents of the advanced filter dialog are rendered.
     * Return false in order to cancel filtering dialog rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendering"): FilterDialogContentsRenderingEvent;
    /**
     * Event fired before the contents of the advanced filter dialog are rendered.
     * Return false in order to cancel filtering dialog rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendering", optionValue: FilterDialogContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the advanced filter dialog are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendered"): FilterDialogContentsRenderedEvent;
    /**
     * Event fired after the contents of the advanced filter dialog are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendered", optionValue: FilterDialogContentsRenderedEvent): void;
    /**
     * Event fired when the OK button in the advanced filter dialog is pressed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFiltering"): FilterDialogFilteringEvent;
    /**
     * Event fired when the OK button in the advanced filter dialog is pressed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridFiltering(optionLiteral: 'option', optionName: "filterDialogFiltering", optionValue: FilterDialogFilteringEvent): void;
    igGridFiltering(options: IgGridFiltering): JQuery;
    igGridFiltering(optionLiteral: 'option', optionName: string): any;
    igGridFiltering(optionLiteral: 'option', options: IgGridFiltering): JQuery;
    igGridFiltering(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridFiltering(methodName: string, ...methodParams: any[]): any;
}
interface IgGridColumn {
    /**
     * Column header text
     */
    headerText?: string;
    /**
     * Column key (property in the data source to which the column is bound)
     */
    key?: string;
    /**
     * Reference to a function (string or function) which will be used for formatting the cell values. The function should accept a value and return the new formatted value.
     */
    formatter?: any;
    /**
     * Sets gets format for cells in column. Default value is null.
     * If dataType is "date", then supported formats are following: "date", "dateLong", "dateTime", "time", "timeLong", "MM/dd/yyyy", "MMM-d, yy, h:mm:ss tt", "dddd d MMM", etc.
     * If dataType is "number", then supported numeric formats are following: "number", "currency", "percent", "int", "double", "0.00", "#.0####", "0", "#.#######", etc.
     * The value of "double" will be similar to "number", but with unlimited maximum number of decimal places.
     * The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object.
     * If dataType is "string" or not set, then format is rendered as it is with replacement of possible "{0}" flag by value in cell. Example, if format is set to "Name: {0}" and value in cell is "Bob", then value will appear as "Name: Bob"
     * If value is set to "checkbox", then checkboxes are used regardless of renderCheckboxes option of igGrid. That has effect only when dataType option of column is set to "bool".
     */
    format?: string;
    /**
     * data type of the column cell values stringnumberbooldateobject
     *
     * Valid values:
     * "bool"
     * "date"
     * "object"
     */
    dataType?: any;
    /**
     * Width of the column in pixels or percentage. Can have optional 'px' at the end. Can also be set as '*', in which case the width autofits based on the content of the column cells (including the header text).If width is not defined and defaultColumnWidth is set, it is assumed for all columns.
     */
    width?: any;
    /**
     * Initial visibility of the column. A column can be hidden without the Hiding feature being enabled but there will be no UI for unhiding it. Columns can be defined as hidden in the options of the Hiding feature as well and those definitions take precedence.
     */
    hidden?: boolean;
    /**
     * Sets a template for an individual column. the contents of the template should be the HTML markup that goes inside the table cell, without any <td> and </td> tags included in front and at the end. The syntax of the template, when referencing data keys and using conditional expressions is the same as the one for rowTemplate
     */
    template?: string;
    /**
     * Sets whether column is bound to the datasource
     */
    unbound?: boolean;
    /**
     * Array of other column definitions. If the column has the property group than the grid has multi column headers
     */
    group?: any[];
    /**
     * Used to adjust span of multi column header cell
     */
    rowspan?: number;
    /**
     * a reference or name of a javascript function which will calculate the value based on other cell values in the same row when column is unbound
     */
    formula?: any;
    /**
     * Array of values which could be set for unbound columns at init time
     */
    unboundValues?: any[];
    /**
     * update mode of the unbound column(this option is applied ONLY when option formula is set). Auto update unbound column value whenever the record/cell is updated
     */
    unboundValuesUpdateMode?: any;
    /**
     * Space-separated list of CSS classes to be applied on the header cell of this column
     */
    headerCssClass?: string;
    /**
     * Space-separated list of CSS classes to be applied on the data cells of this column.
     */
    columnCssClass?: string;
    /**
     * Option for IgGridColumn
     */
    [optionName: string]: any;
}
interface IgGridFeature {
    /**
     * Name of the feature to be added
     */
    name?: string;
    /**
     * Option for IgGridFeature
     */
    [optionName: string]: any;
}
interface IgGridRestSettingsCreate {
    /**
     * Specifies a remote URL to which create requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
     */
    url?: string;
    /**
     * Specifies a remote URL template. Use ${id} in place of the resource id.
     */
    template?: string;
    /**
     * Specifies whether create requests will be sent in batches
     */
    batch?: boolean;
    /**
     * Option for IgGridRestSettingsCreate
     */
    [optionName: string]: any;
}
interface IgGridRestSettingsUpdate {
    /**
     * Specifies a remote URL to which update requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
     */
    url?: string;
    /**
     * Specifies a remote URL template. Use ${id} in place of the resource id.
     */
    template?: string;
    /**
     * Specifies whether update requests will be sent in batches
     */
    batch?: boolean;
    /**
     * Option for IgGridRestSettingsUpdate
     */
    [optionName: string]: any;
}
interface IgGridRestSettingsRemove {
    /**
     * Specifies a remote URL to which remove requests will be sent. This will be used for both batch and non-batch, however if template is also set, this URL will only be used for batch requests.
     */
    url?: string;
    /**
     * Specifies a remote URL template. Use ${id} in place of the resource id.
     */
    template?: string;
    /**
     * Specifies whether update requests will be sent in batches
     */
    batch?: boolean;
    /**
     * Option for IgGridRestSettingsRemove
     */
    [optionName: string]: any;
}
interface IgGridRestSettings {
    /**
     * Settings for create requests
     */
    create?: IgGridRestSettingsCreate;
    /**
     * Settings for update requests
     */
    update?: IgGridRestSettingsUpdate;
    /**
     * Settings for remove requests
     */
    remove?: IgGridRestSettingsRemove;
    /**
     * Specifies whether the ids of the removed resources are send through the request URI
     */
    encodeRemoveInRequestUri?: boolean;
    /**
     * Specifies a custom function to serialize content sent to the server. It should accept a single object or an array of objects and return a string. If not specified, JSON.stringify() will be used.
     */
    contentSerializer?: Function;
    /**
     * Specifies the content type of the request
     */
    contentType?: string;
    /**
     * Option for IgGridRestSettings
     */
    [optionName: string]: any;
}
interface CellClickEvent {
    (event: Event, ui: CellClickEventUIParam): void;
}
interface CellClickEventUIParam {
    /**
     * Used to get reference to cell DOM element.
     */
    cellElement?: any;
    /**
     * Used to get row index.
     */
    rowIndex?: any;
    /**
     * Used to get the row key.
     */
    rowKey?: any;
    /**
     * Used to get column index of the DOM element.
     */
    colIndex?: any;
    /**
     * Used to get the column key.
     */
    colKey?: any;
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
}
interface CellRightClickEvent {
    (event: Event, ui: CellRightClickEventUIParam): void;
}
interface CellRightClickEventUIParam {
    /**
     * Used to get reference to cell DOM element.
     */
    cellElement?: any;
    /**
     * Used to get row index.
     */
    rowIndex?: any;
    /**
     * Used to get the row key.
     */
    rowKey?: any;
    /**
     * Used to get column index of the DOM element.
     */
    colIndex?: any;
    /**
     * Used to get the column key.
     */
    colKey?: any;
    /**
     * Used to get reference to row DOM element.
     */
    row?: any;
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
}
interface DataRenderingEvent {
    (event: Event, ui: DataRenderingEventUIParam): void;
}
interface DataRenderingEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
}
interface DataRenderedEvent {
    (event: Event, ui: DataRenderedEventUIParam): void;
}
interface DataRenderedEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
}
interface HeaderRenderingEvent {
    (event: Event, ui: HeaderRenderingEventUIParam): void;
}
interface HeaderRenderingEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
}
interface HeaderRenderedEvent {
    (event: Event, ui: HeaderRenderedEventUIParam): void;
}
interface HeaderRenderedEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
    /**
     * Used to get reference to headers table DOM element.
     */
    table?: any;
}
interface FooterRenderingEvent {
    (event: Event, ui: FooterRenderingEventUIParam): void;
}
interface FooterRenderingEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
}
interface FooterRenderedEvent {
    (event: Event, ui: FooterRenderedEventUIParam): void;
}
interface FooterRenderedEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
    /**
     * Used to get reference to footers table DOM element.
     */
    table?: any;
}
interface HeaderCellRenderedEvent {
    (event: Event, ui: HeaderCellRenderedEventUIParam): void;
}
interface HeaderCellRenderedEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
    /**
     * Used to get column key.
     */
    columnKey?: any;
    /**
     * Used to get reference to header cell DOM element.
     */
    th?: any;
}
interface RowsRenderingEvent {
    (event: Event, ui: RowsRenderingEventUIParam): void;
}
interface RowsRenderingEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
    /**
     * Used to get reference to grid's table body.
     */
    tbody?: any;
}
interface RowsRenderedEvent {
    (event: Event, ui: RowsRenderedEventUIParam): void;
}
interface RowsRenderedEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
    /**
     * Used to get reference to grid's table body.
     */
    tbody?: any;
}
interface SchemaGeneratedEvent {
    (event: Event, ui: SchemaGeneratedEventUIParam): void;
}
interface SchemaGeneratedEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
    /**
     * Used to get reference to data source schema.
     */
    schema?: any;
    /**
     * Used to get reference to data source.
     */
    dataSource?: any;
}
interface ColumnsCollectionModifiedEvent {
    (event: Event, ui: ColumnsCollectionModifiedEventUIParam): void;
}
interface ColumnsCollectionModifiedEventUIParam {
    /**
     * Used to get reference to igGrid.
     */
    owner?: any;
}
interface RequestErrorEvent {
    (event: Event, ui: RequestErrorEventUIParam): void;
}
interface RequestErrorEventUIParam {
    /**
     * Used to get a reference to the grid
     */
    owner?: any;
    /**
     * Used to get the processed error message sent by the server
     */
    message?: any;
    /**
     * Used to get reference to the whole response object
     */
    response?: any;
}
interface CreatedEvent {
    (event: Event, ui: CreatedEventUIParam): void;
}
interface CreatedEventUIParam {
    /**
     * Used to get a reference to the grid
     */
    owner?: any;
}
interface DestroyedEvent {
    (event: Event, ui: DestroyedEventUIParam): void;
}
interface DestroyedEventUIParam {
    /**
     * Used to get a reference to the grid
     */
    owner?: any;
}
interface IgGrid {
    width?: any;
    /**
     * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
     */
    height?: any;
    /**
     * If autoAdjustHeight is set to false, the options.height will be set only on the scrolling container, and all other UI elements such as paging footer / filter row/ headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no virtualization enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
     */
    autoAdjustHeight?: boolean;
    /**
     * used for virtualization, this is the average value in pixels (default) that will be used to calculate how many rows and which ones to render as the end user scrolls. Also all rows' height will be automatically equal to this value
     */
    avgRowHeight?: any;
    /**
     * used for virtualization, this is the average value in pixels for a column width
     */
    avgColumnWidth?: any;
    /**
     * Default column width that will be set for all columns.
     */
    defaultColumnWidth?: any;
    /**
     * If no columns collection is defined, and autoGenerateColumns is set to true, columns will be inferred from the data source. If autoGenerateColumns is not explicitly set and columns has at least one column defined then autoGenerateColumns is automatically set to false
     */
    autoGenerateColumns?: boolean;
    /**
     * Enables/disables virtualization. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data.
     */
    virtualization?: boolean;
    /**
     * Determines virtualization mode
     *
     * Valid values:
     * "fixed" renders only the visible rows and/or columns in the grid. On scrolling the same rows and/or columns are updated with new data from the data source.
     * "continuous" renders a pre-defined number of rows in the grid. On scrolling the continuous virtualization loads another portion of rows and disposes the current one.
     */
    virtualizationMode?: any;
    /**
     * This is an internal option and should not be used.
     */
    requiresDataBinding?: boolean;
    /**
     * Option to enable virtualization for rows only (vertical)
     */
    rowVirtualization?: boolean;
    /**
     * Option to enable virtualization for columns only (horizontal)
     */
    columnVirtualization?: boolean;
    /**
     * Number of pixels to move the grid when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. The "null" value will assume this is set to avgRowHeight
     */
    virtualizationMouseWheelStep?: number;
    /**
     * If this option is set to true, the height of the grid row will be calculated automatically based on the average row height and the visible virtual records. If no average row height is specified, one will be calculated automatically at runtime.
     */
    adjustVirtualHeights?: boolean;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the 14.1 release. The igGrid now uses column templates for individual column templating.
     * jQuery templating style template that will be used to render data records
     */
    rowTemplate?: string;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the 12.1 release. The igGrid now uses the custom Infragistics templating engine by default.
     * custom high-performance rendering will be used for rendering by default. jQuery Templating plugin can be used and enabled by setting this option to true. This will allow usage of column / row templates in jQuery Templating style. If virtualization is enabled, it is advised to keep this option to "false", in order to have better scrolling/rendering performance
     */
    jQueryTemplating?: boolean;
    /**
     * the templating engine that will be used to render the grid
     *
     * Valid values:
     * "infragistics" the grid will use the Infragistics Templating engine to render its content and specific parts of the UI
     * "jsRender" the grid will use jsRender to render its content and specific parts of the UI
     */
    templatingEngine?: any;
    /**
     * An array of column objects
     */
    columns?: IgGridColumn[];
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    dataSource?: any;
    /**
     * Specifies a remote URL as a data source, from which data will be retrieved using an AJAX call ($.ajax)
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped
     */
    responseDataKey?: string;
    /**
     * See $.ig.DataSource. Property in the response specifying the total number of records on the server.
     */
    responseTotalRecCountKey?: string;
    /**
     * Specifies the HTTP verb to be used to issue the request
     */
    requestType?: string;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     */
    responseContentType?: string;
    /**
     * Option controlling the visibility of the grid header
     */
    showHeader?: boolean;
    /**
     * Option controlling the visibility of the grid footer
     */
    showFooter?: boolean;
    /**
     * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If virtualization is enabled, fixedHeaders will always act as if it's true, no matter which value is set
     */
    fixedHeaders?: boolean;
    /**
     * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If virtualization is enabled, fixedFooters will always act as if it's true, no matter which value is set
     */
    fixedFooters?: boolean;
    /**
     * Caption text that will be shown above the grid header
     */
    caption?: string;
    /**
     * A list of grid features definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly
     */
    features?: IgGridFeature[];
    /**
     * Initial tabIndex attribute that will be set on the container element
     */
    tabIndex?: number;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the June 2015 service release. Accessibility rendering is always performed by the igGrid as of version 14.2.
     */
    accessibilityRendering?: boolean;
    /**
     * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on columns defined
     */
    localSchemaTransform?: boolean;
    /**
     * Primary key name of the column containing unique identifiers
     */
    primaryKey?: string;
    /**
     * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be done instead of GET
     */
    serializeTransactionLog?: boolean;
    /**
     * Automatically commits the transactions as rows/cells are being edited
     */
    autoCommit?: boolean;
    /**
     * If set to true, the following behavior will take place:
     * if a new row is added, and then deleted, there will be no transaction added to the log
     * if a new row is added, edited, then deleted, there will be no transaction added to the log
     * if several edits are made to a row or an individual cell, this should result in a single transaction
     * Note: This option takes effect only when autoCommit is set to false.
     */
    aggregateTransactions?: boolean;
    /**
     * Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object.date formats only Date columns
     *
     * Valid values:
     * "date" formats only Date columns
     * "dateandnumber"
     * "true" formats Date and number columns
     * "false" auto formatting is disabled
     */
    autoFormat?: any;
    /**
     * Gets sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". That option is not available when jQueryTemplating is used.
     */
    renderCheckboxes?: boolean;
    /**
     * URL to which updating requests will be made. If autoCommit is true, updates will be done immediately to the data source, without keeping interim transaction logs
     */
    updateUrl?: string;
    /**
     * Settings related to REST compliant update routine
     */
    restSettings?: IgGridRestSettings;
    /**
     * Enables/disables rendering of alternating row styles (odd and even rows receive different styling). Note that if a custom jQuery template is set, this has no effect and CSS for the row should be adjusted manually in the template contents.
     */
    alternateRowStyles?: boolean;
    /**
     * If autofitLastColumn is true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the entire grid.
     */
    autofitLastColumn?: boolean;
    /**
     * Enables/disables rendering of ui-state-hover classes when the mouse is over a record. this can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content
     */
    enableHoverStyles?: boolean;
    /**
     * Enables formatting of the dates as UTC. Note that this may be desirable when the dates are coming from a backend, encoded as UTC. Otherwise, if dates are created on the client (in the browser), most probably keeping enableUTCDates to false is the desired behavior
     */
    enableUTCDates?: boolean;
    /**
     * Merge unbound columns values inside datasource when data source is remote. If true then the unbound columns are merged to the datasource at runtime - indeed DataSource is expanded with the new data and this could cause performance issues when dataSource is huge, if false then the unbound data is sent to the client
     */
    mergeUnboundColumns?: boolean;
    /**
     * When dataSource is string defines whether to set data source of type JSONP
     */
    jsonpRequest?: boolean;
    /**
     * Enables/disables check for resizing grid container
     */
    enableResizeContainerCheck?: boolean;
    /**
     * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or to not show gear icon but on click/tap the header cell to show the feature chooser
     *
     * Valid values:
     * "none" Always hide the feature chooser icon; The feature chooser is shown on tapping/clicking the column header
     * "desktopOnly" Always show the icon on desktop but hide when touch device detected
     * "always" Always show it in any environment. Chooser is shown when tapping the gear icon or column header
     */
    featureChooserIconDisplay?: any;
    /**
     * Event fired when a cell is clicked.
     * Function takes arguments evt and ui.
     * Use ui.cellElement to get reference to cell DOM element.
     * Use ui.rowIndex to get row index.
     *             Use ui.rowKey to get the row key.
     * Use ui.colIndex to get column index of the DOM element.
     *             Use ui.colKey to get the column key.
     * Use ui.owner to get reference to igGrid.
     */
    cellClick?: CellClickEvent;
    /**
     * Event fired when a cell is right clicked.
     * Function takes arguments evt and ui.
     * Use ui.cellElement to get reference to cell DOM element.
     * Use ui.rowIndex to get row index.
     *             Use ui.rowKey to get the row key.
     * Use ui.colIndex to get column index of the DOM element.
     *             Use ui.colKey to get the column key.
     * Use ui.row to get reference to row DOM element.
     * Use ui.owner to get reference to igGrid.
     */
    cellRightClick?: CellRightClickEvent;
    /**
     * Event fired before data binding takes place.
     * Return false in order to cancel data binding.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.dataSource to get reference to the igDataSource object.
     */
    dataBinding?: DataBindingEvent;
    /**
     * Event fired after data binding is complete.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.dataSource to get reference to the igDataSource object.
     */
    dataBound?: DataBoundEvent;
    /**
     * Event fired before the grid starts rendering (all contents).
     * This event is fired only when the grid is being initialized.
     * It will not be fired if the grid is rebound to its data
     * (for example, when calling the dataBind() API method
     * or when changing the page size (when paging is enabled)).
     *
     * Return false in order to cancel grid rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    rendering?: RenderingEvent;
    /**
     * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
     * This event is fired only when the grid is being initialized.
     * It will not be fired if the grid is rebound to its data
     * (for example, when calling the dataBind() API method
     * or when changing the page size (when paging is enabled)).
     *
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    rendered?: RenderedEvent;
    /**
     * Event fired before the TBODY holding the data records starts its rendering.
     * Return false in order to cancel data records rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    dataRendering?: DataRenderingEvent;
    /**
     * Event fired after all of the data records in the grid table body have been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    dataRendered?: DataRenderedEvent;
    /**
     * Event fired before the header starts its rendering.
     * Return false in order to cancel header rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    headerRendering?: HeaderRenderingEvent;
    /**
     * Event fired after the header has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.table to get reference to headers table DOM element.
     */
    headerRendered?: HeaderRenderedEvent;
    /**
     * Event fired before the footer starts its rendering.
     * Return false in order to cancel footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    footerRendering?: FooterRenderingEvent;
    /**
     * Event fired after the footer has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.table to get reference to footers table DOM element.
     */
    footerRendered?: FooterRenderedEvent;
    /**
     * Event fired after every TH in the grid header has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.th to get reference to header cell DOM element.
     */
    headerCellRendered?: HeaderCellRenderedEvent;
    /**
     * Event fired before actual data rows (TRs) are rendered.
     * Return false in order to cancel rows rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.tbody to get reference to grid's table body.
     */
    rowsRendering?: RowsRenderingEvent;
    /**
     * Event fired after data rows are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.tbody to get reference to grid's table body.
     */
    rowsRendered?: RowsRenderedEvent;
    /**
     * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.schema to get reference to data source schema.
     * Use ui.dataSource to get reference to data source.
     */
    schemaGenerated?: SchemaGeneratedEvent;
    /**
     * Event fired after the columns colection has been modified(e.g. a column is hidden)
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    columnsCollectionModified?: ColumnsCollectionModifiedEvent;
    /**
     * Event fired if there is an error in the request, when the grid is doing a remote operation,
     * such as data binding, paging, sorting, etc.
     * use ui.owner to get a reference to the grid
     * use ui.message to get the processed error message sent by the server
     * use ui.response to get reference to the whole response object
     */
    requestError?: RequestErrorEvent;
    /**
     * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
     * use ui.owner to get a reference to the grid
     */
    created?: CreatedEvent;
    /**
     * Fired when the grid is destroyed
     * use ui.owner to get a reference to the grid
     */
    destroyed?: DestroyedEvent;
    /**
     * Option for igGrid
     */
    [optionName: string]: any;
}
interface IgGridMethods {
    /**
     * Returns the element holding the data records
     */
    widget(): void;
    /**
     * Returns whether grid has non-data fixed columns(e.g. row selectors column)
     */
    hasFixedDataSkippedColumns(): boolean;
    /**
     * Returns whether grid has fixed columns(even if a non-data column - like row-selectors column- is fixed)
     */
    hasFixedColumns(): boolean;
    /**
     * Returns the current fixing direction or null if there are no fixed columns
     * returnType="left|right|null"
     */
    fixingDirection(): void;
    /**
     * Returns whether the column with identifier colKey is fixed
     *
     * @param colKey     An identifier of the column which should be checked. It can be a key or visible index.
     */
    isFixedColumn(colKey: Object): boolean;
    /**
     * Called to detect whether grid container is resized. When autoAdjustHeight is true and height of the grid is changed then the height of grid is re-set.
     */
    resizeContainer(): void;
    /**
     * Returns the ID of the TABLE element where data records are rendered
     */
    id(): string;
    /**
     * Returns the DIV that is the topmost container of the grid widget
     */
    container(): Element;
    /**
     * Returns the table that contains the header cells
     */
    headersTable(): Element;
    /**
     * Returns the table that contains the footer cells
     */
    footersTable(): Element;
    /**
     * Returns the DIV that is used as a scroll container for the grid contents
     */
    scrollContainer(): Element;
    /**
     * Returns the DIV that is the topmost container of the fixed grid - contains fixed columns(in ColumnFixing scenario)
     */
    fixedContainer(): Element;
    /**
     * Returns the DIV that is the topmost container of the fixed body grid - contains fixed columns(in ColumnFixing scenario)
     */
    fixedBodyContainer(): Element;
    /**
     * Returns container(jQuery representation) containing fixed footer - contains fixed columns(in ColumnFixing scenario)
     */
    fixedFooterContainer(): Object;
    /**
     * Returns container(jQuery representation) containing fixed header - contains fixed columns(in ColumnFixing scenario)
     */
    fixedHeaderContainer(): Object;
    /**
     * Returns the table that contains the FIXED header cells - contains fixed columns(in ColumnFixing scenario)
     */
    fixedHeadersTable(): Element;
    /**
     * Returns the table that contains the footer cells - contains fixed columns(in ColumnFixing scenario)
     */
    fixedFootersTable(): Element;
    /**
     * Returns the cell TD element at the specified location
     *
     * @param x     The column index.
     * @param y     The row index.
     * @param isFixed     Optional parameter - if true get cell TD at the specified location from the fixed table
     */
    cellAt(x: number, y: number, isFixed: boolean): Element;
    /**
     * Returns the cell TD element by row id and column key
     *
     * @param rowId     The id of the row.
     * @param columnKey     The column key.
     */
    cellById(rowId: Object, columnKey: string): Element;
    /**
     * Returns the fixed table - contains fixed columns(in ColumnFixing scenario). If there aren't fixed columns returns the grid table
     */
    fixedTable(): Object;
    /**
     * Gets all immediate igGrid children of the current grid
     */
    immediateChildrenWidgets(): any[];
    /**
     * Gets all igGrid children of the current grid, recursively
     */
    childrenWidgets(): any[];
    /**
     * Gets all igGrid children's elements of the current grid, recursively
     */
    children(): any[];
    /**
     * Gets all immediate igGrid children's elements of the current grid
     */
    immediateChildren(): any[];
    /**
     * Returns the row (TR element) at the specified index. jQuery selectors aren't used for performance reasons
     *
     * @param i     The row index.
     */
    rowAt(i: number): Element;
    /**
     * Returns the row TR element by row id
     *
     * @param rowId     The id of the row.
     * @param isFixed     Specify search in the fixed container.
     */
    rowById(rowId: Object, isFixed?: boolean): Element;
    /**
     * Returns the fixed row (TR element) at the specified index. jQuery selectors aren't used for performance reasons(in ColumnFixing scenario - only when there is at least one fixed column)
     *
     * @param i     The row index.
     */
    fixedRowAt(i: number): Element;
    /**
     * Returns a list of all fixed TR elements holding data in the grid(in ColumnFixing scenario - only when there is at least one fixed column)
     */
    fixedRows(): any[];
    /**
     * Returns a list of all TR elements holding data in the grid(when there is at least one fixed column returns rows only in the UNFIXED table)
     */
    rows(): any[];
    /**
     * Returns all data fixed rows recursively, not only the immediate ones(in ColumnFixing scenario - only when there is at least one fixed column)
     */
    allFixedRows(): any[];
    /**
     * Returns all data rows recursively, not only the immediate ones(when there is at least one fixed column returns rows only in the UNFIXED table)
     */
    allRows(): any[];
    /**
     * Returns a column object by the specified column key
     *
     * @param key     The column key.
     */
    columnByKey(key: string): Object;
    /**
     * Returns a column object by the specified header text. If there are multiple matches, returns the first one.
     *
     * @param text     The column header text.
     */
    columnByText(text: string): Object;
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     * If multiple selection is disabled the function will return null.
     */
    selectedCells(): any[];
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     * If multiple selection is disabled the function will return null.
     */
    selectedRows(): any[];
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * If multiple selection is enabled the function will return null.
     */
    selectedCell(): Object;
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     * If multiple selection is enabled the function will return null.
     */
    selectedRow(): Object;
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     */
    activeCell(): Object;
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     */
    activeRow(): Object;
    /**
     * Retrieves a cell value using the row index and the column key. If a primaryKey is defined, rowId is assumed to be the row Key (not index).
     * If primary key is not defined, then rowId is converted to a number and is used as a row index.
     * If colKey is a number, the index of the column is used (instead of a column name).
     *
     * @param rowId     Row index or row key (primary key).
     * @param colKey     The column key.
     */
    getCellValue(rowId: Object, colKey: string): Object;
    /**
     * Returns the cell text. If colKey is a number, the index of the column is used (instead of a column name)
     * This is the actual text (or HTML string) for the contents of the cell.
     *
     * @param rowId     Row index or row data key (primary key)
     * @param colKey     Column key.
     */
    getCellText(rowId: Object, colKey: string): string;
    /**
     * Sets a new template for a column after initialization and renders the grid if not explicitly disabled. This method will replace any existing explicitly set row template and will build one anew from the column ones.
     *
     * @param col     An identifier of the column to set template for (index or key)
     * @param tmpl     The column template to set
     * @param render     Should the grid rerender after template is set
     */
    setColumnTemplate(col: Object, tmpl: string, render?: boolean): void;
    /**
     * Commits all pending transactions to the client data source. Note that there won't be anything to commit on the UI, since it is updated instantly. In order to rollback the actual UI, a call to dataBind() is required.
     *
     * @param rowId     If specified, will commit only that transaction corresponding to the specified record key.
     */
    commit(rowId?: Object): void;
    /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param rowId     If specified, will only rollback the transactions with that row id.
     * @param updateUI     Whether to update the UI or not.
     */
    rollback(rowId?: Object, updateUI?: boolean): void;
    /**
     * Returns a record by a specified key (requires that primaryKey is set in the settings).
     * That is a wrapper for this.dataSource.findRecordByKey(key).
     *
     * @param key     Primary key of the record
     */
    findRecordByKey(key: string): Object;
    /**
     * Returns a standalone object (copy) that represents the committed transactions, but detached from the data source.
     * That is a wrapper for this.dataSource.getDetachedRecord(t).
     *
     * @param t     A transaction object.
     */
    getDetachedRecord(t: Object): Object;
    /**
     * Returns a list of all transaction objects that are pending to be committed or rolled back to the data source.
     * That is a wrapper for this.dataSource.pendingTransactions().
     */
    pendingTransactions(): any[];
    /**
     * Returns a list of all transaction objects that are either pending, or have been committed in the data source.
     * That is a wrapper for this.dataSource.allTransactions().
     */
    allTransactions(): any[];
    /**
     * Returns the accumulated transaction log as a string. The purpose of this is to be passed to URLs or used conveniently.
     * That is a wrapper for this.dataSource.transactionsAsString().
     */
    transactionsAsString(): string;
    /**
     * Invokes an AJAX request to the updateUrl option (if specified) and passes the serialized transaction log (a serialized JSON string) as part of the POST request.
     *
     * @param success    Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
     * @param error    Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
     */
    saveChanges(success: Function, error: Function): void;
    /**
     * Adds a new row (TR) to the grid, by taking a data row object. Assumes the record will have the primary key.
     *
     * @param rec     Identifier/key of row. If missing, then number of rows in grid is used.
     */
    renderNewRow(rec?: string): void;
    /**
     * If the data source points to a local JSON array of data, and it is necessary to reset it at runtime, it must be done through this API member instead of the options (options.dataSource)
     *
     * @param dataSource     New data source object.
     */
    dataSourceObject(dataSource: Object): void;
    /**
     * Returns the total number of records in the underlying backend. If paging or filtering is enabled, this may differ from the number of records in the client-side data source.
     * In order for this to work, the response JSON/XML must include a property that specifies the total number of records, which name is specified by options.responseTotalRecCountKey.
     * This functionality is completely delegated to the data source control.
     */
    totalRecordsCount(): number;
    /**
     * Causes the grid to data bind to the data source (local or remote) , and re-render all of the data as well
     *
     * @param internal
     */
    dataBind(internal: Object): void;
    /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param after    Specifies whether the column moved should be moved after or before the target column. This parameter is disregarded if there is no target column specified but a target index is used.
     * @param inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param callback    Specifies a custom function to be called when the column is moved.
     */
    moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
    /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column     An identifier for the column. If a number is provided it will be used as a column index. If a string is provided it will be used as a column key.
     * @param callback     Specifies a custom function to be called when the column is shown(optional)
     */
    showColumn(column: Object, callback: Function): void;
    /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column     An identifier for the column. If a number is provided it will be used as a column index else if a string is provided it will be used as a column key.
     * @param callback     Specifies a custom function to be called when the column is hidden(optional)
     */
    hideColumn(column: Object, callback: Function): void;
    /**
     * Gets unbound values for the specified column key. If key is not specified returns all unboundvalues
     *
     * @param key    column key
     */
    getUnboundValues(key: string): Object;
    /**
     * Sets unbound values for the unbound column with the specified key. If removeOldValues is true then values(if any) for the unbound columns are re-set with the new values
     *
     * @param key     key of the unbound column
     * @param values     array of values to be set on unbound values
     * @param removeOldValues     if true removes current unbound values(if any) for the specified column and apply the new ones specified in parameter values. Otherwise merge current values with the specified in parameter values
     */
    setUnboundValues(key: string, values: any[], removeOldValues: Object): void;
    /**
     * Sets unbound value for the unbound cell by the specified column key and row primary key.
     *
     * @param col     key of the unbound column
     * @param rowId     primary key value of the row
     * @param val     value to be set on unbound cell
     * @param notToRender     if false will re-render the row
     */
    setUnboundValueByPK(col: string, rowId: string, val: Object, notToRender: Object): void;
    /**
     * Returns an unbound column with the specified key. If not found returns null
     *
     * @param key    a column key
     */
    getUnboundColumnByKey(key: string): Object;
    /**
     * Returns whether there is vertical scrollbar. Because of perfrormance issues in older Internet Explorer especially 8,9 - there is no need to check if height is not set - there is no scrollbar OR if row virtualization is enabled - it is supposed there is vertical scrollbar
     */
    hasVerticalScrollbar(): Object;
    /**
     * Auto resize columns that have property width set to "*" so content to be auto-fitted(not shrinked/cutted). Auto-resizing is applied ONLY for visible columns
     */
    autoSizeColumns(): void;
    /**
     * Calculates the width of the column so its content to be auto-fitted to the width of the data in it(the content should NOT be shrinked/cutted)
     *
     * @param columnIndex    Visible column index
     */
    calculateAutoFitColumnWidth(columnIndex: number): number;
    /**
     * Get visible index by specified column key. If column is not found or is hidden then returns -1.
     *
     * @param columnKey     columnKey
     * @param includeDataSkip     Optional parameter - if set to true include non data columns(like expander column, row selectors column, etc.) in calculations
     */
    getVisibleIndexByKey(columnKey: string, includeDataSkip: boolean): number;
    /**
     * When called the method re-renders the whole grid(also rebinds to the data source) and renders the cols object
     *
     * @param cols an array of column objects
     */
    renderMultiColumnHeader(cols: any[]): void;
    /**
     * Scroll to the specified row or specified position(in pixels)
     *
     * @param scrollerPosition     An identifier of the vertical scroll position. When it is string then it is interpreted as pixels otherwise it is the row number
     */
    virtualScrollTo(scrollerPosition: Object): void;
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     * 1. Remove custom CSS classes that were added.
     * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     * 3. Unbind all events that were bound.
     *
     * @param notToCallDestroy
     */
    destroy(notToCallDestroy: Object): void;
}
interface JQuery {
    data(propertyName: "igGrid"): IgGridMethods;
}
interface JQuery {
    igGrid(methodName: "widget"): void;
    igGrid(methodName: "hasFixedDataSkippedColumns"): boolean;
    igGrid(methodName: "hasFixedColumns"): boolean;
    igGrid(methodName: "fixingDirection"): void;
    igGrid(methodName: "isFixedColumn", colKey: Object): boolean;
    igGrid(methodName: "resizeContainer"): void;
    igGrid(methodName: "id"): string;
    igGrid(methodName: "container"): Element;
    igGrid(methodName: "headersTable"): Element;
    igGrid(methodName: "footersTable"): Element;
    igGrid(methodName: "scrollContainer"): Element;
    igGrid(methodName: "fixedContainer"): Element;
    igGrid(methodName: "fixedBodyContainer"): Element;
    igGrid(methodName: "fixedFooterContainer"): Object;
    igGrid(methodName: "fixedHeaderContainer"): Object;
    igGrid(methodName: "fixedHeadersTable"): Element;
    igGrid(methodName: "fixedFootersTable"): Element;
    igGrid(methodName: "cellAt", x: number, y: number, isFixed: boolean): Element;
    igGrid(methodName: "cellById", rowId: Object, columnKey: string): Element;
    igGrid(methodName: "fixedTable"): Object;
    igGrid(methodName: "immediateChildrenWidgets"): any[];
    igGrid(methodName: "childrenWidgets"): any[];
    igGrid(methodName: "children"): any[];
    igGrid(methodName: "immediateChildren"): any[];
    igGrid(methodName: "rowAt", i: number): Element;
    igGrid(methodName: "rowById", rowId: Object, isFixed?: boolean): Element;
    igGrid(methodName: "fixedRowAt", i: number): Element;
    igGrid(methodName: "fixedRows"): any[];
    igGrid(methodName: "rows"): any[];
    igGrid(methodName: "allFixedRows"): any[];
    igGrid(methodName: "allRows"): any[];
    igGrid(methodName: "columnByKey", key: string): Object;
    igGrid(methodName: "columnByText", text: string): Object;
    igGrid(methodName: "selectedCells"): any[];
    igGrid(methodName: "selectedRows"): any[];
    igGrid(methodName: "selectedCell"): Object;
    igGrid(methodName: "selectedRow"): Object;
    igGrid(methodName: "activeCell"): Object;
    igGrid(methodName: "activeRow"): Object;
    igGrid(methodName: "getCellValue", rowId: Object, colKey: string): Object;
    igGrid(methodName: "getCellText", rowId: Object, colKey: string): string;
    igGrid(methodName: "setColumnTemplate", col: Object, tmpl: string, render?: boolean): void;
    igGrid(methodName: "commit", rowId?: Object): void;
    igGrid(methodName: "rollback", rowId?: Object, updateUI?: boolean): void;
    igGrid(methodName: "findRecordByKey", key: string): Object;
    igGrid(methodName: "getDetachedRecord", t: Object): Object;
    igGrid(methodName: "pendingTransactions"): any[];
    igGrid(methodName: "allTransactions"): any[];
    igGrid(methodName: "transactionsAsString"): string;
    igGrid(methodName: "saveChanges", success: Function, error: Function): void;
    igGrid(methodName: "renderNewRow", rec?: string): void;
    igGrid(methodName: "dataSourceObject", dataSource: Object): void;
    igGrid(methodName: "totalRecordsCount"): number;
    igGrid(methodName: "dataBind", internal: Object): void;
    igGrid(methodName: "moveColumn", column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
    igGrid(methodName: "showColumn", column: Object, callback: Function): void;
    igGrid(methodName: "hideColumn", column: Object, callback: Function): void;
    igGrid(methodName: "getUnboundValues", key: string): Object;
    igGrid(methodName: "setUnboundValues", key: string, values: any[], removeOldValues: Object): void;
    igGrid(methodName: "setUnboundValueByPK", col: string, rowId: string, val: Object, notToRender: Object): void;
    igGrid(methodName: "getUnboundColumnByKey", key: string): Object;
    igGrid(methodName: "hasVerticalScrollbar"): Object;
    igGrid(methodName: "autoSizeColumns"): void;
    igGrid(methodName: "calculateAutoFitColumnWidth", columnIndex: number): number;
    igGrid(methodName: "getVisibleIndexByKey", columnKey: string, includeDataSkip: boolean): number;
    igGrid(methodName: "renderMultiColumnHeader", cols: any[]): void;
    igGrid(methodName: "virtualScrollTo", scrollerPosition: Object): void;
    igGrid(methodName: "destroy", notToCallDestroy: Object): void;
    /**
     */
    igGrid(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igGrid(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
     */
    igGrid(optionLiteral: 'option', optionName: "height"): any;
    /**
     * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * If autoAdjustHeight is set to false, the options.height will be set only on the scrolling container, and all other UI elements such as paging footer / filter row/ headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data  ( > 1000 rows rendered at once, no virtualization enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
     */
    igGrid(optionLiteral: 'option', optionName: "autoAdjustHeight"): boolean;
    /**
     * If autoAdjustHeight is set to false, the options.height will be set only on the scrolling container, and all other UI elements such as paging footer / filter row/ headers will add on top of that, so the total height of the grid will be more than this value - the height of the scroll container (content area) will not be dynamically calculated. Setting this option to false will usually result in a lot better initial rendering performance for large data sets ( > 1000 rows rendered at once, no virtualization enabled), since no reflows will be made by browsers when accessing DOM properties such as offsetHeight.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "autoAdjustHeight", optionValue: boolean): void;
    /**
     * Used for virtualization, this is the average value in pixels (default) that will be used to calculate how many rows and which ones to render as the end user scrolls. Also all rows' height will be automatically equal to this value
     */
    igGrid(optionLiteral: 'option', optionName: "avgRowHeight"): any;
    /**
     * Used for virtualization, this is the average value in pixels (default) that will be used to calculate how many rows and which ones to render as the end user scrolls. Also all rows' height will be automatically equal to this value
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "avgRowHeight", optionValue: any): void;
    /**
     * Used for virtualization, this is the average value in pixels for a column width
     */
    igGrid(optionLiteral: 'option', optionName: "avgColumnWidth"): any;
    /**
     * Used for virtualization, this is the average value in pixels for a column width
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "avgColumnWidth", optionValue: any): void;
    /**
     * Default column width that will be set for all columns.
     */
    igGrid(optionLiteral: 'option', optionName: "defaultColumnWidth"): any;
    /**
     * Default column width that will be set for all columns.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "defaultColumnWidth", optionValue: any): void;
    /**
     * If no columns collection is defined, and autoGenerateColumns is set to true, columns will be inferred from the data source. If autoGenerateColumns is not explicitly set and columns has at least one column defined then autoGenerateColumns is automatically set to false
     */
    igGrid(optionLiteral: 'option', optionName: "autoGenerateColumns"): boolean;
    /**
     * If no columns collection is defined, and autoGenerateColumns is set to true, columns will be inferred from the data source. If autoGenerateColumns is not explicitly set and columns has at least one column defined then autoGenerateColumns is automatically set to false
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "autoGenerateColumns", optionValue: boolean): void;
    /**
     * Enables/disables virtualization. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data.
     */
    igGrid(optionLiteral: 'option', optionName: "virtualization"): boolean;
    /**
     * Enables/disables virtualization. Virtualization can greatly enhance rendering performance. If enabled, the number of actual rendered rows (DOM elements) will be constant and related to the visible viewport of the grid. As the end user scrolls, those DOM elements will be dynamically reused to render the new data.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "virtualization", optionValue: boolean): void;
    /**
     * Determines virtualization mode
     */
    igGrid(optionLiteral: 'option', optionName: "virtualizationMode"): any;
    /**
     * Determines virtualization mode
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "virtualizationMode", optionValue: any): void;
    /**
     * This is an internal option and should not be used.
     */
    igGrid(optionLiteral: 'option', optionName: "requiresDataBinding"): boolean;
    /**
     * This is an internal option and should not be used.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "requiresDataBinding", optionValue: boolean): void;
    /**
     * Option to enable virtualization for rows only (vertical)
     */
    igGrid(optionLiteral: 'option', optionName: "rowVirtualization"): boolean;
    /**
     * Option to enable virtualization for rows only (vertical)
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "rowVirtualization", optionValue: boolean): void;
    /**
     * Option to enable virtualization for columns only (horizontal)
     */
    igGrid(optionLiteral: 'option', optionName: "columnVirtualization"): boolean;
    /**
     * Option to enable virtualization for columns only (horizontal)
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "columnVirtualization", optionValue: boolean): void;
    /**
     * Number of pixels to move the grid when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. The "null" value will assume this is set to avgRowHeight
     */
    igGrid(optionLiteral: 'option', optionName: "virtualizationMouseWheelStep"): number;
    /**
     * Number of pixels to move the grid when virtualization is enabled, and mouse wheel scrolling is performed over the virtual grid area. The "null" value will assume this is set to avgRowHeight
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "virtualizationMouseWheelStep", optionValue: number): void;
    /**
     * If this option is set to true, the height of the grid row will be calculated automatically based on the average row height and the visible virtual records. If no average row height is specified, one will be calculated automatically at runtime.
     */
    igGrid(optionLiteral: 'option', optionName: "adjustVirtualHeights"): boolean;
    /**
     * If this option is set to true, the height of the grid row will be calculated automatically based on the average row height and the visible virtual records. If no average row height is specified, one will be calculated automatically at runtime.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "adjustVirtualHeights", optionValue: boolean): void;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the 14.1 release. The igGrid now uses column templates for individual column templating.
     * jQuery templating style template that will be used to render data records
     */
    igGrid(optionLiteral: 'option', optionName: "rowTemplate"): string;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the 14.1 release. The igGrid now uses column templates for individual column templating.
     * jQuery templating style template that will be used to render data records
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "rowTemplate", optionValue: string): void;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the 12.1 release. The igGrid now uses the custom Infragistics templating engine by default.
     * custom high-performance rendering will be used for rendering by default. jQuery Templating plugin can be used and enabled by setting this option to true. This will allow usage of column / row templates in jQuery Templating style. If virtualization is enabled, it is advised to keep this option to "false", in order to have better scrolling/rendering performance
     */
    igGrid(optionLiteral: 'option', optionName: "jQueryTemplating"): boolean;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the 12.1 release. The igGrid now uses the custom Infragistics templating engine by default.
     * custom high-performance rendering will be used for rendering by default. jQuery Templating plugin can be used and enabled by setting this option to true. This will allow usage of column / row templates in jQuery Templating style. If virtualization is enabled, it is advised to keep this option to "false", in order to have better scrolling/rendering performance
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "jQueryTemplating", optionValue: boolean): void;
    /**
     * The templating engine that will be used to render the grid
     */
    igGrid(optionLiteral: 'option', optionName: "templatingEngine"): any;
    /**
     * The templating engine that will be used to render the grid
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "templatingEngine", optionValue: any): void;
    /**
     * An array of column objects
     */
    igGrid(optionLiteral: 'option', optionName: "columns"): IgGridColumn[];
    /**
     * An array of column objects
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "columns", optionValue: IgGridColumn[]): void;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    igGrid(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * Specifies a remote URL as a data source, from which data will be retrieved using an AJAX call ($.ajax)
     */
    igGrid(optionLiteral: 'option', optionName: "dataSourceUrl"): string;
    /**
     * Specifies a remote URL as a data source, from which data will be retrieved using an AJAX call ($.ajax)
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property
     */
    igGrid(optionLiteral: 'option', optionName: "dataSourceType"): string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped
     */
    igGrid(optionLiteral: 'option', optionName: "responseDataKey"): string;
    /**
     * See $.ig.DataSource. This is basically the property in the responses where data records are held, if the response is wrapped
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;
    /**
     * See $.ig.DataSource. Property in the response specifying the total number of records on the server.
     */
    igGrid(optionLiteral: 'option', optionName: "responseTotalRecCountKey"): string;
    /**
     * See $.ig.DataSource. Property in the response specifying the total number of records on the server.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "responseTotalRecCountKey", optionValue: string): void;
    /**
     * Specifies the HTTP verb to be used to issue the request
     */
    igGrid(optionLiteral: 'option', optionName: "requestType"): string;
    /**
     * Specifies the HTTP verb to be used to issue the request
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     */
    igGrid(optionLiteral: 'option', optionName: "responseContentType"): string;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;
    /**
     * Option controlling the visibility of the grid header
     */
    igGrid(optionLiteral: 'option', optionName: "showHeader"): boolean;
    /**
     * Option controlling the visibility of the grid header
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "showHeader", optionValue: boolean): void;
    /**
     * Option controlling the visibility of the grid footer
     */
    igGrid(optionLiteral: 'option', optionName: "showFooter"): boolean;
    /**
     * Option controlling the visibility of the grid footer
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "showFooter", optionValue: boolean): void;
    /**
     * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If virtualization is enabled, fixedHeaders will always act as if it's true, no matter which value is set
     */
    igGrid(optionLiteral: 'option', optionName: "fixedHeaders"): boolean;
    /**
     * Headers will be fixed if this option is set to true, and only the grid data will be scrollable. If virtualization is enabled, fixedHeaders will always act as if it's true, no matter which value is set
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "fixedHeaders", optionValue: boolean): void;
    /**
     * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If virtualization is enabled, fixedFooters will always act as if it's true, no matter which value is set
     */
    igGrid(optionLiteral: 'option', optionName: "fixedFooters"): boolean;
    /**
     * Footers will be fixed if this option is set to true, and only the grid data will be scrollable. If virtualization is enabled, fixedFooters will always act as if it's true, no matter which value is set
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "fixedFooters", optionValue: boolean): void;
    /**
     * Caption text that will be shown above the grid header
     */
    igGrid(optionLiteral: 'option', optionName: "caption"): string;
    /**
     * Caption text that will be shown above the grid header
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "caption", optionValue: string): void;
    /**
     * A list of grid features definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly
     */
    igGrid(optionLiteral: 'option', optionName: "features"): IgGridFeature[];
    /**
     * A list of grid features definitions: sorting, paging, etc. Each feature goes with its separate options that are documented for the feature accordingly
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "features", optionValue: IgGridFeature[]): void;
    /**
     * Initial tabIndex attribute that will be set on the container element
     */
    igGrid(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Initial tabIndex attribute that will be set on the container element
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the June 2015 service release. Accessibility rendering is always performed by the igGrid as of version 14.2.
     */
    igGrid(optionLiteral: 'option', optionName: "accessibilityRendering"): boolean;
    /**
     * *** IMPORTANT DEPRECATED ***
     * This option has been deprecated as of the June 2015 service release. Accessibility rendering is always performed by the igGrid as of version 14.2.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "accessibilityRendering", optionValue: boolean): void;
    /**
     * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on columns defined
     */
    igGrid(optionLiteral: 'option', optionName: "localSchemaTransform"): boolean;
    /**
     * If this option is set to false, the data to which the grid is bound will be used "as is" with no additional transformations based on columns defined
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "localSchemaTransform", optionValue: boolean): void;
    /**
     * Primary key name of the column containing unique identifiers
     */
    igGrid(optionLiteral: 'option', optionName: "primaryKey"): string;
    /**
     * Primary key name of the column containing unique identifiers
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "primaryKey", optionValue: string): void;
    /**
     * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be done instead of GET
     */
    igGrid(optionLiteral: 'option', optionName: "serializeTransactionLog"): boolean;
    /**
     * If true, the transaction log will always be sent in the request for remote data, by the data source. Also this means that if there are values in the log, a POST will be done instead of GET
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "serializeTransactionLog", optionValue: boolean): void;
    /**
     * Automatically commits the transactions as rows/cells are being edited
     */
    igGrid(optionLiteral: 'option', optionName: "autoCommit"): boolean;
    /**
     * Automatically commits the transactions as rows/cells are being edited
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "autoCommit", optionValue: boolean): void;
    /**
     * If set to true, the following behavior will take place:
     * if a new row is added, and then deleted, there will be no transaction added to the log
     * if a new row is added, edited, then deleted, there will be no transaction added to the log
     * if several edits are made to a row or an individual cell, this should result in a single transaction
     * Note: This option takes effect only when autoCommit is set to false.
     */
    igGrid(optionLiteral: 'option', optionName: "aggregateTransactions"): boolean;
    /**
     * If set to true, the following behavior will take place:
     * if a new row is added, and then deleted, there will be no transaction added to the log
     * if a new row is added, edited, then deleted, there will be no transaction added to the log
     * if several edits are made to a row or an individual cell, this should result in a single transaction
     * Note: This option takes effect only when autoCommit is set to false.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "aggregateTransactions", optionValue: boolean): void;
    /**
     * Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object.date formats only Date columns
     */
    igGrid(optionLiteral: 'option', optionName: "autoFormat"): any;
    /**
     * Sets gets ability to automatically format text in cells for numeric and date columns. The format patterns and rules for numbers and dates are defined in $.ig.regional.defaults object.date formats only Date columns
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "autoFormat", optionValue: any): void;
    /**
     * Gets  ability to render checkboxes and use checkbox editor when dataType of a column is "bool". That option is not available when jQueryTemplating is used.
     */
    igGrid(optionLiteral: 'option', optionName: "renderCheckboxes"): boolean;
    /**
     * Sets ability to render checkboxes and use checkbox editor when dataType of a column is "bool". That option is not available when jQueryTemplating is used.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "renderCheckboxes", optionValue: boolean): void;
    /**
     * URL to which updating requests will be made. If autoCommit is true, updates will be done immediately to the data source, without keeping interim transaction logs
     */
    igGrid(optionLiteral: 'option', optionName: "updateUrl"): string;
    /**
     * URL to which updating requests will be made. If autoCommit is true, updates will be done immediately to the data source, without keeping interim transaction logs
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "updateUrl", optionValue: string): void;
    /**
     * Settings related to REST compliant update routine
     */
    igGrid(optionLiteral: 'option', optionName: "restSettings"): IgGridRestSettings;
    /**
     * Settings related to REST compliant update routine
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "restSettings", optionValue: IgGridRestSettings): void;
    /**
     * Enables/disables rendering of alternating row styles (odd and even rows receive different styling). Note that if a custom jQuery template is set, this has no effect and CSS for the row should be adjusted manually in the template contents.
     */
    igGrid(optionLiteral: 'option', optionName: "alternateRowStyles"): boolean;
    /**
     * Enables/disables rendering of alternating row styles (odd and even rows receive different styling). Note that if a custom jQuery template is set, this has no effect and CSS for the row should be adjusted manually in the template contents.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "alternateRowStyles", optionValue: boolean): void;
    /**
     * If autofitLastColumn is true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the entire grid.
     */
    igGrid(optionLiteral: 'option', optionName: "autofitLastColumn"): boolean;
    /**
     * If autofitLastColumn is true and all columns' widths are specified and their combined width is less than the grid width then the last column width will be automatically adjusted to fill the entire grid.
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "autofitLastColumn", optionValue: boolean): void;
    /**
     * Enables/disables rendering of ui-state-hover classes when the mouse is over a record. this can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content
     */
    igGrid(optionLiteral: 'option', optionName: "enableHoverStyles"): boolean;
    /**
     * Enables/disables rendering of ui-state-hover classes when the mouse is over a record. this can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "enableHoverStyles", optionValue: boolean): void;
    /**
     * Enables formatting of the dates as UTC. Note that this may be desirable when the dates are coming from a backend, encoded as UTC. Otherwise, if dates are created on the client (in the browser), most probably keeping enableUTCDates to false is the desired behavior
     */
    igGrid(optionLiteral: 'option', optionName: "enableUTCDates"): boolean;
    /**
     * Enables formatting of the dates as UTC. Note that this may be desirable when the dates are coming from a backend, encoded as UTC. Otherwise, if dates are created on the client (in the browser), most probably keeping enableUTCDates to false is the desired behavior
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "enableUTCDates", optionValue: boolean): void;
    /**
     * Merge unbound columns values inside datasource when data source is remote. If true then the unbound columns are merged to the datasource at runtime - indeed DataSource is expanded with the new data and this could cause performance issues when dataSource is huge, if false then the unbound data is sent to the client
     */
    igGrid(optionLiteral: 'option', optionName: "mergeUnboundColumns"): boolean;
    /**
     * Merge unbound columns values inside datasource when data source is remote. If true then the unbound columns are merged to the datasource at runtime - indeed DataSource is expanded with the new data and this could cause performance issues when dataSource is huge, if false then the unbound data is sent to the client
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "mergeUnboundColumns", optionValue: boolean): void;
    /**
     * When dataSource is string defines whether to set data source of type JSONP
     */
    igGrid(optionLiteral: 'option', optionName: "jsonpRequest"): boolean;
    /**
     * When dataSource is string defines whether to set data source of type JSONP
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "jsonpRequest", optionValue: boolean): void;
    /**
     * Enables/disables check for resizing grid container
     */
    igGrid(optionLiteral: 'option', optionName: "enableResizeContainerCheck"): boolean;
    /**
     * Enables/disables check for resizing grid container
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "enableResizeContainerCheck", optionValue: boolean): void;
    /**
     * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or to not show gear icon but on click/tap the header cell to show the feature chooser
     */
    igGrid(optionLiteral: 'option', optionName: "featureChooserIconDisplay"): any;
    /**
     * Configures how the feature chooser icon should display on header cells - e.g. to display as gear icon or to not show gear icon but on click/tap the header cell to show the feature chooser
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "featureChooserIconDisplay", optionValue: any): void;
    /**
     * Event fired when a cell is clicked.
     * Function takes arguments evt and ui.
     * Use ui.cellElement to get reference to cell DOM element.
     * Use ui.rowIndex to get row index.
     *             Use ui.rowKey to get the row key.
     * Use ui.colIndex to get column index of the DOM element.
     *             Use ui.colKey to get the column key.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "cellClick"): CellClickEvent;
    /**
     * Event fired when a cell is clicked.
     * Function takes arguments evt and ui.
     * Use ui.cellElement to get reference to cell DOM element.
     * Use ui.rowIndex to get row index.
     *             Use ui.rowKey to get the row key.
     * Use ui.colIndex to get column index of the DOM element.
     *             Use ui.colKey to get the column key.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "cellClick", optionValue: CellClickEvent): void;
    /**
     * Event fired when a cell is right clicked.
     * Function takes arguments evt and ui.
     * Use ui.cellElement to get reference to cell DOM element.
     * Use ui.rowIndex to get row index.
     *             Use ui.rowKey to get the row key.
     * Use ui.colIndex to get column index of the DOM element.
     *             Use ui.colKey to get the column key.
     * Use ui.row to get reference to row DOM element.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "cellRightClick"): CellRightClickEvent;
    /**
     * Event fired when a cell is right clicked.
     * Function takes arguments evt and ui.
     * Use ui.cellElement to get reference to cell DOM element.
     * Use ui.rowIndex to get row index.
     *             Use ui.rowKey to get the row key.
     * Use ui.colIndex to get column index of the DOM element.
     *             Use ui.colKey to get the column key.
     * Use ui.row to get reference to row DOM element.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "cellRightClick", optionValue: CellRightClickEvent): void;
    /**
     * Event fired before data binding takes place.
     * Return false in order to cancel data binding.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.dataSource to get reference to the igDataSource object.
     */
    igGrid(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;
    /**
     * Event fired before data binding takes place.
     * Return false in order to cancel data binding.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.dataSource to get reference to the igDataSource object.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;
    /**
     * Event fired after data binding is complete.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.dataSource to get reference to the igDataSource object.
     */
    igGrid(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;
    /**
     * Event fired after data binding is complete.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.dataSource to get reference to the igDataSource object.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;
    /**
     * Event fired before the grid starts rendering (all contents).
     * This event is fired only when the grid is being initialized.
     * It will not be fired if the grid is rebound to its data
     * (for example, when calling the dataBind() API method
     * or when changing the page size (when paging is enabled)).
     *
     * Return false in order to cancel grid rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;
    /**
     * Event fired before the grid starts rendering (all contents).
     * This event is fired only when the grid is being initialized.
     * It will not be fired if the grid is rebound to its data
     * (for example, when calling the dataBind() API method
     * or when changing the page size (when paging is enabled)).
     *
     * Return false in order to cancel grid rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;
    /**
     * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
     * This event is fired only when the grid is being initialized.
     * It will not be fired if the grid is rebound to its data
     * (for example, when calling the dataBind() API method
     * or when changing the page size (when paging is enabled)).
     *
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
     * This event is fired only when the grid is being initialized.
     * It will not be fired if the grid is rebound to its data
     * (for example, when calling the dataBind() API method
     * or when changing the page size (when paging is enabled)).
     *
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Event fired before the TBODY holding the data records starts its rendering.
     * Return false in order to cancel data records rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "dataRendering"): DataRenderingEvent;
    /**
     * Event fired before the TBODY holding the data records starts its rendering.
     * Return false in order to cancel data records rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "dataRendering", optionValue: DataRenderingEvent): void;
    /**
     * Event fired after all of the data records in the grid table body have been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "dataRendered"): DataRenderedEvent;
    /**
     * Event fired after all of the data records in the grid table body have been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "dataRendered", optionValue: DataRenderedEvent): void;
    /**
     * Event fired before the header starts its rendering.
     * Return false in order to cancel header rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "headerRendering"): HeaderRenderingEvent;
    /**
     * Event fired before the header starts its rendering.
     * Return false in order to cancel header rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "headerRendering", optionValue: HeaderRenderingEvent): void;
    /**
     * Event fired after the header has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.table to get reference to headers table DOM element.
     */
    igGrid(optionLiteral: 'option', optionName: "headerRendered"): HeaderRenderedEvent;
    /**
     * Event fired after the header has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.table to get reference to headers table DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "headerRendered", optionValue: HeaderRenderedEvent): void;
    /**
     * Event fired before the footer starts its rendering.
     * Return false in order to cancel footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "footerRendering"): FooterRenderingEvent;
    /**
     * Event fired before the footer starts its rendering.
     * Return false in order to cancel footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "footerRendering", optionValue: FooterRenderingEvent): void;
    /**
     * Event fired after the footer has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.table to get reference to footers table DOM element.
     */
    igGrid(optionLiteral: 'option', optionName: "footerRendered"): FooterRenderedEvent;
    /**
     * Event fired after the footer has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.table to get reference to footers table DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "footerRendered", optionValue: FooterRenderedEvent): void;
    /**
     * Event fired after every TH in the grid header has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.th to get reference to header cell DOM element.
     */
    igGrid(optionLiteral: 'option', optionName: "headerCellRendered"): HeaderCellRenderedEvent;
    /**
     * Event fired after every TH in the grid header has been rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.th to get reference to header cell DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "headerCellRendered", optionValue: HeaderCellRenderedEvent): void;
    /**
     * Event fired before actual data rows (TRs) are rendered.
     * Return false in order to cancel rows rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.tbody to get reference to grid's table body.
     */
    igGrid(optionLiteral: 'option', optionName: "rowsRendering"): RowsRenderingEvent;
    /**
     * Event fired before actual data rows (TRs) are rendered.
     * Return false in order to cancel rows rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.tbody to get reference to grid's table body.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "rowsRendering", optionValue: RowsRenderingEvent): void;
    /**
     * Event fired after data rows are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.tbody to get reference to grid's table body.
     */
    igGrid(optionLiteral: 'option', optionName: "rowsRendered"): RowsRenderedEvent;
    /**
     * Event fired after data rows are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.tbody to get reference to grid's table body.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "rowsRendered", optionValue: RowsRenderedEvent): void;
    /**
     * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.schema to get reference to data source schema.
     * Use ui.dataSource to get reference to data source.
     */
    igGrid(optionLiteral: 'option', optionName: "schemaGenerated"): SchemaGeneratedEvent;
    /**
     * Event fired after $.ig.DataSource schema has been generated, in case it needs to be modified.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     * Use ui.schema to get reference to data source schema.
     * Use ui.dataSource to get reference to data source.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "schemaGenerated", optionValue: SchemaGeneratedEvent): void;
    /**
     * Event fired after the columns colection has been modified(e.g. a column is hidden)
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     */
    igGrid(optionLiteral: 'option', optionName: "columnsCollectionModified"): ColumnsCollectionModifiedEvent;
    /**
     * Event fired after the columns colection has been modified(e.g. a column is hidden)
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "columnsCollectionModified", optionValue: ColumnsCollectionModifiedEvent): void;
    /**
     * Event fired if there is an error in the request, when the grid is doing a remote operation,
     * such as data binding, paging, sorting, etc.
     * use ui.owner to get a reference to the grid
     * use ui.message to get the processed error message sent by the server
     * use ui.response to get reference to the whole response object
     */
    igGrid(optionLiteral: 'option', optionName: "requestError"): RequestErrorEvent;
    /**
     * Event fired if there is an error in the request, when the grid is doing a remote operation,
     * such as data binding, paging, sorting, etc.
     * use ui.owner to get a reference to the grid
     * use ui.message to get the processed error message sent by the server
     * use ui.response to get reference to the whole response object
     *
     * @optionValue Define event handler function.
     */
    igGrid(optionLiteral: 'option', optionName: "requestError", optionValue: RequestErrorEvent): void;
    /**
     * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
     * use ui.owner to get a reference to the grid
     */
    igGrid(optionLiteral: 'option', optionName: "created"): CreatedEvent;
    /**
     * Fired when the grid is created and the initial structure is rendered (this doesn't necessarily imply the data will be there if the data source is remote)
     * use ui.owner to get a reference to the grid
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "created", optionValue: CreatedEvent): void;
    /**
     * Fired when the grid is destroyed
     * use ui.owner to get a reference to the grid
     */
    igGrid(optionLiteral: 'option', optionName: "destroyed"): DestroyedEvent;
    /**
     * Fired when the grid is destroyed
     * use ui.owner to get a reference to the grid
     *
     * @optionValue New value to be set.
     */
    igGrid(optionLiteral: 'option', optionName: "destroyed", optionValue: DestroyedEvent): void;
    igGrid(options: IgGrid): JQuery;
    igGrid(optionLiteral: 'option', optionName: string): any;
    igGrid(optionLiteral: 'option', options: IgGrid): JQuery;
    igGrid(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGrid(methodName: string, ...methodParams: any[]): any;
}
interface IgGridGroupByGroupedColumns {
    /**
     * Key of the column that's grouped
     */
    key?: string;
    /**
     * sort order - ascending or descending
     */
    dir?: any;
    /**
     * Key of the columnLayout, if the grid is hierarchical
     */
    layout?: string;
    /**
     * Column object for the column that is grouped
     */
    col?: any;
    /**
     * Option for IgGridGroupByGroupedColumns
     */
    [optionName: string]: any;
}
interface IgGridGroupBySummarySettings {
    /**
     * Specifies the delimiter for multiple summaries, in case they are rendered inline in the grouped row
     */
    multiSummaryDelimiter?: string;
    /**
     * By default, two digits are shown after the decimal place
     */
    summaryFormat?: string;
    /**
     * Option for IgGridGroupBySummarySettings
     */
    [optionName: string]: any;
}
interface IgGridGroupByColumnSettingsSummaries {
    /**
     * the summary function
     *
     * Valid values:
     * "avg" average
     * "min" minimal
     * "max" maximal
     * "sum" sum
     * "count" count
     * "custom" custom summary
     */
    summaryFunction?: any;
    /**
     * Specifies the Summary text that will be shown before the value
     */
    text?: any;
    /**
     * Specifies a custom summary function, which is called for each group, it should return the custom summary result. It takes as arguments object with properties: dataRecords - array of grouped(for the data view) data records, array - array of cell values for the specified column, key - key of the grouped column, allGroupData - array of data records for the group(for the whole data source - not only for the data view)
     */
    customSummary?: any;
    /**
     * Option for IgGridGroupByColumnSettingsSummaries
     */
    [optionName: string]: any;
}
interface IgGridGroupByColumnSettings {
    /**
     * Enables/disables a column to participate in grouping. By default all columns can be grouped
     */
    allowGrouping?: boolean;
    /**
     * Specifies if a column should be grouped by default
     */
    isGroupBy?: boolean;
    /**
     * Specifies a custom group by function, which accepts the column setting, the first and the second value to compare and returns bool
     */
    groupComparerFunction?: Function;
    /**
     * Reference to a function which will be used for formatting the cell values. The function should accept a value from the grouped column and return the new formatted value in the label of the row.
     */
    groupLabelFormatter?: Function;
    /**
     * specifies the sort order - ascending or descending
     */
    dir?: any;
    /**
     * A list of aggregation functions to calculate on the column values for each group.
     */
    summaries?: IgGridGroupByColumnSettingsSummaries;
    /**
     * Option for IgGridGroupByColumnSettings
     */
    [optionName: string]: any;
}
interface GroupedColumnsChangingEvent {
    (event: Event, ui: GroupedColumnsChangingEventUIParam): void;
}
interface GroupedColumnsChangingEventUIParam {
    /**
     * Used to access the groupby widget object
     */
    owner?: any;
    /**
     * Used to get a reference to the current groupedColumns.
     */
    groupedColumns?: any;
    /**
     * Used to get an object of the new grouped columns that should be applied.(it is set ONLY if called from modal dialog)
     */
    newGroupedColumns?: any;
    /**
     * Used to get a reference to the current column's key that's being grouped(not set if called from modal dialog)
     */
    key?: any;
    /**
     * Used to get a reference to the current layout object, if any(not set if called from modal dialog)
     */
    layout?: any;
    /**
     * Used to get a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog)
     */
    grid?: any;
    /**
     * Used to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
     */
    triggeredBy?: any;
}
interface GroupedColumnsChangedEvent {
    (event: Event, ui: GroupedColumnsChangedEventUIParam): void;
}
interface GroupedColumnsChangedEventUIParam {
    /**
     * Used to access the groupby widget object
     */
    owner?: any;
    /**
     * Used to get a reference to the current groupedColumns
     */
    groupedColumns?: any;
    /**
     * Used to get a reference to the current column's key that's being grouped
     */
    key?: any;
    /**
     * Used to get a reference to the current layout object, if any
     */
    layout?: any;
    /**
     * Used to get a reference to the current child grid element, in case it's an hierarchical grid
     */
    grid?: any;
    /**
     * Used to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
     */
    triggeredBy?: any;
}
interface ModalDialogMovingEvent {
    (event: Event, ui: ModalDialogMovingEventUIParam): void;
}
interface ModalDialogMovingEventUIParam {
    /**
     * Used to get the reference to the igGridGroupBy widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    modalDialogElement?: any;
    /**
     * Used to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     */
    originalPosition?: any;
    /**
     * Used to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     */
    position?: any;
}
interface ModalDialogClosingEvent {
    (event: Event, ui: ModalDialogClosingEventUIParam): void;
}
interface ModalDialogClosingEventUIParam {
    /**
     * Used to get the reference to the igGridGroupBy widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
}
interface ModalDialogClosedEvent {
    (event: Event, ui: ModalDialogClosedEventUIParam): void;
}
interface ModalDialogClosedEventUIParam {
    /**
     * Used to get the reference to the igGridGroupBy widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
}
interface ModalDialogOpeningEvent {
    (event: Event, ui: ModalDialogOpeningEventUIParam): void;
}
interface ModalDialogOpeningEventUIParam {
    /**
     * Used to get the reference to the igGridGroupBy widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
}
interface ModalDialogOpenedEvent {
    (event: Event, ui: ModalDialogOpenedEventUIParam): void;
}
interface ModalDialogOpenedEventUIParam {
    /**
     * Used to get the reference to the igGridGroupBy widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
}
interface ModalDialogContentsRenderingEvent {
    (event: Event, ui: ModalDialogContentsRenderingEventUIParam): void;
}
interface ModalDialogContentsRenderingEventUIParam {
    /**
     * Used to get the reference to the igGridGroupby widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
}
interface ModalDialogContentsRenderedEvent {
    (event: Event, ui: ModalDialogContentsRenderedEventUIParam): void;
}
interface ModalDialogContentsRenderedEventUIParam {
    /**
     * Used to get the reference to the igGridGroupBy widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
}
interface ModalDialogButtonApplyClickEvent {
    (event: Event, ui: ModalDialogButtonApplyClickEventUIParam): void;
}
interface ModalDialogButtonApplyClickEventUIParam {
    /**
     * Used to get the reference to the igGridGroupby widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
    /**
     * Used to get the array of grouped columns
     */
    groupedColumns?: any;
    /**
     * Used to get array of column layouts
     */
    groupedColumnLayouts?: any;
    /**
     * Used to get array of sorted columns
     */
    sortingExpr?: any;
}
interface ModalDialogButtonResetClickEvent {
    (event: Event, ui: ModalDialogButtonResetClickEventUIParam): void;
}
interface ModalDialogButtonResetClickEventUIParam {
    /**
     * Used to get the reference to the igGridGroupby widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
}
interface ModalDialogGroupingColumnEvent {
    (event: Event, ui: ModalDialogGroupingColumnEventUIParam): void;
}
interface ModalDialogGroupingColumnEventUIParam {
    /**
     * Used to get the reference to the igGridGroupby widget.
     */
    owner?: any;
    /**
     * Used to get the key of the column to be grouped.
     */
    key?: any;
    /**
     * Used to get the layout of the columns
     */
    layout?: any;
}
interface ModalDialogGroupColumnEvent {
    (event: Event, ui: ModalDialogGroupColumnEventUIParam): void;
}
interface ModalDialogGroupColumnEventUIParam {
    /**
     * Used to get the reference to the igGridGroupby widget.
     */
    owner?: any;
    /**
     * Used to get the key of the column to be grouped.
     */
    key?: any;
    /**
     * Used to get a reference to the current groupedColumns
     */
    groupedColumns?: any;
    /**
     * Used to get the layout of the columns
     */
    layout?: any;
}
interface ModalDialogUngroupingColumnEvent {
    (event: Event, ui: ModalDialogUngroupingColumnEventUIParam): void;
}
interface ModalDialogUngroupingColumnEventUIParam {
    /**
     * Used to get the reference to the igGridGroupby widget.
     */
    owner?: any;
    /**
     * Used to get the key of the column to be grouped.
     */
    key?: any;
    /**
     * Used to get the layout of the columns
     */
    layout?: any;
}
interface ModalDialogUngroupColumnEvent {
    (event: Event, ui: ModalDialogUngroupColumnEventUIParam): void;
}
interface ModalDialogUngroupColumnEventUIParam {
    /**
     * Used to get the reference to the igGridGroupby widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the current groupedColumns
     */
    groupedColumns?: any;
    /**
     * Used to get the key of the column to be grouped.
     */
    key?: any;
    /**
     * Used to get the layout of the columns
     */
    layout?: any;
}
interface ModalDialogSortGroupedColumnEvent {
    (event: Event, ui: ModalDialogSortGroupedColumnEventUIParam): void;
}
interface ModalDialogSortGroupedColumnEventUIParam {
    /**
     * Used to get the reference to the igGridGroupby widget.
     */
    owner?: any;
    /**
     * Used to get the key of the column to be grouped.
     */
    key?: any;
    /**
     * Used to get the layout of the columns
     */
    layout?: any;
    /**
     * Used to get whether column should be sorted ascending or descending
     */
    isAsc?: any;
}
interface IgGridGroupBy {
    /**
     * Sets the place in the grid where the groupBy area will be
     *
     * Valid values:
     * "top" the GroupBy area will be rendered above the grid headers
     * "hidden" the GroupBy area will not be rendered
     * "bottom" the GroupBy area will be rendered below the grid footer (and above the pager, if any)
     */
    groupByAreaVisibility?: any;
    /**
     * Specifies if after grouping, the grouped rows will be initially expanded or collapsed. This option can be set only at initialization.
     */
    initialExpand?: boolean;
    /**
     * Text that will be shown in the GroupBy area when there are no grouped columns
     */
    emptyGroupByAreaContent?: string;
    /**
     * Text of link(on click shows modal dialog with columns which could be group/ungroup by) that will be shown in the GroupBy area when there are no grouped columns
     */
    emptyGroupByAreaContentSelectColumns?: string;
    /**
     * Specifies if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
     */
    expansionIndicatorVisibility?: boolean;
    /**
     * By default, the column width for the header is taken. If this is specified it's used for all headers.
     */
    groupByLabelWidth?: number;
    /**
     * Specifies the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
     */
    labelDragHelperOpacity?: number;
    /**
     * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
     */
    indentation?: number;
    /**
     * default sort order - asc or desc
     */
    defaultSortingDirection?: any;
    /**
     * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
     */
    groupedColumns?: IgGridGroupByGroupedColumns;
    /**
     * Specifies a key to get group by data from the response. This option can be set only at initialization.
     */
    resultResponseKey?: string;
    /**
     * Template for the grouped row's text, follows jQuery's templating guidelines. Variables available for the template are ${key}, ${val} and ${count}.
     */
    groupedRowTextTemplate?: string;
    /**
     * Specifies whether the groupBy operation takes place locally on client-side or remotely on server-side.
     *
     * Valid values:
     * "local" Execute the groupBy operation locally on client-side.
     * "remote" Execute the groupBy operation by a request to the server.
     */
    type?: any;
    /**
     * URL param name which specifies how groupBy expressions will be encoded in the URL. The OData conventions for sorting params are used if the grid is bound to an OData service. ex: ?groupby(col1)=asc
     */
    groupByUrlKey?: string;
    /**
     * URL param value for ascending type of grouping. The OData conventions for sorting params are used if the grid is bound to an OData service. Example: ?groupBy(col1)=asc
     */
    groupByUrlKeyAscValue?: string;
    /**
     * URL param value for descending type of grouping. The OData conventions for sorting params are used if the grid is bound to an OData service. Example: ?groupBy(col1)=desc
     */
    groupByUrlKeyDescValue?: string;
    /**
     * Specifies the settings for GroupBy summaries
     */
    summarySettings?: IgGridGroupBySummarySettings;
    /**
     * Get sets settings for individual columns such as whether the grid is grouped by that column or grouping is allowed for that column.
     */
    columnSettings?: IgGridGroupByColumnSettings;
    /**
     * Specifies the expand indicator tooltip for grouped rows
     */
    expandTooltip?: string;
    /**
     * Specifies the collapse indicator tooltip for grouped rows
     */
    collapseTooltip?: string;
    /**
     * Specifies the tooltip for the remove button
     */
    removeButtonTooltip?: string;
    /**
     * Specifies the text in feature chooser
     */
    featureChooserText?: string;
    /**
     * Specifies hide text in feature chooser
     */
    featureChooserTextHide?: string;
    /**
     * Specifies whether on click in groupby dialog to be immediately grouped/ungrouped columns. When it is false then it is shown Apply button in the groupby dialog
     */
    modalDialogGroupByOnClick?: boolean;
    /**
     * Specifies the text of GroupBy button in the groupby dialog
     */
    modalDialogGroupByButtonText?: string;
    /**
     * Specifies caption for each descending sorted column in groupby dialog
     */
    modalDialogCaptionButtonDesc?: string;
    /**
     * Specifies caption for each ascending sorted column in groupby dialog
     */
    modalDialogCaptionButtonAsc?: string;
    /**
     * Specifies caption button ungroup in groupby dialog
     */
    modalDialogCaptionButtonUngroup?: string;
    /**
     * Specifies caption text for groupby dialog
     */
    modalDialogCaptionText?: string;
    /**
     * Specifies label for layouts dropdown in groupby dialog
     */
    modalDialogDropDownLabel?: string;
    /**
     * Specifies name of the root layout which is shown layouts tree dialog
     */
    modalDialogRootLevelHierarchicalGrid?: string;
    /**
     * Specifies caption of layouts dropdown button in groupby dialog
     */
    modalDialogDropDownButtonCaption?: string;
    /**
     * Specifies label for clear all button in groupby dialog
     */
    modalDialogClearAllButtonLabel?: string;
    /**
     * Specifies caption for button which opens groupby dialog
     */
    emptyGroupByAreaContentSelectColumnsCaption?: string;
    /**
     * Specifies width of layouts dropdown in groupby dialog
     */
    modalDialogDropDownWidth?: number;
    /**
     * Specifies height of layouts dropdown in groupby dialog
     */
    modalDialogDropDownAreaWidth?: number;
    /**
     * Specifies time in milliseconds for animation duration to show/hide modal dialog
     */
    modalDialogAnimationDuration?: number;
    /**
     * Specifies width of groupby dialog
     */
    modalDialogWidth?: number;
    /**
     * Specifies height of groupby dialog
     */
    modalDialogHeight?: number;
    /**
     * Specifies text of button which apply changes in modal dialog
     */
    modalDialogButtonApplyText?: string;
    /**
     * Specifies text of button which cancel changes in modal dialog
     */
    modalDialogButtonCancelText?: string;
    /**
     * Format grouped column using the formatter set in igGrid.columns[i].formatter or igGrid format.
     */
    useGridColumnFormatter?: boolean;
    /**
     * Enables / disables groupby persistence between states
     */
    persist?: boolean;
    /**
     * Controls containment behavior for the groupby dialog.
     * owner  The groupby dialog will be draggable only in the grid area
     * window  The groupby dialog will be draggable in the whole window area
     */
    groupByDialogContainment?: string;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
     * use args.owner in order to access the groupby widget object
     * use args.owner.grid to access the grid widget option
     * use args.groupedColumns to get a reference to the current groupedColumns.
     * use args.newGroupedColumns to get an object of the new grouped columns that should be applied.(it is set ONLY if called from modal dialog)
     * use args.key to get a reference to the current column's key that's being grouped(not set if called from modal dialog)
     * use args.layout to get a reference to the current layout object, if any(not set if called from modal dialog)
     * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog)
     * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
     */
    groupedColumnsChanging?: GroupedColumnsChangingEvent;
    /**
     * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from groupby modal dialog but key, layout and grid are not set
     * use args.owner in order to access the groupby widget object
     * use args.owner.grid to access the grid widget option
     * use args.groupedColumns to get a reference to the current groupedColumns
     * use args.key to get a reference to the current column's key that's being grouped
     * use args.layout to get a reference to the current layout object, if any
     * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid
     * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
     */
    groupedColumnsChanged?: GroupedColumnsChangedEvent;
    /**
     * Event fired every time the groupby dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     */
    modalDialogMoving?: ModalDialogMovingEvent;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogClosing?: ModalDialogClosingEvent;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogClosed?: ModalDialogClosedEvent;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogOpening?: ModalDialogOpeningEvent;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogOpened?: ModalDialogOpenedEvent;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogContentsRendering?: ModalDialogContentsRenderingEvent;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogContentsRendered?: ModalDialogContentsRenderedEvent;
    /**
     * Event fired when the button is Apply is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.groupedColumns to get the array of grouped columns
     * Use ui.groupedColumnLayouts to get array of column layouts
     * Use ui.sortingExpr to get array of sorted columns
     */
    modalDialogButtonApplyClick?: ModalDialogButtonApplyClickEvent;
    /**
     * Event fired when reset button is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogButtonResetClick?: ModalDialogButtonResetClickEvent;
    /**
     * Event fired when column in modal dialog is clicked to be grouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     */
    modalDialogGroupingColumn?: ModalDialogGroupingColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be grouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use args.groupedColumns to get a reference to the current groupedColumns
     * Use ui.layout to get the layout of the columns
     */
    modalDialogGroupColumn?: ModalDialogGroupColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     */
    modalDialogUngroupingColumn?: ModalDialogUngroupingColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use args.groupedColumns to get a reference to the current groupedColumns
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     */
    modalDialogUngroupColumn?: ModalDialogUngroupColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     * Use ui.isAsc to get whether column should be sorted ascending or descending
     */
    modalDialogSortGroupedColumn?: ModalDialogSortGroupedColumnEvent;
    /**
     * Option for igGridGroupBy
     */
    [optionName: string]: any;
}
interface IgGridGroupByMethods {
    /**
     * Open groupby modal dialog
     */
    openGroupByDialog(): void;
    /**
     * Close groupby modal dialog
     */
    closeGroupByDialog(): void;
    /**
     * Render groupby modal dialog and its content
     */
    renderGroupByModalDialog(): void;
    /**
     * Open layouts dropdown
     */
    openDropDown(): void;
    /**
     * Close layouts dropdown
     */
    closeDropDown(): void;
    /**
     * Check whether column with specified key and layout is grouped
     *
     * @param key    key of the column
     * @param layout    layout name
     */
    checkColumnIsGrouped(key: string, layout: string): void;
    /**
     * Get grouped data by value for the specific column. NOTE: Before calling this function the data(that is passed as an argument) should be sorted by colKey.
     *
     * @param data    key of the column for which to be applied grouping
     * @param colKey    value of the column by which to be applied grouping
     * @param idval    groupby column setting(taken from private function _settingFromKey).
     * @param setting
     */
    getGroupedData(data: any[], colKey: string, idval: Object, setting: Object): any[];
    /**
     * Adds a column to the group by columns list, executes the group by operation and updates the view.
     */
    groupByColumns(): Object;
    /**
     * Groups by a column
     *
     * @param key    Column Key - group by the column with the specified key
     * @param layout    layout is an optional parameter. if set it means the grouped column is not in the root level but is a child layout column
     * @param sortingDirection    if not set it is taken from option defaultSortingDirection
     */
    groupByColumn(key: string, layout?: string, sortingDirection?: Object): void;
    /**
     * Removes the specified column from the group by columns list, executes the group by operation and updates the view.
     *
     * @param key    Column Key - ungroup by the column with the specified key
     * @param layout    Layout is an optional parameter. If set it means the grouped column is not in the root level but is a child layout column.
     */
    ungroupByColumn(key: string, layout?: string): void;
    /**
     * Clears the group by columns list and updates the view.
     */
    ungroupAll(): void;
    /**
     * Destroys the group by feature object.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igGridGroupBy"): IgGridGroupByMethods;
}
interface JQuery {
    igGridGroupBy(methodName: "openGroupByDialog"): void;
    igGridGroupBy(methodName: "closeGroupByDialog"): void;
    igGridGroupBy(methodName: "renderGroupByModalDialog"): void;
    igGridGroupBy(methodName: "openDropDown"): void;
    igGridGroupBy(methodName: "closeDropDown"): void;
    igGridGroupBy(methodName: "checkColumnIsGrouped", key: string, layout: string): void;
    igGridGroupBy(methodName: "getGroupedData", data: any[], colKey: string, idval: Object, setting: Object): any[];
    igGridGroupBy(methodName: "groupByColumns"): Object;
    igGridGroupBy(methodName: "groupByColumn", key: string, layout?: string, sortingDirection?: Object): void;
    igGridGroupBy(methodName: "ungroupByColumn", key: string, layout?: string): void;
    igGridGroupBy(methodName: "ungroupAll"): void;
    igGridGroupBy(methodName: "destroy"): void;
    /**
     * Sets the place in the grid where the groupBy area will be
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByAreaVisibility"): any;
    /**
     * Sets the place in the grid where the groupBy area will be
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByAreaVisibility", optionValue: any): void;
    /**
     * Gets if after grouping, the grouped rows will be initially expanded or collapsed. This option can be set only at initialization.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "initialExpand"): boolean;
    /**
     * Sets if after grouping, the grouped rows will be initially expanded or collapsed. This option can be set only at initialization.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "initialExpand", optionValue: boolean): void;
    /**
     * Text that will be shown in the GroupBy area when there are no grouped columns
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "emptyGroupByAreaContent"): string;
    /**
     * Text that will be shown in the GroupBy area when there are no grouped columns
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "emptyGroupByAreaContent", optionValue: string): void;
    /**
     * Text of link(on click shows modal dialog with columns which could be group/ungroup by) that will be shown in the GroupBy area when there are no grouped columns
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "emptyGroupByAreaContentSelectColumns"): string;
    /**
     * Text of link(on click shows modal dialog with columns which could be group/ungroup by) that will be shown in the GroupBy area when there are no grouped columns
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "emptyGroupByAreaContentSelectColumns", optionValue: string): void;
    /**
     * Gets if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "expansionIndicatorVisibility"): boolean;
    /**
     * Sets if grouped rows will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "expansionIndicatorVisibility", optionValue: boolean): void;
    /**
     * By default, the column width for the header is taken. If this is specified it's used for all headers.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByLabelWidth"): number;
    /**
     * By default, the column width for the header is taken. If this is specified it's used for all headers.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByLabelWidth", optionValue: number): void;
    /**
     * Gets the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "labelDragHelperOpacity"): number;
    /**
     * Sets the opacity of the drag markup, while a column header is being dragged. The value must be between 0 and 1.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "labelDragHelperOpacity", optionValue: number): void;
    /**
     * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "indentation"): number;
    /**
     * Specifies the indentation for a grouped row. If several columns are grouped, the total indentation will grow
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "indentation", optionValue: number): void;
    /**
     * Default sort order - asc or desc
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "defaultSortingDirection"): any;
    /**
     * Default sort order - asc or desc
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "defaultSortingDirection", optionValue: any): void;
    /**
     * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumns"): IgGridGroupByGroupedColumns;
    /**
     * Returns the list of currently grouped columns. The option is read-only and cannot be set at initialization or at runtime.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumns", optionValue: IgGridGroupByGroupedColumns): void;
    /**
     * Gets a key to get group by data from the response. This option can be set only at initialization.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "resultResponseKey"): string;
    /**
     * Sets a key to get group by data from the response. This option can be set only at initialization.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "resultResponseKey", optionValue: string): void;
    /**
     * Template for the grouped row's text, follows jQuery's templating guidelines. Variables available for the template are ${key}, ${val} and ${count}.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupedRowTextTemplate"): string;
    /**
     * Template for the grouped row's text, follows jQuery's templating guidelines. Variables available for the template are ${key}, ${val} and ${count}.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupedRowTextTemplate", optionValue: string): void;
    /**
     * Gets whether the groupBy operation takes place locally on client-side or remotely on server-side.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "type"): any;
    /**
     * Sets whether the groupBy operation takes place locally on client-side or remotely on server-side.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * URL param name which specifies how groupBy expressions will be encoded in the URL. The OData conventions for sorting params are used if the grid is bound to an OData service. ex: ?groupby(col1)=asc
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKey"): string;
    /**
     * URL param name which specifies how groupBy expressions will be encoded in the URL. The OData conventions for sorting params are used if the grid is bound to an OData service. ex: ?groupby(col1)=asc
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKey", optionValue: string): void;
    /**
     * URL param value for ascending type of grouping. The OData conventions for sorting params are used if the grid is bound to an OData service. Example: ?groupBy(col1)=asc
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKeyAscValue"): string;
    /**
     * URL param value for ascending type of grouping. The OData conventions for sorting params are used if the grid is bound to an OData service. Example: ?groupBy(col1)=asc
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKeyAscValue", optionValue: string): void;
    /**
     * URL param value for descending type of grouping. The OData conventions for sorting params are used if the grid is bound to an OData service. Example: ?groupBy(col1)=desc
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKeyDescValue"): string;
    /**
     * URL param value for descending type of grouping. The OData conventions for sorting params are used if the grid is bound to an OData service. Example: ?groupBy(col1)=desc
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByUrlKeyDescValue", optionValue: string): void;
    /**
     * Specifies the settings for GroupBy summaries
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "summarySettings"): IgGridGroupBySummarySettings;
    /**
     * Specifies the settings for GroupBy summaries
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "summarySettings", optionValue: IgGridGroupBySummarySettings): void;
    /**
     * Get  settings for individual columns such as whether the grid is grouped by that column or grouping is allowed for that column.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "columnSettings"): IgGridGroupByColumnSettings;
    /**
     * Get sets settings for individual columns such as whether the grid is grouped by that column or grouping is allowed for that column.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridGroupByColumnSettings): void;
    /**
     * Specifies the expand indicator tooltip for grouped rows
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "expandTooltip"): string;
    /**
     * Specifies the expand indicator tooltip for grouped rows
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "expandTooltip", optionValue: string): void;
    /**
     * Specifies the collapse indicator tooltip for grouped rows
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "collapseTooltip"): string;
    /**
     * Specifies the collapse indicator tooltip for grouped rows
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "collapseTooltip", optionValue: string): void;
    /**
     * Specifies the tooltip for the remove button
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "removeButtonTooltip"): string;
    /**
     * Specifies the tooltip for the remove button
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "removeButtonTooltip", optionValue: string): void;
    /**
     * Specifies the text in feature chooser
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "featureChooserText"): string;
    /**
     * Specifies the text in feature chooser
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;
    /**
     * Specifies hide text in feature chooser
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "featureChooserTextHide"): string;
    /**
     * Specifies hide text in feature chooser
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "featureChooserTextHide", optionValue: string): void;
    /**
     * Specifies whether on click in groupby dialog to be immediately grouped/ungrouped columns. When it is false then it is shown Apply button in the groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupByOnClick"): boolean;
    /**
     * Specifies whether on click in groupby dialog to be immediately grouped/ungrouped columns. When it is false then it is shown Apply button in the groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupByOnClick", optionValue: boolean): void;
    /**
     * Specifies the text of GroupBy button in the groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupByButtonText"): string;
    /**
     * Specifies the text of GroupBy button in the groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupByButtonText", optionValue: string): void;
    /**
     * Gets caption for each descending sorted column in groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc"): string;
    /**
     * Sets caption for each descending sorted column in groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc", optionValue: string): void;
    /**
     * Gets caption for each ascending sorted column in groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc"): string;
    /**
     * Sets caption for each ascending sorted column in groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc", optionValue: string): void;
    /**
     * Gets caption button ungroup in groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUngroup"): string;
    /**
     * Sets caption button ungroup in groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUngroup", optionValue: string): void;
    /**
     * Gets caption text for groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionText"): string;
    /**
     * Sets caption text for groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogCaptionText", optionValue: string): void;
    /**
     * Gets label for layouts dropdown in groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownLabel"): string;
    /**
     * Sets label for layouts dropdown in groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownLabel", optionValue: string): void;
    /**
     * Gets name of the root layout which is shown layouts tree dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogRootLevelHierarchicalGrid"): string;
    /**
     * Sets name of the root layout which is shown layouts tree dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogRootLevelHierarchicalGrid", optionValue: string): void;
    /**
     * Gets caption of layouts dropdown button in groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownButtonCaption"): string;
    /**
     * Sets caption of layouts dropdown button in groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownButtonCaption", optionValue: string): void;
    /**
     * Gets label for clear all button in groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClearAllButtonLabel"): string;
    /**
     * Sets label for clear all button in groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClearAllButtonLabel", optionValue: string): void;
    /**
     * Gets caption for button which opens groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "emptyGroupByAreaContentSelectColumnsCaption"): string;
    /**
     * Sets caption for button which opens groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "emptyGroupByAreaContentSelectColumnsCaption", optionValue: string): void;
    /**
     * Gets width of layouts dropdown in groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownWidth"): number;
    /**
     * Sets width of layouts dropdown in groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownWidth", optionValue: number): void;
    /**
     * Gets height of layouts dropdown in groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownAreaWidth"): number;
    /**
     * Sets height of layouts dropdown in groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogDropDownAreaWidth", optionValue: number): void;
    /**
     * Gets time in milliseconds for animation duration to show/hide modal dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogAnimationDuration"): number;
    /**
     * Sets time in milliseconds for animation duration to show/hide modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogAnimationDuration", optionValue: number): void;
    /**
     * Gets width of groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogWidth"): number;
    /**
     * Sets width of groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogWidth", optionValue: number): void;
    /**
     * Gets height of groupby dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogHeight"): number;
    /**
     * Sets height of groupby dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogHeight", optionValue: number): void;
    /**
     * Gets text of button which apply changes in modal dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonApplyText"): string;
    /**
     * Sets text of button which apply changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonApplyText", optionValue: string): void;
    /**
     * Gets text of button which cancel changes in modal dialog
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonCancelText"): string;
    /**
     * Sets text of button which cancel changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonCancelText", optionValue: string): void;
    /**
     * Format grouped column using the formatter set in igGrid.columns[i].formatter or igGrid format.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "useGridColumnFormatter"): boolean;
    /**
     * Format grouped column using the formatter set in igGrid.columns[i].formatter or igGrid format.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "useGridColumnFormatter", optionValue: boolean): void;
    /**
     * Enables / disables groupby persistence between states
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables groupby persistence between states
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Controls containment behavior for the groupby dialog.
     * owner  The groupby dialog will be draggable only in the grid area
     * window  The groupby dialog will be draggable in the whole window area
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByDialogContainment"): string;
    /**
     * Controls containment behavior for the groupby dialog.
     * owner  The groupby dialog will be draggable only in the grid area
     * window  The groupby dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupByDialogContainment", optionValue: string): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
     * use args.owner in order to access the groupby widget object
     * use args.owner.grid to access the grid widget option
     * use args.groupedColumns to get a reference to the current groupedColumns.
     * use args.newGroupedColumns to get an object of the new grouped columns that should be applied.(it is set ONLY if called from modal dialog)
     * use args.key to get a reference to the current column's key that's being grouped(not set if called from modal dialog)
     * use args.layout to get a reference to the current layout object, if any(not set if called from modal dialog)
     * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog)
     * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumnsChanging"): GroupedColumnsChangingEvent;
    /**
     * Event which is fired when the grouped columns collection is about to change. This event is fired even when button OK is clicked from the modal dialog(after event modalDialogButtonApplyClick is fired)
     * use args.owner in order to access the groupby widget object
     * use args.owner.grid to access the grid widget option
     * use args.groupedColumns to get a reference to the current groupedColumns.
     * use args.newGroupedColumns to get an object of the new grouped columns that should be applied.(it is set ONLY if called from modal dialog)
     * use args.key to get a reference to the current column's key that's being grouped(not set if called from modal dialog)
     * use args.layout to get a reference to the current layout object, if any(not set if called from modal dialog)
     * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid(not set if called from modal dialog)
     * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumnsChanging", optionValue: GroupedColumnsChangingEvent): void;
    /**
     * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from groupby modal dialog but key, layout and grid are not set
     * use args.owner in order to access the groupby widget object
     * use args.owner.grid to access the grid widget option
     * use args.groupedColumns to get a reference to the current groupedColumns
     * use args.key to get a reference to the current column's key that's being grouped
     * use args.layout to get a reference to the current layout object, if any
     * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid
     * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumnsChanged"): GroupedColumnsChangedEvent;
    /**
     * Event which is fired when the groupedColumns collection has changed. This event is fired also when group/ungroup from groupby modal dialog but key, layout and grid are not set
     * use args.owner in order to access the groupby widget object
     * use args.owner.grid to access the grid widget option
     * use args.groupedColumns to get a reference to the current groupedColumns
     * use args.key to get a reference to the current column's key that's being grouped
     * use args.layout to get a reference to the current layout object, if any
     * use args.grid to get a reference to the current child grid element, in case it's an hierarchical grid
     * use args.triggeredBy to get which user interaction triggers the event - possible options are dragAndDrop|modalDialog|sortStateChanged|removeButton|regroup
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "groupedColumnsChanged", optionValue: GroupedColumnsChangedEvent): void;
    /**
     * Event fired every time the groupby dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogMoving"): ModalDialogMovingEvent;
    /**
     * Event fired every time the groupby dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogMoving", optionValue: ModalDialogMovingEvent): void;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClosing"): ModalDialogClosingEvent;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClosing", optionValue: ModalDialogClosingEvent): void;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClosed"): ModalDialogClosedEvent;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogClosed", optionValue: ModalDialogClosedEvent): void;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogOpening"): ModalDialogOpeningEvent;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogOpening", optionValue: ModalDialogOpeningEvent): void;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogOpened"): ModalDialogOpenedEvent;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogOpened", optionValue: ModalDialogOpenedEvent): void;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogContentsRendering"): ModalDialogContentsRenderingEvent;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogContentsRendering", optionValue: ModalDialogContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogContentsRendered"): ModalDialogContentsRenderedEvent;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupBy widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogContentsRendered", optionValue: ModalDialogContentsRenderedEvent): void;
    /**
     * Event fired when the button is Apply is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.groupedColumns to get the array of grouped columns
     * Use ui.groupedColumnLayouts to get array of column layouts
     * Use ui.sortingExpr to get array of sorted columns
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick"): ModalDialogButtonApplyClickEvent;
    /**
     * Event fired when the button is Apply is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.groupedColumns to get the array of grouped columns
     * Use ui.groupedColumnLayouts to get array of column layouts
     * Use ui.sortingExpr to get array of sorted columns
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick", optionValue: ModalDialogButtonApplyClickEvent): void;
    /**
     * Event fired when reset button is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonResetClick"): ModalDialogButtonResetClickEvent;
    /**
     * Event fired when reset button is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogButtonResetClick", optionValue: ModalDialogButtonResetClickEvent): void;
    /**
     * Event fired when column in modal dialog is clicked to be grouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupingColumn"): ModalDialogGroupingColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be grouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupingColumn", optionValue: ModalDialogGroupingColumnEvent): void;
    /**
     * Event fired when column in modal dialog is clicked to be grouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use args.groupedColumns to get a reference to the current groupedColumns
     * Use ui.layout to get the layout of the columns
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupColumn"): ModalDialogGroupColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be grouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use args.groupedColumns to get a reference to the current groupedColumns
     * Use ui.layout to get the layout of the columns
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogGroupColumn", optionValue: ModalDialogGroupColumnEvent): void;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogUngroupingColumn"): ModalDialogUngroupingColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogUngroupingColumn", optionValue: ModalDialogUngroupingColumnEvent): void;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use args.groupedColumns to get a reference to the current groupedColumns
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogUngroupColumn"): ModalDialogUngroupColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use args.groupedColumns to get a reference to the current groupedColumns
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogUngroupColumn", optionValue: ModalDialogUngroupColumnEvent): void;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     * Use ui.isAsc to get whether column should be sorted ascending or descending
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogSortGroupedColumn"): ModalDialogSortGroupedColumnEvent;
    /**
     * Event fired when column in modal dialog is clicked to be ungrouped.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridGroupby widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.key to get the key of the column to be grouped.
     * Use ui.layout to get the layout of the columns
     * Use ui.isAsc to get whether column should be sorted ascending or descending
     *
     * @optionValue Define event handler function.
     */
    igGridGroupBy(optionLiteral: 'option', optionName: "modalDialogSortGroupedColumn", optionValue: ModalDialogSortGroupedColumnEvent): void;
    igGridGroupBy(options: IgGridGroupBy): JQuery;
    igGridGroupBy(optionLiteral: 'option', optionName: string): any;
    igGridGroupBy(optionLiteral: 'option', options: IgGridGroupBy): JQuery;
    igGridGroupBy(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridGroupBy(methodName: string, ...methodParams: any[]): any;
}
interface IgGridHidingColumnSetting {
    /**
     * Column key. this is a required property in every column setting if columnIndex is not set.
     */
    columnKey?: string;
    /**
     * Column index. Can be used in place of column key. the preferred way of populating a column setting is to always use the column keys as identifiers.
     */
    columnIndex?: number;
    /**
     * Allows the column to be hidden.
     */
    allowHiding?: boolean;
    /**
     * Sets the initial visibility of the column.
     */
    hidden?: boolean;
    /**
     * Option for IgGridHidingColumnSetting
     */
    [optionName: string]: any;
}
interface ColumnHidingEvent {
    (event: Event, ui: ColumnHidingEventUIParam): void;
}
interface ColumnHidingEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get the hidden column index. Has a value only if the column's key is a number.
     */
    columnIndex?: any;
    /**
     * Used to get the hidden column key. Has a value only if the column's key is a string.
     */
    columnKey?: any;
}
interface ColumnHidingRefusedEvent {
    (event: Event, ui: ColumnHidingRefusedEventUIParam): void;
}
interface ColumnHidingRefusedEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    columnKeys?: any;
}
interface ColumnShowingRefusedEvent {
    (event: Event, ui: ColumnShowingRefusedEventUIParam): void;
}
interface ColumnShowingRefusedEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    columnKeys?: any;
}
interface MultiColumnHidingEvent {
    (event: Event, ui: MultiColumnHidingEventUIParam): void;
}
interface MultiColumnHidingEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
     */
    columnKeys?: any;
}
interface ColumnHiddenEvent {
    (event: Event, ui: ColumnHiddenEventUIParam): void;
}
interface ColumnHiddenEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get the hidden column index. Has a value only if the column's key is a number.
     */
    columnIndex?: any;
    /**
     * Used to get the hidden column key. Has a value only if the column's key is a string.
     */
    columnKey?: any;
}
interface ColumnShowingEvent {
    (event: Event, ui: ColumnShowingEventUIParam): void;
}
interface ColumnShowingEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get the shown column index.
     */
    columnIndex?: any;
    /**
     * Used to get the shown column key.
     */
    columnKey?: any;
}
interface ColumnShownEvent {
    (event: Event, ui: ColumnShownEventUIParam): void;
}
interface ColumnShownEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get the shown column index.
     */
    columnIndex?: any;
    /**
     * Used to get the shown column key.
     */
    columnKey?: any;
}
interface ColumnChooserOpeningEvent {
    (event: Event, ui: ColumnChooserOpeningEventUIParam): void;
}
interface ColumnChooserOpeningEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
}
interface ColumnChooserOpenedEvent {
    (event: Event, ui: ColumnChooserOpenedEventUIParam): void;
}
interface ColumnChooserOpenedEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
}
interface ColumnChooserMovingEvent {
    (event: Event, ui: ColumnChooserMovingEventUIParam): void;
}
interface ColumnChooserMovingEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
    /**
     * Used to get the original position of the column chooser div as { top, left } object, relative to the page.
     */
    originalPosition?: any;
    /**
     * Used to get the current position of the column chooser div as { top, left } object, relative to the page.
     */
    position?: any;
}
interface ColumnChooserClosingEvent {
    (event: Event, ui: ColumnChooserClosingEventUIParam): void;
}
interface ColumnChooserClosingEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
}
interface ColumnChooserClosedEvent {
    (event: Event, ui: ColumnChooserClosedEventUIParam): void;
}
interface ColumnChooserClosedEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
}
interface ColumnChooserContentsRenderingEvent {
    (event: Event, ui: ColumnChooserContentsRenderingEventUIParam): void;
}
interface ColumnChooserContentsRenderingEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
}
interface ColumnChooserContentsRenderedEvent {
    (event: Event, ui: ColumnChooserContentsRenderedEventUIParam): void;
}
interface ColumnChooserContentsRenderedEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
}
interface ColumnChooserButtonApplyClickEvent {
    (event: Event, ui: ColumnChooserButtonApplyClickEventUIParam): void;
}
interface ColumnChooserButtonApplyClickEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
    /**
     * Used to get array of columns identifiers which should be shown
     */
    columnsToShow?: any;
    /**
     * Used to get array of columns identifiers which should be hidden
     */
    columnsToHide?: any;
}
interface ColumnChooserButtonResetClickEvent {
    (event: Event, ui: ColumnChooserButtonResetClickEventUIParam): void;
}
interface ColumnChooserButtonResetClickEventUIParam {
    /**
     * Used to get the reference to the igGridHiding widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserElement?: any;
}
interface IgGridHiding {
    /**
     * A list of column settings that specifies hiding options on a per column basis.
     */
    columnSettings?: IgGridHidingColumnSetting[];
    /**
     * The width in pixels of the hidden column indicator in the header.
     */
    hiddenColumnIndicatorHeaderWidth?: number;
    /**
     * Controls containment behavior.
     * owner  The column chooser dialog will be draggable only in the grid area
     * window  The column chooser dialog will be draggable in the whole window area
     */
    columnChooserContainment?: string;
    /**
     * The default column chooser width in pixels.
     */
    columnChooserWidth?: number;
    /**
     * The default column chooser height in pixels.
     */
    columnChooserHeight?: number;
    /**
     * The duration of the dropdown animation in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * The caption of the column chooser dialog.
     */
    columnChooserCaptionText?: string;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
     */
    columnChooserDisplayText?: string;
    /**
     * The text displayed in the tooltip of the hidden column indicator.
     */
    hiddenColumnIndicatorTooltipText?: string;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to hide a column.
     */
    columnHideText?: string;
    /**
     * The text used in the column chooser to show column
     */
    columnChooserShowText?: string;
    /**
     * The text used in the column chooser to hide column
     */
    columnChooserHideText?: string;
    /**
     * Specifies on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
     */
    columnChooserHideOnClick?: boolean;
    /**
     * Text label for reset button.
     */
    columnChooserResetButtonLabel?: string;
    /**
     * Specifies time of milliseconds for animation duration to show/hide modal dialog
     */
    columnChooserAnimationDuration?: number;
    /**
     * Specifies text of button which apply changes in modal dialog
     */
    columnChooserButtonApplyText?: string;
    /**
     * Specifies text of button which cancel changes in modal dialog
     */
    columnChooserButtonCancelText?: string;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    columnHiding?: ColumnHidingEvent;
    /**
     * Event fired when trying to hide all columns in fixed or unfixed area.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     */
    columnHidingRefused?: ColumnHidingRefusedEvent;
    /**
     * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     */
    columnShowingRefused?: ColumnShowingRefusedEvent;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
     */
    multiColumnHiding?: MultiColumnHidingEvent;
    /**
     * Event fired after the hiding has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    columnHidden?: ColumnHiddenEvent;
    /**
     * Event fired before a showing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     */
    columnShowing?: ColumnShowingEvent;
    /**
     * Event fired after the showing has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     */
    columnShown?: ColumnShownEvent;
    /**
     * Event fired before the column chooser is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserOpening?: ColumnChooserOpeningEvent;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserOpened?: ColumnChooserOpenedEvent;
    /**
     * Event fired every time the column chooser changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
     */
    columnChooserMoving?: ColumnChooserMovingEvent;
    /**
     * Event fired before the column chooser is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserClosing?: ColumnChooserClosingEvent;
    /**
     * Event fired after the column chooser has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserClosed?: ColumnChooserClosedEvent;
    /**
     * Event fired before the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserContentsRendering?: ColumnChooserContentsRenderingEvent;
    /**
     * Event fired after the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserContentsRendered?: ColumnChooserContentsRenderedEvent;
    /**
     * Event fired when button Apply in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.columnsToShow to get array of columns identifiers which should be shown
     * Use ui.columnsToHide to get array of columns identifiers which should be hidden
     */
    columnChooserButtonApplyClick?: ColumnChooserButtonApplyClickEvent;
    /**
     * Event fired when button Reset in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserButtonResetClick?: ColumnChooserButtonResetClickEvent;
    /**
     * Option for igGridHiding
     */
    [optionName: string]: any;
}
interface IgGridHidingMethods {
    /**
     * Destroys the hiding widget
     */
    destroy(): void;
    /**
     * Shows the Column Chooser dialog. If it is visible the method does nothing.
     */
    showColumnChooser(): void;
    /**
     * Hides the Column Chooser dialog. If it is not visible the method does nothing.
     */
    hideColumnChooser(): void;
    /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param callback    Specifies a custom function to be called when the column(s) is shown(optional)
     */
    showColumn(column: Object, isMultiColumnHeader?: boolean, callback?: Function): void;
    /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param callback    Specifies a custom function to be called when the column is hidden(optional)
     */
    hideColumn(column: Object, isMultiColumnHeader?: boolean, callback?: Function): void;
    /**
     * Hides visible columns specified by the array. If the column is hidden the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param callback    Specifies a custom function to be called when all columns are hidden(optional)
     */
    hideMultiColumns(columns: any[], callback?: Function): void;
    /**
     * Show visible columns specified by the array. If the column is shown the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param callback    Specifies a custom function to be called when all columns are shown(optional)
     */
    showMultiColumns(columns: any[], callback?: Function): void;
    /**
     * Gets whether the reset button in the column chooser dialog is to be rendered or not.
     */
    isToRenderButtonReset(): void;
    /**
     * Reset hidden/shown column to initial state of dialog(when it is opened)
     */
    resetHidingColumnChooser(): void;
    /**
     * Renders the Reset button in the Column Chooser dialog.
     */
    renderColumnChooserResetButton(): void;
    /**
     * Remove Reset button in column chooser modal dialog
     */
    removeColumnChooserResetButton(): void;
}
interface JQuery {
    data(propertyName: "igGridHiding"): IgGridHidingMethods;
}
interface JQuery {
    igGridHiding(methodName: "destroy"): void;
    igGridHiding(methodName: "showColumnChooser"): void;
    igGridHiding(methodName: "hideColumnChooser"): void;
    igGridHiding(methodName: "showColumn", column: Object, isMultiColumnHeader?: boolean, callback?: Function): void;
    igGridHiding(methodName: "hideColumn", column: Object, isMultiColumnHeader?: boolean, callback?: Function): void;
    igGridHiding(methodName: "hideMultiColumns", columns: any[], callback?: Function): void;
    igGridHiding(methodName: "showMultiColumns", columns: any[], callback?: Function): void;
    igGridHiding(methodName: "isToRenderButtonReset"): void;
    igGridHiding(methodName: "resetHidingColumnChooser"): void;
    igGridHiding(methodName: "renderColumnChooserResetButton"): void;
    igGridHiding(methodName: "removeColumnChooserResetButton"): void;
    /**
     * A list of column settings that specifies hiding options on a per column basis.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnSettings"): IgGridHidingColumnSetting[];
    /**
     * A list of column settings that specifies hiding options on a per column basis.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridHidingColumnSetting[]): void;
    /**
     * The width in pixels of the hidden column indicator in the header.
     */
    igGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorHeaderWidth"): number;
    /**
     * The width in pixels of the hidden column indicator in the header.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorHeaderWidth", optionValue: number): void;
    /**
     * Controls containment behavior.
     * owner  The column chooser dialog will be draggable only in the grid area
     * window  The column chooser dialog will be draggable in the whole window area
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserContainment"): string;
    /**
     * Controls containment behavior.
     * owner  The column chooser dialog will be draggable only in the grid area
     * window  The column chooser dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserContainment", optionValue: string): void;
    /**
     * The default column chooser width in pixels.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserWidth"): number;
    /**
     * The default column chooser width in pixels.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserWidth", optionValue: number): void;
    /**
     * The default column chooser height in pixels.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserHeight"): number;
    /**
     * The default column chooser height in pixels.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserHeight", optionValue: number): void;
    /**
     * The duration of the dropdown animation in milliseconds.
     */
    igGridHiding(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * The duration of the dropdown animation in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * The caption of the column chooser dialog.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserCaptionText"): string;
    /**
     * The caption of the column chooser dialog.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserCaptionText", optionValue: string): void;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserDisplayText"): string;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserDisplayText", optionValue: string): void;
    /**
     * The text displayed in the tooltip of the hidden column indicator.
     */
    igGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorTooltipText"): string;
    /**
     * The text displayed in the tooltip of the hidden column indicator.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorTooltipText", optionValue: string): void;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to hide a column.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnHideText"): string;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to hide a column.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnHideText", optionValue: string): void;
    /**
     * The text used in the column chooser to show column
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserShowText"): string;
    /**
     * The text used in the column chooser to show column
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserShowText", optionValue: string): void;
    /**
     * The text used in the column chooser to hide column
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserHideText"): string;
    /**
     * The text used in the column chooser to hide column
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserHideText", optionValue: string): void;
    /**
     * Gets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserHideOnClick"): boolean;
    /**
     * Sets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserHideOnClick", optionValue: boolean): void;
    /**
     * Text label for reset button.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserResetButtonLabel"): string;
    /**
     * Text label for reset button.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserResetButtonLabel", optionValue: string): void;
    /**
     * Gets time of milliseconds for animation duration to show/hide modal dialog
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserAnimationDuration"): number;
    /**
     * Sets time of milliseconds for animation duration to show/hide modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserAnimationDuration", optionValue: number): void;
    /**
     * Gets text of button which apply changes in modal dialog
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyText"): string;
    /**
     * Sets text of button which apply changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyText", optionValue: string): void;
    /**
     * Gets text of button which cancel changes in modal dialog
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonCancelText"): string;
    /**
     * Sets text of button which cancel changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonCancelText", optionValue: string): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridHiding(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridHiding(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnHiding"): ColumnHidingEvent;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnHiding", optionValue: ColumnHidingEvent): void;
    /**
     * Event fired when trying to hide all columns in fixed or unfixed area.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnHidingRefused"): ColumnHidingRefusedEvent;
    /**
     * Event fired when trying to hide all columns in fixed or unfixed area.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnHidingRefused", optionValue: ColumnHidingRefusedEvent): void;
    /**
     * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnShowingRefused"): ColumnShowingRefusedEvent;
    /**
     * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnShowingRefused", optionValue: ColumnShowingRefusedEvent): void;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
     */
    igGridHiding(optionLiteral: 'option', optionName: "multiColumnHiding"): MultiColumnHidingEvent;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "multiColumnHiding", optionValue: MultiColumnHidingEvent): void;
    /**
     * Event fired after the hiding has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnHidden"): ColumnHiddenEvent;
    /**
     * Event fired after the hiding has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnHidden", optionValue: ColumnHiddenEvent): void;
    /**
     * Event fired before a showing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnShowing"): ColumnShowingEvent;
    /**
     * Event fired before a showing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnShowing", optionValue: ColumnShowingEvent): void;
    /**
     * Event fired after the showing has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnShown"): ColumnShownEvent;
    /**
     * Event fired after the showing has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnShown", optionValue: ColumnShownEvent): void;
    /**
     * Event fired before the column chooser is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserOpening"): ColumnChooserOpeningEvent;
    /**
     * Event fired before the column chooser is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserOpening", optionValue: ColumnChooserOpeningEvent): void;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserOpened"): ColumnChooserOpenedEvent;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserOpened", optionValue: ColumnChooserOpenedEvent): void;
    /**
     * Event fired every time the column chooser changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserMoving"): ColumnChooserMovingEvent;
    /**
     * Event fired every time the column chooser changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserMoving", optionValue: ColumnChooserMovingEvent): void;
    /**
     * Event fired before the column chooser is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserClosing"): ColumnChooserClosingEvent;
    /**
     * Event fired before the column chooser is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserClosing", optionValue: ColumnChooserClosingEvent): void;
    /**
     * Event fired after the column chooser has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserClosed"): ColumnChooserClosedEvent;
    /**
     * Event fired after the column chooser has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserClosed", optionValue: ColumnChooserClosedEvent): void;
    /**
     * Event fired before the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendering"): ColumnChooserContentsRenderingEvent;
    /**
     * Event fired before the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendering", optionValue: ColumnChooserContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendered"): ColumnChooserContentsRenderedEvent;
    /**
     * Event fired after the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendered", optionValue: ColumnChooserContentsRenderedEvent): void;
    /**
     * Event fired when button Apply in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.columnsToShow to get array of columns identifiers which should be shown
     * Use ui.columnsToHide to get array of columns identifiers which should be hidden
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyClick"): ColumnChooserButtonApplyClickEvent;
    /**
     * Event fired when button Apply in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.columnsToShow to get array of columns identifiers which should be shown
     * Use ui.columnsToHide to get array of columns identifiers which should be hidden
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyClick", optionValue: ColumnChooserButtonApplyClickEvent): void;
    /**
     * Event fired when button Reset in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonResetClick"): ColumnChooserButtonResetClickEvent;
    /**
     * Event fired when button Reset in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonResetClick", optionValue: ColumnChooserButtonResetClickEvent): void;
    igGridHiding(options: IgGridHiding): JQuery;
    igGridHiding(optionLiteral: 'option', optionName: string): any;
    igGridHiding(optionLiteral: 'option', options: IgGridHiding): JQuery;
    igGridHiding(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridHiding(methodName: string, ...methodParams: any[]): any;
}
interface IgHierarchicalGridColumnLayout {
    /**
     * Specifies the columnLayout key. This is the property that holds the data records for the current column layout.
     */
    key?: string;
    /**
     * Specifies the primaryKey of the columnLayout. This also serves as the column key for the current column layout.
     */
    primaryKey?: string;
    /**
     * Specifies the foreignKey of the columnLayout. This is also the column key of the parent grid.
     */
    foreignKey?: string;
    /**
     * Option for IgHierarchicalGridColumnLayout
     */
    [optionName: string]: any;
}
interface RowExpandingEvent {
    (event: Event, ui: RowExpandingEventUIParam): void;
}
interface RowExpandingEventUIParam {
    /**
     * Used to access the hierarchical grid object
     */
    owner?: any;
    /**
     * Used to access the row element for the row that's about to be expanded
     */
    parentrow?: any;
}
interface RowExpandedEvent {
    (event: Event, ui: RowExpandedEventUIParam): void;
}
interface RowExpandedEventUIParam {
    /**
     * Used to access the hierarchical grid object
     */
    owner?: any;
    /**
     * Used to access the row element for the row that was expanded
     */
    parentrow?: any;
}
interface RowCollapsingEvent {
    (event: Event, ui: RowCollapsingEventUIParam): void;
}
interface RowCollapsingEventUIParam {
    /**
     * Used to access the hierarchical grid object
     */
    owner?: any;
    /**
     * Used to access the row element for the row that's about to be collapsed
     */
    parentrow?: any;
}
interface RowCollapsedEvent {
    (event: Event, ui: RowCollapsedEventUIParam): void;
}
interface RowCollapsedEventUIParam {
    /**
     * Used to access the hierarchical grid object
     */
    owner?: any;
    /**
     * Used to access the row element for the row that was collapsd
     */
    parentrow?: any;
}
interface ChildrenPopulatingEvent {
    (event: Event, ui: ChildrenPopulatingEventUIParam): void;
}
interface ChildrenPopulatingEventUIParam {
    /**
     * Used to access the hierarchical grid object
     */
    owner?: any;
    /**
     * Used to access the row element for the row that's about to be populated
     */
    parentrow?: any;
    /**
     * Used to get the data ID of the row
     */
    id?: any;
}
interface ChildrenPopulatedEvent {
    (event: Event, ui: ChildrenPopulatedEventUIParam): void;
}
interface ChildrenPopulatedEventUIParam {
    /**
     * Used to access the hierarchical grid object
     */
    owner?: any;
    /**
     * Used to access the row element for the row that was populated
     */
    parentrow?: any;
    /**
     * Used to get the data ID of the row
     */
    id?: any;
}
interface ChildGridRenderedEvent {
    (event: Event, ui: ChildGridRenderedEventUIParam): void;
}
interface ChildGridRenderedEventUIParam {
    /**
     * Used to access the hierarchical grid object
     */
    owner?: any;
    /**
     * Used to access the row element for the row that's about to be populated
     */
    parentrow?: any;
    /**
     * Used to get reference to the child grid
     */
    childgrid?: any;
}
interface ChildGridCreatingEvent {
    (event: Event, ui: ChildGridCreatingEventUIParam): void;
}
interface ChildGridCreatingEventUIParam {
}
interface ChildGridCreatedEvent {
    (event: Event, ui: ChildGridCreatedEventUIParam): void;
}
interface ChildGridCreatedEventUIParam {
}
interface IgHierarchicalGrid {
    /**
     * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will
     */
    initialDataBindDepth?: number;
    /**
     * No levels will be automatically expanded when the widget is instantiated for the first time
     */
    initialExpandDepth?: number;
    /**
     * If true, encodes all requests using OData conventions and the $expand syntax
     */
    odata?: boolean;
    /**
     * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
     * the ajax GET calls.
     */
    rest?: boolean;
    /**
     * Specifies the limit on the number of levels to bind to
     */
    maxDataBindDepth?: number;
    /**
     * Specifies the default property in the response where children will be located
     */
    defaultChildrenDataProperty?: string;
    /**
     * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
     * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
     */
    autoGenerateLayouts?: boolean;
    /**
     * Applies a linear animation - either expanding or collapsing depending on the parent row state
     */
    expandCollapseAnimations?: boolean;
    /**
     * Specifies the expand column width
     */
    expandColWidth?: number;
    /**
     * Specifies the delimiter for constructing paths , for hierarchical lookup of data
     */
    pathSeparator?: string;
    /**
     * The row expanding/collapsing animation duration in ms.
     */
    animationDuration?: number;
    /**
     * Specifies the default tooltip applied to an expand column cell, that is currently collapsed
     */
    expandTooltip?: string;
    /**
     * Specifies the default tooltip applied to an expand column cell, that is currently expanded
     */
    collapseTooltip?: string;
    /**
     * An array of column objects
     */
    columns?: any[];
    /**
     * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
     */
    columnLayouts?: IgHierarchicalGridColumnLayout[];
    /**
     * Event which is fired when a hierarchical row is about to be expanded
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be expanded
     */
    rowExpanding?: RowExpandingEvent;
    /**
     * Event which is fired after a hierarchical row has been expanded
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was expanded
     */
    rowExpanded?: RowExpandedEvent;
    /**
     * Event which is fired when a hierarchical row is about to be collapsed
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be collapsed
     */
    rowCollapsing?: RowCollapsingEvent;
    /**
     * Event which is fired when a hierarchical row has been collapsed
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was collapsd
     */
    rowCollapsed?: RowCollapsedEvent;
    /**
     * Event which is fired when children are about to be populated (Load on demand)
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be populated
     * use args.id to get the data ID of the row
     */
    childrenPopulating?: ChildrenPopulatingEvent;
    /**
     * Event which is fired when children have been populated (Load on demand)
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was populated
     * use args.id to get the data ID of the row
     */
    childrenPopulated?: ChildrenPopulatedEvent;
    /**
     * Event fired when child grid is rendered
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be populated
     * use args.childgrid to get reference to the child grid
     */
    childGridRendered?: ChildGridRenderedEvent;
    /**
     * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
     */
    childGridCreating?: ChildGridCreatingEvent;
    /**
     * Event fired after a child grid is created
     */
    childGridCreated?: ChildGridCreatedEvent;
    /**
     * Option for igHierarchicalGrid
     */
    [optionName: string]: any;
}
interface IgHierarchicalGridMethods {
    /**
     * Data binds the hierarchical grid. No child grids will be created or rendered by default, unless there is initialExpandDepth >= 0 set.
     */
    dataBind(): void;
    /**
     * Returns the element of the root grid (igGrid)
     */
    root(): Object;
    /**
     * Returns the widget object of the root grid (igGrid)
     */
    rootWidget(): Object;
    /**
     * Returns a flat list of all child grid widgets (not elements) - recursive
     */
    allChildrenWidgets(): Object;
    /**
     * Returns a flat list of all child grid elements (recursive)
     */
    allChildren(): Object;
    /**
     * Expands or collapses (toggles) a parent row
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param callback     Specifies a custom function to be called when parent row is toggled(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was toggled
     */
    toggle(element: Element, callback?: Function): void;
    /**
     * Expands (toggles) a parent row
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments first is hierarchical grid object, second is the row element that was expanded
     */
    expand(id: Element, callback?: Function): void;
    /**
     * Checks if a parent row is expanded or not
     *
     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     */
    expanded(element: Element): boolean;
    /**
     * Collapses a parent row
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param id     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     * @param callback     Specifies a custom function to be called when parent row is expanded(optional). Takes 2 arguments - first is hierarchical grid object, second is the row element that was collapsed
     */
    collapse(id: Element, callback?: Function): void;
    /**
     * Checks if a parent row is currently collapsed
     *
     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     */
    collapsed(element: Element): boolean;
    /**
     * Checks if a parent row is populated with data
     *
     * @param element     accepts a dom element, or a jquery wrapped dom element that should be a TR and should specify a parent row
     */
    populated(element: Element): boolean;
    /**
     * Commits pending transactions to the client data source for main and all child grids.
     */
    commit(): void;
    /**
     * Clears the transaction log (delegates to igDataSource). Note that this does not update the UI. In case the UI must be updated, set the second parameter "updateUI" to true, which will trigger a call to dataBind() to re-render the contents.
     *
     * @param rebind     Whether to perform a rebind.
     */
    rollback(rebind?: boolean): void;
    /**
     * Posts to the settings.updateUrl using $.ajax, by serializing the changes as url params
     *
     * @param success Specifies a custom function to be called when AJAX request to the updateUrl option succeeds(optional)
     * @param error Specifies a custom function to be called when AJAX request to the updateUrl option fails(optional)
     */
    saveChanges(success: Function, error: Function): void;
    /**
     * Destroys the hierarchical grid by recursively destroying all child grids
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igHierarchicalGrid"): IgHierarchicalGridMethods;
}
interface JQuery {
    igHierarchicalGrid(methodName: "dataBind"): void;
    igHierarchicalGrid(methodName: "root"): Object;
    igHierarchicalGrid(methodName: "rootWidget"): Object;
    igHierarchicalGrid(methodName: "allChildrenWidgets"): Object;
    igHierarchicalGrid(methodName: "allChildren"): Object;
    igHierarchicalGrid(methodName: "toggle", element: Element, callback?: Function): void;
    igHierarchicalGrid(methodName: "expand", id: Element, callback?: Function): void;
    igHierarchicalGrid(methodName: "expanded", element: Element): boolean;
    igHierarchicalGrid(methodName: "collapse", id: Element, callback?: Function): void;
    igHierarchicalGrid(methodName: "collapsed", element: Element): boolean;
    igHierarchicalGrid(methodName: "populated", element: Element): boolean;
    igHierarchicalGrid(methodName: "commit"): void;
    igHierarchicalGrid(methodName: "rollback", rebind?: boolean): void;
    igHierarchicalGrid(methodName: "saveChanges", success: Function, error: Function): void;
    igHierarchicalGrid(methodName: "destroy"): void;
    /**
     * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "initialDataBindDepth"): number;
    /**
     * Only the first level will be data-bound initially. Also serves as "render" depth, meaning that depending on this prop, the grid will
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "initialDataBindDepth", optionValue: number): void;
    /**
     * No levels will be automatically expanded when the widget is instantiated for the first time
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "initialExpandDepth"): number;
    /**
     * No levels will be automatically expanded when the widget is instantiated for the first time
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "initialExpandDepth", optionValue: number): void;
    /**
     * If true, encodes all requests using OData conventions and the $expand syntax
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "odata"): boolean;
    /**
     * If true, encodes all requests using OData conventions and the $expand syntax
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "odata", optionValue: boolean): void;
    /**
     * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
     * the ajax GET calls.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rest"): boolean;
    /**
     * If true, load on demand will be achieved using REST compliant resource access with appropriate url-s for
     * the ajax GET calls.
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rest", optionValue: boolean): void;
    /**
     * Gets the limit on the number of levels to bind to
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "maxDataBindDepth"): number;
    /**
     * Sets the limit on the number of levels to bind to
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "maxDataBindDepth", optionValue: number): void;
    /**
     * Gets the default property in the response where children will be located
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "defaultChildrenDataProperty"): string;
    /**
     * Sets the default property in the response where children will be located
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "defaultChildrenDataProperty", optionValue: string): void;
    /**
     * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
     * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "autoGenerateLayouts"): boolean;
    /**
     * If true, will autogenerate all layouts assuming default values for "childrenDataProperty"
     * When autoGenerateLayouts is enabled, it will automatically generate all columns recursively. (all columns on all levels)
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "autoGenerateLayouts", optionValue: boolean): void;
    /**
     * Applies a linear animation - either expanding or collapsing depending on the parent row state
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "expandCollapseAnimations"): boolean;
    /**
     * Applies a linear animation - either expanding or collapsing depending on the parent row state
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "expandCollapseAnimations", optionValue: boolean): void;
    /**
     * Gets the expand column width
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "expandColWidth"): number;
    /**
     * Sets the expand column width
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "expandColWidth", optionValue: number): void;
    /**
     * Gets the delimiter for constructing paths , for hierarchical lookup of data
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "pathSeparator"): string;
    /**
     * Sets the delimiter for constructing paths , for hierarchical lookup of data
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "pathSeparator", optionValue: string): void;
    /**
     * The row expanding/collapsing animation duration in ms.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "animationDuration"): number;
    /**
     * The row expanding/collapsing animation duration in ms.
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;
    /**
     * Gets the default tooltip applied to an expand column cell, that is currently collapsed
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "expandTooltip"): string;
    /**
     * Sets the default tooltip applied to an expand column cell, that is currently collapsed
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "expandTooltip", optionValue: string): void;
    /**
     * Gets the default tooltip applied to an expand column cell, that is currently expanded
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "collapseTooltip"): string;
    /**
     * Sets the default tooltip applied to an expand column cell, that is currently expanded
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "collapseTooltip", optionValue: string): void;
    /**
     * An array of column objects
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "columns"): any[];
    /**
     * An array of column objects
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "columns", optionValue: any[]): void;
    /**
     * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "columnLayouts"): IgHierarchicalGridColumnLayout[];
    /**
     * List of columnLayout objects that specify the structure of the child grids. All options that are applicable to a flat grid are also applicable here
     *
     * @optionValue New value to be set.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "columnLayouts", optionValue: IgHierarchicalGridColumnLayout[]): void;
    /**
     * Event which is fired when a hierarchical row is about to be expanded
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be expanded
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rowExpanding"): RowExpandingEvent;
    /**
     * Event which is fired when a hierarchical row is about to be expanded
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be expanded
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rowExpanding", optionValue: RowExpandingEvent): void;
    /**
     * Event which is fired after a hierarchical row has been expanded
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was expanded
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rowExpanded"): RowExpandedEvent;
    /**
     * Event which is fired after a hierarchical row has been expanded
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was expanded
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rowExpanded", optionValue: RowExpandedEvent): void;
    /**
     * Event which is fired when a hierarchical row is about to be collapsed
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be collapsed
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rowCollapsing"): RowCollapsingEvent;
    /**
     * Event which is fired when a hierarchical row is about to be collapsed
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be collapsed
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rowCollapsing", optionValue: RowCollapsingEvent): void;
    /**
     * Event which is fired when a hierarchical row has been collapsed
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was collapsd
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rowCollapsed"): RowCollapsedEvent;
    /**
     * Event which is fired when a hierarchical row has been collapsed
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was collapsd
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "rowCollapsed", optionValue: RowCollapsedEvent): void;
    /**
     * Event which is fired when children are about to be populated (Load on demand)
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be populated
     * use args.id to get the data ID of the row
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childrenPopulating"): ChildrenPopulatingEvent;
    /**
     * Event which is fired when children are about to be populated (Load on demand)
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be populated
     * use args.id to get the data ID of the row
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childrenPopulating", optionValue: ChildrenPopulatingEvent): void;
    /**
     * Event which is fired when children have been populated (Load on demand)
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was populated
     * use args.id to get the data ID of the row
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childrenPopulated"): ChildrenPopulatedEvent;
    /**
     * Event which is fired when children have been populated (Load on demand)
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that was populated
     * use args.id to get the data ID of the row
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childrenPopulated", optionValue: ChildrenPopulatedEvent): void;
    /**
     * Event fired when child grid is rendered
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be populated
     * use args.childgrid to get reference to the child grid
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridRendered"): ChildGridRenderedEvent;
    /**
     * Event fired when child grid is rendered
     * use args.owner to access the hierarchical grid object
     * use args.parentrow to access the row element for the row that's about to be populated
     * use args.childgrid to get reference to the child grid
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridRendered", optionValue: ChildGridRenderedEvent): void;
    /**
     * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridCreating"): ChildGridCreatingEvent;
    /**
     * Event fired before a child grid is going to be created, allows the developer to override the child grid creation
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridCreating", optionValue: ChildGridCreatingEvent): void;
    /**
     * Event fired after a child grid is created
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridCreated"): ChildGridCreatedEvent;
    /**
     * Event fired after a child grid is created
     *
     * @optionValue Define event handler function.
     */
    igHierarchicalGrid(optionLiteral: 'option', optionName: "childGridCreated", optionValue: ChildGridCreatedEvent): void;
    igHierarchicalGrid(options: IgHierarchicalGrid): JQuery;
    igHierarchicalGrid(optionLiteral: 'option', optionName: string): any;
    igHierarchicalGrid(optionLiteral: 'option', options: IgHierarchicalGrid): JQuery;
    igHierarchicalGrid(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igHierarchicalGrid(methodName: string, ...methodParams: any[]): any;
}
interface IgGridMultiColumnHeaders {
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Option for igGridMultiColumnHeaders
     */
    [optionName: string]: any;
}
interface IgGridMultiColumnHeadersMethods {
    /**
     * Returns multicolumn headers array. if there aren't multicolumn headers returns undefined
     */
    getMultiColumnHeaders(): any[];
    /**
     * Destroys the multicolumn widget
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igGridMultiColumnHeaders"): IgGridMultiColumnHeadersMethods;
}
interface JQuery {
    igGridMultiColumnHeaders(methodName: "getMultiColumnHeaders"): any[];
    igGridMultiColumnHeaders(methodName: "destroy"): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridMultiColumnHeaders(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    igGridMultiColumnHeaders(options: IgGridMultiColumnHeaders): JQuery;
    igGridMultiColumnHeaders(optionLiteral: 'option', optionName: string): any;
    igGridMultiColumnHeaders(optionLiteral: 'option', options: IgGridMultiColumnHeaders): JQuery;
    igGridMultiColumnHeaders(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridMultiColumnHeaders(methodName: string, ...methodParams: any[]): any;
}
interface PageIndexChangingEvent {
    (event: Event, ui: PageIndexChangingEventUIParam): void;
}
interface PageIndexChangingEventUIParam {
    /**
     * Used to get reference to igGridPaging.
     */
    owner?: any;
    /**
     * Used to get current page index.
     */
    currentPageIndex?: any;
    /**
     * Used to get new page index.
     */
    newPageIndex?: any;
}
interface PageIndexChangedEvent {
    (event: Event, ui: PageIndexChangedEventUIParam): void;
}
interface PageIndexChangedEventUIParam {
    /**
     * Used to get reference to igGridPaging.
     */
    owner?: any;
    /**
     * Used to get current page index.
     */
    pageIndex?: any;
}
interface PageSizeChangingEvent {
    (event: Event, ui: PageSizeChangingEventUIParam): void;
}
interface PageSizeChangingEventUIParam {
    /**
     * Used to get reference to igGridPaging.
     */
    owner?: any;
    /**
     * Used to get current page size.
     */
    currentPageSize?: any;
    /**
     * Used to get new page size.
     */
    newPageSize?: any;
}
interface PageSizeChangedEvent {
    (event: Event, ui: PageSizeChangedEventUIParam): void;
}
interface PageSizeChangedEventUIParam {
    /**
     * Used to get reference to igGridPaging.
     */
    owner?: any;
    /**
     * Used to get current page size.
     */
    pageSize?: any;
}
interface PagerRenderingEvent {
    (event: Event, ui: PagerRenderingEventUIParam): void;
}
interface PagerRenderingEventUIParam {
    /**
     * Used to get reference to igGridPaging.
     */
    owner?: any;
    /**
     * Used to get reference to grid's data source.
     */
    dataSource?: any;
}
interface PagerRenderedEvent {
    (event: Event, ui: PagerRenderedEventUIParam): void;
}
interface PagerRenderedEventUIParam {
    /**
     * Used to get reference to igGridPaging.
     */
    owner?: any;
    /**
     * Used to get reference to grid's data source.
     */
    dataSource?: any;
}
interface IgGridPaging {
    /**
     * Default number of records per page
     */
    pageSize?: number;
    /**
     * The property in the response that will hold the total number of records in the data source
     */
    recordCountKey?: string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page size
     */
    pageSizeUrlKey?: string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page index
     */
    pageIndexUrlKey?: string;
    /**
     * Current page index that's bound and rendered in the UI
     */
    currentPageIndex?: number;
    type?: any;
    /**
     * If false, a dropdown allowing to change the page size will not be rendered in the UI
     */
    showPageSizeDropDown?: boolean;
    /**
     * Label rendered in front of the page size dropdown
     */
    pageSizeDropDownLabel?: string;
    /**
     * Trailing label for the page size dropdown
     */
    pageSizeDropDownTrailingLabel?: string;
    /**
     * Page size dropdown location. Can be rendered above the grid header or inside the pager, next to the page links.
     *
     * Valid values:
     * "above" it will be rendered above the grid header
     * "inpager" it will be rendered next to page links
     */
    pageSizeDropDownLocation?: any;
    /**
     * Option specifying whether to show summary label for the currently rendered records or not
     */
    showPagerRecordsLabel?: boolean;
    /**
     * Custom pager records label template - in jQuery templating style and syntax
     */
    pagerRecordsLabelTemplate?: string;
    /**
     * Localized text for the next page label
     */
    nextPageLabelText?: string;
    /**
     * Localized text for the prev page label
     */
    prevPageLabelText?: string;
    /**
     * Localized text for the first page label
     */
    firstPageLabelText?: string;
    /**
     * Localized text for the last page label
     */
    lastPageLabelText?: string;
    /**
     * Option specifying whether to render the first and last page buttons
     */
    showFirstLastPages?: boolean;
    /**
     * Option specifying whether to render the previous and next page buttons
     */
    showPrevNextPages?: boolean;
    /**
     * Leading label for the dropdown from where the page index can be switched
     */
    currentPageDropDownLeadingLabel?: string;
    /**
     * Localized trailing label for the dropdown from where the page index can be switched
     */
    currentPageDropDownTrailingLabel?: string;
    /**
     * Custom localized tooltip for the page index dropdown
     */
    currentPageDropDownTooltip?: string;
    /**
     * Custom localized tooltip for the page size dropdown
     */
    pageSizeDropDownTooltip?: string;
    /**
     * Custom localized tooltip for the pager records label
     */
    pagerRecordsLabelTooltip?: string;
    /**
     * Custom localized tooltip for the prev. page button
     */
    prevPageTooltip?: string;
    /**
     * Custom localized tooltip for the next. page button
     */
    nextPageTooltip?: string;
    /**
     * Custom localized tooltip for the first. page button
     */
    firstPageTooltip?: string;
    /**
     * Custom localized tooltip for the last. page button
     */
    lastPageTooltip?: string;
    /**
     * Custom localized format string for tooltips of buttons that directly jump to a particular page. The format string follows the jQuery templating style and syntax. See also the pageCountLimit option.
     */
    pageTooltipFormat?: string;
    /**
     * Default: [5, 10, 20, 25, 50, 75, 100]. contents of the page size dropdown indicating what preconfigured page sizes are available to the end user
     */
    pageSizeList?: any[];
    /**
     * Sets gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then page buttons are displayed.
     */
    pageCountLimit?: number;
    /**
     * Number of pages that are constantly visible. For the invisible pages, prev and next buttons are used
     */
    visiblePageCount?: number;
    /**
     * Dropdown width for page size and page index dropdowns
     */
    defaultDropDownWidth?: number;
    /**
     * Time in milliseconds for which page dropdown will wait for keystrokes before changing the page.
     */
    delayOnPageChanged?: number;
    /**
     * Enables / disables paging persistence between states
     */
    persist?: boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before the page index is changed.
     * Return false in order to cancel page index changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.newPageIndex to get new page index.
     */
    pageIndexChanging?: PageIndexChangingEvent;
    /**
     * Event fired after the page index is changed , but before grid data rebinds
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageIndex to get current page index.
     */
    pageIndexChanged?: PageIndexChangedEvent;
    /**
     * Event fired when the page size is about to be changed from the page size dropdown.
     * Return false in order to cancel page size changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageSize to get current page size.
     * Use ui.newPageSize to get new page size.
     */
    pageSizeChanging?: PageSizeChangingEvent;
    /**
     * Event fired after the page size is changed from the page size dropdown.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageSize to get current page size.
     */
    pageSizeChanged?: PageSizeChangedEvent;
    /**
     * Event fired before the pager footer is rendered (the whole area below the grid records).
     * Return false in order to cancel pager footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     */
    pagerRendering?: PagerRenderingEvent;
    /**
     * Event fired after the pager footer is rendered
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     */
    pagerRendered?: PagerRenderedEvent;
    /**
     * Option for igGridPaging
     */
    [optionName: string]: any;
}
interface IgGridPagingMethods {
    /**
     * Gets /sets the current page index, delegates data binding and paging to $.ig.DataSource
     *
     * @param index     the page index to go to
     */
    pageIndex(index?: number): number;
    /**
     * Gets / sets the page Size. if no parameter is specified, just returns the current page size
     *
     * @param size     the page size
     */
    pageSize(size?: number): number;
    /**
     * Destroys the igGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igGridPaging"): IgGridPagingMethods;
}
interface JQuery {
    igGridPaging(methodName: "pageIndex", index?: number): number;
    igGridPaging(methodName: "pageSize", size?: number): number;
    igGridPaging(methodName: "destroy"): void;
    /**
     * Default number of records per page
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSize"): number;
    /**
     * Default number of records per page
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSize", optionValue: number): void;
    /**
     * The property in the response that will hold the total number of records in the data source
     */
    igGridPaging(optionLiteral: 'option', optionName: "recordCountKey"): string;
    /**
     * The property in the response that will hold the total number of records in the data source
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "recordCountKey", optionValue: string): void;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page size
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeUrlKey"): string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page size
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeUrlKey", optionValue: string): void;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page index
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageIndexUrlKey"): string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page index
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageIndexUrlKey", optionValue: string): void;
    /**
     * Current page index that's bound and rendered in the UI
     */
    igGridPaging(optionLiteral: 'option', optionName: "currentPageIndex"): number;
    /**
     * Current page index that's bound and rendered in the UI
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "currentPageIndex", optionValue: number): void;
    /**
     */
    igGridPaging(optionLiteral: 'option', optionName: "type"): any;
    /**
     */
    igGridPaging(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * If false, a dropdown allowing to change the page size will not be rendered in the UI
     */
    igGridPaging(optionLiteral: 'option', optionName: "showPageSizeDropDown"): boolean;
    /**
     * If false, a dropdown allowing to change the page size will not be rendered in the UI
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "showPageSizeDropDown", optionValue: boolean): void;
    /**
     * Label rendered in front of the page size dropdown
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLabel"): string;
    /**
     * Label rendered in front of the page size dropdown
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLabel", optionValue: string): void;
    /**
     * Trailing label for the page size dropdown
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTrailingLabel"): string;
    /**
     * Trailing label for the page size dropdown
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTrailingLabel", optionValue: string): void;
    /**
     * Page size dropdown location. Can be rendered above the grid header or inside the pager, next to the page links.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLocation"): any;
    /**
     * Page size dropdown location. Can be rendered above the grid header or inside the pager, next to the page links.
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLocation", optionValue: any): void;
    /**
     * Option specifying whether to show summary label for the currently rendered records or not
     */
    igGridPaging(optionLiteral: 'option', optionName: "showPagerRecordsLabel"): boolean;
    /**
     * Option specifying whether to show summary label for the currently rendered records or not
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "showPagerRecordsLabel", optionValue: boolean): void;
    /**
     * Custom pager records label template - in jQuery templating style and syntax
     */
    igGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTemplate"): string;
    /**
     * Custom pager records label template - in jQuery templating style and syntax
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTemplate", optionValue: string): void;
    /**
     * Localized text for the next page label
     */
    igGridPaging(optionLiteral: 'option', optionName: "nextPageLabelText"): string;
    /**
     * Localized text for the next page label
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "nextPageLabelText", optionValue: string): void;
    /**
     * Localized text for the prev page label
     */
    igGridPaging(optionLiteral: 'option', optionName: "prevPageLabelText"): string;
    /**
     * Localized text for the prev page label
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "prevPageLabelText", optionValue: string): void;
    /**
     * Localized text for the first page label
     */
    igGridPaging(optionLiteral: 'option', optionName: "firstPageLabelText"): string;
    /**
     * Localized text for the first page label
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "firstPageLabelText", optionValue: string): void;
    /**
     * Localized text for the last page label
     */
    igGridPaging(optionLiteral: 'option', optionName: "lastPageLabelText"): string;
    /**
     * Localized text for the last page label
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "lastPageLabelText", optionValue: string): void;
    /**
     * Option specifying whether to render the first and last page buttons
     */
    igGridPaging(optionLiteral: 'option', optionName: "showFirstLastPages"): boolean;
    /**
     * Option specifying whether to render the first and last page buttons
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "showFirstLastPages", optionValue: boolean): void;
    /**
     * Option specifying whether to render the previous and next page buttons
     */
    igGridPaging(optionLiteral: 'option', optionName: "showPrevNextPages"): boolean;
    /**
     * Option specifying whether to render the previous and next page buttons
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "showPrevNextPages", optionValue: boolean): void;
    /**
     * Leading label for the dropdown from where the page index can be switched
     */
    igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownLeadingLabel"): string;
    /**
     * Leading label for the dropdown from where the page index can be switched
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownLeadingLabel", optionValue: string): void;
    /**
     * Localized trailing label for the dropdown from where the page index can be switched
     */
    igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTrailingLabel"): string;
    /**
     * Localized trailing label for the dropdown from where the page index can be switched
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTrailingLabel", optionValue: string): void;
    /**
     * Custom localized tooltip for the page index dropdown
     */
    igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTooltip"): string;
    /**
     * Custom localized tooltip for the page index dropdown
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the page size dropdown
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTooltip"): string;
    /**
     * Custom localized tooltip for the page size dropdown
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the pager records label
     */
    igGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTooltip"): string;
    /**
     * Custom localized tooltip for the pager records label
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the prev. page button
     */
    igGridPaging(optionLiteral: 'option', optionName: "prevPageTooltip"): string;
    /**
     * Custom localized tooltip for the prev. page button
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "prevPageTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the next. page button
     */
    igGridPaging(optionLiteral: 'option', optionName: "nextPageTooltip"): string;
    /**
     * Custom localized tooltip for the next. page button
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "nextPageTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the first. page button
     */
    igGridPaging(optionLiteral: 'option', optionName: "firstPageTooltip"): string;
    /**
     * Custom localized tooltip for the first. page button
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "firstPageTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the last. page button
     */
    igGridPaging(optionLiteral: 'option', optionName: "lastPageTooltip"): string;
    /**
     * Custom localized tooltip for the last. page button
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "lastPageTooltip", optionValue: string): void;
    /**
     * Custom localized format string for tooltips of buttons that directly jump to a particular page. The format string follows the jQuery templating style and syntax. See also the pageCountLimit option.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageTooltipFormat"): string;
    /**
     * Custom localized format string for tooltips of buttons that directly jump to a particular page. The format string follows the jQuery templating style and syntax. See also the pageCountLimit option.
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageTooltipFormat", optionValue: string): void;
    /**
     * Default: [5, 10, 20, 25, 50, 75, 100]. contents of the page size dropdown indicating what preconfigured page sizes are available to the end user
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeList"): any[];
    /**
     * Default: [5, 10, 20, 25, 50, 75, 100]. contents of the page size dropdown indicating what preconfigured page sizes are available to the end user
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeList", optionValue: any[]): void;
    /**
     * Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then page buttons are displayed.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageCountLimit"): number;
    /**
     * Sets gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then page buttons are displayed.
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageCountLimit", optionValue: number): void;
    /**
     * Number of pages that are constantly visible. For the invisible pages, prev and next buttons are used
     */
    igGridPaging(optionLiteral: 'option', optionName: "visiblePageCount"): number;
    /**
     * Number of pages that are constantly visible. For the invisible pages, prev and next buttons are used
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "visiblePageCount", optionValue: number): void;
    /**
     * Dropdown width for page size and page index dropdowns
     */
    igGridPaging(optionLiteral: 'option', optionName: "defaultDropDownWidth"): number;
    /**
     * Dropdown width for page size and page index dropdowns
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "defaultDropDownWidth", optionValue: number): void;
    /**
     * Time in milliseconds for which page dropdown will wait for keystrokes before changing the page.
     */
    igGridPaging(optionLiteral: 'option', optionName: "delayOnPageChanged"): number;
    /**
     * Time in milliseconds for which page dropdown will wait for keystrokes before changing the page.
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "delayOnPageChanged", optionValue: number): void;
    /**
     * Enables / disables paging persistence between states
     */
    igGridPaging(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables paging persistence between states
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridPaging(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridPaging(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before the page index is changed.
     * Return false in order to cancel page index changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.newPageIndex to get new page index.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageIndexChanging"): PageIndexChangingEvent;
    /**
     * Event fired before the page index is changed.
     * Return false in order to cancel page index changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.newPageIndex to get new page index.
     *
     * @optionValue Define event handler function.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageIndexChanging", optionValue: PageIndexChangingEvent): void;
    /**
     * Event fired after the page index is changed , but before grid data rebinds
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageIndex to get current page index.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageIndexChanged"): PageIndexChangedEvent;
    /**
     * Event fired after the page index is changed , but before grid data rebinds
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageIndex to get current page index.
     *
     * @optionValue Define event handler function.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageIndexChanged", optionValue: PageIndexChangedEvent): void;
    /**
     * Event fired when the page size is about to be changed from the page size dropdown.
     * Return false in order to cancel page size changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageSize to get current page size.
     * Use ui.newPageSize to get new page size.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeChanging"): PageSizeChangingEvent;
    /**
     * Event fired when the page size is about to be changed from the page size dropdown.
     * Return false in order to cancel page size changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageSize to get current page size.
     * Use ui.newPageSize to get new page size.
     *
     * @optionValue Define event handler function.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeChanging", optionValue: PageSizeChangingEvent): void;
    /**
     * Event fired after the page size is changed from the page size dropdown.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageSize to get current page size.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeChanged"): PageSizeChangedEvent;
    /**
     * Event fired after the page size is changed from the page size dropdown.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageSize to get current page size.
     *
     * @optionValue Define event handler function.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pageSizeChanged", optionValue: PageSizeChangedEvent): void;
    /**
     * Event fired before the pager footer is rendered (the whole area below the grid records).
     * Return false in order to cancel pager footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pagerRendering"): PagerRenderingEvent;
    /**
     * Event fired before the pager footer is rendered (the whole area below the grid records).
     * Return false in order to cancel pager footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     *
     * @optionValue Define event handler function.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pagerRendering", optionValue: PagerRenderingEvent): void;
    /**
     * Event fired after the pager footer is rendered
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pagerRendered"): PagerRenderedEvent;
    /**
     * Event fired after the pager footer is rendered
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     *
     * @optionValue Define event handler function.
     */
    igGridPaging(optionLiteral: 'option', optionName: "pagerRendered", optionValue: PagerRenderedEvent): void;
    igGridPaging(options: IgGridPaging): JQuery;
    igGridPaging(optionLiteral: 'option', optionName: string): any;
    igGridPaging(optionLiteral: 'option', options: IgGridPaging): JQuery;
    igGridPaging(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridPaging(methodName: string, ...methodParams: any[]): any;
}
interface IgGridResizingColumnSetting {
    /**
     * Column key. this is a required property in every column setting if columnIndex is not set.
     */
    columnKey?: string;
    /**
     * Column index. Can be used in place of column key. the preferred way of populating a column setting is to always use the column keys as identifiers.
     */
    columnIndex?: number;
    /**
     * Enables disables resizing for the column.
     */
    allowResizing?: boolean;
    /**
     * Minimum column width in pixels or percents.
     */
    minimumWidth?: any;
    /**
     * Maximum column width in pixels or percents.
     */
    maximumWidth?: any;
    /**
     * Option for IgGridResizingColumnSetting
     */
    [optionName: string]: any;
}
interface ColumnResizingEvent {
    (event: Event, ui: ColumnResizingEventUIParam): void;
}
interface ColumnResizingEventUIParam {
    /**
     * Used to get the reference to the igGridResizing widget.
     */
    owner?: any;
    /**
     * Used to get the resized column index.
     */
    columnIndex?: any;
    /**
     * Used to get the resized column key.
     */
    columnKey?: any;
    /**
     * Used to get the desired width(before min/max coercion) for the resized column.
     */
    desiredWidth?: any;
}
interface ColumnResizingRefusedEvent {
    (event: Event, ui: ColumnResizingRefusedEventUIParam): void;
}
interface ColumnResizingRefusedEventUIParam {
    /**
     * Used to get the reference to the igGridResizing widget.
     */
    owner?: any;
    /**
     * Used to get the resized column index.
     */
    columnIndex?: any;
    /**
     * Used to get the resized column key.
     */
    columnKey?: any;
    /**
     * Used to get the desired width(before min/max coercion) for the resized column.
     */
    desiredWidth?: any;
}
interface ColumnResizedEvent {
    (event: Event, ui: ColumnResizedEventUIParam): void;
}
interface ColumnResizedEventUIParam {
    /**
     * Used to get the reference to the igGridResizing widget.
     */
    owner?: any;
    /**
     * Used to get the resized column index.
     */
    columnIndex?: any;
    /**
     * Used to get the resized column key.
     */
    columnKey?: any;
    /**
     * Used to get the original column width.
     */
    originalWidth?: any;
    /**
     * Used to get the final column width after resizing.
     */
    newWidth?: any;
}
interface IgGridResizing {
    /**
     * Resize the column to the size of the longest currently visible cell value.
     */
    allowDoubleClickToResize?: boolean;
    /**
     * Specifies whether the resizing should be deferred until the user finishes resizing or applied immediately.
     */
    deferredResizing?: boolean;
    /**
     * A list of column settings that specifies resizing options on a per column basis.
     */
    columnSettings?: IgGridResizingColumnSetting[];
    /**
     * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
     */
    handleThreshold?: number;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before a resizing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     */
    columnResizing?: ColumnResizingEvent;
    /**
     * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     */
    columnResizingRefused?: ColumnResizingRefusedEvent;
    /**
     * Event fired after the resizing has been executed and results are rendered
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.originalWidth to get the original column width.
     * Use ui.newWidth to get the final column width after resizing.
     */
    columnResized?: ColumnResizedEvent;
    /**
     * Option for igGridResizing
     */
    [optionName: string]: any;
}
interface IgGridResizingMethods {
    /**
     * Destroys the resizing widget
     */
    destroy(): void;
    /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param width    Width of the column in pixels or percents. If no width is specified the column will be autofitted to the width of the data in it.
     */
    resize(column: Object, width?: Object): void;
}
interface JQuery {
    data(propertyName: "igGridResizing"): IgGridResizingMethods;
}
interface JQuery {
    igGridResizing(methodName: "destroy"): void;
    igGridResizing(methodName: "resize", column: Object, width?: Object): void;
    /**
     * Resize the column to the size of the longest currently visible cell value.
     */
    igGridResizing(optionLiteral: 'option', optionName: "allowDoubleClickToResize"): boolean;
    /**
     * Resize the column to the size of the longest currently visible cell value.
     *
     * @optionValue New value to be set.
     */
    igGridResizing(optionLiteral: 'option', optionName: "allowDoubleClickToResize", optionValue: boolean): void;
    /**
     * Gets whether the resizing should be deferred until the user finishes resizing or applied immediately.
     */
    igGridResizing(optionLiteral: 'option', optionName: "deferredResizing"): boolean;
    /**
     * Sets whether the resizing should be deferred until the user finishes resizing or applied immediately.
     *
     * @optionValue New value to be set.
     */
    igGridResizing(optionLiteral: 'option', optionName: "deferredResizing", optionValue: boolean): void;
    /**
     * A list of column settings that specifies resizing options on a per column basis.
     */
    igGridResizing(optionLiteral: 'option', optionName: "columnSettings"): IgGridResizingColumnSetting[];
    /**
     * A list of column settings that specifies resizing options on a per column basis.
     *
     * @optionValue New value to be set.
     */
    igGridResizing(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridResizingColumnSetting[]): void;
    /**
     * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
     */
    igGridResizing(optionLiteral: 'option', optionName: "handleThreshold"): number;
    /**
     * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
     *
     * @optionValue New value to be set.
     */
    igGridResizing(optionLiteral: 'option', optionName: "handleThreshold", optionValue: number): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridResizing(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridResizing(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before a resizing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     */
    igGridResizing(optionLiteral: 'option', optionName: "columnResizing"): ColumnResizingEvent;
    /**
     * Event fired before a resizing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     *
     * @optionValue Define event handler function.
     */
    igGridResizing(optionLiteral: 'option', optionName: "columnResizing", optionValue: ColumnResizingEvent): void;
    /**
     * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     */
    igGridResizing(optionLiteral: 'option', optionName: "columnResizingRefused"): ColumnResizingRefusedEvent;
    /**
     * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     *
     * @optionValue Define event handler function.
     */
    igGridResizing(optionLiteral: 'option', optionName: "columnResizingRefused", optionValue: ColumnResizingRefusedEvent): void;
    /**
     * Event fired after the resizing has been executed and results are rendered
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.originalWidth to get the original column width.
     * Use ui.newWidth to get the final column width after resizing.
     */
    igGridResizing(optionLiteral: 'option', optionName: "columnResized"): ColumnResizedEvent;
    /**
     * Event fired after the resizing has been executed and results are rendered
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.originalWidth to get the original column width.
     * Use ui.newWidth to get the final column width after resizing.
     *
     * @optionValue Define event handler function.
     */
    igGridResizing(optionLiteral: 'option', optionName: "columnResized", optionValue: ColumnResizedEvent): void;
    igGridResizing(options: IgGridResizing): JQuery;
    igGridResizing(optionLiteral: 'option', optionName: string): any;
    igGridResizing(optionLiteral: 'option', options: IgGridResizing): JQuery;
    igGridResizing(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridResizing(methodName: string, ...methodParams: any[]): any;
}
interface IgGridResponsiveColumnSetting {
    /**
     * Column key. This is a required property in every column setting if columnIndex is not set.
     */
    columnKey?: string;
    /**
     * Column index. Can be used in place of column key. The preferred way of populating a column setting is to always use the column keys as identifiers.
     */
    columnIndex?: number;
    /**
     * A list of predefined classes to decide element's visibility on.
     */
    classes?: string;
    /**
     * A configuration object to use for the responsive functionality. Uses the keys defined in the widget's responsiveModes object. The classes property is not used if this one is set.
     */
    configuration?: any;
    /**
     * Option for IgGridResponsiveColumnSetting
     */
    [optionName: string]: any;
}
interface IgGridResponsiveAllowedColumnWidthPerType {
    /**
     * Minimal width in pixels string columns can take before forcing vertical rendering
     */
    string?: number;
    /**
     * Minimal width in pixels number columns can take before forcing vertical rendering
     */
    number?: number;
    /**
     * Minimal width in pixels bool columns can take before forcing vertical rendering
     */
    bool?: number;
    /**
     * Minimal width in pixels date columns can take before forcing vertical rendering
     */
    date?: number;
    /**
     * Minimal width in pixels object columns can take before forcing vertical rendering
     */
    object?: number;
    /**
     * Option for IgGridResponsiveAllowedColumnWidthPerType
     */
    [optionName: string]: any;
}
interface ResponsiveColumnHidingEvent {
    (event: Event, ui: ResponsiveColumnHidingEventUIParam): void;
}
interface ResponsiveColumnHidingEventUIParam {
    /**
     * Used to get the reference to the igGridResponsive widget.
     */
    owner?: any;
    /**
     * Used to get the hidden column index. Has a value only if the column's key is a number.
     */
    columnIndex?: any;
    /**
     * Used to get the hidden column key. Has a value only if the column's key is a string.
     */
    columnKey?: any;
}
interface ResponsiveColumnHiddenEvent {
    (event: Event, ui: ResponsiveColumnHiddenEventUIParam): void;
}
interface ResponsiveColumnHiddenEventUIParam {
    /**
     * Used to get the reference to the igGridResponsive widget.
     */
    owner?: any;
    /**
     * Used to get the hidden column index. Has a value only if the column's key is a number.
     */
    columnIndex?: any;
    /**
     * Used to get the hidden column key. Has a value only if the column's key is a string.
     */
    columnKey?: any;
}
interface ResponsiveColumnShowingEvent {
    (event: Event, ui: ResponsiveColumnShowingEventUIParam): void;
}
interface ResponsiveColumnShowingEventUIParam {
    /**
     * Used to get the reference to the igGridResponsive widget.
     */
    owner?: any;
    /**
     * Used to get the shown column index. Has a value only if the column's key is a number.
     */
    columnIndex?: any;
    /**
     * Used to get the shown column key. Has a value only if the column's key is a string.
     */
    columnKey?: any;
}
interface ResponsiveColumnShownEvent {
    (event: Event, ui: ResponsiveColumnShownEventUIParam): void;
}
interface ResponsiveColumnShownEventUIParam {
    /**
     * Used to get the reference to the igGridResponsive widget.
     */
    owner?: any;
    /**
     * Used to get the shown column index. Has a value only if the column's key is a number.
     */
    columnIndex?: any;
    /**
     * Used to get the shown column key. Has a value only if the column's key is a string.
     */
    columnKey?: any;
}
interface ResponsiveModeChangedEvent {
    (event: Event, ui: ResponsiveModeChangedEventUIParam): void;
}
interface ResponsiveModeChangedEventUIParam {
    /**
     * Used to get the reference to the igGridResponsive widget.
     */
    owner?: any;
    /**
     * Used to get the previously assumed mode.
     */
    previousMode?: any;
    /**
     * Used to get the newly assumed mode.
     */
    mode?: any;
}
interface IgGridResponsive {
    /**
     * A list of column settings that specifies how columns will react based on the environment the grid is run on.
     */
    columnSettings?: IgGridResponsiveColumnSetting[];
    /**
     * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
     */
    reactOnContainerWidthChanges?: boolean;
    /**
     * If this option is set to true the widget will ensure the grid's width is always set to 100%.
     */
    forceResponsiveGridWidth?: boolean;
    /**
     * The amount of pixels the window needs to resize with for the grid to respond.
     */
    responsiveSensitivity?: number;
    /**
     * The recognized types of environments and their configuration.
     */
    responsiveModes?: any;
    /**
     * Enable or disable the responsive vertical rendering for the grid.
     */
    enableVerticalRendering?: boolean;
    /**
     * The window's width under which the grid will render its contents vertically.
     */
    windowWidthToRenderVertically?: any;
    /**
     * The width of the properties column when vertical rendering is enabled
     */
    propertiesColumnWidth?: any;
    /**
     * The width of the values column when vertical rendering is enabled
     */
    valuesColumnWidth?: any;
    /**
     * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
     * forcing vertical rendering for the grid
     */
    allowedColumnWidthPerType?: IgGridResponsiveAllowedColumnWidthPerType;
    /**
     * Specifies a template to render a record with in a list-view style layout per mode.
     */
    singleColumnTemplate?: any;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before a hiding operation is executed on a collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    responsiveColumnHiding?: ResponsiveColumnHidingEvent;
    /**
     * Event fired after a hiding operation is executed on the collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    responsiveColumnHidden?: ResponsiveColumnHiddenEvent;
    /**
     * Event fired before a showing operation is executed on a collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
     */
    responsiveColumnShowing?: ResponsiveColumnShowingEvent;
    /**
     * Event fired after a showing operation is executed on the collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
     */
    responsiveColumnShown?: ResponsiveColumnShownEvent;
    /**
     * Event which is fired when the widget detects an environment change.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.previousMode to get the previously assumed mode.
     * Use ui.mode to get the newly assumed mode.
     */
    responsiveModeChanged?: ResponsiveModeChangedEvent;
    /**
     * Option for igGridResponsive
     */
    [optionName: string]: any;
}
interface IgGridResponsiveMethods {
    /**
     * Destroys the responsive widget.
     */
    destroy(): void;
    /**
     * Returns the currently active responsive mode.
     */
    getCurrentResponsiveMode(): void;
}
interface JQuery {
    data(propertyName: "igGridResponsive"): IgGridResponsiveMethods;
}
interface ResponsiveModeSettings {
    minWidth?: number;
    maxWidth?: any;
    minHeight?: number;
    maxHeight?: any;
    /**
     * Option for ResponsiveModeSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class ResponsiveMode {
        constructor(settings: ResponsiveModeSettings);
        isActive(): void;
    }
}
interface IgniteUIStatic {
    ResponsiveMode: typeof Infragistics.ResponsiveMode;
}
interface InfragisticsModeSettings {
    key?: string;
    visibilityTester?: any;
    /**
     * Option for InfragisticsModeSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class InfragisticsMode {
        constructor(settings: InfragisticsModeSettings);
        isActive(): void;
    }
}
interface IgniteUIStatic {
    InfragisticsMode: typeof Infragistics.InfragisticsMode;
}
interface BootstrapModeSettings {
    key?: string;
    visibilityTester?: any;
    /**
     * Option for BootstrapModeSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class BootstrapMode {
        constructor(settings: BootstrapModeSettings);
        isActive(): void;
    }
}
interface IgniteUIStatic {
    BootstrapMode: typeof Infragistics.BootstrapMode;
}
interface JQuery {
    igGridResponsive(methodName: "destroy"): void;
    igGridResponsive(methodName: "getCurrentResponsiveMode"): void;
    /**
     * A list of column settings that specifies how columns will react based on the environment the grid is run on.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "columnSettings"): IgGridResponsiveColumnSetting[];
    /**
     * A list of column settings that specifies how columns will react based on the environment the grid is run on.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridResponsiveColumnSetting[]): void;
    /**
     * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "reactOnContainerWidthChanges"): boolean;
    /**
     * If this option is set to true an igResponsiveContainer widget will be attached to the igGrid control which will notify the feature when changes in the width of the container occur.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "reactOnContainerWidthChanges", optionValue: boolean): void;
    /**
     * If this option is set to true the widget will ensure the grid's width is always set to 100%.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "forceResponsiveGridWidth"): boolean;
    /**
     * If this option is set to true the widget will ensure the grid's width is always set to 100%.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "forceResponsiveGridWidth", optionValue: boolean): void;
    /**
     * The amount of pixels the window needs to resize with for the grid to respond.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveSensitivity"): number;
    /**
     * The amount of pixels the window needs to resize with for the grid to respond.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveSensitivity", optionValue: number): void;
    /**
     * The recognized types of environments and their configuration.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveModes"): any;
    /**
     * The recognized types of environments and their configuration.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveModes", optionValue: any): void;
    /**
     * Enable or disable the responsive vertical rendering for the grid.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "enableVerticalRendering"): boolean;
    /**
     * Enable or disable the responsive vertical rendering for the grid.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "enableVerticalRendering", optionValue: boolean): void;
    /**
     * The window's width under which the grid will render its contents vertically.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "windowWidthToRenderVertically"): any;
    /**
     * The window's width under which the grid will render its contents vertically.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "windowWidthToRenderVertically", optionValue: any): void;
    /**
     * The width of the properties column when vertical rendering is enabled
     */
    igGridResponsive(optionLiteral: 'option', optionName: "propertiesColumnWidth"): any;
    /**
     * The width of the properties column when vertical rendering is enabled
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "propertiesColumnWidth", optionValue: any): void;
    /**
     * The width of the values column when vertical rendering is enabled
     */
    igGridResponsive(optionLiteral: 'option', optionName: "valuesColumnWidth"): any;
    /**
     * The width of the values column when vertical rendering is enabled
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "valuesColumnWidth", optionValue: any): void;
    /**
     * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
     * forcing vertical rendering for the grid
     */
    igGridResponsive(optionLiteral: 'option', optionName: "allowedColumnWidthPerType"): IgGridResponsiveAllowedColumnWidthPerType;
    /**
     * When windowWidthToRenderVertically is null, determine minimal widths columns can take before
     * forcing vertical rendering for the grid
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "allowedColumnWidthPerType", optionValue: IgGridResponsiveAllowedColumnWidthPerType): void;
    /**
     * Gets a template to render a record with in a list-view style layout per mode.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "singleColumnTemplate"): any;
    /**
     * Sets a template to render a record with in a list-view style layout per mode.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "singleColumnTemplate", optionValue: any): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before a hiding operation is executed on a collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnHiding"): ResponsiveColumnHidingEvent;
    /**
     * Event fired before a hiding operation is executed on a collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnHiding", optionValue: ResponsiveColumnHidingEvent): void;
    /**
     * Event fired after a hiding operation is executed on the collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnHidden"): ResponsiveColumnHiddenEvent;
    /**
     * Event fired after a hiding operation is executed on the collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnHidden", optionValue: ResponsiveColumnHiddenEvent): void;
    /**
     * Event fired before a showing operation is executed on a collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnShowing"): ResponsiveColumnShowingEvent;
    /**
     * Event fired before a showing operation is executed on a collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnShowing", optionValue: ResponsiveColumnShowingEvent): void;
    /**
     * Event fired after a showing operation is executed on the collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnShown"): ResponsiveColumnShownEvent;
    /**
     * Event fired after a showing operation is executed on the collection of columns.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the shown column key. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveColumnShown", optionValue: ResponsiveColumnShownEvent): void;
    /**
     * Event which is fired when the widget detects an environment change.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.previousMode to get the previously assumed mode.
     * Use ui.mode to get the newly assumed mode.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveModeChanged"): ResponsiveModeChangedEvent;
    /**
     * Event which is fired when the widget detects an environment change.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResponsive widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.previousMode to get the previously assumed mode.
     * Use ui.mode to get the newly assumed mode.
     *
     * @optionValue Define event handler function.
     */
    igGridResponsive(optionLiteral: 'option', optionName: "responsiveModeChanged", optionValue: ResponsiveModeChangedEvent): void;
    igGridResponsive(options: IgGridResponsive): JQuery;
    igGridResponsive(optionLiteral: 'option', optionName: string): any;
    igGridResponsive(optionLiteral: 'option', options: IgGridResponsive): JQuery;
    igGridResponsive(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridResponsive(methodName: string, ...methodParams: any[]): any;
}
interface RowSelectorClickedEvent {
    (event: Event, ui: RowSelectorClickedEventUIParam): void;
}
interface RowSelectorClickedEventUIParam {
    /**
     * Used to get reference to the row the clicked row selector resides in.
     */
    row?: any;
    /**
     * Used to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
     */
    fixedRow?: any;
    /**
     * Used to get the index of the row the clicked row selector resides in.
     */
    rowIndex?: any;
    /**
     * Used to get the key of the row the clicked row selector resides in.
     */
    rowKey?: any;
    /**
     * Used tor to get reference to the row selector cell.
     */
    rowSelector?: any;
    /**
     * Used to get reference to igRowSelectors.
     */
    owner?: any;
    /**
     * Used to get reference to the igGrid the igRowSelectors are initialized for.
     */
    grid?: any;
}
interface CheckBoxStateChangingEvent {
    (event: Event, ui: CheckBoxStateChangingEventUIParam): void;
}
interface CheckBoxStateChangingEventUIParam {
    /**
     * Used to get reference to the row the clicked row selector resides in.
     */
    row?: any;
    /**
     * Used to get the index of the row the clicked row selector resides in.
     */
    rowIndex?: any;
    /**
     * Used to get the key of the row the clicked row selector resides in.
     */
    rowKey?: any;
    /**
     * Used tor to get reference to the row selector cell.
     */
    rowSelector?: any;
    /**
     * Used to get reference to igRowSelectors.
     */
    owner?: any;
    /**
     * Used to get reference to the igGrid the igRowSelectors are initialized for.
     */
    grid?: any;
    /**
     * Used to get the current state of the checkbox ("on","off").
     */
    currentState?: any;
    /**
     * Used to get the new state of the checkbox ("on","off").
     */
    newState?: any;
    /**
     * Used to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    isHeader?: any;
}
interface CheckBoxStateChangedEvent {
    (event: Event, ui: CheckBoxStateChangedEventUIParam): void;
}
interface CheckBoxStateChangedEventUIParam {
    /**
     * Used to get reference to the row the clicked row selector resides in.
     */
    row?: any;
    /**
     * Used to get the index of the row the clicked row selector resides in.
     */
    rowIndex?: any;
    /**
     * Used to get the key of the row the clicked row selector resides in.
     */
    rowKey?: any;
    /**
     * Used tor to get reference to the row selector cell.
     */
    rowSelector?: any;
    /**
     * Used to get reference to igRowSelectors.
     */
    owner?: any;
    /**
     * Used to get reference to the igGrid the igRowSelectors are initialized for.
     */
    grid?: any;
    /**
     * Used to get the state of the checkbox ("on","off").
     */
    state?: any;
    /**
     * Used to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    isHeader?: any;
}
interface IgGridRowSelectors {
    /**
     * Determines whether the row selectors column should contain row numbering
     */
    enableRowNumbering?: boolean;
    /**
     * Determines whether the row selectors column should contain checkboxes
     */
    enableCheckBoxes?: boolean;
    /**
     * The seed to be added to the default numbering
     */
    rowNumberingSeed?: number;
    rowSelectorColumnWidth?: any;
    /**
     * Determines whether the selection feature is required for the row selectors. If set to "false"
     * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
     * not available.
     */
    requireSelection?: boolean;
    /**
     * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
     */
    showCheckBoxesOnFocus?: boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
     */
    enableSelectAllForPaging?: boolean;
    /**
     * Custom template for "select all" overlay with paging
     * Element with attribute data-rs-select-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     */
    selectAllForPagingTemplate?: string;
    /**
     * Custom template for "deselect all" overlay with paging
     * Element with attribute data-rs-deselect-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     */
    deselectAllForPagingTemplate?: string;
    /**
     * Event fired after a row selector is clicked.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     */
    rowSelectorClicked?: RowSelectorClickedEvent;
    /**
     * Event fired when a row selector checkbox is changing.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.currentState to get the current state of the checkbox ("on","off").
     * Use ui.newState to get the new state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    checkBoxStateChanging?: CheckBoxStateChangingEvent;
    /**
     * Event fired after a row selector checkbox had changed state.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.state to get the state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    checkBoxStateChanged?: CheckBoxStateChangedEvent;
    /**
     * Option for igGridRowSelectors
     */
    [optionName: string]: any;
}
interface IgGridRowSelectorsMethods {
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igGridRowSelectors"): IgGridRowSelectorsMethods;
}
interface JQuery {
    igGridRowSelectors(methodName: "destroy"): void;
    /**
     * Determines whether the row selectors column should contain row numbering
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "enableRowNumbering"): boolean;
    /**
     * Determines whether the row selectors column should contain row numbering
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "enableRowNumbering", optionValue: boolean): void;
    /**
     * Determines whether the row selectors column should contain checkboxes
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "enableCheckBoxes"): boolean;
    /**
     * Determines whether the row selectors column should contain checkboxes
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "enableCheckBoxes", optionValue: boolean): void;
    /**
     * The seed to be added to the default numbering
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "rowNumberingSeed"): number;
    /**
     * The seed to be added to the default numbering
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "rowNumberingSeed", optionValue: number): void;
    /**
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorColumnWidth"): any;
    /**
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorColumnWidth", optionValue: any): void;
    /**
     * Determines whether the selection feature is required for the row selectors. If set to "false"
     * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
     * not available.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "requireSelection"): boolean;
    /**
     * Determines whether the selection feature is required for the row selectors. If set to "false"
     * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
     * not available.
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "requireSelection", optionValue: boolean): void;
    /**
     * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "showCheckBoxesOnFocus"): boolean;
    /**
     * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "showCheckBoxesOnFocus", optionValue: boolean): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "enableSelectAllForPaging"): boolean;
    /**
     * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "enableSelectAllForPaging", optionValue: boolean): void;
    /**
     * Custom template for "select all" overlay with paging
     * Element with attribute data-rs-select-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "selectAllForPagingTemplate"): string;
    /**
     * Custom template for "select all" overlay with paging
     * Element with attribute data-rs-select-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "selectAllForPagingTemplate", optionValue: string): void;
    /**
     * Custom template for "deselect all" overlay with paging
     * Element with attribute data-rs-deselect-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "deselectAllForPagingTemplate"): string;
    /**
     * Custom template for "deselect all" overlay with paging
     * Element with attribute data-rs-deselect-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     *
     * @optionValue New value to be set.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "deselectAllForPagingTemplate", optionValue: string): void;
    /**
     * Event fired after a row selector is clicked.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorClicked"): RowSelectorClickedEvent;
    /**
     * Event fired after a row selector is clicked.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     *
     * @optionValue Define event handler function.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorClicked", optionValue: RowSelectorClickedEvent): void;
    /**
     * Event fired when a row selector checkbox is changing.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.currentState to get the current state of the checkbox ("on","off").
     * Use ui.newState to get the new state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanging"): CheckBoxStateChangingEvent;
    /**
     * Event fired when a row selector checkbox is changing.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.currentState to get the current state of the checkbox ("on","off").
     * Use ui.newState to get the new state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     *
     * @optionValue Define event handler function.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanging", optionValue: CheckBoxStateChangingEvent): void;
    /**
     * Event fired after a row selector checkbox had changed state.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.state to get the state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanged"): CheckBoxStateChangedEvent;
    /**
     * Event fired after a row selector checkbox had changed state.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.state to get the state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     *
     * @optionValue Define event handler function.
     */
    igGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanged", optionValue: CheckBoxStateChangedEvent): void;
    igGridRowSelectors(options: IgGridRowSelectors): JQuery;
    igGridRowSelectors(optionLiteral: 'option', optionName: string): any;
    igGridRowSelectors(optionLiteral: 'option', options: IgGridRowSelectors): JQuery;
    igGridRowSelectors(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridRowSelectors(methodName: string, ...methodParams: any[]): any;
}
interface RowSelectionChangingEvent {
    (event: Event, ui: RowSelectionChangingEventUIParam): void;
}
interface RowSelectionChangingEventUIParam {
    /**
     * Used to get reference to igGridSelection.
     */
    owner?: any;
    /**
     * Used to get reference to rows object array.
     */
    selectedRows?: any;
    /**
     * Used to get the start index for a range row selection.
     */
    startIndex?: any;
    /**
     * Used to get the end index for a range row selection.
     */
    endIndex?: any;
}
interface RowSelectionChangedEvent {
    (event: Event, ui: RowSelectionChangedEventUIParam): void;
}
interface RowSelectionChangedEventUIParam {
    /**
     * Used to get reference to igGridSelection.
     */
    owner?: any;
    /**
     * Used to get reference to rows object array.
     */
    selectedRows?: any;
}
interface CellSelectionChangingEvent {
    (event: Event, ui: CellSelectionChangingEventUIParam): void;
}
interface CellSelectionChangingEventUIParam {
    /**
     * Used to get reference to igGridSelection.
     */
    owner?: any;
    /**
     * Used to get reference to selected cells object array.
     */
    selectedCells?: any;
    /**
     * Used to get the column index for the first cell in a range selection.
     */
    firstColumnIndex?: any;
    /**
     * Used to get the row index for the first cell in a range selection.
     */
    firstRowIndex?: any;
    /**
     * Used to get the column index for the last cell in a range selection.
     */
    lastColumnIndex?: any;
    /**
     * Used to get the row index for the last cell in a range selection.
     */
    lastRowIndex?: any;
}
interface CellSelectionChangedEvent {
    (event: Event, ui: CellSelectionChangedEventUIParam): void;
}
interface CellSelectionChangedEventUIParam {
    /**
     * Used to get reference to igGridSelection.
     */
    owner?: any;
    /**
     * Used to get reference to selected cells object array.
     */
    selectedCells?: any;
}
interface ActiveCellChangingEvent {
    (event: Event, ui: ActiveCellChangingEventUIParam): void;
}
interface ActiveCellChangingEventUIParam {
    /**
     * Used to get reference to igGridSelection.
     */
    owner?: any;
}
interface ActiveCellChangedEvent {
    (event: Event, ui: ActiveCellChangedEventUIParam): void;
}
interface ActiveCellChangedEventUIParam {
    /**
     * Used to get reference to igGridSelection.
     */
    owner?: any;
}
interface ActiveRowChangingEvent {
    (event: Event, ui: ActiveRowChangingEventUIParam): void;
}
interface ActiveRowChangingEventUIParam {
    /**
     * Used to get reference to igGridSelection.
     */
    owner?: any;
}
interface ActiveRowChangedEvent {
    (event: Event, ui: ActiveRowChangedEventUIParam): void;
}
interface ActiveRowChangedEventUIParam {
    /**
     * Used to get reference to igGridSelection.
     */
    owner?: any;
}
interface IgGridSelection {
    /**
     * Enables / Disables multiple selection of cells and rows - depending on the mode
     */
    multipleSelection?: boolean;
    /**
     * Enables / disables selection via dragging with the mouse - only applicable for cell selection
     */
    mouseDragSelect?: boolean;
    /**
     * Defines type of the selection.
     *
     * Valid values:
     * "row" Defines row selection mode.
     * "cell" Defines cell selection mode.
     */
    mode?: any;
    /**
     * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
     */
    activation?: boolean;
    /**
     * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
     */
    wrapAround?: boolean;
    /**
     * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
     */
    skipChildren?: boolean;
    /**
     * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
     */
    multipleCellSelectOnClick?: boolean;
    /**
     * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
     */
    touchDragSelect?: boolean;
    /**
     * Enables / disables selection persistance between states.
     */
    persist?: boolean;
    /**
     * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
     */
    allowMultipleRangeSelection?: boolean;
    /**
     * Event fired before row(s) are about to be selected (cancellable).
     * Return false in order to cancel selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     * Use ui.startIndex to get the start index for a range row selection.
     * Use ui.endIndex to get the end index for a range row selection.
     */
    rowSelectionChanging?: RowSelectionChangingEvent;
    /**
     * Event fired after row(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     */
    rowSelectionChanged?: RowSelectionChangedEvent;
    /**
     * Event fired before cell(s) are about to be selected (cancellable).
     * Return false in order to cancel cell selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
     * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
     * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
     * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
     */
    cellSelectionChanging?: CellSelectionChangingEvent;
    /**
     * Event fired after cell(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     */
    cellSelectionChanged?: CellSelectionChangedEvent;
    /**
     * Event fired before a cell becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active cell changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     */
    activeCellChanging?: ActiveCellChangingEvent;
    /**
     * Event fired after a cell becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     */
    activeCellChanged?: ActiveCellChangedEvent;
    /**
     * Event fired before a row becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active row changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     */
    activeRowChanging?: ActiveRowChangingEvent;
    /**
     * Event fired after a row becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     */
    activeRowChanged?: ActiveRowChangedEvent;
    /**
     * Option for igGridSelection
     */
    [optionName: string]: any;
}
interface IgGridSelectionMethods {
    destroy(): void;
    /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     */
    clearSelection(): void;
    /**
     * Selects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed
     */
    selectCell(row: number, col: number, isFixed: Object): void;
    /**
     * Selects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    selectCellById(id: Object, colKey: string): void;
    /**
     * Deselects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed
     */
    deselectCell(row: number, col: number, isFixed: Object): void;
    /**
     * Deselects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    deselectCellById(id: Object, colKey: string): void;
    /**
     * Selects a row by index
     *
     * @param index     Row index
     */
    selectRow(index: number): void;
    /**
     * Selects a row by row id
     *
     * @param id     Row Id
     */
    selectRowById(id: Object): void;
    /**
     * Deselects a row by index
     *
     * @param index     Row index
     */
    deselectRow(index: number): void;
    /**
     * Deselects a row by row id
     *
     * @param id     Row Id
     */
    deselectRowById(id: Object): void;
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     * If multiple selection is disabled the function will return null.
     */
    selectedCells(): any[];
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     * If multiple selection is disabled the function will return null.
     */
    selectedRows(): any[];
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * If multiple selection is enabled the function will return null.
     */
    selectedCell(): Object;
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     * If multiple selection is enabled the function will return null.
     */
    selectedRow(): Object;
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     */
    activeCell(): Object;
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     */
    activeRow(): Object;
}
interface JQuery {
    data(propertyName: "igGridSelection"): IgGridSelectionMethods;
}
interface SelectionCollectionSettingsSubscribers {
    /**
     * Option for SelectionCollectionSettingsSubscribers
     */
    [optionName: string]: any;
}
interface SelectionCollectionSettings {
    multipleSelection?: boolean;
    subscribers?: SelectionCollectionSettingsSubscribers;
    owner?: any;
    /**
     * Option for SelectionCollectionSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class SelectionCollection {
        constructor(settings: SelectionCollectionSettings);
        addSubscriber(subscriber: Object, owner: Object): void;
        removeSubscriber(subscriberId: Object, owner: Object): void;
        changeOwner(newOwner: Object): void;
        isSelected(identifier: Object, forOwner: Object): void;
        isActive(identifier: Object, forOwner: Object): void;
        elementFromIdentifier(identifier: Object): void;
        toggle(element: Object): void;
        activate(identifier: Object, element: Object, suppress: Object): void;
        deactivate(suppress: Object): void;
        select(identifier: Object, add: Object, info: Object, suppress: Object): void;
        rangeSelect(range: Object, add: Object, prevRange: Object, info: Object, suppress: Object): void;
        rangeDeselect(range: Object, info: Object, suppress: Object): void;
        deselect(identifier: Object, info: Object, suppress: Object): void;
        deselectAll(suppress: Object): void;
        clearSelection(forOwner: Object): void;
        cleanAll(forOwner: Object): void;
        onlyOneSelected(): void;
        selectedCells(): void;
        selectedRows(): void;
        selectionLength(): void;
    }
}
interface IgniteUIStatic {
    SelectionCollection: typeof Infragistics.SelectionCollection;
}
declare module Infragistics {
    class SelectedRowsCollection {
        constructor(settings: SelectionCollectionSettings);
        isSelected(identifier: Object, forOwner: Object): void;
        isActive(identifier: Object, forOwner: Object): void;
        selectedRows(): void;
        activeRow(): void;
        elementFromIdentifier(identifier: Object): void;
        elementPosition(identifier: Object, element: Object): void;
        onlyOneSelected(): void;
        addSubscriber(subscriber: Object, owner: Object): void;
        removeSubscriber(subscriberId: Object, owner: Object): void;
        changeOwner(newOwner: Object): void;
        toggle(element: Object): void;
        activate(identifier: Object, element: Object, suppress: Object): void;
        deactivate(suppress: Object): void;
        select(identifier: Object, add: Object, info: Object, suppress: Object): void;
        rangeSelect(range: Object, add: Object, prevRange: Object, info: Object, suppress: Object): void;
        rangeDeselect(range: Object, info: Object, suppress: Object): void;
        deselect(identifier: Object, info: Object, suppress: Object): void;
        deselectAll(suppress: Object): void;
        clearSelection(forOwner: Object): void;
        cleanAll(forOwner: Object): void;
        selectedCells(): void;
        selectionLength(): void;
    }
}
interface IgniteUIStatic {
    SelectedRowsCollection: typeof Infragistics.SelectedRowsCollection;
}
declare module Infragistics {
    class SelectedCellsCollection {
        constructor(settings: SelectionCollectionSettings);
        isSelected(identifier: Object, forOwner: Object): void;
        atLeastOneSelected(rowId: Object, forOwner: Object): void;
        isActive(identifier: Object, forOwner: Object): void;
        selectedCells(): void;
        activeCell(): void;
        elementFromIdentifier(identifier: Object): void;
        elementPosition(identifier: Object, element: Object): void;
        onlyOneSelected(): void;
        addSubscriber(subscriber: Object, owner: Object): void;
        removeSubscriber(subscriberId: Object, owner: Object): void;
        changeOwner(newOwner: Object): void;
        toggle(element: Object): void;
        activate(identifier: Object, element: Object, suppress: Object): void;
        deactivate(suppress: Object): void;
        select(identifier: Object, add: Object, info: Object, suppress: Object): void;
        rangeSelect(range: Object, add: Object, prevRange: Object, info: Object, suppress: Object): void;
        rangeDeselect(range: Object, info: Object, suppress: Object): void;
        deselect(identifier: Object, info: Object, suppress: Object): void;
        deselectAll(suppress: Object): void;
        clearSelection(forOwner: Object): void;
        cleanAll(forOwner: Object): void;
        selectedRows(): void;
        selectionLength(): void;
    }
}
interface IgniteUIStatic {
    SelectedCellsCollection: typeof Infragistics.SelectedCellsCollection;
}
interface JQuery {
    igGridSelection(methodName: "destroy"): void;
    igGridSelection(methodName: "clearSelection"): void;
    igGridSelection(methodName: "selectCell", row: number, col: number, isFixed: Object): void;
    igGridSelection(methodName: "selectCellById", id: Object, colKey: string): void;
    igGridSelection(methodName: "deselectCell", row: number, col: number, isFixed: Object): void;
    igGridSelection(methodName: "deselectCellById", id: Object, colKey: string): void;
    igGridSelection(methodName: "selectRow", index: number): void;
    igGridSelection(methodName: "selectRowById", id: Object): void;
    igGridSelection(methodName: "deselectRow", index: number): void;
    igGridSelection(methodName: "deselectRowById", id: Object): void;
    igGridSelection(methodName: "selectedCells"): any[];
    igGridSelection(methodName: "selectedRows"): any[];
    igGridSelection(methodName: "selectedCell"): Object;
    igGridSelection(methodName: "selectedRow"): Object;
    igGridSelection(methodName: "activeCell"): Object;
    igGridSelection(methodName: "activeRow"): Object;
    /**
     * Enables / Disables multiple selection of cells and rows - depending on the mode
     */
    igGridSelection(optionLiteral: 'option', optionName: "multipleSelection"): boolean;
    /**
     * Enables / Disables multiple selection of cells and rows - depending on the mode
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "multipleSelection", optionValue: boolean): void;
    /**
     * Enables / disables selection via dragging with the mouse - only applicable for cell selection
     */
    igGridSelection(optionLiteral: 'option', optionName: "mouseDragSelect"): boolean;
    /**
     * Enables / disables selection via dragging with the mouse - only applicable for cell selection
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "mouseDragSelect", optionValue: boolean): void;
    /**
     * Defines type of the selection.
     */
    igGridSelection(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Defines type of the selection.
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
     */
    igGridSelection(optionLiteral: 'option', optionName: "activation"): boolean;
    /**
     * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activation", optionValue: boolean): void;
    /**
     * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
     */
    igGridSelection(optionLiteral: 'option', optionName: "wrapAround"): boolean;
    /**
     * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "wrapAround", optionValue: boolean): void;
    /**
     * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
     */
    igGridSelection(optionLiteral: 'option', optionName: "skipChildren"): boolean;
    /**
     * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "skipChildren", optionValue: boolean): void;
    /**
     * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
     */
    igGridSelection(optionLiteral: 'option', optionName: "multipleCellSelectOnClick"): boolean;
    /**
     * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "multipleCellSelectOnClick", optionValue: boolean): void;
    /**
     * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
     */
    igGridSelection(optionLiteral: 'option', optionName: "touchDragSelect"): boolean;
    /**
     * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "touchDragSelect", optionValue: boolean): void;
    /**
     * Enables / disables selection persistance between states.
     */
    igGridSelection(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables selection persistance between states.
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
     */
    igGridSelection(optionLiteral: 'option', optionName: "allowMultipleRangeSelection"): boolean;
    /**
     * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
     *
     * @optionValue New value to be set.
     */
    igGridSelection(optionLiteral: 'option', optionName: "allowMultipleRangeSelection", optionValue: boolean): void;
    /**
     * Event fired before row(s) are about to be selected (cancellable).
     * Return false in order to cancel selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     * Use ui.startIndex to get the start index for a range row selection.
     * Use ui.endIndex to get the end index for a range row selection.
     */
    igGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanging"): RowSelectionChangingEvent;
    /**
     * Event fired before row(s) are about to be selected (cancellable).
     * Return false in order to cancel selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     * Use ui.startIndex to get the start index for a range row selection.
     * Use ui.endIndex to get the end index for a range row selection.
     *
     * @optionValue Define event handler function.
     */
    igGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanging", optionValue: RowSelectionChangingEvent): void;
    /**
     * Event fired after row(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     */
    igGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanged"): RowSelectionChangedEvent;
    /**
     * Event fired after row(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     *
     * @optionValue Define event handler function.
     */
    igGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanged", optionValue: RowSelectionChangedEvent): void;
    /**
     * Event fired before cell(s) are about to be selected (cancellable).
     * Return false in order to cancel cell selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
     * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
     * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
     * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
     */
    igGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanging"): CellSelectionChangingEvent;
    /**
     * Event fired before cell(s) are about to be selected (cancellable).
     * Return false in order to cancel cell selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
     * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
     * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
     * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
     *
     * @optionValue Define event handler function.
     */
    igGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanging", optionValue: CellSelectionChangingEvent): void;
    /**
     * Event fired after cell(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     */
    igGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanged"): CellSelectionChangedEvent;
    /**
     * Event fired after cell(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     *
     * @optionValue Define event handler function.
     */
    igGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanged", optionValue: CellSelectionChangedEvent): void;
    /**
     * Event fired before a cell becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active cell changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activeCellChanging"): ActiveCellChangingEvent;
    /**
     * Event fired before a cell becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active cell changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     *
     * @optionValue Define event handler function.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activeCellChanging", optionValue: ActiveCellChangingEvent): void;
    /**
     * Event fired after a cell becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activeCellChanged"): ActiveCellChangedEvent;
    /**
     * Event fired after a cell becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     *
     * @optionValue Define event handler function.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activeCellChanged", optionValue: ActiveCellChangedEvent): void;
    /**
     * Event fired before a row becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active row changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activeRowChanging"): ActiveRowChangingEvent;
    /**
     * Event fired before a row becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active row changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     *
     * @optionValue Define event handler function.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activeRowChanging", optionValue: ActiveRowChangingEvent): void;
    /**
     * Event fired after a row becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activeRowChanged"): ActiveRowChangedEvent;
    /**
     * Event fired after a row becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     *
     * @optionValue Define event handler function.
     */
    igGridSelection(optionLiteral: 'option', optionName: "activeRowChanged", optionValue: ActiveRowChangedEvent): void;
    igGridSelection(options: IgGridSelection): JQuery;
    igGridSelection(optionLiteral: 'option', optionName: string): any;
    igGridSelection(optionLiteral: 'option', options: IgGridSelection): JQuery;
    igGridSelection(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridSelection(methodName: string, ...methodParams: any[]): any;
}
interface IgGridSortingColumnSetting {
    /**
     * Column key. Either key or index must be set in every column setting
     */
    columnKey?: string;
    /**
     * Column index. Either key or index must be set in every column setting
     */
    columnIndex?: number;
    /**
     * This will be the first sort direction when the column hasn't been sorted before
     *
     * Valid values:
     * "asc"
     * "desc"
     */
    firstSortDirection?: any;
    /**
     * The current (or default) sort direction. If this setting is specified, the column will be rendered sorted according to this option.
     *
     * Valid values:
     * "asc"
     * "desc"
     */
    currentSortDirection?: any;
    /**
     * Enables / disables sorting on the specified column. By default all columns are sortable
     */
    allowSorting?: boolean;
    /**
     * Option for IgGridSortingColumnSetting
     */
    [optionName: string]: any;
}
interface ColumnSortingEvent {
    (event: Event, ui: ColumnSortingEventUIParam): void;
}
interface ColumnSortingEventUIParam {
    /**
     * Used to get reference to igGridSorting.
     */
    owner?: any;
    /**
     * Used to get column key.
     */
    columnKey?: any;
    /**
     * Used to get sorting direction.
     */
    direction?: any;
    /**
     * Used to get sorting expressions.
     */
    newExpressions?: any;
}
interface ColumnSortedEvent {
    (event: Event, ui: ColumnSortedEventUIParam): void;
}
interface ColumnSortedEventUIParam {
    /**
     * Used to get reference to igGridSorting.
     */
    owner?: any;
    /**
     * Used to get column key.
     */
    columnKey?: any;
    /**
     * Used to get sorting direction.
     */
    direction?: any;
    /**
     * Used to get sorted expressions.
     */
    expressions?: any;
}
interface ModalDialogSortingChangedEvent {
    (event: Event, ui: ModalDialogSortingChangedEventUIParam): void;
}
interface ModalDialogSortingChangedEventUIParam {
    /**
     * Used to get the reference to the igGridSorting widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
    /**
     * Used to get the column key
     */
    columnKey?: any;
    /**
     * Used to get whether column should be ascending or not. If true it should be ascending
     */
    isAsc?: any;
}
interface ModalDialogButtonUnsortClickEvent {
    (event: Event, ui: ModalDialogButtonUnsortClickEventUIParam): void;
}
interface ModalDialogButtonUnsortClickEventUIParam {
    /**
     * Used to get the reference to the igGridSorting widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
    /**
     * Used to get the column key
     */
    columnKey?: any;
}
interface ModalDialogSortClickEvent {
    (event: Event, ui: ModalDialogSortClickEventUIParam): void;
}
interface ModalDialogSortClickEventUIParam {
    /**
     * Used to get the reference to the igGridSorting widget.
     */
    owner?: any;
    /**
     * Used to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogElement?: any;
    /**
     * Used to get the column key
     */
    columnKey?: any;
}
interface IgGridSorting {
    /**
     * Defines local or remote sorting.
     *
     * Valid values:
     * "remote"
     * "local"
     */
    type?: any;
    /**
     * Enables or disables the case sensitivity of the sorting. Works only for local sorting
     */
    caseSensitive?: boolean;
    /**
     * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling
     */
    applySortedColumnCss?: boolean;
    /**
     * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
     */
    sortUrlKey?: string;
    /**
     * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
     */
    sortUrlKeyAscValue?: string;
    /**
     * URL param value for descending type of sorting. Uses OData conventions
     */
    sortUrlKeyDescValue?: string;
    /**
     * Defines single column sorting or multiple column sorting.
     *
     * Valid values:
     * "single"
     * "multi" if enabled, previous sorted state for columns won't be cleared
     */
    mode?: any;
    /**
     * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array
     */
    customSortFunction?: Function;
    /**
     * Specifies which direction to use on the first click / keydown, if the column hasn't been sorted before
     *
     * Valid values:
     * "ascending"
     * "descending"
     */
    firstSortDirection?: any;
    /**
     * Custom sorted column tooltip in jQuery templating format
     */
    sortedColumnTooltip?: string;
    /**
     * Specifies whether sorting to be applied immediately when click sort/unsort columns in multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked
     */
    modalDialogSortOnClick?: boolean;
    /**
     * Specifies sortby button text for each unsorted column in multiple sorting dialog
     */
    modalDialogSortByButtonText?: string;
    /**
     * Specifies sortby button label for each unsorted column in multiple sorting dialog
     */
    modalDialogResetButtonLabel?: string;
    /**
     * Specifies caption for each descending sorted column in multiple sorting dialog
     */
    modalDialogCaptionButtonDesc?: string;
    /**
     * Specifies caption for each ascending sorted column in multiple sorting dialog
     */
    modalDialogCaptionButtonAsc?: string;
    /**
     * Specifies caption for unsort button in multiple sorting dialog
     */
    modalDialogCaptionButtonUnsort?: string;
    /**
     * Specifies width of multiple sorting dialog
     */
    modalDialogWidth?: number;
    /**
     * Specifies height of multiple sorting dialog
     */
    modalDialogHeight?: any;
    /**
     * Specifies time of milliseconds for animation duration to show/hide modal dialog
     */
    modalDialogAnimationDuration?: number;
    /**
     * Specifies text in feature chooser
     */
    featureChooserText?: string;
    /**
     * Custom unsorted column tooltip in jQuery templating format
     */
    unsortedColumnTooltip?: string;
    /**
     * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.)
     */
    columnSettings?: IgGridSortingColumnSetting[];
    /**
     * Specifies caption text for multiple sorting dialog
     */
    modalDialogCaptionText?: string;
    /**
     * Specifies text of button which apply changes in modal dialog
     */
    modalDialogButtonApplyText?: string;
    /**
     * Specifies text of button which cancel changes in modal dialog
     */
    modalDialogButtonCancelText?: string;
    /**
     * Specifies the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
     */
    featureChooserSortAsc?: string;
    /**
     * Specifies the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
     */
    featureChooserSortDesc?: string;
    /**
     * Enables / disables sorting persistence between states
     */
    persist?: boolean;
    /**
     * Controls containment behavior of multiple sorting dialog.
     * owner  The multi sorting dialog will be draggable only in the grid area
     * window  The multi sorting dialog will be draggable in the whole window area
     */
    sortingDialogContainment?: string;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before sorting is invoked for a certain column.
     * Return false in order to cancel column sorting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.newExpressions to get sorting expressions.
     */
    columnSorting?: ColumnSortingEvent;
    /**
     * Event fired after the column has already been sorted and data - re-rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.expressions to get sorted expressions.
     */
    columnSorted?: ColumnSortedEvent;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogOpening?: ModalDialogOpeningEvent;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogOpened?: ModalDialogOpenedEvent;
    /**
     * Event fired every time the modal dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
     */
    modalDialogMoving?: ModalDialogMovingEvent;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogClosing?: ModalDialogClosingEvent;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogClosed?: ModalDialogClosedEvent;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogContentsRendering?: ModalDialogContentsRenderingEvent;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogContentsRendered?: ModalDialogContentsRenderedEvent;
    /**
     * Event fired when sorting of column is changed in modal dialog. Column should be sorted
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
     */
    modalDialogSortingChanged?: ModalDialogSortingChangedEvent;
    /**
     * Event fired when button to unsort column is clicked in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     */
    modalDialogButtonUnsortClick?: ModalDialogButtonUnsortClickEvent;
    /**
     * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     */
    modalDialogSortClick?: ModalDialogSortClickEvent;
    /**
     * Event fired when button Apply in modal dialog is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
     */
    modalDialogButtonApplyClick?: ModalDialogButtonApplyClickEvent;
    /**
     * Event fired when the button to reset sorting is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogButtonResetClick?: ModalDialogButtonResetClickEvent;
    /**
     * Option for igGridSorting
     */
    [optionName: string]: any;
}
interface IgGridSortingMethods {
    /**
     * Sorts a grid column and updates the UI
     *
     * @param index     Column key (string) or index (number). Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param direction     Specifies sorting direction (ascending or descending)
     * @param header
     */
    sortColumn(index: Object, direction: Object, header: Object): void;
    /**
     * Sorts grid columns and updates the UI
     */
    sortMultiple(): void;
    /**
     * Remove current sorting(for all sorted columns) and updates the UI
     */
    clearSorting(): void;
    /**
     * Remove sorting for the grid column with the specified columnKey/columnIndex and updates the UI
     *
     * @param index     Column key (string) or index (number). Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param header     - if specified client events should be fired
     */
    unsortColumn(index: Object, header: Object): void;
    destroy(): void;
    /**
     * Open multiple sorting dialog
     */
    openMultipleSortingDialog(): void;
    /**
     * Close multiple sorting dialog
     */
    closeMultipleSortingDialog(): void;
    /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param isToCallEvents
     */
    renderMultipleSortingDialogContent(isToCallEvents: Object): void;
    /**
     * Remove clear button for multiple sorting dialog
     */
    removeDialogClearButton(): void;
}
interface JQuery {
    data(propertyName: "igGridSorting"): IgGridSortingMethods;
}
interface JQuery {
    igGridSorting(methodName: "sortColumn", index: Object, direction: Object, header: Object): void;
    igGridSorting(methodName: "sortMultiple"): void;
    igGridSorting(methodName: "clearSorting"): void;
    igGridSorting(methodName: "unsortColumn", index: Object, header: Object): void;
    igGridSorting(methodName: "destroy"): void;
    igGridSorting(methodName: "openMultipleSortingDialog"): void;
    igGridSorting(methodName: "closeMultipleSortingDialog"): void;
    igGridSorting(methodName: "renderMultipleSortingDialogContent", isToCallEvents: Object): void;
    igGridSorting(methodName: "removeDialogClearButton"): void;
    /**
     * Defines local or remote sorting.
     */
    igGridSorting(optionLiteral: 'option', optionName: "type"): any;
    /**
     * Defines local or remote sorting.
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * Enables or disables the case sensitivity of the sorting. Works only for local sorting
     */
    igGridSorting(optionLiteral: 'option', optionName: "caseSensitive"): boolean;
    /**
     * Enables or disables the case sensitivity of the sorting. Works only for local sorting
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;
    /**
     * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling
     */
    igGridSorting(optionLiteral: 'option', optionName: "applySortedColumnCss"): boolean;
    /**
     * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "applySortedColumnCss", optionValue: boolean): void;
    /**
     * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortUrlKey"): string;
    /**
     * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortUrlKey", optionValue: string): void;
    /**
     * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyAscValue"): string;
    /**
     * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyAscValue", optionValue: string): void;
    /**
     * URL param value for descending type of sorting. Uses OData conventions
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyDescValue"): string;
    /**
     * URL param value for descending type of sorting. Uses OData conventions
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyDescValue", optionValue: string): void;
    /**
     * Defines single column sorting or multiple column sorting.
     */
    igGridSorting(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Defines single column sorting or multiple column sorting.
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array
     */
    igGridSorting(optionLiteral: 'option', optionName: "customSortFunction"): Function;
    /**
     * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "customSortFunction", optionValue: Function): void;
    /**
     * Gets which direction to use on the first click / keydown, if the column hasn't been sorted before
     */
    igGridSorting(optionLiteral: 'option', optionName: "firstSortDirection"): any;
    /**
     * Sets which direction to use on the first click / keydown, if the column hasn't been sorted before
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "firstSortDirection", optionValue: any): void;
    /**
     * Custom sorted column tooltip in jQuery templating format
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortedColumnTooltip"): string;
    /**
     * Custom sorted column tooltip in jQuery templating format
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortedColumnTooltip", optionValue: string): void;
    /**
     * Gets whether sorting to be applied immediately when click sort/unsort columns in multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortOnClick"): boolean;
    /**
     * Sets whether sorting to be applied immediately when click sort/unsort columns in multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortOnClick", optionValue: boolean): void;
    /**
     * Gets sortby button text for each unsorted column in multiple sorting dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortByButtonText"): string;
    /**
     * Sets sortby button text for each unsorted column in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortByButtonText", optionValue: string): void;
    /**
     * Gets sortby button label for each unsorted column in multiple sorting dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogResetButtonLabel"): string;
    /**
     * Sets sortby button label for each unsorted column in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogResetButtonLabel", optionValue: string): void;
    /**
     * Gets caption for each descending sorted column in multiple sorting dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc"): string;
    /**
     * Sets caption for each descending sorted column in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc", optionValue: string): void;
    /**
     * Gets caption for each ascending sorted column in multiple sorting dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc"): string;
    /**
     * Sets caption for each ascending sorted column in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc", optionValue: string): void;
    /**
     * Gets caption for unsort button in multiple sorting dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUnsort"): string;
    /**
     * Sets caption for unsort button in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUnsort", optionValue: string): void;
    /**
     * Gets width of multiple sorting dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogWidth"): number;
    /**
     * Sets width of multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogWidth", optionValue: number): void;
    /**
     * Gets height of multiple sorting dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogHeight"): any;
    /**
     * Sets height of multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogHeight", optionValue: any): void;
    /**
     * Gets time of milliseconds for animation duration to show/hide modal dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogAnimationDuration"): number;
    /**
     * Sets time of milliseconds for animation duration to show/hide modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogAnimationDuration", optionValue: number): void;
    /**
     * Gets text in feature chooser
     */
    igGridSorting(optionLiteral: 'option', optionName: "featureChooserText"): string;
    /**
     * Sets text in feature chooser
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;
    /**
     * Custom unsorted column tooltip in jQuery templating format
     */
    igGridSorting(optionLiteral: 'option', optionName: "unsortedColumnTooltip"): string;
    /**
     * Custom unsorted column tooltip in jQuery templating format
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "unsortedColumnTooltip", optionValue: string): void;
    /**
     * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.)
     */
    igGridSorting(optionLiteral: 'option', optionName: "columnSettings"): IgGridSortingColumnSetting[];
    /**
     * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.)
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridSortingColumnSetting[]): void;
    /**
     * Gets caption text for multiple sorting dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionText"): string;
    /**
     * Sets caption text for multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionText", optionValue: string): void;
    /**
     * Gets text of button which apply changes in modal dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyText"): string;
    /**
     * Sets text of button which apply changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyText", optionValue: string): void;
    /**
     * Gets text of button which cancel changes in modal dialog
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonCancelText"): string;
    /**
     * Sets text of button which cancel changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonCancelText", optionValue: string): void;
    /**
     * Gets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
     */
    igGridSorting(optionLiteral: 'option', optionName: "featureChooserSortAsc"): string;
    /**
     * Sets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "featureChooserSortAsc", optionValue: string): void;
    /**
     * Gets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
     */
    igGridSorting(optionLiteral: 'option', optionName: "featureChooserSortDesc"): string;
    /**
     * Sets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "featureChooserSortDesc", optionValue: string): void;
    /**
     * Enables / disables sorting persistence between states
     */
    igGridSorting(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables sorting persistence between states
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Controls containment behavior of multiple sorting dialog.
     * owner  The multi sorting dialog will be draggable only in the grid area
     * window  The multi sorting dialog will be draggable in the whole window area
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortingDialogContainment"): string;
    /**
     * Controls containment behavior of multiple sorting dialog.
     * owner  The multi sorting dialog will be draggable only in the grid area
     * window  The multi sorting dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "sortingDialogContainment", optionValue: string): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridSorting(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridSorting(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before sorting is invoked for a certain column.
     * Return false in order to cancel column sorting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.newExpressions to get sorting expressions.
     */
    igGridSorting(optionLiteral: 'option', optionName: "columnSorting"): ColumnSortingEvent;
    /**
     * Event fired before sorting is invoked for a certain column.
     * Return false in order to cancel column sorting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.newExpressions to get sorting expressions.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "columnSorting", optionValue: ColumnSortingEvent): void;
    /**
     * Event fired after the column has already been sorted and data - re-rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.expressions to get sorted expressions.
     */
    igGridSorting(optionLiteral: 'option', optionName: "columnSorted"): ColumnSortedEvent;
    /**
     * Event fired after the column has already been sorted and data - re-rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.expressions to get sorted expressions.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "columnSorted", optionValue: ColumnSortedEvent): void;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogOpening"): ModalDialogOpeningEvent;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogOpening", optionValue: ModalDialogOpeningEvent): void;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogOpened"): ModalDialogOpenedEvent;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogOpened", optionValue: ModalDialogOpenedEvent): void;
    /**
     * Event fired every time the modal dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogMoving"): ModalDialogMovingEvent;
    /**
     * Event fired every time the modal dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogMoving", optionValue: ModalDialogMovingEvent): void;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogClosing"): ModalDialogClosingEvent;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogClosing", optionValue: ModalDialogClosingEvent): void;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogClosed"): ModalDialogClosedEvent;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogClosed", optionValue: ModalDialogClosedEvent): void;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendering"): ModalDialogContentsRenderingEvent;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendering", optionValue: ModalDialogContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendered"): ModalDialogContentsRenderedEvent;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendered", optionValue: ModalDialogContentsRenderedEvent): void;
    /**
     * Event fired when sorting of column is changed in modal dialog. Column should be sorted
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortingChanged"): ModalDialogSortingChangedEvent;
    /**
     * Event fired when sorting of column is changed in modal dialog. Column should be sorted
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortingChanged", optionValue: ModalDialogSortingChangedEvent): void;
    /**
     * Event fired when button to unsort column is clicked in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonUnsortClick"): ModalDialogButtonUnsortClickEvent;
    /**
     * Event fired when button to unsort column is clicked in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonUnsortClick", optionValue: ModalDialogButtonUnsortClickEvent): void;
    /**
     * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortClick"): ModalDialogSortClickEvent;
    /**
     * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogSortClick", optionValue: ModalDialogSortClickEvent): void;
    /**
     * Event fired when button Apply in modal dialog is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick"): ModalDialogButtonApplyClickEvent;
    /**
     * Event fired when button Apply in modal dialog is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick", optionValue: ModalDialogButtonApplyClickEvent): void;
    /**
     * Event fired when the button to reset sorting is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonResetClick"): ModalDialogButtonResetClickEvent;
    /**
     * Event fired when the button to reset sorting is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonResetClick", optionValue: ModalDialogButtonResetClickEvent): void;
    igGridSorting(options: IgGridSorting): JQuery;
    igGridSorting(optionLiteral: 'option', optionName: string): any;
    igGridSorting(optionLiteral: 'option', options: IgGridSorting): JQuery;
    igGridSorting(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridSorting(methodName: string, ...methodParams: any[]): any;
}
interface IgGridSummariesColumnSettingSummaryOperand {
    /**
     * Text of the summary method which is shown in summary cell
     */
    rowDisplayLabel?: string;
    /**
     * Set type of summary operand
     *
     * Valid values:
     * "count" calculate count of result rows for the specified column
     * "min" calculate min of result rows for the specified column
     * "max" calculate max of result rows for the specified column
     * "sum" calculate sum of result rows for the specified column
     * "avg" calculate average of result rows for the specified column
     * "custom" calculate custom function (specified by summaryCalculator property) of result rows for the specified column
     */
    type?: any;
    /**
     * If it is false the summary operand will be shown in dropdown but it will not be made calculation
     */
    active?: boolean;
    /**
     * Name of the custom summary function which should be executed when type is custom
     */
    summaryCalculator?: string;
    /**
     * Specifies the order of elements in dropdown. It is recommended to set order of custom operands and to be greater or equal to 5
     */
    order?: number;
    /**
     * Specifies the number of digits after the decimal point for result of the current summary operand. This property will be ignored when isGridFormatter is true
     */
    decimalDisplay?: number;
    /**
     * Specifies whether to be used grid formatter for result for the current summary operand.
     */
    isGridFormatter?: boolean;
    /**
     * Option for IgGridSummariesColumnSettingSummaryOperand
     */
    [optionName: string]: any;
}
interface IgGridSummariesColumnSetting {
    /**
     * Enables disables summaries for the column
     */
    allowSummaries?: boolean;
    /**
     * Column key. This is a required property in every column setting if columnIndex is not set
     */
    columnKey?: string;
    /**
     * Column index. Can be used in place of column key. The preferred way of populating a column setting is to always use the column keys as identifiers
     */
    columnIndex?: number;
    /**
     * Check defaultSummaryOperands
     */
    summaryOperands?: IgGridSummariesColumnSettingSummaryOperand[];
    /**
     * Option for IgGridSummariesColumnSetting
     */
    [optionName: string]: any;
}
interface SummariesCalculatingEvent {
    (event: Event, ui: SummariesCalculatingEventUIParam): void;
}
interface SummariesCalculatingEventUIParam {
    /**
     * Used to access the igGridSummaries widget object.
     */
    owner?: any;
}
interface SummariesCalculatedEvent {
    (event: Event, ui: SummariesCalculatedEventUIParam): void;
}
interface SummariesCalculatedEventUIParam {
    /**
     * Used to get data for calculated summaries
     */
    data?: any;
    /**
     * Used to access the igGridSummaries widget object.
     */
    owner?: any;
}
interface SummariesMethodSelectionChangedEvent {
    (event: Event, ui: SummariesMethodSelectionChangedEventUIParam): void;
}
interface SummariesMethodSelectionChangedEventUIParam {
    /**
     * Used to get column key of the column where it is changed selection of summary method
     */
    columnKey?: any;
    /**
     * Used to get whether method is selected or not
     */
    isSelected?: any;
    /**
     * Used to get summary method name
     */
    methodName?: any;
    /**
     * Used to access the igGridSummaries widget object.
     */
    owner?: any;
}
interface SummariesTogglingEvent {
    (event: Event, ui: SummariesTogglingEventUIParam): void;
}
interface SummariesTogglingEventUIParam {
    /**
     * Used to get whether summaries are shown or not.
     */
    isToShow?: any;
    /**
     * Used to access the igGridSummaries widget object.
     */
    owner?: any;
}
interface SummariesToggledEvent {
    (event: Event, ui: SummariesToggledEventUIParam): void;
}
interface SummariesToggledEventUIParam {
    /**
     * Used to get whether summaries are shown or not.
     */
    isToShow?: any;
    /**
     * Used to access the igGridSummaries widget object.
     */
    owner?: any;
}
interface DropDownOKClickedEvent {
    (event: Event, ui: DropDownOKClickedEventUIParam): void;
}
interface DropDownOKClickedEventUIParam {
    /**
     * Used to get column key for which OK button is clicked.
     */
    columnKey?: any;
    /**
     * Used to get data about which summary methods are(not) selected. Format of event data is {type: 'min', active: false};
     */
    eventData?: any;
    /**
     * Used to access the igGridSummaries widget object.
     */
    owner?: any;
}
interface DropDownCancelClickedEvent {
    (event: Event, ui: DropDownCancelClickedEventUIParam): void;
}
interface DropDownCancelClickedEventUIParam {
    /**
     * Used to get column key for which Cancel button is clicked.
     */
    columnKey?: any;
    /**
     * Used to access the igGridSummaries widget object.
     */
    owner?: any;
}
interface IgGridSummaries {
    /**
     * type of summaries calculating.
     *
     * Valid values:
     * "remote" when it is remote summaries calculations are made on the server
     * "local"	When it is local calculations are made on the client
     */
    type?: any;
    /**
     * Text of the button OK in the summaries dropdown
     */
    dialogButtonOKText?: string;
    /**
     * Text of the button Cancel in the summaries dropdown
     */
    dialogButtonCancelText?: string;
    /**
     * Specifies when calculations are made.
     *
     * Valid values:
     * "onselect" summaries are updated when checkbox is checked/unchecked
     * "okcancelbuttons" summaries are updated only when OK button is clicked
     */
    calculateRenderMode?: any;
    /**
     * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
     */
    featureChooserText?: string;
    /**
     * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
     */
    featureChooserTextHide?: string;
    /**
     * Specifies how compact the summaries are rendered. When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line. False ensures that each summary type is occupying a separate line.
     */
    compactRenderingMode?: any;
    /**
     * The number of digits after the decimal point. If gridFormatter is True then this option is ignored.
     */
    defaultDecimalDisplay?: number;
    /**
     * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
     */
    showSummariesButton?: boolean;
    /**
     * Result key by which we get data from the result returned by remote data source.
     */
    summariesResponseKey?: string;
    /**
     * Set key in GET Request for summaries - used only when type is remote
     */
    summaryExprUrlKey?: string;
    /**
     * Function reference - it is called when data is retrieved from the data source
     */
    callee?: Function;
    /**
     * Height of the dropdown in pixels
     */
    dropDownHeight?: number;
    /**
     * Width of the dropdown in pixels
     */
    dropDownWidth?: number;
    /**
     * Show/hide footer button(on click show/hide dropdown)
     */
    showDropDownButton?: boolean;
    /**
     * Determines when the summary values are calculated when type is local
     *
     * Valid values:
     * "priortofilteringandpaging" summaries are calculated prior to filtering and paging
     * "afterfilteringbeforepaging" summaries are calculated after filtering and before paging
     * "afterfilteringandpaging" summaries are calculated after filtering and paging
     */
    summaryExecution?: any;
    /**
     * Dropdown animation duration
     */
    dropDownDialogAnimationDuration?: number;
    /**
     * Empty text template to be shown for empty cells
     */
    emptyCellText?: string;
    /**
     * Tooltip text for header cell button
     */
    summariesHeaderButtonTooltip?: string;
    /**
     * Result template for summary result(shown in table cell)
     */
    resultTemplate?: string;
    /**
     * If this property is enabled and in summaryOperand isGridFormatter  is undefined then use grid formatting for cells
     */
    isGridFormatter?: boolean;
    /**
     * a reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
     */
    renderSummaryCellFunc?: any;
    /**
     * A list of column settings that specifies custom summaries options per column basis
     */
    columnSettings?: IgGridSummariesColumnSetting[];
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before drop down is opened for a specific column summary
     * Return false in order to cancel opening the drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is opening.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    dropDownOpening?: DropDownOpeningEvent;
    /**
     * Event fired after the summaries dropdown is opened for a specific column
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is shown.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    dropDownOpened?: DropDownOpenedEvent;
    /**
     * Event fired before the dropdown for a summary column starts closing
     * Return false in order to cancel closing the drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is closing.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    dropDownClosing?: DropDownClosingEvent;
    /**
     * Event fired after the dropdown for a summary column is closed
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is closing.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    dropDownClosed?: DropDownClosedEvent;
    /**
     * Event fired before summaries calculations are made
     * Return false in order to cancel calculation of summaries.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    summariesCalculating?: SummariesCalculatingEvent;
    /**
     * Event fired after summaries calculation are completely made
     * Function takes arguments evt and ui.
     * Use ui.data to get data for calculated summaries
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    summariesCalculated?: SummariesCalculatedEvent;
    /**
     * Event fired when user selects/deselects summary method from checkbox
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where it is changed selection of summary method
     * Use ui.isSelected to get whether method is selected or not
     * Use ui.methodName to get summary method name
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    summariesMethodSelectionChanged?: SummariesMethodSelectionChangedEvent;
    /**
     * Event is fired bofore summary rows start toggling
     * Return false in order to cancel showing/hiding of summaries.
     * Function takes arguments evt and ui.
     * Use ui.isToShow to get whether summaries are shown or not.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    summariesToggling?: SummariesTogglingEvent;
    /**
     * Event is fired after summary rows are toggled
     * Function takes arguments evt and ui.
     * Use ui.isToShow to get whether summaries are shown or not.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    summariesToggled?: SummariesToggledEvent;
    /**
     * Event is fired when OK button is clicked in drop down
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key for which OK button is clicked.
     * Use ui.eventData to get data about which summary methods are(not) selected. Format of event data is {type: 'min', active: false};
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    dropDownOKClicked?: DropDownOKClickedEvent;
    /**
     * Event is fired when Cancel button is clicked in drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key for which Cancel button is clicked.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    dropDownCancelClicked?: DropDownCancelClickedEvent;
    /**
     * Option for igGridSummaries
     */
    [optionName: string]: any;
}
interface IgGridSummariesMethods {
    destroy(): void;
    /**
     * Returns whether summaries rows are hidden
     */
    isSummariesRowsHidden(): void;
    /**
     * Calculate summaries
     */
    calculateSummaries(): void;
    /**
     * Remove all summaries dropdown buttons.
     */
    clearAllFooterIcons(): void;
    /**
     * Toggle drop down
     *
     * @param columnKey    toggle drop down for the column with the specified key
     * @param event    event object. Its data should contain current columnKey, isAnimating, buttonId
     */
    toggleDropDown(columnKey: string, event: Object): void;
    /**
     * Show/Hide dialog
     *
     * @param $dialog     jQuery object representation of dropdown div element
     */
    showHideDialog($dialog: Object): void;
    /**
     * Toggle summaries rows
     *
     * @param isToShow    Specifies whether to show or not summaries
     * @param isInternalCall    Optional parameter.Specifies whether this function is called internally by the widget.
     */
    toggleSummariesRows(isToShow: boolean, isInternalCall: boolean): void;
    /**
     * Toggles the checkstate of a checkbox if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param $checkbox     Specifies the jQuery object of the checkbox.
     */
    toggleCheckstate($checkbox: Object): void;
    /**
     * Select/Unselect specified checkbox
     *
     * @param $checkbox     Specifies the jQuery object for checkbox
     * @param isToSelect     Specify whether to select or not checkbox
     */
    selectCheckBox($checkbox: Object, isToSelect: boolean): void;
    /**
     * Summary calculate the whole data for the specified column key, columnMethods and dataType (used when datasource is remote and dataType is date)
     *
     * @param ck    ColumnKey
     * @param columnMethods    Array of column methods objects
     * @param data    Object which represents result
   represents dataType for the current column
     * @param dataType
     */
    calculateSummaryColumn(ck: string, columnMethods: any[], data: Object, dataType: Object): void;
    /**
     * Return a JQUERY object which holds all summaries for all columns
     */
    summaryCollection(): void;
    /**
     * Return a JQUERY object which holds all summaries for column with the specified column key
     *
     * @param columnKey
     */
    summariesFor(columnKey: Object): void;
}
interface JQuery {
    data(propertyName: "igGridSummaries"): IgGridSummariesMethods;
}
interface JQuery {
    igGridSummaries(methodName: "destroy"): void;
    igGridSummaries(methodName: "isSummariesRowsHidden"): void;
    igGridSummaries(methodName: "calculateSummaries"): void;
    igGridSummaries(methodName: "clearAllFooterIcons"): void;
    igGridSummaries(methodName: "toggleDropDown", columnKey: string, event: Object): void;
    igGridSummaries(methodName: "showHideDialog", $dialog: Object): void;
    igGridSummaries(methodName: "toggleSummariesRows", isToShow: boolean, isInternalCall: boolean): void;
    igGridSummaries(methodName: "toggleCheckstate", $checkbox: Object): void;
    igGridSummaries(methodName: "selectCheckBox", $checkbox: Object, isToSelect: boolean): void;
    igGridSummaries(methodName: "calculateSummaryColumn", ck: string, columnMethods: any[], data: Object, dataType: Object): void;
    igGridSummaries(methodName: "summaryCollection"): void;
    igGridSummaries(methodName: "summariesFor", columnKey: Object): void;
    /**
     * Type of summaries calculating.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "type"): any;
    /**
     * Type of summaries calculating.
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * Text of the button OK in the summaries dropdown
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dialogButtonOKText"): string;
    /**
     * Text of the button OK in the summaries dropdown
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dialogButtonOKText", optionValue: string): void;
    /**
     * Text of the button Cancel in the summaries dropdown
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dialogButtonCancelText"): string;
    /**
     * Text of the button Cancel in the summaries dropdown
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dialogButtonCancelText", optionValue: string): void;
    /**
     * Gets when calculations are made.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "calculateRenderMode"): any;
    /**
     * Sets when calculations are made.
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "calculateRenderMode", optionValue: any): void;
    /**
     * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
     */
    igGridSummaries(optionLiteral: 'option', optionName: "featureChooserText"): string;
    /**
     * Get or set text that is shown in the feature chooser dropdown when summaries are hidden
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;
    /**
     * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
     */
    igGridSummaries(optionLiteral: 'option', optionName: "featureChooserTextHide"): string;
    /**
     * Get or set text that is shown in the feauture chooser dropdown when summaries are shown
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "featureChooserTextHide", optionValue: string): void;
    /**
     * Gets how compact the summaries are rendered. When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line. False ensures that each summary type is occupying a separate line.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "compactRenderingMode"): any;
    /**
     * Sets how compact the summaries are rendered. When true indicates that the summaries may be rendered compactly, even mixing different summaries on the same line. False ensures that each summary type is occupying a separate line.
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "compactRenderingMode", optionValue: any): void;
    /**
     * The number of digits after the decimal point. If gridFormatter is True then this option is ignored.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "defaultDecimalDisplay"): number;
    /**
     * The number of digits after the decimal point. If gridFormatter is True then this option is ignored.
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "defaultDecimalDisplay", optionValue: number): void;
    /**
     * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
     */
    igGridSummaries(optionLiteral: 'option', optionName: "showSummariesButton"): boolean;
    /**
     * Show header button icon in the header cell. On click - shows/hides summaries. If false then summary icon should not be shown in the feature chooser(if shown).
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "showSummariesButton", optionValue: boolean): void;
    /**
     * Result key by which we get data from the result returned by remote data source.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesResponseKey"): string;
    /**
     * Result key by which we get data from the result returned by remote data source.
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesResponseKey", optionValue: string): void;
    /**
     * Set key in GET Request for summaries - used only when type is remote
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summaryExprUrlKey"): string;
    /**
     * Set key in GET Request for summaries - used only when type is remote
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summaryExprUrlKey", optionValue: string): void;
    /**
     * Function reference - it is called when data is retrieved from the data source
     */
    igGridSummaries(optionLiteral: 'option', optionName: "callee"): Function;
    /**
     * Function reference - it is called when data is retrieved from the data source
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "callee", optionValue: Function): void;
    /**
     * Height of the dropdown in pixels
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownHeight"): number;
    /**
     * Height of the dropdown in pixels
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownHeight", optionValue: number): void;
    /**
     * Width of the dropdown in pixels
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownWidth"): number;
    /**
     * Width of the dropdown in pixels
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownWidth", optionValue: number): void;
    /**
     * Show/hide footer button(on click show/hide dropdown)
     */
    igGridSummaries(optionLiteral: 'option', optionName: "showDropDownButton"): boolean;
    /**
     * Show/hide footer button(on click show/hide dropdown)
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "showDropDownButton", optionValue: boolean): void;
    /**
     * Determines when the summary values are calculated when type is local
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summaryExecution"): any;
    /**
     * Determines when the summary values are calculated when type is local
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summaryExecution", optionValue: any): void;
    /**
     * Dropdown animation duration
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownDialogAnimationDuration"): number;
    /**
     * Dropdown animation duration
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownDialogAnimationDuration", optionValue: number): void;
    /**
     * Empty text template to be shown for empty cells
     */
    igGridSummaries(optionLiteral: 'option', optionName: "emptyCellText"): string;
    /**
     * Empty text template to be shown for empty cells
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "emptyCellText", optionValue: string): void;
    /**
     * Tooltip text for header cell button
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesHeaderButtonTooltip"): string;
    /**
     * Tooltip text for header cell button
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesHeaderButtonTooltip", optionValue: string): void;
    /**
     * Result template for summary result(shown in table cell)
     */
    igGridSummaries(optionLiteral: 'option', optionName: "resultTemplate"): string;
    /**
     * Result template for summary result(shown in table cell)
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "resultTemplate", optionValue: string): void;
    /**
     * If this property is enabled and in summaryOperand isGridFormatter  is undefined then use grid formatting for cells
     */
    igGridSummaries(optionLiteral: 'option', optionName: "isGridFormatter"): boolean;
    /**
     * If this property is enabled and in summaryOperand isGridFormatter  is undefined then use grid formatting for cells
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "isGridFormatter", optionValue: boolean): void;
    /**
     * A reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
     */
    igGridSummaries(optionLiteral: 'option', optionName: "renderSummaryCellFunc"): any;
    /**
     * A reference or name of a javascript function - renders summary cell in grid footer.(if not set it is used default render function) It takes 3 parameters - methodName(summary method), columnKey, data(summary data which should be rendered)
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "renderSummaryCellFunc", optionValue: any): void;
    /**
     * A list of column settings that specifies custom summaries options per column basis
     */
    igGridSummaries(optionLiteral: 'option', optionName: "columnSettings"): IgGridSummariesColumnSetting[];
    /**
     * A list of column settings that specifies custom summaries options per column basis
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridSummariesColumnSetting[]): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before drop down is opened for a specific column summary
     * Return false in order to cancel opening the drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is opening.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownOpening"): DropDownOpeningEvent;
    /**
     * Event fired before drop down is opened for a specific column summary
     * Return false in order to cancel opening the drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is opening.
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownOpening", optionValue: DropDownOpeningEvent): void;
    /**
     * Event fired after the summaries dropdown is opened for a specific column
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is shown.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownOpened"): DropDownOpenedEvent;
    /**
     * Event fired after the summaries dropdown is opened for a specific column
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is shown.
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownOpened", optionValue: DropDownOpenedEvent): void;
    /**
     * Event fired before the dropdown for a summary column starts closing
     * Return false in order to cancel closing the drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is closing.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownClosing"): DropDownClosingEvent;
    /**
     * Event fired before the dropdown for a summary column starts closing
     * Return false in order to cancel closing the drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is closing.
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownClosing", optionValue: DropDownClosingEvent): void;
    /**
     * Event fired after the dropdown for a summary column is closed
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is closing.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownClosed"): DropDownClosedEvent;
    /**
     * Event fired after the dropdown for a summary column is closed
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where drop down is closing.
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownClosed", optionValue: DropDownClosedEvent): void;
    /**
     * Event fired before summaries calculations are made
     * Return false in order to cancel calculation of summaries.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesCalculating"): SummariesCalculatingEvent;
    /**
     * Event fired before summaries calculations are made
     * Return false in order to cancel calculation of summaries.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesCalculating", optionValue: SummariesCalculatingEvent): void;
    /**
     * Event fired after summaries calculation are completely made
     * Function takes arguments evt and ui.
     * Use ui.data to get data for calculated summaries
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesCalculated"): SummariesCalculatedEvent;
    /**
     * Event fired after summaries calculation are completely made
     * Function takes arguments evt and ui.
     * Use ui.data to get data for calculated summaries
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesCalculated", optionValue: SummariesCalculatedEvent): void;
    /**
     * Event fired when user selects/deselects summary method from checkbox
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where it is changed selection of summary method
     * Use ui.isSelected to get whether method is selected or not
     * Use ui.methodName to get summary method name
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesMethodSelectionChanged"): SummariesMethodSelectionChangedEvent;
    /**
     * Event fired when user selects/deselects summary method from checkbox
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key of the column where it is changed selection of summary method
     * Use ui.isSelected to get whether method is selected or not
     * Use ui.methodName to get summary method name
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesMethodSelectionChanged", optionValue: SummariesMethodSelectionChangedEvent): void;
    /**
     * Event is fired bofore summary rows start toggling
     * Return false in order to cancel showing/hiding of summaries.
     * Function takes arguments evt and ui.
     * Use ui.isToShow to get whether summaries are shown or not.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesToggling"): SummariesTogglingEvent;
    /**
     * Event is fired bofore summary rows start toggling
     * Return false in order to cancel showing/hiding of summaries.
     * Function takes arguments evt and ui.
     * Use ui.isToShow to get whether summaries are shown or not.
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesToggling", optionValue: SummariesTogglingEvent): void;
    /**
     * Event is fired after summary rows are toggled
     * Function takes arguments evt and ui.
     * Use ui.isToShow to get whether summaries are shown or not.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesToggled"): SummariesToggledEvent;
    /**
     * Event is fired after summary rows are toggled
     * Function takes arguments evt and ui.
     * Use ui.isToShow to get whether summaries are shown or not.
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "summariesToggled", optionValue: SummariesToggledEvent): void;
    /**
     * Event is fired when OK button is clicked in drop down
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key for which OK button is clicked.
     * Use ui.eventData to get data about which summary methods are(not) selected. Format of event data is {type: 'min', active: false};
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownOKClicked"): DropDownOKClickedEvent;
    /**
     * Event is fired when OK button is clicked in drop down
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key for which OK button is clicked.
     * Use ui.eventData to get data about which summary methods are(not) selected. Format of event data is {type: 'min', active: false};
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownOKClicked", optionValue: DropDownOKClickedEvent): void;
    /**
     * Event is fired when Cancel button is clicked in drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key for which Cancel button is clicked.
     * Use ui.owner in order to access the igGridSummaries widget object.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownCancelClicked"): DropDownCancelClickedEvent;
    /**
     * Event is fired when Cancel button is clicked in drop down.
     * Function takes arguments evt and ui.
     * Use ui.columnKey to get column key for which Cancel button is clicked.
     * Use ui.owner in order to access the igGridSummaries widget object.
     *
     * @optionValue Define event handler function.
     */
    igGridSummaries(optionLiteral: 'option', optionName: "dropDownCancelClicked", optionValue: DropDownCancelClickedEvent): void;
    igGridSummaries(options: IgGridSummaries): JQuery;
    igGridSummaries(optionLiteral: 'option', optionName: string): any;
    igGridSummaries(optionLiteral: 'option', options: IgGridSummaries): JQuery;
    igGridSummaries(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridSummaries(methodName: string, ...methodParams: any[]): any;
}
interface IgGridTooltipsColumnSettings {
    /**
     * Either key or index must be set in every column setting.
     */
    columnKey?: string;
    /**
     * Either key or index must be set in every column setting.
     */
    columnIndex?: number;
    /**
     * Enables / disables tooltips on the specified column. By default tooltips are displayed for each column. Note: This option is mandatory.
     */
    allowTooltips?: boolean;
    /**
     * Specifies the maximum width (in pixels) of the tooltip when shown for the specified column. If unset the width of the column will be used instead.
     */
    maxWidth?: number;
    /**
     * Option for IgGridTooltipsColumnSettings
     */
    [optionName: string]: any;
}
interface IgGridTooltips {
    /**
     * determines the tooltip visibility option
     *
     * Valid values:
     * "always" tooltips always show for hovered elements
     * "never" tooltips do not show automatically
     * "overflow" tooltips show only when the underlying data overflows its container
     */
    visibility?: any;
    /**
     * controls the tooltip's style
     *
     * Valid values:
     * "tooltip" The tooltip will be positioned according to the mouse cursor. Will render the tooltip content as plain text.
     * "popover" The tooltip will be positioned according to the target element with an arrow pointing the element. This style is more suitable for touch-supported environments. Will render the tooltip content as HTML.
     */
    style?: any;
    /**
     * The time in milliseconds after which tooltip will show when
     * mouse cursor is hovered over a cell.
     */
    showDelay?: number;
    /**
     * Type="integer" The time in milliseconds after which tooltip hides when mouse
     * cursor gets outside of the cell.
     */
    hideDelay?: number;
    /**
     * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
     */
    columnSettings?: IgGridTooltipsColumnSettings;
    /**
     * Sets the time tooltip fades in and out when showing/hiding
     */
    fadeTimespan?: number;
    /**
     * Sets the left position of the tooltip relative to the mouse cursor
     */
    cursorLeftOffset?: number;
    /**
     * Sets the top position of the tooltip relative to the mouse cursor
     */
    cursorTopOffset?: number;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * use args.owner to get a reference to the widget
     * use args.tooltip to get or set the string to be displayed
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    tooltipShowing?: TooltipShowingEvent;
    /**
     * Event fired after a tooltip is shown
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    tooltipShown?: TooltipShownEvent;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    tooltipHiding?: TooltipHidingEvent;
    /**
     * Event fired after a tooltip is hidden
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip was displayed for
     * use args.element to get a reference to the cell the tooltip was displayed for
     * use args.index to get the row index of the cell the tooltip was displayed for
     * use args.columnKey to get the column key of the cell the tooltip was displayed for
     * use args.columnIndex to get the column index of the cell the tooltip was displayed for
     */
    tooltipHidden?: TooltipHiddenEvent;
    /**
     * Option for igGridTooltips
     */
    [optionName: string]: any;
}
interface IgGridTooltipsMethods {
    /**
     * Destroys the tooltip widget.
     */
    destroy(): void;
    /**
     * Returns the ID of the parent div element bounding the ruler and the tooltip container
     */
    id(): string;
}
interface JQuery {
    data(propertyName: "igGridTooltips"): IgGridTooltipsMethods;
}
interface JQuery {
    igGridTooltips(methodName: "destroy"): void;
    igGridTooltips(methodName: "id"): string;
    /**
     * Determines the tooltip visibility option
     */
    igGridTooltips(optionLiteral: 'option', optionName: "visibility"): any;
    /**
     * Determines the tooltip visibility option
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "visibility", optionValue: any): void;
    /**
     * Controls the tooltip's style
     */
    igGridTooltips(optionLiteral: 'option', optionName: "style"): any;
    /**
     * Controls the tooltip's style
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "style", optionValue: any): void;
    /**
     * The time in milliseconds after which tooltip will show when
     * mouse cursor is hovered over a cell.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "showDelay"): number;
    /**
     * The time in milliseconds after which tooltip will show when
     * mouse cursor is hovered over a cell.
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "showDelay", optionValue: number): void;
    /**
     * Type="integer" The time in milliseconds after which tooltip hides when mouse
     * cursor gets outside of the cell.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "hideDelay"): number;
    /**
     * Type="integer" The time in milliseconds after which tooltip hides when mouse
     * cursor gets outside of the cell.
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "hideDelay", optionValue: number): void;
    /**
     * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
     */
    igGridTooltips(optionLiteral: 'option', optionName: "columnSettings"): IgGridTooltipsColumnSettings;
    /**
     * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridTooltipsColumnSettings): void;
    /**
     * The time tooltip fades in and out when showing/hiding
     */
    igGridTooltips(optionLiteral: 'option', optionName: "fadeTimespan"): number;
    /**
     * Sets the time tooltip fades in and out when showing/hiding
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "fadeTimespan", optionValue: number): void;
    /**
     * The left position of the tooltip relative to the mouse cursor
     */
    igGridTooltips(optionLiteral: 'option', optionName: "cursorLeftOffset"): number;
    /**
     * Sets the left position of the tooltip relative to the mouse cursor
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "cursorLeftOffset", optionValue: number): void;
    /**
     * The top position of the tooltip relative to the mouse cursor
     */
    igGridTooltips(optionLiteral: 'option', optionName: "cursorTopOffset"): number;
    /**
     * Sets the top position of the tooltip relative to the mouse cursor
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "cursorTopOffset", optionValue: number): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * use args.owner to get a reference to the widget
     * use args.tooltip to get or set the string to be displayed
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    igGridTooltips(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * use args.owner to get a reference to the widget
     * use args.tooltip to get or set the string to be displayed
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     *
     * @optionValue Define event handler function.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;
    /**
     * Event fired after a tooltip is shown
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    igGridTooltips(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;
    /**
     * Event fired after a tooltip is shown
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     *
     * @optionValue Define event handler function.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    igGridTooltips(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     *
     * @optionValue Define event handler function.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;
    /**
     * Event fired after a tooltip is hidden
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip was displayed for
     * use args.element to get a reference to the cell the tooltip was displayed for
     * use args.index to get the row index of the cell the tooltip was displayed for
     * use args.columnKey to get the column key of the cell the tooltip was displayed for
     * use args.columnIndex to get the column index of the cell the tooltip was displayed for
     */
    igGridTooltips(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;
    /**
     * Event fired after a tooltip is hidden
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip was displayed for
     * use args.element to get a reference to the cell the tooltip was displayed for
     * use args.index to get the row index of the cell the tooltip was displayed for
     * use args.columnKey to get the column key of the cell the tooltip was displayed for
     * use args.columnIndex to get the column index of the cell the tooltip was displayed for
     *
     * @optionValue Define event handler function.
     */
    igGridTooltips(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;
    igGridTooltips(options: IgGridTooltips): JQuery;
    igGridTooltips(optionLiteral: 'option', optionName: string): any;
    igGridTooltips(optionLiteral: 'option', options: IgGridTooltips): JQuery;
    igGridTooltips(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridTooltips(methodName: string, ...methodParams: any[]): any;
}
interface IgGridUpdatingColumnSetting {
    /**
     * Sets gets identifier for column. That value should correspond to the "key" of a column in the "columns" of igGrid.
     */
    columnKey?: string;
    /**
     * Sets type of editor.
     *
     * Valid values:
     * "text" an igTextEditor will be created
     * "mask" an igMaskEditor will be created
     * "date" the igEditor with type date editor is created
     * "datepicker" the igEditor with type datepicker is created. Note: the css and js files used by jquery.ui.datepicker should be available.
     * "numeric" the igEditor with type numeric is created
     * "currency" the igEditor with type currency is created
     * "percent" the igEditor with type percent is created
     * "combo" the igCombo editor is created. Note: the css and js files used by ui.igCombo should be available.
     * "rating" the igRating editor is created. Note: the css and js files used by ui.igRating should be available.
     */
    editorType?: any;
    /**
     * Sets gets custom editor provider instance (it"s an entry point for implementing your custom editors).
     * It should extend $.ig.EditorProviderDefault or it should have definitions of all its methods:
     * $.ig.EditorProviderDefault = $.ig.EditorProviderDefault || $.ig.EditorProvider.extend({
     * createEditor: function (updating, key, columnSetting, tabIndex, format, dataType, cellValue, element) {},
     * getValue: function () {},
     * setValue: function (val) {},
     * setSize: function (width, height) {},
     * setFocus: function () {},
     * removeFromParent: function () {},
     * destroy: function () {},
     * validator: function () {},
     * validate: function (noLabel) {},
     * isValid: function () {}
     * });
     */
    editorProvider?: any;
    /**
     * Sets gets options supported by corresponding editor such as igEditor, igCombo, or custom editor defined by editorProvider option.
     * In addition to specific editor options, it may contain the member "id", which will be set to the element of editor.
     * That "id" can be usefull to link cascading igCombo editors.
     */
    editorOptions?: any;
    /**
     * Sets gets validation for required entry.
     */
    required?: boolean;
    /**
     * Sets gets read only. If option is enabled, then editor is not used and cells in column are excluded from editing.
     */
    readOnly?: boolean;
    /**
     * Enables disables validation of editor value.
     * Value true: enable validation according to rules of igEditor.
     * In case of numeric editors, the validation occurs for min/maxValue including range of values for dataMode, illegal number like "." or "-".
     * In case of date editors, the validation occurs for min/maxValue and missing fields in "dateInputFormat".
     * In case of mask editors, the validation occurs for not filled required positions in inputMask.
     * If "editorOptions" enables "required", then validation for all types of editor has effect.
     * Value false: do not enable validation.
     */
    validation?: boolean;
    /**
     * Sets gets default value in cell for add-new-row. That can be string, number, Date or boolean.
     */
    defaultValue?: any;
    /**
     * Option for IgGridUpdatingColumnSetting
     */
    [optionName: string]: any;
}
interface IgGridUpdatingRowEditDialogOptions {
    /**
     * Specifies the caption of the dialog. If not set $.ig.GridUpdating.locale.rowEditDialogCaptionLabel is used.
     */
    captionLabel?: string;
    /**
     * Controls the containment of the dialog's drag operation.
     *
     * Valid values:
     * "owner" The row edit dialog will be draggable only in the grid area
     * "window" The row edit dialog will be draggable in the whole window area
     */
    containment?: any;
    /**
     * Controls the default row edit dialog width
     */
    width?: any;
    /**
     * Controls the default row edit dialog height
     */
    height?: any;
    /**
     * Specifies the animation duration for the opening and closing operations.
     */
    animationDuration?: number;
    /**
     * Controls if editors should be rendered for read-only columns. If rendered, these editors will be disabled.
     */
    showReadonlyEditors?: boolean;
    /**
     * Controls if editors should be rendered for hidden columns.
     */
    showEditorsForHiddenColumns?: boolean;
    /**
     * Controls the width of the column containing the column names in the default row edit dialog.
     */
    namesColumnWidth?: any;
    /**
     * Controls the width of the column containing the editors in the default row edit dialog.
     */
    editorsColumnWidth?: any;
    /**
     * Controls the visibility of the done and cancel buttons for the dialog.
     * If disabled the end-user will be able to stop editing only with the ENTER and ESC keys.
     */
    showDoneCancelButtons?: boolean;
    /**
     * Specifies a template to be rendered against the currently edited record (or up-to-date key-value pairs in the case of not yetcreated records). It may contain an element decorated with the 'data-render-tmpl' attribute to specify where the control should render theeditors template specified in the editorsTemplate option. For custom dialogs, the elements can be decorated with 'data-editor-for-<columnKey>'attributes where columnKey is the key of the column that editor or input will be used to edit.If both dialogTemplate and dialogTemplateSelector are specified, dialogTemplateSelector will be used.The default template is '<table><colgroup><col></col><col></col></colgroup><tbody data-render-tmpl></tbody></table>'.
     */
    dialogTemplate?: any;
    /**
     * Specifies a selector to a template rendered against the currently edited record (or up-to-date key-value pairs in the case of not yetcreated records). It may contain an element decorated with the 'data-render-tmpl' attribute to specify where the control should render theeditors template specified in the editorsTemplate option. For custom dialogs, the elements can be decorated with 'data-editor-for-<columnKey>'attributes where columnKey is the key of the column that editor or input will be used to edit.If both editorsTemplate and editorsTemplateSelector are specified, editorsTemplateSelector will be used.The default template is '<table><colgroup><col></col><col></col></colgroup><tbody data-render-tmpl></tbody></table>'.
     */
    dialogTemplateSelector?: any;
    /**
     * Specifies a template to be executed for each column in the grid's column collection (or just the read-write columns if
     * showReadonlyEditors is false). Decorate the element to be used as an editor with 'data-editor-for-${key}'. The ${key} template tag should
     * be replaced with the chosen templating engine's syntax for rendering values. If any editors for columns are specified in the dialog markup
     * they will be exluded from the data the template will be rendered for.
     * This property is ignored if the dialog template does not include an element with the 'data-render-tmpl' attribute.
     * If both editorsTemplate and editorsTemplateSelector are specified, editorsTemplateSelector will be used.
     * The default template is "<tr><td>${headerText}</td><td><input data-editor-for-${key} /></td></tr>"
     */
    editorsTemplate?: string;
    /**
     * Specifies a selector to a template to be executed for each column in the grid's column collection.
     * Decorate the element to be used as an editor with 'data-editor-for-${key}'.
     * The ${key} template tag should be replaced with the chosen templating engine's syntax for rendering values. If any editors for columns are
     * specified in the dialog markup they will be exluded from the data the template will be rendered for.
     * This property is ignored if the dialog markup does not include an element with the 'data-render-tmpl' attribute.
     * If both editorsTemplate and editorsTemplateSelector are specified, editorsTemplateSelector will be used.
     * The default template is "<tr><td>${headerText}</td><td><input data-editor /></td></tr>"
     */
    editorsTemplateSelector?: string;
    /**
     * Option for IgGridUpdatingRowEditDialogOptions
     */
    [optionName: string]: any;
}
interface EditRowStartingEvent {
    (event: Event, ui: EditRowStartingEventUIParam): void;
}
interface EditRowStartingEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get key or index of row.
     */
    rowID?: any;
    /**
     * Used to check if that event is raised while new-row-adding.
     */
    rowAdding?: any;
}
interface EditRowStartedEvent {
    (event: Event, ui: EditRowStartedEventUIParam): void;
}
interface EditRowStartedEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get key or index of row.
     */
    rowID?: any;
    /**
     * Used to check if that event is raised while new-row-adding.
     */
    rowAdding?: any;
}
interface EditRowEndingEvent {
    (event: Event, ui: EditRowEndingEventUIParam): void;
}
interface EditRowEndingEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get key or index of row.
     */
    rowID?: any;
    /**
     * Used to check if value of any cell was modified and data source will be updated.
     */
    update?: any;
    /**
     * Used to check if that event is raised while new-row-adding.
     */
    rowAdding?: any;
    /**
     * Used to get value of cell in column with the key. That is available only when ui.update is true.
     */
    values?: any;
    /**
     * Used to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    oldValues?: any;
}
interface EditRowEndedEvent {
    (event: Event, ui: EditRowEndedEventUIParam): void;
}
interface EditRowEndedEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get key or index of row.
     */
    rowID?: any;
    /**
     * Used to check if value of any cell was modified and data source will be updated.
     */
    update?: any;
    /**
     * Used to check if that event is raised while new-row-adding.
     */
    rowAdding?: any;
    /**
     * Used to get value of cell in column with the key. That is available only when ui.update is true.
     */
    values?: any;
    /**
     * Used to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    oldValues?: any;
}
interface EditCellStartingEvent {
    (event: Event, ui: EditCellStartingEventUIParam): void;
}
interface EditCellStartingEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get key or index of row.
     */
    rowID?: any;
    /**
     * Used to get index of column.
     */
    columnIndex?: any;
    /**
     * Used to get key of column.
     */
    columnKey?: any;
    /**
     * Used tor to get reference to igEditor.
     */
    editor?: any;
    /**
     * Used to get or set value of editor.
     */
    value?: any;
    /**
     * Used to check if that event is raised while new-row-adding.
     */
    rowAdding?: any;
}
interface EditCellStartedEvent {
    (event: Event, ui: EditCellStartedEventUIParam): void;
}
interface EditCellStartedEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get key or index of row.
     */
    rowID?: any;
    /**
     * Used to get index of column.
     */
    columnIndex?: any;
    /**
     * Used to get key of column.
     */
    columnKey?: any;
    /**
     * Used tor to get reference to igEditor.
     */
    editor?: any;
    /**
     * Used to get value of editor.
     */
    value?: any;
    /**
     * Used to check if that event is raised while new-row-adding.
     */
    rowAdding?: any;
}
interface EditCellEndingEvent {
    (event: Event, ui: EditCellEndingEventUIParam): void;
}
interface EditCellEndingEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get key or index of row.
     */
    rowID?: any;
    /**
     * Used to get index of column.
     */
    columnIndex?: any;
    /**
     * Used to get key of column.
     */
    columnKey?: any;
    /**
     * Used tor to get reference to igEditor.
     */
    editor?: any;
    /**
     * Used to get value of cell/editor. That value can be modified and it will be used to update data source.
     */
    value?: any;
    /**
     * Used to get old value.
     */
    oldValue?: any;
    /**
     * Used to check if value was modified and data source will be updated.
     */
    update?: any;
    /**
     * Used to check if that event is raised while new-row-adding.
     */
    rowAdding?: any;
}
interface EditCellEndedEvent {
    (event: Event, ui: EditCellEndedEventUIParam): void;
}
interface EditCellEndedEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get key or index of row.
     */
    rowID?: any;
    /**
     * Used to get index of column.
     */
    columnIndex?: any;
    /**
     * Used to get key of column.
     */
    columnKey?: any;
    /**
     * Used tor to get reference to igEditor.
     */
    editor?: any;
    /**
     * Used to get value of cell.
     */
    value?: any;
    /**
     * Used to get old value.
     */
    oldValue?: any;
    /**
     * Used to check if cell was modified and data source will be updated.
     */
    update?: any;
    /**
     * Used to check if that event is raised while new-row-adding.
     */
    rowAdding?: any;
}
interface RowAddingEvent {
    (event: Event, ui: RowAddingEventUIParam): void;
}
interface RowAddingEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get new value of cell in column with the key.
     */
    values?: any;
    /**
     * Used to get default value (before editing) of cell in column with the key.
     */
    oldValues?: any;
}
interface RowAddedEvent {
    (event: Event, ui: RowAddedEventUIParam): void;
}
interface RowAddedEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get new value of cell in column with the key.
     */
    values?: any;
    /**
     * Used to get default value (before editing) of cell in column with the key.
     */
    oldValues?: any;
}
interface RowDeletingEvent {
    (event: Event, ui: RowDeletingEventUIParam): void;
}
interface RowDeletingEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get reference to jquery object which represents TR of row to delete.
     */
    element?: any;
    /**
     * Used to get key or index of row to delete.
     */
    rowID?: any;
}
interface RowDeletedEvent {
    (event: Event, ui: RowDeletedEventUIParam): void;
}
interface RowDeletedEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get reference to jquery object which represents TR of row to delete.
     */
    element?: any;
    /**
     * Used to get key or index of row to delete.
     */
    rowID?: any;
}
interface DataDirtyEvent {
    (event: Event, ui: DataDirtyEventUIParam): void;
}
interface DataDirtyEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
}
interface GeneratePrimaryKeyValueEvent {
    (event: Event, ui: GeneratePrimaryKeyValueEventUIParam): void;
}
interface GeneratePrimaryKeyValueEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to set unique record-key-identifier for new row. It is prefilled with suggested value (defaultValue of column or number of rows in data source)
     */
    value?: any;
}
interface RowEditDialogBeforeOpenEvent {
    (event: Event, ui: RowEditDialogBeforeOpenEventUIParam): void;
}
interface RowEditDialogBeforeOpenEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get reference to row edit dialog DOM element.
     */
    dialogElement?: any;
}
interface RowEditDialogAfterOpenEvent {
    (event: Event, ui: RowEditDialogAfterOpenEventUIParam): void;
}
interface RowEditDialogAfterOpenEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get reference to row edit dialog DOM element.
     */
    dialogElement?: any;
}
interface RowEditDialogBeforeCloseEvent {
    (event: Event, ui: RowEditDialogBeforeCloseEventUIParam): void;
}
interface RowEditDialogBeforeCloseEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get reference to row edit dialog DOM element.
     */
    dialogElement?: any;
}
interface RowEditDialogAfterCloseEvent {
    (event: Event, ui: RowEditDialogAfterCloseEventUIParam): void;
}
interface RowEditDialogAfterCloseEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get reference to row edit dialog DOM element.
     */
    dialogElement?: any;
}
interface RowEditDialogContentsRenderedEvent {
    (event: Event, ui: RowEditDialogContentsRenderedEventUIParam): void;
}
interface RowEditDialogContentsRenderedEventUIParam {
    /**
     * Used to get reference to igGridUpdating.
     */
    owner?: any;
    /**
     * Used to get reference to row edit dialog DOM element.
     */
    dialogElement?: any;
}
interface IgGridUpdating {
    /**
     * Sets gets array of settings for each column.
     */
    columnSettings?: IgGridUpdatingColumnSetting[];
    /**
     * Sets the edit mode.
     *
     * Valid values:
     * "row" editors for all cells in a row are displayed. The editor of the clicked cell receives focus. Optionally Done and Cancel buttons are displayed.
     * "cell" an editor is displayed only for the clicked cell. The Done and Cancel buttons are not supported for this mode.
     * "dialog" editors for all cells will be rendered as a popup dialog
     * "none" editing of grid-cells is disabled
     */
    editMode?: any;
    /**
     * Sets gets delete-row functionality.
     * Value true: the "Delete" button is displayed on mouse-over a row and all selected rows are deleted by Delete-key.
     * Value false: delete-row is disabled.
     */
    enableDeleteRow?: boolean;
    /**
     * Sets gets add-new-row functionality.
     * Notes: If igGrid has primaryKey, then application should process generatePrimaryKeyValue event and provide value for a cell.
     * It is also recommended to set readOnly:true for the column (within columnSettings) with the primaryKey or to use editorOptions:{readOnly:true}.
     * By default the value of a cell with primary key is generated automatically and its value is equal to number of rows in grid plus 1.
     * Value true: the "Add Row" button is displayed on header, click on that button shows editors in all columns and new row inserted at the end of editing.
     * Value false: add-row functionality is disabled.
     */
    enableAddRow?: boolean;
    /**
     * Sets gets option to enable validation for all columns.
     */
    validation?: boolean;
    /**
     * Sets gets text for Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneLabel is used.
     */
    doneLabel?: string;
    /**
     * Sets gets text for title of Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneTooltip is used.
     */
    doneTooltip?: string;
    /**
     * Sets gets text for Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelLabel is used.
     */
    cancelLabel?: string;
    /**
     * Sets gets text for title of Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelTooltip is used.
     */
    cancelTooltip?: string;
    /**
     * Sets gets text for add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowLabel is used.
     */
    addRowLabel?: string;
    /**
     * Sets gets text for title of add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowTooltip is used.
     */
    addRowTooltip?: string;
    /**
     * Sets gets text for Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowLabel is used.
     */
    deleteRowLabel?: string;
    /**
     * Sets gets text for title of Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowTooltip is used.
     */
    deleteRowTooltip?: string;
    /**
     * Sets gets visibility of the end-edit pop-up dialog with Done/Cancel buttons.
     */
    showDoneCancelButtons?: boolean;
    /**
     * Sets gets ability to enable or disable exception, which is raised when grid has pending transaction and may fail to render data correctly.
     */
    enableDataDirtyException?: boolean;
    /**
     * Sets gets triggers for start edit mode.
     * Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma.
     * Notes:
     * The array of strings similar to ["dblclick", "f2"] is also supported.
     * The keyboard triggers have effect only when "Selection" feature of grid is enabled.
     * If the "dblclick" is included, then "click" has no effect.
     */
    startEditTriggers?: string;
    /**
     * Enables horizontal move to the right on Enter while editing a cell.
     * Value true: Pressing Enter will move the focus to the next edited cell on the right
     * Value false: Pressing Enter will move the focus to the next edited cell on the row below
     */
    horizontalMoveOnEnter?: boolean;
    /**
     * Enables excel navigating style while editing a cell
     * Value true: Arrows will not navigate inside the edited cell, but will exit the edit mode
     * and move the focus to the nearest cell.
     * Value false: Arrows will navigate the cursor inside the edited cell
     */
    excelNavigationMode?: boolean;
    /**
     * Specifies a custom function to be called when AJAX request to the updateUrl option succeeds. Receives as argument the data returned by the server
     */
    saveChangesSuccessHandler?: any;
    /**
     * Specifies a custom function to be called when AJAX request to the updateUrl option fails. Receives three arguments - the jqXHR, string describing the type of error and an optional exception object
     */
    saveChangesErrorHandler?: any;
    /**
     * The swipe distance when on touch to trigger row delete button to appear.
     */
    swipeDistance?: any;
    /**
     * Controls whether the widget will wrap around the grid when editing reaches a cell in one of the edges of the data view.
     */
    wrapAround?: boolean;
    /**
     * A list of options controlling the rendering behavior of the row edit dialog. If the edit mode is not 'dialog' these have no effect.
     */
    rowEditDialogOptions?: IgGridUpdatingRowEditDialogOptions;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event which is raised before start row editing.
     * Return false in order to cancel editing and do not show editors in row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editRowStarting?: EditRowStartingEvent;
    /**
     * Event which is raised after start row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editRowStarted?: EditRowStartedEvent;
    /**
     * Event which is raised before end row editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    editRowEnding?: EditRowEndingEvent;
    /**
     * Event which is raised after end row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    editRowEnded?: EditRowEndedEvent;
    /**
     * Event which is raised before start cell editing.
     * Return false in order to cancel start editing and do not show editors.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get or set value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editCellStarting?: EditCellStartingEvent;
    /**
     * Event which is raised after start cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editCellStarted?: EditCellStartedEvent;
    /**
     * Event which is raised before end cell editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell/editor. That value can be modified and it will be used to update data source.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if value was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editCellEnding?: EditCellEndingEvent;
    /**
     * Event which is raised after end cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editCellEnded?: EditCellEndedEvent;
    /**
     * Event which is raised before adding new row.
     * Return false in order to cancel adding new row to data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     */
    rowAdding?: RowAddingEvent;
    /**
     * Event which is raised after adding new row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     */
    rowAdded?: RowAddedEvent;
    /**
     * Event which is raised before row deleting.
     * Return false in order to cancel.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     */
    rowDeleting?: RowDeletingEvent;
    /**
     * Event which is raised after row deleting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     */
    rowDeleted?: RowDeletedEvent;
    /**
     * Event which is raised when autoCommit of grid is not enabled and grid has pending transaction which may fail to be correctly rendered.
     * Application should process that event and it may trigger commit of grid.
     * Return false in order to prevent exception.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     */
    dataDirty?: DataDirtyEvent;
    /**
     * Event which is raised before adding new row to get value of cell for primaryKey column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.value to set unique record-key-identifier for new row. It is prefilled with suggested value (defaultValue of column or number of rows in data source)
     */
    generatePrimaryKeyValue?: GeneratePrimaryKeyValueEvent;
    /**
     * Event fired before the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogBeforeOpen?: RowEditDialogBeforeOpenEvent;
    /**
     * Event fired after the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogAfterOpen?: RowEditDialogAfterOpenEvent;
    /**
     * Event fired before the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogBeforeClose?: RowEditDialogBeforeCloseEvent;
    /**
     * Event fired after the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogAfterClose?: RowEditDialogAfterCloseEvent;
    /**
     * Event fired after the row edit dialog is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogContentsRendered?: RowEditDialogContentsRenderedEvent;
    /**
     * Option for igGridUpdating
     */
    [optionName: string]: any;
}
interface IgGridUpdatingMethods {
    /**
     * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
     * If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
     *
     * @param rowId    The primary key of the row the cell is a child of.
     * @param colKey    The column key of the cell.
     * @param value    The new value for the cell.
     */
    setCellValue(rowId: Object, colKey: string, value: Object): void;
    /**
     * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
     * If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
     *
     * @param rowId    The primary key of the row to update.
     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     */
    updateRow(rowId: Object, values: Object): void;
    /**
     * Adds a new row to the grid. It also creates a transaction and updates the UI.
     *
     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     */
    addRow(values: Object): void;
    /**
     * Deletes a row from the grid. It also creates a transaction and updates the UI.
     *
     * @param rowId    The primary key of the row to delete.
     */
    deleteRow(rowId: Object): void;
    /**
     * Starts editing for the row or cell specified.
     *
     * @param rowId    The row id.
     * @param column    The column key or index.
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    startEdit(rowId: Object, column: Object, raiseEvents?: boolean): boolean;
    /**
     * Start for adding a new row.
     *
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    startAddRowEdit(raiseEvents?: boolean): boolean;
    /**
     * Ends the currently active edit mode.
     *
     * @param update    Specifies if the edit process should accept the current changes. Default is 'false'.
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    endEdit(update?: boolean, raiseEvents?: boolean): boolean;
    /**
     * Find column-key which editor has invalid value.
     */
    findInvalid(): string;
    /**
     * Checks if the grid is in edit mode.
     */
    isEditing(): boolean;
    /**
     * Gets the editor for a column by the column key. That method can be used only after editor was already created.
     *
     * @param key    The key of the column.
     */
    editorForKey(key: string): Object;
    /**
     * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
     *
     * @param cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
     * @param create    Requests to create the editor if it has not been created yet.
     */
    editorForCell(cell: string, create?: boolean): Object;
    /**
     * Destroys igGridUpdating
     */
    destroy(): Object;
}
interface JQuery {
    data(propertyName: "igGridUpdating"): IgGridUpdatingMethods;
}
interface JQuery {
    igGridUpdating(methodName: "setCellValue", rowId: Object, colKey: string, value: Object): void;
    igGridUpdating(methodName: "updateRow", rowId: Object, values: Object): void;
    igGridUpdating(methodName: "addRow", values: Object): void;
    igGridUpdating(methodName: "deleteRow", rowId: Object): void;
    igGridUpdating(methodName: "startEdit", rowId: Object, column: Object, raiseEvents?: boolean): boolean;
    igGridUpdating(methodName: "startAddRowEdit", raiseEvents?: boolean): boolean;
    igGridUpdating(methodName: "endEdit", update?: boolean, raiseEvents?: boolean): boolean;
    igGridUpdating(methodName: "findInvalid"): string;
    igGridUpdating(methodName: "isEditing"): boolean;
    igGridUpdating(methodName: "editorForKey", key: string): Object;
    igGridUpdating(methodName: "editorForCell", cell: string, create?: boolean): Object;
    igGridUpdating(methodName: "destroy"): Object;
    /**
     * Sets gets array of settings for each column.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "columnSettings"): IgGridUpdatingColumnSetting[];
    /**
     * Sets gets array of settings for each column.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridUpdatingColumnSetting[]): void;
    /**
     * Sets the edit mode.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editMode"): any;
    /**
     * Sets the edit mode.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editMode", optionValue: any): void;
    /**
     * Sets gets delete-row functionality.
     * Value true: the "Delete" button is displayed on mouse-over a row and all selected rows are deleted by Delete-key.
     * Value false: delete-row is disabled.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "enableDeleteRow"): boolean;
    /**
     * Sets gets delete-row functionality.
     * Value true: the "Delete" button is displayed on mouse-over a row and all selected rows are deleted by Delete-key.
     * Value false: delete-row is disabled.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "enableDeleteRow", optionValue: boolean): void;
    /**
     * Sets gets add-new-row functionality.
     * Notes: If igGrid has primaryKey, then application should process generatePrimaryKeyValue event and provide value for a cell.
     * It is also recommended to set readOnly:true for the column (within columnSettings) with the primaryKey or to use editorOptions:{readOnly:true}.
     * By default the value of a cell with primary key is generated automatically and its value is equal to number of rows in grid plus 1.
     * Value true: the "Add Row" button is displayed on header, click on that button shows editors in all columns and new row inserted at the end of editing.
     * Value false: add-row functionality is disabled.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "enableAddRow"): boolean;
    /**
     * Sets gets add-new-row functionality.
     * Notes: If igGrid has primaryKey, then application should process generatePrimaryKeyValue event and provide value for a cell.
     * It is also recommended to set readOnly:true for the column (within columnSettings) with the primaryKey or to use editorOptions:{readOnly:true}.
     * By default the value of a cell with primary key is generated automatically and its value is equal to number of rows in grid plus 1.
     * Value true: the "Add Row" button is displayed on header, click on that button shows editors in all columns and new row inserted at the end of editing.
     * Value false: add-row functionality is disabled.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "enableAddRow", optionValue: boolean): void;
    /**
     * Sets gets option to enable validation for all columns.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "validation"): boolean;
    /**
     * Sets gets option to enable validation for all columns.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "validation", optionValue: boolean): void;
    /**
     * Sets gets text for Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneLabel is used.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "doneLabel"): string;
    /**
     * Sets gets text for Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneLabel is used.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "doneLabel", optionValue: string): void;
    /**
     * Sets gets text for title of Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneTooltip is used.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "doneTooltip"): string;
    /**
     * Sets gets text for title of Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneTooltip is used.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "doneTooltip", optionValue: string): void;
    /**
     * Sets gets text for Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelLabel is used.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "cancelLabel"): string;
    /**
     * Sets gets text for Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelLabel is used.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "cancelLabel", optionValue: string): void;
    /**
     * Sets gets text for title of Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelTooltip is used.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "cancelTooltip"): string;
    /**
     * Sets gets text for title of Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelTooltip is used.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "cancelTooltip", optionValue: string): void;
    /**
     * Sets gets text for add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowLabel is used.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "addRowLabel"): string;
    /**
     * Sets gets text for add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowLabel is used.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "addRowLabel", optionValue: string): void;
    /**
     * Sets gets text for title of add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowTooltip is used.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "addRowTooltip"): string;
    /**
     * Sets gets text for title of add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowTooltip is used.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "addRowTooltip", optionValue: string): void;
    /**
     * Sets gets text for Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowLabel is used.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "deleteRowLabel"): string;
    /**
     * Sets gets text for Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowLabel is used.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "deleteRowLabel", optionValue: string): void;
    /**
     * Sets gets text for title of Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowTooltip is used.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "deleteRowTooltip"): string;
    /**
     * Sets gets text for title of Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowTooltip is used.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "deleteRowTooltip", optionValue: string): void;
    /**
     * Sets gets visibility of the end-edit pop-up dialog with Done/Cancel buttons.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "showDoneCancelButtons"): boolean;
    /**
     * Sets gets visibility of the end-edit pop-up dialog with Done/Cancel buttons.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "showDoneCancelButtons", optionValue: boolean): void;
    /**
     * Sets gets ability to enable or disable exception, which is raised when grid has pending transaction and may fail to render data correctly.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "enableDataDirtyException"): boolean;
    /**
     * Sets gets ability to enable or disable exception, which is raised when grid has pending transaction and may fail to render data correctly.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "enableDataDirtyException", optionValue: boolean): void;
    /**
     * Sets gets triggers for start edit mode.
     * Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma.
     * Notes:
     * The array of strings similar to ["dblclick", "f2"] is also supported.
     * The keyboard triggers have effect only when "Selection" feature of grid is enabled.
     * If the "dblclick" is included, then "click" has no effect.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "startEditTriggers"): string;
    /**
     * Sets gets triggers for start edit mode.
     * Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma.
     * Notes:
     * The array of strings similar to ["dblclick", "f2"] is also supported.
     * The keyboard triggers have effect only when "Selection" feature of grid is enabled.
     * If the "dblclick" is included, then "click" has no effect.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "startEditTriggers", optionValue: string): void;
    /**
     * Enables horizontal move to the right on Enter while editing a cell.
     * Value true: Pressing Enter will move the focus to the next edited cell on the right
     * Value false: Pressing Enter will move the focus to the next edited cell on the row below
     */
    igGridUpdating(optionLiteral: 'option', optionName: "horizontalMoveOnEnter"): boolean;
    /**
     * Enables horizontal move to the right on Enter while editing a cell.
     * Value true: Pressing Enter will move the focus to the next edited cell on the right
     * Value false: Pressing Enter will move the focus to the next edited cell on the row below
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "horizontalMoveOnEnter", optionValue: boolean): void;
    /**
     * Enables excel navigating style while editing a cell
     * Value true: Arrows will not navigate inside the edited cell, but will exit the edit mode
     * and move the focus to the nearest cell.
     * Value false: Arrows will navigate the cursor inside the edited cell
     */
    igGridUpdating(optionLiteral: 'option', optionName: "excelNavigationMode"): boolean;
    /**
     * Enables excel navigating style while editing a cell
     * Value true: Arrows will not navigate inside the edited cell, but will exit the edit mode
     * and move the focus to the nearest cell.
     * Value false: Arrows will navigate the cursor inside the edited cell
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "excelNavigationMode", optionValue: boolean): void;
    /**
     * Gets a custom function to be called when AJAX request to the updateUrl option succeeds. Receives as argument the data returned by the server
     */
    igGridUpdating(optionLiteral: 'option', optionName: "saveChangesSuccessHandler"): any;
    /**
     * Sets a custom function to be called when AJAX request to the updateUrl option succeeds. Receives as argument the data returned by the server
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "saveChangesSuccessHandler", optionValue: any): void;
    /**
     * Gets a custom function to be called when AJAX request to the updateUrl option fails. Receives three arguments - the jqXHR, string describing the type of error and an optional exception object
     */
    igGridUpdating(optionLiteral: 'option', optionName: "saveChangesErrorHandler"): any;
    /**
     * Sets a custom function to be called when AJAX request to the updateUrl option fails. Receives three arguments - the jqXHR, string describing the type of error and an optional exception object
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "saveChangesErrorHandler", optionValue: any): void;
    /**
     * The swipe distance when on touch to trigger row delete button to appear.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "swipeDistance"): any;
    /**
     * The swipe distance when on touch to trigger row delete button to appear.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "swipeDistance", optionValue: any): void;
    /**
     * Controls whether the widget will wrap around the grid when editing reaches a cell in one of the edges of the data view.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "wrapAround"): boolean;
    /**
     * Controls whether the widget will wrap around the grid when editing reaches a cell in one of the edges of the data view.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "wrapAround", optionValue: boolean): void;
    /**
     * A list of options controlling the rendering behavior of the row edit dialog. If the edit mode is not 'dialog' these have no effect.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogOptions"): IgGridUpdatingRowEditDialogOptions;
    /**
     * A list of options controlling the rendering behavior of the row edit dialog. If the edit mode is not 'dialog' these have no effect.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogOptions", optionValue: IgGridUpdatingRowEditDialogOptions): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event which is raised before start row editing.
     * Return false in order to cancel editing and do not show editors in row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editRowStarting"): EditRowStartingEvent;
    /**
     * Event which is raised before start row editing.
     * Return false in order to cancel editing and do not show editors in row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editRowStarting", optionValue: EditRowStartingEvent): void;
    /**
     * Event which is raised after start row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editRowStarted"): EditRowStartedEvent;
    /**
     * Event which is raised after start row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editRowStarted", optionValue: EditRowStartedEvent): void;
    /**
     * Event which is raised before end row editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editRowEnding"): EditRowEndingEvent;
    /**
     * Event which is raised before end row editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editRowEnding", optionValue: EditRowEndingEvent): void;
    /**
     * Event which is raised after end row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editRowEnded"): EditRowEndedEvent;
    /**
     * Event which is raised after end row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editRowEnded", optionValue: EditRowEndedEvent): void;
    /**
     * Event which is raised before start cell editing.
     * Return false in order to cancel start editing and do not show editors.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get or set value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editCellStarting"): EditCellStartingEvent;
    /**
     * Event which is raised before start cell editing.
     * Return false in order to cancel start editing and do not show editors.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get or set value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editCellStarting", optionValue: EditCellStartingEvent): void;
    /**
     * Event which is raised after start cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editCellStarted"): EditCellStartedEvent;
    /**
     * Event which is raised after start cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editCellStarted", optionValue: EditCellStartedEvent): void;
    /**
     * Event which is raised before end cell editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell/editor. That value can be modified and it will be used to update data source.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if value was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editCellEnding"): EditCellEndingEvent;
    /**
     * Event which is raised before end cell editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell/editor. That value can be modified and it will be used to update data source.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if value was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editCellEnding", optionValue: EditCellEndingEvent): void;
    /**
     * Event which is raised after end cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editCellEnded"): EditCellEndedEvent;
    /**
     * Event which is raised after end cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "editCellEnded", optionValue: EditCellEndedEvent): void;
    /**
     * Event which is raised before adding new row.
     * Return false in order to cancel adding new row to data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowAdding"): RowAddingEvent;
    /**
     * Event which is raised before adding new row.
     * Return false in order to cancel adding new row to data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowAdding", optionValue: RowAddingEvent): void;
    /**
     * Event which is raised after adding new row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowAdded"): RowAddedEvent;
    /**
     * Event which is raised after adding new row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowAdded", optionValue: RowAddedEvent): void;
    /**
     * Event which is raised before row deleting.
     * Return false in order to cancel.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowDeleting"): RowDeletingEvent;
    /**
     * Event which is raised before row deleting.
     * Return false in order to cancel.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowDeleting", optionValue: RowDeletingEvent): void;
    /**
     * Event which is raised after row deleting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowDeleted"): RowDeletedEvent;
    /**
     * Event which is raised after row deleting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowDeleted", optionValue: RowDeletedEvent): void;
    /**
     * Event which is raised when autoCommit of grid is not enabled and grid has pending transaction which may fail to be correctly rendered.
     * Application should process that event and it may trigger commit of grid.
     * Return false in order to prevent exception.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "dataDirty"): DataDirtyEvent;
    /**
     * Event which is raised when autoCommit of grid is not enabled and grid has pending transaction which may fail to be correctly rendered.
     * Application should process that event and it may trigger commit of grid.
     * Return false in order to prevent exception.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "dataDirty", optionValue: DataDirtyEvent): void;
    /**
     * Event which is raised before adding new row to get value of cell for primaryKey column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.value to set unique record-key-identifier for new row. It is prefilled with suggested value (defaultValue of column or number of rows in data source)
     */
    igGridUpdating(optionLiteral: 'option', optionName: "generatePrimaryKeyValue"): GeneratePrimaryKeyValueEvent;
    /**
     * Event which is raised before adding new row to get value of cell for primaryKey column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.value to set unique record-key-identifier for new row. It is prefilled with suggested value (defaultValue of column or number of rows in data source)
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "generatePrimaryKeyValue", optionValue: GeneratePrimaryKeyValueEvent): void;
    /**
     * Event fired before the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeOpen"): RowEditDialogBeforeOpenEvent;
    /**
     * Event fired before the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeOpen", optionValue: RowEditDialogBeforeOpenEvent): void;
    /**
     * Event fired after the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterOpen"): RowEditDialogAfterOpenEvent;
    /**
     * Event fired after the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterOpen", optionValue: RowEditDialogAfterOpenEvent): void;
    /**
     * Event fired before the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeClose"): RowEditDialogBeforeCloseEvent;
    /**
     * Event fired before the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeClose", optionValue: RowEditDialogBeforeCloseEvent): void;
    /**
     * Event fired after the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterClose"): RowEditDialogAfterCloseEvent;
    /**
     * Event fired after the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterClose", optionValue: RowEditDialogAfterCloseEvent): void;
    /**
     * Event fired after the row edit dialog is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogContentsRendered"): RowEditDialogContentsRenderedEvent;
    /**
     * Event fired after the row edit dialog is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogContentsRendered", optionValue: RowEditDialogContentsRenderedEvent): void;
    igGridUpdating(options: IgGridUpdating): JQuery;
    igGridUpdating(optionLiteral: 'option', optionName: string): any;
    igGridUpdating(optionLiteral: 'option', options: IgGridUpdating): JQuery;
    igGridUpdating(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igGridUpdating(methodName: string, ...methodParams: any[]): any;
}
interface ActionExecutingEvent {
    (event: Event, ui: ActionExecutingEventUIParam): void;
}
interface ActionExecutingEventUIParam {
}
interface ActionExecutedEvent {
    (event: Event, ui: ActionExecutedEventUIParam): void;
}
interface ActionExecutedEventUIParam {
}
interface ToolbarCollapsingEvent {
    (event: Event, ui: ToolbarCollapsingEventUIParam): void;
}
interface ToolbarCollapsingEventUIParam {
}
interface ToolbarCollapsedEvent {
    (event: Event, ui: ToolbarCollapsedEventUIParam): void;
}
interface ToolbarCollapsedEventUIParam {
}
interface ToolbarExpandingEvent {
    (event: Event, ui: ToolbarExpandingEventUIParam): void;
}
interface ToolbarExpandingEventUIParam {
}
interface ToolbarExpandedEvent {
    (event: Event, ui: ToolbarExpandedEventUIParam): void;
}
interface ToolbarExpandedEventUIParam {
}
interface CutEvent {
    (event: Event, ui: CutEventUIParam): void;
}
interface CutEventUIParam {
}
interface CopyEvent {
    (event: Event, ui: CopyEventUIParam): void;
}
interface CopyEventUIParam {
}
interface PasteEvent {
    (event: Event, ui: PasteEventUIParam): void;
}
interface PasteEventUIParam {
}
interface UndoEvent {
    (event: Event, ui: UndoEventUIParam): void;
}
interface UndoEventUIParam {
}
interface RedoEvent {
    (event: Event, ui: RedoEventUIParam): void;
}
interface RedoEventUIParam {
}
interface WorkspaceResizedEvent {
    (event: Event, ui: WorkspaceResizedEventUIParam): void;
}
interface WorkspaceResizedEventUIParam {
}
interface IgHtmlEditor {
    /**
     * Shows/hides the "Formatting" toolbar.
     */
    showFormattingToolbar?: boolean;
    /**
     * Shows/hides the "Text" toolbar.
     */
    showTextToolbar?: boolean;
    /**
     * Shows/hides the "Insert Object" toolbar.
     */
    showInsertObjectToolbar?: boolean;
    /**
     * Shows/hides the "Copy Paste" toolbar.
     */
    showCopyPasteToolbar?: boolean;
    /**
     * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * The html editor toolbars list.
     */
    toolbarSettings?: any[];
    /**
     * The html editor custom toolbars list.
     */
    customToolbars?: any[];
    /**
     * The name attribute of the html editor source view.
     */
    inputName?: string;
    /**
     * Used to render inside the html editor as initial content
     */
    value?: string;
    /**
     * Event fired after the whole html editor widget has been rendered.
     */
    rendered?: RenderedEvent;
    /**
     * Event fired before the html editor widget has been rendered.
     */
    rendering?: RenderingEvent;
    /**
     * Event fired before a toolbar item is clicked.
     */
    actionExecuting?: ActionExecutingEvent;
    /**
     * Event fired after a toolbar item is clicked.
     */
    actionExecuted?: ActionExecutedEvent;
    /**
     * Event fired before a toolbar is collapsed.
     */
    toolbarCollapsing?: ToolbarCollapsingEvent;
    /**
     * Event fired after a toolbar is collapsed.
     */
    toolbarCollapsed?: ToolbarCollapsedEvent;
    /**
     * Event fired before a toolbar is expanded.
     */
    toolbarExpanding?: ToolbarExpandingEvent;
    /**
     * Event fired after a toolbar is expanded.
     */
    toolbarExpanded?: ToolbarExpandedEvent;
    /**
     * Event is fired on keyboard cut action.
     */
    cut?: CutEvent;
    /**
     * Event is fired on keyboard copy action.
     */
    copy?: CopyEvent;
    /**
     * Event is fired on keyboard paste action.
     */
    paste?: PasteEvent;
    /**
     * Event is fired on keyboard undo action.
     */
    undo?: UndoEvent;
    /**
     * Event is fired on keyboard redo action.
     */
    redo?: RedoEvent;
    /**
     * Cancel = "false" Event is fired after reziing of workspace
     */
    workspaceResized?: WorkspaceResizedEvent;
    /**
     * Option for igHtmlEditor
     */
    [optionName: string]: any;
}
interface IgHtmlEditorMethods {
    /**
     * Returns the element on which the widget was instantiated
     */
    widget(): void;
    /**
     * Resizes the height of the workspace
     */
    resizeWorkspace(): void;
    /**
     * Gets the content of the html editor.
     *
     * @param format Returns the content as html or plain text. Values can be "text" or "html".
     */
    getContent(format: string): string;
    /**
     * Sets the content of the html editor.
     *
     * @param content The content which will be set.
     * @param format The content type: "text" or "html".
     */
    setContent(content: string, format: string): void;
    /**
     * Destroys the widget.
     */
    destroy(): void;
    /**
     * Executes htmleditor commands.
     *
     * @param actionName The command name.
     * @param args Additional parameter for the command.
     */
    executeAction(actionName: string, args?: Object): void;
    /**
     * Returns true/false if the editor contents were modified or not.
     */
    isDirty(): Object;
    /**
     * Returns the window object associated with the Html Editor's content editable area
     */
    contentWindow(): Object;
    /**
     * Returns the document object associated with the Html Editor's content editable area
     */
    contentDocument(): Object;
    /**
     * Returns the content editable associated with this Html Editor
     */
    contentEditable(): Object;
    /**
     * Returns Selection object that represent the current selection in the content editable
     */
    selection(): Object;
    /**
     * Returns Range object that represent the current range in the content editable
     */
    range(): Object;
    /**
     * Inserts the provided content at the position of the caret.
     *
     * @param element Accepts html string, DOM element or a jQuery object.
     */
    insertAtCaret(element: Object): void;
}
interface JQuery {
    data(propertyName: "igHtmlEditor"): IgHtmlEditorMethods;
}
interface IgPathFinder {
    items?: any;
    /**
     * Option for igPathFinder
     */
    [optionName: string]: any;
}
interface ApplyEvent {
    (event: Event, ui: ApplyEventUIParam): void;
}
interface ApplyEventUIParam {
}
interface CancelEvent {
    (event: Event, ui: CancelEventUIParam): void;
}
interface CancelEventUIParam {
}
interface ShowEvent {
    (event: Event, ui: ShowEventUIParam): void;
}
interface ShowEventUIParam {
}
interface HideEvent {
    (event: Event, ui: HideEventUIParam): void;
}
interface HideEventUIParam {
}
interface IgHtmlEditorPopover {
    item?: any;
    target?: any;
    isHidden?: boolean;
    apply?: ApplyEvent;
    cancel?: CancelEvent;
    show?: ShowEvent;
    hide?: HideEvent;
    /**
     * Option for igHtmlEditorPopover
     */
    [optionName: string]: any;
}
interface IgHtmlEditorPopoverMethods {
    show(item: Object): void;
    hide(): void;
}
interface JQuery {
    data(propertyName: "igHtmlEditorPopover"): IgHtmlEditorPopoverMethods;
}
interface IgLinkPropertiesDialog {
    item?: any;
    target?: any;
    isHidden?: boolean;
    apply?: ApplyEvent;
    cancel?: CancelEvent;
    show?: ShowEvent;
    hide?: HideEvent;
    /**
     * Option for igLinkPropertiesDialog
     */
    [optionName: string]: any;
}
interface IgLinkPropertiesDialogMethods {
    show(item: Object): void;
    hide(): void;
}
interface JQuery {
    data(propertyName: "igLinkPropertiesDialog"): IgLinkPropertiesDialogMethods;
}
interface IgTablePropertiesDialog {
    item?: any;
    target?: any;
    isHidden?: boolean;
    apply?: ApplyEvent;
    cancel?: CancelEvent;
    show?: ShowEvent;
    hide?: HideEvent;
    /**
     * Option for igTablePropertiesDialog
     */
    [optionName: string]: any;
}
interface IgTablePropertiesDialogMethods {
    show(item: Object): void;
    hide(): void;
}
interface JQuery {
    data(propertyName: "igTablePropertiesDialog"): IgTablePropertiesDialogMethods;
}
interface IgImagePropertiesDialog {
    item?: any;
    target?: any;
    isHidden?: boolean;
    apply?: ApplyEvent;
    cancel?: CancelEvent;
    show?: ShowEvent;
    hide?: HideEvent;
    /**
     * Option for igImagePropertiesDialog
     */
    [optionName: string]: any;
}
interface IgImagePropertiesDialogMethods {
    show(item: Object): void;
    hide(): void;
}
interface JQuery {
    data(propertyName: "igImagePropertiesDialog"): IgImagePropertiesDialogMethods;
}
declare module Infragistics {
    class SelectionWrapper {
        constructor(NODE: any);
        surroundContents(wrapEl: Object): void;
        getSelectedItem(): void;
        getSelectionAsText(): void;
        select(element: Object): void;
        insertElement(element: Object): void;
        execCommand(name: Object, args: Object): void;
        replaceNode(newNode: Object): void;
        insertTable(table: Object): void;
        focus(): void;
    }
}
interface IgniteUIStatic {
    SelectionWrapper: typeof Infragistics.SelectionWrapper;
}
declare module Infragistics {
    class ToolbarHelper {
        analyse(el: Object): void;
    }
}
interface JQuery {
    igHtmlEditor(methodName: "widget"): void;
    igHtmlEditor(methodName: "resizeWorkspace"): void;
    igHtmlEditor(methodName: "getContent", format: string): string;
    igHtmlEditor(methodName: "setContent", content: string, format: string): void;
    igHtmlEditor(methodName: "destroy"): void;
    igHtmlEditor(methodName: "executeAction", actionName: string, args?: Object): void;
    igHtmlEditor(methodName: "isDirty"): Object;
    igHtmlEditor(methodName: "contentWindow"): Object;
    igHtmlEditor(methodName: "contentDocument"): Object;
    igHtmlEditor(methodName: "contentEditable"): Object;
    igHtmlEditor(methodName: "selection"): Object;
    igHtmlEditor(methodName: "range"): Object;
    igHtmlEditor(methodName: "insertAtCaret", element: Object): void;
    /**
     * Shows/hides the "Formatting" toolbar.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "showFormattingToolbar"): boolean;
    /**
     * Shows/hides the "Formatting" toolbar.
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "showFormattingToolbar", optionValue: boolean): void;
    /**
     * Shows/hides the "Text" toolbar.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "showTextToolbar"): boolean;
    /**
     * Shows/hides the "Text" toolbar.
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "showTextToolbar", optionValue: boolean): void;
    /**
     * Shows/hides the "Insert Object" toolbar.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "showInsertObjectToolbar"): boolean;
    /**
     * Shows/hides the "Insert Object" toolbar.
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "showInsertObjectToolbar", optionValue: boolean): void;
    /**
     * Shows/hides the "Copy Paste" toolbar.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "showCopyPasteToolbar"): boolean;
    /**
     * Shows/hides the "Copy Paste" toolbar.
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "showCopyPasteToolbar", optionValue: boolean): void;
    /**
     * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the html editor. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * The html editor toolbars list.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarSettings"): any[];
    /**
     * The html editor toolbars list.
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarSettings", optionValue: any[]): void;
    /**
     * The html editor custom toolbars list.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "customToolbars"): any[];
    /**
     * The html editor custom toolbars list.
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "customToolbars", optionValue: any[]): void;
    /**
     * The name attribute of the html editor source view.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "inputName"): string;
    /**
     * The name attribute of the html editor source view.
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "inputName", optionValue: string): void;
    /**
     * Used to render inside the html editor as initial content
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "value"): string;
    /**
     * Used to render inside the html editor as initial content
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "value", optionValue: string): void;
    /**
     * Event fired after the whole html editor widget has been rendered.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Event fired after the whole html editor widget has been rendered.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Event fired before the html editor widget has been rendered.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;
    /**
     * Event fired before the html editor widget has been rendered.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;
    /**
     * Event fired before a toolbar item is clicked.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "actionExecuting"): ActionExecutingEvent;
    /**
     * Event fired before a toolbar item is clicked.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "actionExecuting", optionValue: ActionExecutingEvent): void;
    /**
     * Event fired after a toolbar item is clicked.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "actionExecuted"): ActionExecutedEvent;
    /**
     * Event fired after a toolbar item is clicked.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "actionExecuted", optionValue: ActionExecutedEvent): void;
    /**
     * Event fired before a toolbar is collapsed.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarCollapsing"): ToolbarCollapsingEvent;
    /**
     * Event fired before a toolbar is collapsed.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarCollapsing", optionValue: ToolbarCollapsingEvent): void;
    /**
     * Event fired after a toolbar is collapsed.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarCollapsed"): ToolbarCollapsedEvent;
    /**
     * Event fired after a toolbar is collapsed.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarCollapsed", optionValue: ToolbarCollapsedEvent): void;
    /**
     * Event fired before a toolbar is expanded.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarExpanding"): ToolbarExpandingEvent;
    /**
     * Event fired before a toolbar is expanded.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarExpanding", optionValue: ToolbarExpandingEvent): void;
    /**
     * Event fired after a toolbar is expanded.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarExpanded"): ToolbarExpandedEvent;
    /**
     * Event fired after a toolbar is expanded.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "toolbarExpanded", optionValue: ToolbarExpandedEvent): void;
    /**
     * Event is fired on keyboard cut action.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "cut"): CutEvent;
    /**
     * Event is fired on keyboard cut action.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "cut", optionValue: CutEvent): void;
    /**
     * Event is fired on keyboard copy action.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "copy"): CopyEvent;
    /**
     * Event is fired on keyboard copy action.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "copy", optionValue: CopyEvent): void;
    /**
     * Event is fired on keyboard paste action.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "paste"): PasteEvent;
    /**
     * Event is fired on keyboard paste action.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "paste", optionValue: PasteEvent): void;
    /**
     * Event is fired on keyboard undo action.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "undo"): UndoEvent;
    /**
     * Event is fired on keyboard undo action.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "undo", optionValue: UndoEvent): void;
    /**
     * Event is fired on keyboard redo action.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "redo"): RedoEvent;
    /**
     * Event is fired on keyboard redo action.
     *
     * @optionValue Define event handler function.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "redo", optionValue: RedoEvent): void;
    /**
     * Cancel = "false" Event is fired after reziing of workspace
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "workspaceResized"): WorkspaceResizedEvent;
    /**
     * Cancel = "false" Event is fired after reziing of workspace
     *
     * @optionValue New value to be set.
     */
    igHtmlEditor(optionLiteral: 'option', optionName: "workspaceResized", optionValue: WorkspaceResizedEvent): void;
    igHtmlEditor(options: IgHtmlEditor): JQuery;
    igHtmlEditor(optionLiteral: 'option', optionName: string): any;
    igHtmlEditor(optionLiteral: 'option', options: IgHtmlEditor): JQuery;
    igHtmlEditor(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igHtmlEditor(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    /**
     */
    igPathFinder(optionLiteral: 'option', optionName: "items"): any;
    /**
     */
    igPathFinder(optionLiteral: 'option', optionName: "items", optionValue: any): void;
    igPathFinder(options: IgPathFinder): JQuery;
    igPathFinder(optionLiteral: 'option', optionName: string): any;
    igPathFinder(optionLiteral: 'option', options: IgPathFinder): JQuery;
    igPathFinder(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igPathFinder(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igHtmlEditorPopover(methodName: "show", item: Object): void;
    igHtmlEditorPopover(methodName: "hide"): void;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "item"): any;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "item", optionValue: any): void;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "target"): any;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "target", optionValue: any): void;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "isHidden"): boolean;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "isHidden", optionValue: boolean): void;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "apply"): ApplyEvent;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "apply", optionValue: ApplyEvent): void;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "cancel"): CancelEvent;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "cancel", optionValue: CancelEvent): void;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "show"): ShowEvent;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "show", optionValue: ShowEvent): void;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "hide"): HideEvent;
    /**
     */
    igHtmlEditorPopover(optionLiteral: 'option', optionName: "hide", optionValue: HideEvent): void;
    igHtmlEditorPopover(options: IgHtmlEditorPopover): JQuery;
    igHtmlEditorPopover(optionLiteral: 'option', optionName: string): any;
    igHtmlEditorPopover(optionLiteral: 'option', options: IgHtmlEditorPopover): JQuery;
    igHtmlEditorPopover(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igHtmlEditorPopover(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igLinkPropertiesDialog(methodName: "show", item: Object): void;
    igLinkPropertiesDialog(methodName: "hide"): void;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "item"): any;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "item", optionValue: any): void;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "target"): any;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "target", optionValue: any): void;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "isHidden"): boolean;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "isHidden", optionValue: boolean): void;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "apply"): ApplyEvent;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "apply", optionValue: ApplyEvent): void;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "cancel"): CancelEvent;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "cancel", optionValue: CancelEvent): void;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "show"): ShowEvent;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "show", optionValue: ShowEvent): void;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "hide"): HideEvent;
    /**
     */
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: "hide", optionValue: HideEvent): void;
    igLinkPropertiesDialog(options: IgLinkPropertiesDialog): JQuery;
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: string): any;
    igLinkPropertiesDialog(optionLiteral: 'option', options: IgLinkPropertiesDialog): JQuery;
    igLinkPropertiesDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igLinkPropertiesDialog(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igTablePropertiesDialog(methodName: "show", item: Object): void;
    igTablePropertiesDialog(methodName: "hide"): void;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "item"): any;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "item", optionValue: any): void;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "target"): any;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "target", optionValue: any): void;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "isHidden"): boolean;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "isHidden", optionValue: boolean): void;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "apply"): ApplyEvent;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "apply", optionValue: ApplyEvent): void;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "cancel"): CancelEvent;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "cancel", optionValue: CancelEvent): void;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "show"): ShowEvent;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "show", optionValue: ShowEvent): void;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "hide"): HideEvent;
    /**
     */
    igTablePropertiesDialog(optionLiteral: 'option', optionName: "hide", optionValue: HideEvent): void;
    igTablePropertiesDialog(options: IgTablePropertiesDialog): JQuery;
    igTablePropertiesDialog(optionLiteral: 'option', optionName: string): any;
    igTablePropertiesDialog(optionLiteral: 'option', options: IgTablePropertiesDialog): JQuery;
    igTablePropertiesDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTablePropertiesDialog(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igImagePropertiesDialog(methodName: "show", item: Object): void;
    igImagePropertiesDialog(methodName: "hide"): void;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "item"): any;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "item", optionValue: any): void;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "target"): any;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "target", optionValue: any): void;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "isHidden"): boolean;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "isHidden", optionValue: boolean): void;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "apply"): ApplyEvent;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "apply", optionValue: ApplyEvent): void;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "cancel"): CancelEvent;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "cancel", optionValue: CancelEvent): void;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "show"): ShowEvent;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "show", optionValue: ShowEvent): void;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "hide"): HideEvent;
    /**
     */
    igImagePropertiesDialog(optionLiteral: 'option', optionName: "hide", optionValue: HideEvent): void;
    igImagePropertiesDialog(options: IgImagePropertiesDialog): JQuery;
    igImagePropertiesDialog(optionLiteral: 'option', optionName: string): any;
    igImagePropertiesDialog(optionLiteral: 'option', options: IgImagePropertiesDialog): JQuery;
    igImagePropertiesDialog(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igImagePropertiesDialog(methodName: string, ...methodParams: any[]): any;
}
interface IgLayoutManagerGridLayout {
    /**
     * Number of columns in the grid
     */
    cols?: number;
    /**
     * Number of rows in the grid
     */
    rows?: number;
    /**
     * Accepts number or string with width in px or percents
     */
    columnWidth?: any;
    /**
     * Accepts number or string with height in px or percents
     */
    columnHeight?: any;
    /**
     * Specifies the margin left css property for items
     */
    marginLeft?: number;
    /**
     * Specifies the margin top css property for items
     */
    marginTop?: number;
    /**
     * Specified whether the items should rearrange to fit in the container when it is resized.
     *                     Have effect only when fixed columnWidth option is set.
     */
    rearrangeItems?: boolean;
    /**
     * Specifies whether the previous set options should be overriden when setting options
     */
    overrideConfigOnSetOption?: boolean;
    /**
     * Specifies the duration of the animations in the layout manager's grid layout
     */
    animationDuration?: number;
    /**
     * Option for IgLayoutManagerGridLayout
     */
    [optionName: string]: any;
}
interface IgLayoutManagerBorderLayout {
    /**
     * Option specifying whether the header region in the border layout will be hidden or shown
     */
    showHeader?: boolean;
    /**
     * Option specifying whether the footer region in the border layout will be hidden or shown
     */
    showFooter?: boolean;
    /**
     * Option specifying whether the left region in the border layout will be hidden or shown
     */
    showLeft?: boolean;
    /**
     * Option specifying whether the right region in the border layout will be hidden or shown
     */
    showRight?: boolean;
    /**
     * Option specifying the width of the left region, either in px or percentages
     */
    leftWidth?: string;
    /**
     * Option specifying the width of the right region, either in px or percentages
     */
    rightWidth?: string;
    /**
     * Option for IgLayoutManagerBorderLayout
     */
    [optionName: string]: any;
}
interface IgLayoutManagerItem {
    /**
     * RowSpan of the item
     */
    rowSpan?: number;
    /**
     * ColSpan of the item
     */
    colSpan?: number;
    /**
     * Column index of the item in the grid
     */
    colIndex?: number;
    /**
     * Row index of the item in the grid
     */
    rowIndex?: number;
    /**
     * Individual item width, either in px or percentage
     */
    width?: string;
    /**
     * Individual item height, either in px or percentage
     */
    height?: string;
    /**
     * Option for IgLayoutManagerItem
     */
    [optionName: string]: any;
}
interface ItemRenderingEvent {
    (event: Event, ui: ItemRenderingEventUIParam): void;
}
interface ItemRenderingEventUIParam {
    /**
     * Used to get reference to the igLayoutManager.
     */
    owner?: any;
    /**
     * Used to get a reference of item's settings, such as colspan ,rowspan, etc.
     */
    itemData?: any;
    /**
     * Used to get a reference of the item's index, if the layout is flow or vertical
     */
    index?: any;
}
interface ItemRenderedEvent {
    (event: Event, ui: ItemRenderedEventUIParam): void;
}
interface ItemRenderedEventUIParam {
    /**
     * Used to get reference to the igLayoutManager.
     */
    owner?: any;
    /**
     * Used to get a reference of item's settings, such as colspan ,rowspan, etc.
     */
    itemData?: any;
    /**
     * Used to get a reference of the item's index, if the layout is flow or vertical
     */
    index?: any;
}
interface InternalResizingEvent {
    (event: Event, ui: InternalResizingEventUIParam): void;
}
interface InternalResizingEventUIParam {
    /**
     * Used to get a reference to the layout manager performing resizing.
     */
    owner?: any;
}
interface InternalResizedEvent {
    (event: Event, ui: InternalResizedEventUIParam): void;
}
interface InternalResizedEventUIParam {
    /**
     * Used to get a reference to the layout manager performing resizing.
     */
    owner?: any;
}
interface IgLayoutManager {
    /**
     * defines the layout typegridborderflowcolumnvertical
     *
     * Valid values:
     * "grid"
     * "border"
     * "flow"
     */
    layoutMode?: any;
    /**
     * Number of items to render, this is only applicable to layouts: vertical and flow
     */
    itemCount?: number;
    /**
     * Options specific to grid layout mode
     */
    gridLayout?: IgLayoutManagerGridLayout;
    /**
     * Options specific to a border layout
     */
    borderLayout?: IgLayoutManagerBorderLayout;
    /**
     * An array of item descriptions
     * this assumes the container is empty, and every item
     * is described by rowspan,colspan, etc. - otherwise values of
     * 1 are assumed
     * items can have various properties some of which may not be applicable
     * depending on the layoutMode.
     * for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
     */
    items?: IgLayoutManagerItem[];
    /**
     * Width of the layout container
     */
    width?: string;
    /**
     * Height of the layout container
     */
    height?: string;
    /**
     * Event fired before an item is rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     * Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
     * use ui.index to get a reference of the item's index, if the layout is flow or vertical
     */
    itemRendering?: ItemRenderingEvent;
    /**
     * Event fired after an item has been rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     * Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
     * use ui.index to get a reference of the item's index, if the layout is flow or vertical
     */
    itemRendered?: ItemRenderedEvent;
    /**
     * Event fired after all items are rendered.
     *                 Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     */
    rendered?: RenderedEvent;
    /**
     * Event fired before items are resized.
     *                 Use ui.owner to get a reference to the layout manager performing resizing.
     */
    internalResizing?: InternalResizingEvent;
    /**
     * Event fired after items are resized.
     *                 Use ui.owner to get a reference to the layout manager performing resizing.
     */
    internalResized?: InternalResizedEvent;
    /**
     * Option for igLayoutManager
     */
    [optionName: string]: any;
}
interface IgLayoutManagerMethods {
    /**
     * Triggers recalculation of the layout dimensions. Layouts may not need to be reflowed manually, if their sizes are in percentages (i.e. they are responsive by default)
     * this can be particularly useful with a grid layout, when the container has percentage sizes, but items are calculated in pixels and positioned absolutely in the container.
     *
     * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param animationDuration The animation duration to be used for this reflow only. Supported only for Grid Layout mode.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    reflow(forceReflow?: Object, animationDuration?: number, event?: Object): void;
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     * 1. Remove custom CSS classes that were added.
     * 2. Remove any elements that were added at widget's initialization and after that, which didn't below to the original markup
     * 3. Unbind all events that were bound.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igLayoutManager"): IgLayoutManagerMethods;
}
interface JQuery {
    igLayoutManager(methodName: "reflow", forceReflow?: Object, animationDuration?: number, event?: Object): void;
    igLayoutManager(methodName: "destroy"): void;
    /**
     * Defines the layout typegridborderflowcolumnvertical
     */
    igLayoutManager(optionLiteral: 'option', optionName: "layoutMode"): any;
    /**
     * Defines the layout typegridborderflowcolumnvertical
     *
     * @optionValue New value to be set.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "layoutMode", optionValue: any): void;
    /**
     * Number of items to render, this is only applicable to layouts: vertical and flow
     */
    igLayoutManager(optionLiteral: 'option', optionName: "itemCount"): number;
    /**
     * Number of items to render, this is only applicable to layouts: vertical and flow
     *
     * @optionValue New value to be set.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "itemCount", optionValue: number): void;
    /**
     * Options specific to grid layout mode
     */
    igLayoutManager(optionLiteral: 'option', optionName: "gridLayout"): IgLayoutManagerGridLayout;
    /**
     * Options specific to grid layout mode
     *
     * @optionValue New value to be set.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "gridLayout", optionValue: IgLayoutManagerGridLayout): void;
    /**
     * Options specific to a border layout
     */
    igLayoutManager(optionLiteral: 'option', optionName: "borderLayout"): IgLayoutManagerBorderLayout;
    /**
     * Options specific to a border layout
     *
     * @optionValue New value to be set.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "borderLayout", optionValue: IgLayoutManagerBorderLayout): void;
    /**
     * An array of item descriptions
     * this assumes the container is empty, and every item
     * is described by rowspan,colspan, etc. - otherwise values of
     * 1 are assumed
     * items can have various properties some of which may not be applicable
     * depending on the layoutMode.
     * for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
     */
    igLayoutManager(optionLiteral: 'option', optionName: "items"): IgLayoutManagerItem[];
    /**
     * An array of item descriptions
     * this assumes the container is empty, and every item
     * is described by rowspan,colspan, etc. - otherwise values of
     * 1 are assumed
     * items can have various properties some of which may not be applicable
     * depending on the layoutMode.
     * for example rowSpan/colSpan/colIndex/rowIndex are only applicable to gridlayout
     *
     * @optionValue New value to be set.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "items", optionValue: IgLayoutManagerItem[]): void;
    /**
     * Width of the layout container
     */
    igLayoutManager(optionLiteral: 'option', optionName: "width"): string;
    /**
     * Width of the layout container
     *
     * @optionValue New value to be set.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "width", optionValue: string): void;
    /**
     * Height of the layout container
     */
    igLayoutManager(optionLiteral: 'option', optionName: "height"): string;
    /**
     * Height of the layout container
     *
     * @optionValue New value to be set.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "height", optionValue: string): void;
    /**
     * Event fired before an item is rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     * Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
     * use ui.index to get a reference of the item's index, if the layout is flow or vertical
     */
    igLayoutManager(optionLiteral: 'option', optionName: "itemRendering"): ItemRenderingEvent;
    /**
     * Event fired before an item is rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     * Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
     * use ui.index to get a reference of the item's index, if the layout is flow or vertical
     *
     * @optionValue Define event handler function.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "itemRendering", optionValue: ItemRenderingEvent): void;
    /**
     * Event fired after an item has been rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     * Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
     * use ui.index to get a reference of the item's index, if the layout is flow or vertical
     */
    igLayoutManager(optionLiteral: 'option', optionName: "itemRendered"): ItemRenderedEvent;
    /**
     * Event fired after an item has been rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     * Use ui.itemData to get a reference of item's settings, such as colspan ,rowspan, etc.
     * use ui.index to get a reference of the item's index, if the layout is flow or vertical
     *
     * @optionValue Define event handler function.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "itemRendered", optionValue: ItemRenderedEvent): void;
    /**
     * Event fired after all items are rendered.
     *                 Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Event fired after all items are rendered.
     *                 Function takes arguments evt and ui.
     * Use ui.owner to get reference to the igLayoutManager.
     *
     * @optionValue Define event handler function.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Event fired before items are resized.
     *                 Use ui.owner to get a reference to the layout manager performing resizing.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "internalResizing"): InternalResizingEvent;
    /**
     * Event fired before items are resized.
     *                 Use ui.owner to get a reference to the layout manager performing resizing.
     *
     * @optionValue Define event handler function.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "internalResizing", optionValue: InternalResizingEvent): void;
    /**
     * Event fired after items are resized.
     *                 Use ui.owner to get a reference to the layout manager performing resizing.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "internalResized"): InternalResizedEvent;
    /**
     * Event fired after items are resized.
     *                 Use ui.owner to get a reference to the layout manager performing resizing.
     *
     * @optionValue Define event handler function.
     */
    igLayoutManager(optionLiteral: 'option', optionName: "internalResized", optionValue: InternalResizedEvent): void;
    igLayoutManager(options: IgLayoutManager): JQuery;
    igLayoutManager(optionLiteral: 'option', optionName: string): any;
    igLayoutManager(optionLiteral: 'option', options: IgLayoutManager): JQuery;
    igLayoutManager(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igLayoutManager(methodName: string, ...methodParams: any[]): any;
}
interface IgLinearGaugeRange {
    /**
     * Gets or sets the name of the range.
     */
    name?: string;
    /**
     * Gets or sets the brush to use to fill the range.
     */
    brush?: string;
    /**
     * Gets or sets the outline to use when rendering the range.
     */
    outline?: string;
    /**
     * Gets or sets the value at which the range starts along the scale.
     */
    startValue?: number;
    /**
     * Gets or sets the value at which the range ends along the scale.
     */
    endValue?: number;
    /**
     * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the inner edge of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
     */
    innerStartExtent?: number;
    /**
     * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the inner edge of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
     */
    innerEndExtent?: number;
    /**
     * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the outer edge of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
     */
    outerStartExtent?: number;
    /**
     * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the outer edge of the range.
     * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
     */
    outerEndExtent?: number;
    strokeThickness?: number;
    /**
     * Option for IgLinearGaugeRange
     */
    [optionName: string]: any;
}
interface IgLinearGauge {
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * Gets or sets the scale ranges to render on the linear gauge.
     */
    ranges?: IgLinearGaugeRange[];
    /**
     * Gets or sets the ranges' tooltip template.
     */
    rangeToolTipTemplate?: string;
    /**
     * Gets or sets the needle's tooltip template.
     */
    needleToolTipTemplate?: string;
    /**
     * Gets or sets the orientation of the scale.
     *
     * Valid values:
     * "horizontal"
     * "vertical"
     */
    orientation?: any;
    /**
     * Gets or sets a collection of brushes to be used as the palette for linear gauge ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    rangeBrushes?: any;
    /**
     * Gets or sets a collection of brushes to be used as the palette for linear gauge outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    rangeOutlines?: any;
    /**
     * Gets or sets the minimum value of the scale.
     */
    minimumValue?: number;
    /**
     * Gets or sets the maximum value of the scale.
     */
    maximumValue?: number;
    /**
     * Gets or sets the value at which the needle is positioned.
     */
    value?: number;
    /**
     * Gets or sets the shape to use when rendering the needle from a number of options.
     *
     * Valid values:
     * "custom"
     * "rectangle"
     * "triangle"
     * "needle"
     * "trapezoid"
     */
    needleShape?: any;
    /**
     * Gets or sets the name used for needle.
     */
    needleName?: string;
    /**
     * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    rangeInnerExtent?: number;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    scaleInnerExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    rangeOuterExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    scaleOuterExtent?: number;
    /**
     * Gets or sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    needleInnerExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    needleOuterExtent?: number;
    /**
     * Gets or sets the width of the needle's inner base.
     */
    needleInnerBaseWidth?: number;
    /**
     * Gets or sets the width of the needle's outer base.
     */
    needleOuterBaseWidth?: number;
    /**
     * Gets or sets the width of the needle's inner point.
     */
    needleInnerPointWidth?: number;
    /**
     * Gets or sets the width of the needle's outer point.
     */
    needleOuterPointWidth?: number;
    /**
     * Gets or sets the extent of the needle's inner point.
     */
    needleInnerPointExtent?: number;
    /**
     * Gets or sets the extent of the needle's outer point.
     */
    needleOuterPointExtent?: number;
    /**
     * Gets or sets the interval to use for the scale.
     */
    interval?: number;
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
     */
    ticksPostInitial?: number;
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
     */
    ticksPreTerminal?: number;
    /**
     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     */
    labelInterval?: number;
    /**
     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the linear gauge.
     */
    labelExtent?: number;
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
     */
    labelsPostInitial?: number;
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
     */
    labelsPreTerminal?: number;
    /**
     * Gets or sets the number of minor tickmarks to place between major tickmarks.
     */
    minorTickCount?: number;
    /**
     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    tickStartExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    tickEndExtent?: number;
    /**
     * Gets or sets the stroke thickness to use when rendering ticks.
     */
    tickStrokeThickness?: number;
    /**
     * Gets or sets the brush to use for the major tickmarks.
     */
    tickBrush?: string;
    /**
     * Gets or sets the brush to use for the label font.
     */
    fontBrush?: string;
    needleBreadth?: number;
    /**
     * Gets or sets the brush to use for needle element.
     */
    needleBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of needle element.
     */
    needleOutline?: string;
    needleStrokeThickness?: number;
    /**
     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    minorTickStartExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    minorTickEndExtent?: number;
    /**
     * Gets or sets the stroke thickness to use when rendering minor ticks.
     */
    minorTickStrokeThickness?: number;
    /**
     * Gets or sets the brush to use for the minor tickmarks.
     */
    minorTickBrush?: string;
    /**
     * Gets or sets a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
     */
    isScaleInverted?: boolean;
    /**
     * Gets or sets the brush to use to fill the backing of the linear gauge.
     */
    backingBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of the backing.
     */
    backingOutline?: string;
    /**
     * Gets or sets the stroke thickness of the backing outline.
     */
    backingStrokeThickness?: number;
    /**
     * Gets or sets the inner extent of the linear gauge backing.
     */
    backingInnerExtent?: number;
    /**
     * Gets or sets the outer extent of the linear gauge backing.
     */
    backingOuterExtent?: number;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    scaleStartExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    scaleEndExtent?: number;
    /**
     * Gets or sets the brush to use to fill the scale of the linear gauge.
     */
    scaleBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of the scale.
     */
    scaleOutline?: string;
    scaleStrokeThickness?: number;
    /**
     * Gets or sets the number of milliseconds over which changes to the linear gauge should be animated.
     */
    transitionDuration?: number;
    /**
     * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
     */
    showToolTipTimeout?: number;
    /**
     * Gets or sets a value indicating whether tooltips are enabled.
     */
    showToolTip?: boolean;
    /**
     * Gets or sets the font.
     */
    font?: string;
    formatLabel?: FormatLabelEvent;
    alignLabel?: AlignLabelEvent;
    /**
     * Option for igLinearGauge
     */
    [optionName: string]: any;
}
interface IgLinearGaugeMethods {
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     */
    getRangeNames(): string;
    /**
     * Adds a new range to the linear gauge.
     *
     * @param value     The range object to be added.
     */
    addRange(value: Object): void;
    /**
     * Removes a range from the linear gauge.
     *
     * @param value     A JS object with properties set as follows: name: nameOfTheRangeToRemove, remove: true
     */
    removeRange(value: Object): void;
    /**
     * Updates the specified range of the linear gauge.
     *
     * @param value     The range object to be updated.
     */
    updateRange(value: Object): void;
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param x
     * @param y
     */
    getValueForPoint(x: Object, y: Object): number;
    /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param x The x coordinate of the point.
     * @param y The y coordinate of the point.
     */
    needleContainsPoint(x: number, y: number): void;
    /**
     * Returns information about how the linear gauge is rendered.
     */
    exportVisualData(): Object;
    /**
     * Causes all pending changes of the linear gauge e.g. by changed property values to be rendered immediately.
     */
    flush(): void;
    /**
     * Destroys widget.
     */
    destroy(): void;
    /**
     * Re-polls the css styles for the widget. Use this method when the css styles have been modified.
     */
    styleUpdated(): void;
}
interface JQuery {
    data(propertyName: "igLinearGauge"): IgLinearGaugeMethods;
}
interface JQuery {
    igLinearGauge(methodName: "getRangeNames"): string;
    igLinearGauge(methodName: "addRange", value: Object): void;
    igLinearGauge(methodName: "removeRange", value: Object): void;
    igLinearGauge(methodName: "updateRange", value: Object): void;
    igLinearGauge(methodName: "getValueForPoint", x: Object, y: Object): number;
    igLinearGauge(methodName: "needleContainsPoint", x: number, y: number): void;
    igLinearGauge(methodName: "exportVisualData"): Object;
    igLinearGauge(methodName: "flush"): void;
    igLinearGauge(methodName: "destroy"): void;
    igLinearGauge(methodName: "styleUpdated"): void;
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igLinearGauge(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igLinearGauge(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  the scale ranges to render on the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "ranges"): IgLinearGaugeRange[];
    /**
     * Sets the scale ranges to render on the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "ranges", optionValue: IgLinearGaugeRange[]): void;
    /**
     * Gets  the ranges' tooltip template.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeToolTipTemplate"): string;
    /**
     * Sets the ranges' tooltip template.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeToolTipTemplate", optionValue: string): void;
    /**
     * Gets  the needle's tooltip template.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleToolTipTemplate"): string;
    /**
     * Sets the needle's tooltip template.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleToolTipTemplate", optionValue: string): void;
    /**
     * Gets  the orientation of the scale.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "orientation"): any;
    /**
     * Sets the orientation of the scale.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "orientation", optionValue: any): void;
    /**
     * Gets  a collection of brushes to be used as the palette for linear gauge ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeBrushes"): any;
    /**
     * Sets a collection of brushes to be used as the palette for linear gauge ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeBrushes", optionValue: any): void;
    /**
     * Gets  a collection of brushes to be used as the palette for linear gauge outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeOutlines"): any;
    /**
     * Sets a collection of brushes to be used as the palette for linear gauge outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeOutlines", optionValue: any): void;
    /**
     * Gets  the minimum value of the scale.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minimumValue"): number;
    /**
     * Sets the minimum value of the scale.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minimumValue", optionValue: number): void;
    /**
     * Gets  the maximum value of the scale.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "maximumValue"): number;
    /**
     * Sets the maximum value of the scale.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "maximumValue", optionValue: number): void;
    /**
     * Gets  the value at which the needle is positioned.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "value"): number;
    /**
     * Sets the value at which the needle is positioned.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "value", optionValue: number): void;
    /**
     * Gets  the shape to use when rendering the needle from a number of options.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleShape"): any;
    /**
     * Sets the shape to use when rendering the needle from a number of options.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleShape", optionValue: any): void;
    /**
     * Gets  the name used for needle.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleName"): string;
    /**
     * Sets the name used for needle.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleName", optionValue: string): void;
    /**
     * Gets  the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeInnerExtent"): number;
    /**
     * Sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeInnerExtent", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleInnerExtent"): number;
    /**
     * Sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleInnerExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeOuterExtent"): number;
    /**
     * Sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "rangeOuterExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleOuterExtent"): number;
    /**
     * Sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleOuterExtent", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleInnerExtent"): number;
    /**
     * Sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleInnerExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOuterExtent"): number;
    /**
     * Sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOuterExtent", optionValue: number): void;
    /**
     * Gets  the width of the needle's inner base.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleInnerBaseWidth"): number;
    /**
     * Sets the width of the needle's inner base.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleInnerBaseWidth", optionValue: number): void;
    /**
     * Gets  the width of the needle's outer base.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOuterBaseWidth"): number;
    /**
     * Sets the width of the needle's outer base.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOuterBaseWidth", optionValue: number): void;
    /**
     * Gets  the width of the needle's inner point.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleInnerPointWidth"): number;
    /**
     * Sets the width of the needle's inner point.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleInnerPointWidth", optionValue: number): void;
    /**
     * Gets  the width of the needle's outer point.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOuterPointWidth"): number;
    /**
     * Sets the width of the needle's outer point.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOuterPointWidth", optionValue: number): void;
    /**
     * Gets  the extent of the needle's inner point.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleInnerPointExtent"): number;
    /**
     * Sets the extent of the needle's inner point.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleInnerPointExtent", optionValue: number): void;
    /**
     * Gets  the extent of the needle's outer point.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOuterPointExtent"): number;
    /**
     * Sets the extent of the needle's outer point.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOuterPointExtent", optionValue: number): void;
    /**
     * Gets  the interval to use for the scale.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "interval"): number;
    /**
     * Sets the interval to use for the scale.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "interval", optionValue: number): void;
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "ticksPostInitial"): number;
    /**
     * A value to start adding tickmarks, added to the scale's MinimumValue.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "ticksPostInitial", optionValue: number): void;
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "ticksPreTerminal"): number;
    /**
     * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "ticksPreTerminal", optionValue: number): void;
    /**
     * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "labelInterval"): number;
    /**
     * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "labelInterval", optionValue: number): void;
    /**
     * Gets  the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "labelExtent"): number;
    /**
     * Sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
     * Values further from zero than 1 can be used to hide the labels of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "labelExtent", optionValue: number): void;
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "labelsPostInitial"): number;
    /**
     * A value to start adding labels, added to the scale's MinimumValue.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "labelsPostInitial", optionValue: number): void;
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "labelsPreTerminal"): number;
    /**
     * A value to stop adding labels, subtracted from the scale's MaximumValue.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "labelsPreTerminal", optionValue: number): void;
    /**
     * Gets  the number of minor tickmarks to place between major tickmarks.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickCount"): number;
    /**
     * Sets the number of minor tickmarks to place between major tickmarks.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickCount", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "tickStartExtent"): number;
    /**
     * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "tickStartExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "tickEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "tickEndExtent", optionValue: number): void;
    /**
     * Gets  the stroke thickness to use when rendering ticks.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "tickStrokeThickness"): number;
    /**
     * Sets the stroke thickness to use when rendering ticks.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "tickStrokeThickness", optionValue: number): void;
    /**
     * Gets  the brush to use for the major tickmarks.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "tickBrush"): string;
    /**
     * Sets the brush to use for the major tickmarks.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "tickBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the label font.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "fontBrush"): string;
    /**
     * Sets the brush to use for the label font.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "fontBrush", optionValue: string): void;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleBreadth"): number;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleBreadth", optionValue: number): void;
    /**
     * Gets  the brush to use for needle element.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleBrush"): string;
    /**
     * Sets the brush to use for needle element.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the outline of needle element.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOutline"): string;
    /**
     * Sets the brush to use for the outline of needle element.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleOutline", optionValue: string): void;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleStrokeThickness"): number;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "needleStrokeThickness", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickStartExtent"): number;
    /**
     * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickStartExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickEndExtent", optionValue: number): void;
    /**
     * Gets  the stroke thickness to use when rendering minor ticks.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickStrokeThickness"): number;
    /**
     * Sets the stroke thickness to use when rendering minor ticks.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickStrokeThickness", optionValue: number): void;
    /**
     * Gets  the brush to use for the minor tickmarks.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickBrush"): string;
    /**
     * Sets the brush to use for the minor tickmarks.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "minorTickBrush", optionValue: string): void;
    /**
     * Gets  a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "isScaleInverted"): boolean;
    /**
     * Sets a value indicating whether the scale is inverted.
     * When the scale is inverted the direction in which the scale values increase is right to left.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "isScaleInverted", optionValue: boolean): void;
    /**
     * Gets  the brush to use to fill the backing of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingBrush"): string;
    /**
     * Sets the brush to use to fill the backing of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the outline of the backing.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingOutline"): string;
    /**
     * Sets the brush to use for the outline of the backing.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingOutline", optionValue: string): void;
    /**
     * Gets  the stroke thickness of the backing outline.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingStrokeThickness"): number;
    /**
     * Sets the stroke thickness of the backing outline.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingStrokeThickness", optionValue: number): void;
    /**
     * Gets  the inner extent of the linear gauge backing.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingInnerExtent"): number;
    /**
     * Sets the inner extent of the linear gauge backing.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingInnerExtent", optionValue: number): void;
    /**
     * Gets  the outer extent of the linear gauge backing.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingOuterExtent"): number;
    /**
     * Sets the outer extent of the linear gauge backing.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "backingOuterExtent", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleStartExtent"): number;
    /**
     * Sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleStartExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleEndExtent", optionValue: number): void;
    /**
     * Gets  the brush to use to fill the scale of the linear gauge.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleBrush"): string;
    /**
     * Sets the brush to use to fill the scale of the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the outline of the scale.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleOutline"): string;
    /**
     * Sets the brush to use for the outline of the scale.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleOutline", optionValue: string): void;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleStrokeThickness"): number;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "scaleStrokeThickness", optionValue: number): void;
    /**
     * Gets  the number of milliseconds over which changes to the linear gauge should be animated.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "transitionDuration"): number;
    /**
     * Sets the number of milliseconds over which changes to the linear gauge should be animated.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;
    /**
     * Gets  the time in milliseconds that tooltip appearance is delayed with.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "showToolTipTimeout"): number;
    /**
     * Sets the time in milliseconds that tooltip appearance is delayed with.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "showToolTipTimeout", optionValue: number): void;
    /**
     * Gets  a value indicating whether tooltips are enabled.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "showToolTip"): boolean;
    /**
     * Sets a value indicating whether tooltips are enabled.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "showToolTip", optionValue: boolean): void;
    /**
     * Gets  the font.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "font"): string;
    /**
     * Sets the font.
     *
     * @optionValue New value to be set.
     */
    igLinearGauge(optionLiteral: 'option', optionName: "font", optionValue: string): void;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "formatLabel"): FormatLabelEvent;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "formatLabel", optionValue: FormatLabelEvent): void;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "alignLabel"): AlignLabelEvent;
    /**
     */
    igLinearGauge(optionLiteral: 'option', optionName: "alignLabel", optionValue: AlignLabelEvent): void;
    igLinearGauge(options: IgLinearGauge): JQuery;
    igLinearGauge(optionLiteral: 'option', optionName: string): any;
    igLinearGauge(optionLiteral: 'option', options: IgLinearGauge): JQuery;
    igLinearGauge(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igLinearGauge(methodName: string, ...methodParams: any[]): any;
}
interface IgMapCrosshairPoint {
    /**
     * The x coordinate.
     */
    x?: number;
    /**
     * The y coordinate.
     */
    y?: number;
    /**
     * Option for IgMapCrosshairPoint
     */
    [optionName: string]: any;
}
interface IgMapBackgroundContent {
    /**
     * Type of the background content for the map.
     *
     * Valid values:
     * "openStreet" Specify the background content to display OpenStreetMap geographic data. Set as default.
     * "cloudMade"  Specify the background content to display CloudMade geographic data.
     * "bing"  Specify the background content to BingMaps geographic data.
     */
    type?: any;
    /**
     * Gets or sets the key.
     */
    key?: string;
    /**
     * Gets or sets the parameter.
     */
    parameter?: string;
    /**
     * Gets or sets the map tile image uri. This is a bing maps specific option
     */
    tilePath?: string;
    /**
     * Gets or sets the type of the imagery.
     */
    imagerySet?: string;
    /**
     * Gets or sets the bing maps url
     */
    bingUrl?: string;
    /**
     * Option for IgMapBackgroundContent
     */
    [optionName: string]: any;
}
interface IgMapSeries {
    /**
     * Type of the series.
     *
     * Valid values:
     * "geographicSymbolSeries" Specify the series as geographic Symbol Series series.
     * "geographicPolyLine" Specify the series as geographic Polyline series.
     * "geographicScatterArea" Specify the series as geographic Scatter Area series.
     * "geographicShape" Specify the series as geographic Shape series.
     * "geographicContourLine" Specify the series as geographic Contour Line series.
     * "geographicHighDensityScatter" Specify the series as geographic High Density Scatter series.
     * "geographicProportionalSymbol" Specify the series as geographic Proportional Symbol series.
     */
    type?: any;
    /**
     * The unique identifier of the series.
     */
    name?: string;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Set to true in order to have an existing series removed from the map, by name
     */
    remove?: boolean;
    /**
     * Whether the map should render a tooltip.
     */
    showTooltip?: boolean;
    /**
     * The triangulated file source URI or an instance of $.ig.ShapeDataSource.
     */
    shapeDataSource?: string;
    /**
     * String The database source URI.
     */
    databaseSource?: string;
    /**
     * The triangulated file source URI or an instance of $.ig.TriangulationDataSource.
     */
    triangulationDataSource?: string;
    /**
     * Gets or sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the series object itself.
     * The provided object should have properties called render and optionally measure.
     * These are functions which will be called that will be called to handle the user specified custom rendering.
     * measure will be passed an object that looks like this:
     * {
     * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
     * width: [if value is present, specifies the available width, user may set to desired width for content],
     * height: [if value is present, specifies the available height, user may set to desired height for content],
     * isConstant: [user should set to true if desired with and height will always be the same for this template],
     * data: [if present, represents the contextual data for this template]
     * }
     * render will be passed an object that looks like this:
     * {
     * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
     * xPosition: [if present, specifies the x position at which to render the content],
     * yPosition: [if present, specifies the y position at which to render the content],
     * availableWidth: [if present, specifies the available width in which to render the content],
     * availableHeight: [if present, specifies the available height in which to render the content],
     * data: [if present, specifies the data that is in context for this content],
     * isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
     * }
     */
    legendItemBadgeTemplate?: any;
    /**
     * Gets or sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the series object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    legendItemTemplate?: any;
    /**
     * Gets or sets the DiscreteLegendItemTemplate property.
     * The legend item control content is created according to the DiscreteLegendItemTemplate on-demand by
     * the series object itself.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    discreteLegendItemTemplate?: any;
    /**
     * Gets or sets the duration of the current series's morph.
     */
    transitionDuration?: number;
    /**
     * Gets or sets the current series object's rendering resolution.
     */
    resolution?: number;
    /**
     * Gets or sets the Title property.
     * The legend item control is created according to the Title on-demand by
     * the series object itself.
     */
    title?: string;
    /**
     * Gets or sets the brush to use for the series.
     */
    brush?: string;
    /**
     * Gets or sets the brush to use for the outline of the series.
     * Some series types, such as LineSeries, do not display outlines.
     */
    outline?: string;
    /**
     * Gets or sets the width of the current series object's line thickness.
     */
    thickness?: number;
    /**
     * The source of triangulation data.
     * This property is optional.  If it is left as null, the triangulation will be created based on the items in the data source.  Triangulation is a demanding operation, so the runtime performance will be better when specifying a TriangulationSource, especially when a large number of data items are present.
     */
    trianglesSource?: any;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the first vertex point in the data source.
     */
    triangleVertexMemberPath1?: string;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the second vertex point in the data source.
     */
    triangleVertexMemberPath2?: string;
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the third vertex point in the data source.
     */
    triangleVertexMemberPath3?: string;
    /**
     * The ColorScale used to resolve the color values of points in the series.
     */
    colorScale?: any;
    /**
     * The name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
     */
    colorMemberPath?: string;
    /**
     * The minimum scale at which this series becomes visible.
     * The default value for this property is 1.0, which means the series will always be visible.  At a VisibleFromScale setting of 0.0, the series will never be visible.  At a VisibleFromScale setting of 0.5, the series will be visible as long as the map is zoomed in to at least 200%.
     */
    visibleFromScale?: number;
    /**
     * The name of the property of data source items which contains the longitude coordinate of the symbol.
     */
    longitudeMemberPath?: string;
    /**
     * The name of the property of data source items which contains the latitude coordinate of the symbol.
     */
    latitudeMemberPath?: string;
    /**
     * Gets or sets the marker type for the current series object.If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
     *
     * Valid values:
     * "unset"
     * "none"
     * "automatic"
     * "circle"
     * "triangle"
     * "pyramid"
     * "square"
     * "diamond"
     * "pentagon"
     * "hexagon"
     * "tetragram"
     * "pentagram"
     * "hexagram"
     */
    markerType?: any;
    /**
     * Gets or sets the MarkerTemplate for the current series object.
     * The provided object should have properties called render and optionally measure.
     * These are functions which will be called that will be called to handle the user specified custom rendering.
     * measure will be passed an object that looks like this:
     * {
     * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
     * width: [if value is present, specifies the available width, user may set to desired width for content],
     * height: [if value is present, specifies the available height, user may set to desired height for content],
     * isConstant: [user should set to true if desired with and height will always be the same for this template],
     * data: [if present, represents the contextual data for this template]
     * }
     * render will be passed an object that looks like this:
     * {
     * context: [either a DOM element or a CanvasContext2D depending on the particular template scenario],
     * xPosition: [if present, specifies the x position at which to render the content],
     * yPosition: [if present, specifies the y position at which to render the content],
     * availableWidth: [if present, specifies the available width in which to render the content],
     * availableHeight: [if present, specifies the available height in which to render the content],
     * data: [if present, specifies the data that is in context for this content],
     * isHitTestRender: [if true, indicates that this is a special render pass for hit testing, in which case the brushes from the data should be used]
     * }
     */
    markerTemplate?: any;
    /**
     * The name of the property on data source items which, for each shape, contains a list of points to be converted to a polygon.
     * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.
     */
    shapeMemberPath?: string;
    /**
     * The StyleSelector which is used to select a style for each Shape.
     */
    shapeStyleSelector?: any;
    /**
     * The default style to apply to all Shapes in the series.
     */
    shapeStyle?: any;
    /**
     * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
     */
    markerBrush?: string;
    /**
     * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
     */
    markerOutline?: string;
    /**
     * Gets or sets the MarkerCollisionAvoidance
     *
     * Valid values:
     * "none" No collision avoidance is attempted.
     * "omit" Markers that collide will be omitted.
     * "fade" Markers that collide will be faded in opacity.
     * "omitAndShift" Markers that collide may be shifted or omitted.
     */
    markerCollisionAvoidance?: any;
    /**
     * The ValueBrushScale to use when determining Brushes for each Shape, based on the values found in FillMemberPath.
     */
    fillScale?: any;
    /**
     * The name of the property on data source items which contains a numeric value to convert to a Brush using the FillScale.
     */
    fillMemberPath?: string;
    /**
     * Gets or sets the trend type for the current scatter series.
     *
     * Valid values:
     * "none" No trendline should display.
     * "linearFit" Linear fit.
     * "quadraticFit" Quadratic polynomial fit.
     * "cubicFit" Cubic polynomial fit.
     * "quarticFit" Quartic polynomial fit.
     * "quinticFit" Quintic polynomial fit.
     * "logarithmicFit" Logarithmic fit.
     * "exponentialFit" Exponential fit.
     * "powerLawFit" Powerlaw fit.
     * "simpleAverage" Simple moving average.
     * "exponentialAverage" Exponential moving average.
     * "modifiedAverage" Modified moving average.
     * "cumulativeAverage" Cumulative moving average.
     * "weightedAverage" Weighted moving average.
     */
    trendLineType?: any;
    /**
     * Gets or sets the brush to use to draw the trend line.
     */
    trendLineBrush?: string;
    /**
     * Gets or sets the thickness of the current scatter series object's trend line.
     */
    trendLineThickness?: number;
    /**
     * Gets or sets the moving average period for the current scatter series object.
     * The typical, and initial, value for trend line period is 7.
     */
    trendLinePeriod?: number;
    /**
     * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.
     */
    trendLineZIndex?: number;
    /**
     * Gets or sets the maximum number of markerItems displayed by the current series.
     * If more than the specified number of markerItems are visible, the series will automatically
     * choose a representative set.
     */
    maximumMarkers?: number;
    /**
     * Gets or sets the radius mapping property for the current series object.
     */
    radiusMemberPath?: string;
    /**
     * Gets or sets the radius size scale for the bubbles.
     */
    radiusScale?: any;
    /**
     * Gets or sets the Label mapping property for the current series object.
     */
    labelMemberPath?: string;
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this to true can affect performance.
     */
    clipSeriesToBounds?: boolean;
    /**
     * Gets or sets the item path that provides the values for the current series.
     */
    valueMemberPath?: string;
    /**
     * Determines how unknown values will be plotted on the map. Null and Double.NaN are two examples of unknown values.
     *
     * Valid values:
     * "linearInterpolate" Plot the unknown value as the midpoint between surrounding known values using linear interpolation.
     * "dontPlot" Do not plot the unknown value on the map.
     */
    unknownValuePlotting?: any;
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
     */
    angleMemberPath?: number;
    /**
     * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
     * spiral based interpolation.
     */
    useCartesianInterpolation?: boolean;
    /**
     * Gets or sets the Stiffness property.
     */
    stiffness?: number;
    /**
     * Gets or sets the brush to use for negative portions of the series.
     */
    negativeBrush?: string;
    /**
     * Gets or sets the type of spline to be rendered.
     *
     * Valid values:
     * "natural" Calculates the spline using a natural spline calculation formula.
     * "clamped" Calculated the spline using a clamped spline calculation formula.
     */
    splineType?: any;
    /**
     * Gets or sets the value mapping property for the current series object.
     */
    lowMemberPath?: string;
    /**
     * Gets or sets the value mapping property for the current series object.
     */
    highMemberPath?: string;
    /**
     * Gets or sets the value mapping property for the current series object.
     */
    openMemberPath?: string;
    /**
     * Gets or sets the close mapping property for the current series object.
     */
    closeMemberPath?: string;
    /**
     * Gets or sets the volume mapping property for the current series object.
     */
    volumeMemberPath?: string;
    /**
     * Gets or sets the number of values to hide at the beginning of the indicator.
     */
    ignoreFirst?: number;
    /**
     * Gets or sets the moving average period for the current AverageDirectionalIndexIndicator object.
     * The typical, and initial, value for AverageDirectionalIndexIndicator periods is 14.
     */
    period?: number;
    /**
     * Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
     * The typical, and initial, value for short AVO periods is 10.
     */
    shortPeriod?: number;
    /**
     * Gets or sets the short moving average period for the current AbsoluteVolumeOscillatorIndicator object.
     * The typical, and initial, value for long AVO periods is 30.
     */
    longPeriod?: number;
    /**
     * Gets or sets the ContourValueResolver used to determine the numeric values of contours.
     */
    valueResolver?: any;
    /**
     * Gets or sets the resolution at which to filter out shapes in the series.
     * For example, if the shapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.
     */
    shapeFilterResolution?: number;
    /**
     * Gets or sets the whether to use use brute force mode.
     */
    useBruteForce?: boolean;
    /**
     * Gets or sets the whether to progressively load the data into the map.
     */
    progressiveLoad?: boolean;
    /**
     * Gets or sets the whether the map reacts to mouse move events.
     */
    mouseOverEnabled?: boolean;
    /**
     * Gets or sets the whether to use squares when halting a render traversal rather than the shape of the coalesced area.
     */
    useSquareCutoffStyle?: boolean;
    /**
     * Gets or sets the density value that maps to the minimum heat color.
     */
    heatMinimum?: number;
    /**
     * Gets or sets the value that maps to the maximum heat color.
     */
    heatMaximum?: number;
    /**
     * Option for IgMapSeries
     */
    [optionName: string]: any;
}
interface TriangulationStatusChangedEvent {
    (event: Event, ui: TriangulationStatusChangedEventUIParam): void;
}
interface TriangulationStatusChangedEventUIParam {
    /**
     * Used to get reference to map object.
     */
    map?: any;
    /**
     * Used to get reference to current series object.
     */
    series?: any;
    /**
     * Used to get current status.
     */
    currentStatus?: any;
}
interface IgMap {
    /**
     * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource. Specifies the name of the property in which data records are held if the response is wrapped.
     */
    responseDataKey?: string;
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the map.
     */
    autoMarginWidth?: number;
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the map.
     */
    autoMarginHeight?: number;
    /**
     * Gets or sets the current Map's crosshair visibility override.
     *
     * Valid values:
     * "visible" Crosshair should be visible.
     * "collapsed" Crosshair should not be visible.
     */
    crosshairVisibility?: any;
    /**
     * Gets or sets the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
     */
    crosshairPoint?: IgMapCrosshairPoint;
    /**
     * Gets or sets the brush used as the background for the current Map object's plot area.
     */
    plotAreaBackground?: string;
    /**
     * Gets or sets the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
     *
     * Valid values:
     * "none" User gesture will not change the state of the map.
     * "dragZoom" User gesture will start a drag rectangle to zoom the map.
     * "dragPan" User gesture will start a pan action to move the map's window.
     */
    defaultInteraction?: any;
    /**
     * Gets or sets the current Map's DragModifier property.
     *
     * Valid values:
     * "none" No modifier key is set.
     * "alt" The modifier is set to alt key.
     * "control" The modifier is set to control key.
     * "shift" The modifier is set to shift key.
     */
    dragModifier?: any;
    /**
     * Gets or sets the current Map's PanModifier property.
     *
     * Valid values:
     * "none" No modifier key is set.
     * "alt" The modifier is set to alt key.
     * "control" The modifier is set to control key.
     * "shift" The modifier is set to shift key.
     */
    panModifier?: any;
    /**
     * Gets or sets the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
     * The provided object should have numeric properties called left, top, width and height.
     */
    previewRect?: any;
    /**
     * A rectangle representing the portion of the map currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
     * The provided object should have numeric properties called left, top, width and height.
     */
    windowRect?: any;
    /**
     * Gets or sets the current Map's zoomability.
     */
    zoomable?: boolean;
    /**
     * Gets or sets the current Map's zoom scale.
     */
    windowScale?: number;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
     *
     * Valid values:
     * "deferred" Defer the view update until after the user action is complete.
     * "immediate" Update the view immediately while the user action is happening.
     */
    windowResponse?: any;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     */
    windowRectMinWidth?: number;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
     */
    windowPositionHorizontal?: number;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
     */
    windowPositionVertical?: number;
    /**
     * Gets or sets the template to use for circle markers on the map.
     * Defines the marker template used for
     * series with a marker type of circle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    circleMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for triangle markers on the map.
     * Defines the marker template used for
     * series with a marker type of triangle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    triangleMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for pyramid markers on the map.
     * Defines the marker template used for
     * series with a marker type of pyramid.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    pyramidMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for square markers on the map.
     * Defines the marker template used for
     * series with a marker type of square.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    squareMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for diamond markers on the map.
     * Defines the marker template used for
     * series with a marker type of diamond.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    diamondMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for pentagon markers on the map.
     * Defines the marker template used for
     * series with a marker type of pentagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    pentagonMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for hexagon markers on the map.
     * Defines the marker template used for
     * series with a marker type of hexagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    hexagonMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for tetragram markers on the map.
     * Defines the marker template used for
     * series with a marker type of tetragram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    tetragramMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for pentragram markers on the map.
     * Defines the marker template used for
     * series with a marker type of pentagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    pentagramMarkerTemplate?: any;
    /**
     * Gets or sets the template to use for hexagram markers on the map.
     * Defines the marker template used for
     * series with a marker type of hexagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    hexagramMarkerTemplate?: any;
    /**
     * The background image uri use in the overview detail pane.
     */
    overviewPlusDetailPaneBackgroundImageUri?: string;
    /**
     * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
     */
    useTiledZooming?: boolean;
    /**
     * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
     */
    preferHigherResolutionTiles?: boolean;
    /**
     * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
     */
    zoomTileCacheSize?: number;
    /**
     * Background content object
     */
    backgroundContent?: IgMapBackgroundContent;
    /**
     * An array of series objects
     */
    series?: IgMapSeries[];
    /**
     * The swatch used to style this widget
     */
    theme?: string;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipShowing?: TooltipShowingEvent;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipShown?: TooltipShownEvent;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipHiding?: TooltipHidingEvent;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    tooltipHidden?: TooltipHiddenEvent;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     */
    browserNotSupported?: BrowserNotSupportedEvent;
    /**
     * Occurs when the cursors are moved over a series in this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesCursorMouseMove?: SeriesCursorMouseMoveEvent;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseLeftButtonDown?: SeriesMouseLeftButtonDownEvent;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseLeftButtonUp?: SeriesMouseLeftButtonUpEvent;
    /**
     * Occurs when the left mouse pointer moves while over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseMove?: SeriesMouseMoveEvent;
    /**
     * Occurs when the left mouse pointer enters an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseEnter?: SeriesMouseEnterEvent;
    /**
     * Occurs when the left mouse pointer leaves an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    seriesMouseLeave?: SeriesMouseLeaveEvent;
    /**
     * Occurs just after the current Map's window rectangle is changed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     */
    windowRectChanged?: WindowRectChangedEvent;
    /**
     * Occurs just after the current Map's grid area rectangle is changed.
     * The grid area may change as the result of the Map being resized.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     */
    gridAreaRectChanged?: GridAreaRectChangedEvent;
    /**
     * Raised when the map's processing for an update has completed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     */
    refreshCompleted?: RefreshCompletedEvent;
    /**
     * Event fired when the status of an ongoing Triangulation has changed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.currentStatus to get current status.
     */
    triangulationStatusChanged?: TriangulationStatusChangedEvent;
    /**
     * Option for igMap
     */
    [optionName: string]: any;
}
interface IgMapMethods {
    option(): void;
    /**
     * Destroys the widget.
     */
    destroy(): void;
    /**
     * Returns the ID of parent element holding the map.
     */
    id(): string;
    /**
     * Exports the map to a PNG image.
     *
     * @param width The width of the image.
     * @param height The height of the image.
     */
    exportImage(width?: Object, height?: Object): Object;
    /**
     * Notify the map that styles it draws colors from may have been updated.
     */
    styleUpdated(): Object;
    /**
     * Resets the zoom level of the map to default.
     */
    resetZoom(): Object;
    /**
     * Adds a new item to the data source and notifies the map.
     *
     * @param item     The item that we want to add to the data source.
     * @param targetName     The name of the series bound to the data source.
     */
    addItem(item: Object, targetName: string): void;
    /**
     * Inserts a new item to the data source and notifies the map.
     *
     * @param item     the new item that we want to insert in the data source.
     * @param index     The index in the data source where the new item will be inserted.
     * @param targetName     The name of the series bound to the data source.
     */
    insertItem(item: Object, index: number, targetName: string): void;
    /**
     * Deletes an item from the data source and notifies the map.
     *
     * @param index     The index in the data source from where the item will be been removed.
     * @param targetName     The name of the series bound to the data source.
     */
    removeItem(index: number, targetName: string): void;
    /**
     * Updates an item in the data source and notifies the map.
     *
     * @param index     The index of the item in the data source that we want to change.
     * @param item     The new item object that will be set in the data source.
     * @param targetName     The name of the series bound to the data source.
     */
    setItem(index: number, item: Object, targetName: string): void;
    /**
     * Notifies the the map that an item has been set in an associated data source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source that has been changed.
     * @param newItem the new item that has been set in the collection.
     * @param oldItem the old item that has been overwritten in the collection.
     */
    notifySetItem(dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
    /**
     * Notifies the the map that the items have been cleared from an associated data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     */
    notifyClearItems(dataSource: Object): Object;
    /**
     * Notifies the the target series that an item has been inserted at the specified index in its data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source where the new item has been inserted.
     * @param newItem the new item that has been set in the collection.
     */
    notifyInsertItem(dataSource: Object, index: number, newItem: Object): Object;
    /**
     * Notifies the the target series that an item has been removed from the specified index in its data source.
     * It's not necessary to notify more than one target of a change if they share the same items source.
     *
     * @param dataSource The data source in which the change happened.
     * @param index The index in the items source from where the old item has been removed.
     * @param oldItem the old item that has been removed from the collection.
     */
    notifyRemoveItem(dataSource: Object, index: number, oldItem: Object): Object;
    /**
     * Notifies the target series or axis that it should scroll the requested data item into view.
     *
     * @param targetName The name of the series or axis notify.
     * @param item The data item to bring into view, if possible.
     */
    scrollIntoView(targetName: string, item: Object): Object;
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should scale the requested value into map space from axis space.
     * For example you can use this method if you want to find where longitude 50 stands scaled to map's width.
     *
     * @param targetName Either xAxis or yAxis to notify.
     * @param unscaledValue The value in axis space to translate into map space.
     */
    scaleValue(targetName: string, unscaledValue: number): number;
    /**
     * Either xAxis or yAxis (longitude or latitude) that it should unscale the requested value into axis space from map space.
     * For example you can use this method if you want to find what is the longitude unscaled from 0 width of the map.
     *
     * @param targetName Either xAxis or yAxis to notify.
     * @param scaledValue The value in map space to translate into axis space.
     */
    unscaleValue(targetName: string, scaledValue: number): number;
    /**
     * Manually starts a tiled zoom if one isn't already running.
     */
    startTiledZoomingIfNecessary(): void;
    /**
     * Manually ends a tiled zoom if one is running.
     */
    endTiledZoomingIfRunning(): void;
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom..
     */
    clearTileZoomCache(): void;
    /**
     * Forces any pending deferred work to render on the map before continuing
     */
    flush(): void;
    /**
     * Exports visual data from the map to aid in unit testing
     */
    exportVisualData(): void;
    /**
     * Gets the actual minimum value of the target xAxis or yAxis
     *
     * @param targetName
     */
    getActualMinimumValue(targetName: Object): void;
    /**
     * Gets the actual maximum value of the target xAxis or yAxis
     *
     * @param targetName
     */
    getActualMaximumValue(targetName: Object): void;
    /**
     * Notifies the map that the container was resized
     */
    notifyContainerResized(): void;
    /**
     * Zoom in to the geographic region specified, when possible (may need to wait fior map to be initialized).
     *
     * @param rect The geographic area rectangle.
     */
    zoomToGeographic(rect: Object): Object;
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param rect The geographic area rectangle.
     */
    getGeographicFromZoom(rect: Object): Object;
    /**
     * Given the current plot area of the control and a geographic region, get the WindowRect that would encompass that geographic region.
     *
     * @param rect The geographic area rectangle.
     */
    getZoomFromGeographic(rect: Object): Object;
    /**
     * Creates a print preview page with the map, hiding all other elements on the page.
     */
    print(): void;
    /**
     * Indicates that a series should render, even though no option has been modified that would normally cause it to refresh.
     *
     * @param targetName     The name of the series to render.
     * @param animate     Whether the change should be animated, if possible.
     */
    renderSeries(targetName: string, animate: boolean): void;
}
interface JQuery {
    data(propertyName: "igMap"): IgMapMethods;
}
interface ShapeDataSourceSettings {
    /**
     * The unique identifier.
     */
    id?: string;
    /**
     * The Uri of the .shp portion of the Shapefile.
     */
    shapefileSource?: string;
    /**
     * The Uri of the .dbf portion of the Shapefile.
     */
    databaseSource?: string;
    /**
     * Callback function to call when data binding is complete.
     */
    callback?: Function;
    /**
     * Object on which to invoke the callback function.
     */
    callee?: any;
    /**
     * Callback function to call to allow shape records to be transformed.
     * paramType="object" the shape record to be transformed.
     */
    transformRecord?: Function;
    /**
     * Callback function to call to allow points in the shape records to be transformed.
     * paramType="object" the point to be transformed in place. The object will look like { x: value, y: value2 }
     */
    transformPoint?: Function;
    /**
     * Callback function to call to allow the bounds of the shape data source to be transformed.
     * paramType="object" the bounds of the shape datasource to be transformed in place. The object will look like { top: value, left: value, width: value, height: value }
     */
    transformBounds?: Function;
    /**
     * Callback function to call when the import process has been completed
     * paramType="object" the ShapeDataSource instance
     */
    importCompleted?: Function;
    /**
     * Option for ShapeDataSourceSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class ShapeDataSource {
        constructor(settings: ShapeDataSourceSettings);
        /**
         * Loads to the current data source
         */
        dataBind(): void;
        /**
         * Returns true if data is loaded
         */
        isBound(): boolean;
        /**
         * Returns the current converter instance
         */
        converter(): Object;
    }
}
interface IgniteUIStatic {
    ShapeDataSource: typeof Infragistics.ShapeDataSource;
}
interface TriangulationDataSourceSettings {
    /**
     * The unique identifier.
     */
    id?: string;
    /**
     * A Uri specifying the location of the Itf file.
     */
    source?: string;
    /**
     * The TriangulationSource which is typically created after importing the Itf from the Source Uri.
     */
    triangulationSource?: string;
    /**
     * Callback function to call when data binding is complete
     */
    callback?: Function;
    /**
     * Object on which to invoke the callback function
     */
    callee?: any;
    /**
     * Option for TriangulationDataSourceSettings
     */
    [optionName: string]: any;
}
declare module Infragistics {
    class TriangulationDataSource {
        constructor(settings: TriangulationDataSourceSettings);
        /**
         * Loads to the current data source
         */
        dataBind(): void;
        /**
         * Returns true if data is loaded
         */
        isBound(): boolean;
        /**
         * Returns the current converter instance
         */
        converter(): Object;
    }
}
interface IgniteUIStatic {
    TriangulationDataSource: typeof Infragistics.TriangulationDataSource;
}
interface JQuery {
    igMap(methodName: "option"): void;
    igMap(methodName: "destroy"): void;
    igMap(methodName: "id"): string;
    igMap(methodName: "exportImage", width?: Object, height?: Object): Object;
    igMap(methodName: "styleUpdated"): Object;
    igMap(methodName: "resetZoom"): Object;
    igMap(methodName: "addItem", item: Object, targetName: string): void;
    igMap(methodName: "insertItem", item: Object, index: number, targetName: string): void;
    igMap(methodName: "removeItem", index: number, targetName: string): void;
    igMap(methodName: "setItem", index: number, item: Object, targetName: string): void;
    igMap(methodName: "notifySetItem", dataSource: Object, index: number, newItem: Object, oldItem: Object): Object;
    igMap(methodName: "notifyClearItems", dataSource: Object): Object;
    igMap(methodName: "notifyInsertItem", dataSource: Object, index: number, newItem: Object): Object;
    igMap(methodName: "notifyRemoveItem", dataSource: Object, index: number, oldItem: Object): Object;
    igMap(methodName: "scrollIntoView", targetName: string, item: Object): Object;
    igMap(methodName: "scaleValue", targetName: string, unscaledValue: number): number;
    igMap(methodName: "unscaleValue", targetName: string, scaledValue: number): number;
    igMap(methodName: "startTiledZoomingIfNecessary"): void;
    igMap(methodName: "endTiledZoomingIfRunning"): void;
    igMap(methodName: "clearTileZoomCache"): void;
    igMap(methodName: "flush"): void;
    igMap(methodName: "exportVisualData"): void;
    igMap(methodName: "getActualMinimumValue", targetName: Object): void;
    igMap(methodName: "getActualMaximumValue", targetName: Object): void;
    igMap(methodName: "notifyContainerResized"): void;
    igMap(methodName: "zoomToGeographic", rect: Object): Object;
    igMap(methodName: "getGeographicFromZoom", rect: Object): Object;
    igMap(methodName: "getZoomFromGeographic", rect: Object): Object;
    igMap(methodName: "print"): void;
    igMap(methodName: "renderSeries", targetName: string, animate: boolean): void;
    /**
     * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igMap(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the map. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igMap(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the map. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     */
    igMap(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * Can be any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    igMap(optionLiteral: 'option', optionName: "dataSourceUrl"): string;
    /**
     * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    igMap(optionLiteral: 'option', optionName: "dataSourceType"): string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;
    /**
     * See $.ig.DataSource. Gets the name of the property in which data records are held if the response is wrapped.
     */
    igMap(optionLiteral: 'option', optionName: "responseDataKey"): string;
    /**
     * See $.ig.DataSource. Sets the name of the property in which data records are held if the response is wrapped.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the map.
     */
    igMap(optionLiteral: 'option', optionName: "autoMarginWidth"): number;
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the map.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "autoMarginWidth", optionValue: number): void;
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the map.
     */
    igMap(optionLiteral: 'option', optionName: "autoMarginHeight"): number;
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the map.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "autoMarginHeight", optionValue: number): void;
    /**
     * Gets  the current Map's crosshair visibility override.
     */
    igMap(optionLiteral: 'option', optionName: "crosshairVisibility"): any;
    /**
     * Sets the current Map's crosshair visibility override.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "crosshairVisibility", optionValue: any): void;
    /**
     * Gets  the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
     */
    igMap(optionLiteral: 'option', optionName: "crosshairPoint"): IgMapCrosshairPoint;
    /**
     * Sets the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "crosshairPoint", optionValue: IgMapCrosshairPoint): void;
    /**
     * Gets  the brush used as the background for the current Map object's plot area.
     */
    igMap(optionLiteral: 'option', optionName: "plotAreaBackground"): string;
    /**
     * Sets the brush used as the background for the current Map object's plot area.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "plotAreaBackground", optionValue: string): void;
    /**
     * Gets  the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
     */
    igMap(optionLiteral: 'option', optionName: "defaultInteraction"): any;
    /**
     * Sets the DefaultInteraction property. The default interaction state defines the map's response to mouse events.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "defaultInteraction", optionValue: any): void;
    /**
     * Gets  the current Map's DragModifier property.
     */
    igMap(optionLiteral: 'option', optionName: "dragModifier"): any;
    /**
     * Sets the current Map's DragModifier property.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "dragModifier", optionValue: any): void;
    /**
     * Gets  the current Map's PanModifier property.
     */
    igMap(optionLiteral: 'option', optionName: "panModifier"): any;
    /**
     * Sets the current Map's PanModifier property.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "panModifier", optionValue: any): void;
    /**
     * Gets  the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
     * The provided object should have numeric properties called left, top, width and height.
     */
    igMap(optionLiteral: 'option', optionName: "previewRect"): any;
    /**
     * Sets the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
     * The provided object should have numeric properties called left, top, width and height.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "previewRect", optionValue: any): void;
    /**
     * A rectangle representing the portion of the map currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
     * The provided object should have numeric properties called left, top, width and height.
     */
    igMap(optionLiteral: 'option', optionName: "windowRect"): any;
    /**
     * A rectangle representing the portion of the map currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
     * The provided object should have numeric properties called left, top, width and height.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "windowRect", optionValue: any): void;
    /**
     * Gets  the current Map's zoomability.
     */
    igMap(optionLiteral: 'option', optionName: "zoomable"): boolean;
    /**
     * Sets the current Map's zoomability.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "zoomable", optionValue: boolean): void;
    /**
     * Gets  the current Map's zoom scale.
     */
    igMap(optionLiteral: 'option', optionName: "windowScale"): number;
    /**
     * Sets the current Map's zoom scale.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "windowScale", optionValue: number): void;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
     */
    igMap(optionLiteral: 'option', optionName: "windowResponse"): any;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "windowResponse", optionValue: any): void;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     */
    igMap(optionLiteral: 'option', optionName: "windowRectMinWidth"): number;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "windowRectMinWidth", optionValue: number): void;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
     */
    igMap(optionLiteral: 'option', optionName: "windowPositionHorizontal"): number;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "windowPositionHorizontal", optionValue: number): void;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
     */
    igMap(optionLiteral: 'option', optionName: "windowPositionVertical"): number;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "windowPositionVertical", optionValue: number): void;
    /**
     * Gets  the template to use for circle markers on the map.
     * Defines the marker template used for
     * series with a marker type of circle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "circleMarkerTemplate"): any;
    /**
     * Sets the template to use for circle markers on the map.
     * Defines the marker template used for
     * series with a marker type of circle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "circleMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for triangle markers on the map.
     * Defines the marker template used for
     * series with a marker type of triangle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "triangleMarkerTemplate"): any;
    /**
     * Sets the template to use for triangle markers on the map.
     * Defines the marker template used for
     * series with a marker type of triangle.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "triangleMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for pyramid markers on the map.
     * Defines the marker template used for
     * series with a marker type of pyramid.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "pyramidMarkerTemplate"): any;
    /**
     * Sets the template to use for pyramid markers on the map.
     * Defines the marker template used for
     * series with a marker type of pyramid.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "pyramidMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for square markers on the map.
     * Defines the marker template used for
     * series with a marker type of square.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "squareMarkerTemplate"): any;
    /**
     * Sets the template to use for square markers on the map.
     * Defines the marker template used for
     * series with a marker type of square.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "squareMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for diamond markers on the map.
     * Defines the marker template used for
     * series with a marker type of diamond.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "diamondMarkerTemplate"): any;
    /**
     * Sets the template to use for diamond markers on the map.
     * Defines the marker template used for
     * series with a marker type of diamond.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "diamondMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for pentagon markers on the map.
     * Defines the marker template used for
     * series with a marker type of pentagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "pentagonMarkerTemplate"): any;
    /**
     * Sets the template to use for pentagon markers on the map.
     * Defines the marker template used for
     * series with a marker type of pentagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "pentagonMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for hexagon markers on the map.
     * Defines the marker template used for
     * series with a marker type of hexagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "hexagonMarkerTemplate"): any;
    /**
     * Sets the template to use for hexagon markers on the map.
     * Defines the marker template used for
     * series with a marker type of hexagon.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "hexagonMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for tetragram markers on the map.
     * Defines the marker template used for
     * series with a marker type of tetragram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "tetragramMarkerTemplate"): any;
    /**
     * Sets the template to use for tetragram markers on the map.
     * Defines the marker template used for
     * series with a marker type of tetragram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "tetragramMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for pentragram markers on the map.
     * Defines the marker template used for
     * series with a marker type of pentagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "pentagramMarkerTemplate"): any;
    /**
     * Sets the template to use for pentragram markers on the map.
     * Defines the marker template used for
     * series with a marker type of pentagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "pentagramMarkerTemplate", optionValue: any): void;
    /**
     * Gets  the template to use for hexagram markers on the map.
     * Defines the marker template used for
     * series with a marker type of hexagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     */
    igMap(optionLiteral: 'option', optionName: "hexagramMarkerTemplate"): any;
    /**
     * Sets the template to use for hexagram markers on the map.
     * Defines the marker template used for
     * series with a marker type of hexagram.
     * The provided object should have properties called render and optionally measure. See definition for option: legendItemBadgeTemplate
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "hexagramMarkerTemplate", optionValue: any): void;
    /**
     * The background image uri use in the overview detail pane.
     */
    igMap(optionLiteral: 'option', optionName: "overviewPlusDetailPaneBackgroundImageUri"): string;
    /**
     * The background image uri use in the overview detail pane.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "overviewPlusDetailPaneBackgroundImageUri", optionValue: string): void;
    /**
     * Whether the series viewer should use cached tiles during zooms rather than the default live content.
     */
    igMap(optionLiteral: 'option', optionName: "useTiledZooming"): boolean;
    /**
     * Sets whether the series viewer should use cached tiles during zooms rather than the default live content.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "useTiledZooming", optionValue: boolean): void;
    /**
     * Whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
     */
    igMap(optionLiteral: 'option', optionName: "preferHigherResolutionTiles"): boolean;
    /**
     * Sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "preferHigherResolutionTiles", optionValue: boolean): void;
    /**
     * The maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
     */
    igMap(optionLiteral: 'option', optionName: "zoomTileCacheSize"): number;
    /**
     * Sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "zoomTileCacheSize", optionValue: number): void;
    /**
     * Background content object
     */
    igMap(optionLiteral: 'option', optionName: "backgroundContent"): IgMapBackgroundContent;
    /**
     * Background content object
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "backgroundContent", optionValue: IgMapBackgroundContent): void;
    /**
     * An array of series objects
     */
    igMap(optionLiteral: 'option', optionName: "series"): IgMapSeries[];
    /**
     * An array of series objects
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "series", optionValue: IgMapSeries[]): void;
    /**
     * The swatch used to style this widget
     */
    igMap(optionLiteral: 'option', optionName: "theme"): string;
    /**
     * The swatch used to style this widget
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "theme", optionValue: string): void;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igMap(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;
    /**
     * Event fired when the mouse has hovered on a series and the tooltip is about to show
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igMap(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igMap(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;
    /**
     * Event fired after a tooltip is shown
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igMap(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igMap(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;
    /**
     * Event fired when the mouse has left a series and the tooltip is about to hide
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igMap(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     */
    igMap(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;
    /**
     * Event fired after a tooltip is hidden
     * Function takes arguments evt and ui.
     * Use ui.element to get reference to tooltip DOM element.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     *
     * @optionValue Define event handler function.
     */
    igMap(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     */
    igMap(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;
    /**
     * Event fired when the control is displayed on a non HTML5 compliant browser
     *
     * @optionValue Define event handler function.
     */
    igMap(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;
    /**
     * Occurs when the cursors are moved over a series in this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igMap(optionLiteral: 'option', optionName: "seriesCursorMouseMove"): SeriesCursorMouseMoveEvent;
    /**
     * Occurs when the cursors are moved over a series in this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "seriesCursorMouseMove", optionValue: SeriesCursorMouseMoveEvent): void;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseLeftButtonDown"): SeriesMouseLeftButtonDownEvent;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseLeftButtonDown", optionValue: SeriesMouseLeftButtonDownEvent): void;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseLeftButtonUp"): SeriesMouseLeftButtonUpEvent;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseLeftButtonUp", optionValue: SeriesMouseLeftButtonUpEvent): void;
    /**
     * Occurs when the left mouse pointer moves while over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseMove"): SeriesMouseMoveEvent;
    /**
     * Occurs when the left mouse pointer moves while over an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseMove", optionValue: SeriesMouseMoveEvent): void;
    /**
     * Occurs when the left mouse pointer enters an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseEnter"): SeriesMouseEnterEvent;
    /**
     * Occurs when the left mouse pointer enters an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseEnter", optionValue: SeriesMouseEnterEvent): void;
    /**
     * Occurs when the left mouse pointer leaves an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseLeave"): SeriesMouseLeaveEvent;
    /**
     * Occurs when the left mouse pointer leaves an element of this map.
     * Function takes arguments evt and ui.
     * Use ui.item to get reference to current series item object.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.actualItemBrush to get item brush.
     * Use ui.actualSeriesBrush to get series brush.
     * Use ui.positionX to get mouse X position.
     * Use ui.positionY to get mouse Y position.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "seriesMouseLeave", optionValue: SeriesMouseLeaveEvent): void;
    /**
     * Occurs just after the current Map's window rectangle is changed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     */
    igMap(optionLiteral: 'option', optionName: "windowRectChanged"): WindowRectChangedEvent;
    /**
     * Occurs just after the current Map's window rectangle is changed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "windowRectChanged", optionValue: WindowRectChangedEvent): void;
    /**
     * Occurs just after the current Map's grid area rectangle is changed.
     * The grid area may change as the result of the Map being resized.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     */
    igMap(optionLiteral: 'option', optionName: "gridAreaRectChanged"): GridAreaRectChangedEvent;
    /**
     * Occurs just after the current Map's grid area rectangle is changed.
     * The grid area may change as the result of the Map being resized.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.newHeight to get new height value.
     * Use ui.newLeft to get new left value.
     * Use ui.newTop to get new top value.
     * Use ui.newWidth to get new top value.
     * Use ui.oldHeight to get old height value.
     * Use ui.oldLeft to get old left value.
     * Use ui.oldTop to get old top value.
     * Use ui.oldWidth to get old top value.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "gridAreaRectChanged", optionValue: GridAreaRectChangedEvent): void;
    /**
     * Raised when the map's processing for an update has completed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     */
    igMap(optionLiteral: 'option', optionName: "refreshCompleted"): RefreshCompletedEvent;
    /**
     * Raised when the map's processing for an update has completed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     *
     * @optionValue New value to be set.
     */
    igMap(optionLiteral: 'option', optionName: "refreshCompleted", optionValue: RefreshCompletedEvent): void;
    /**
     * Event fired when the status of an ongoing Triangulation has changed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.currentStatus to get current status.
     */
    igMap(optionLiteral: 'option', optionName: "triangulationStatusChanged"): TriangulationStatusChangedEvent;
    /**
     * Event fired when the status of an ongoing Triangulation has changed.
     * Function takes arguments evt and ui.
     * Use ui.map to get reference to map object.
     * Use ui.series to get reference to current series object.
     * Use ui.currentStatus to get current status.
     *
     * @optionValue Define event handler function.
     */
    igMap(optionLiteral: 'option', optionName: "triangulationStatusChanged", optionValue: TriangulationStatusChangedEvent): void;
    igMap(options: IgMap): JQuery;
    igMap(optionLiteral: 'option', optionName: string): any;
    igMap(optionLiteral: 'option', options: IgMap): JQuery;
    igMap(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igMap(methodName: string, ...methodParams: any[]): any;
}
interface IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions {
    /**
     * The value is applied to XmlHttpRequest.withCredentials if supported by the user agent.
     *                             Setting this property to true will allow IE8/IE9 to make authenticated cross-origin requests to tusted domains through XmlHttpRequest instead of XDomainRequest
     *                             and will prompt the user for credentials.
     */
    withCredentials?: boolean;
    /**
     * A callback to be invoked right before the request is send to the server. Extends beforeSend callback of jQuery.ajax’s options object.
     */
    beforeSend?: Function;
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings {
    /**
     * Optional="true" a value indicating whether a NON EMPTY clause is present on ROWS axis. Default value is true
     */
    nonEmptyOnRows?: boolean;
    /**
     * Optional="true" a value indicating whether a NON EMPTY clause is present on COLUMNS axis. Default value is true
     */
    nonEmptyOnColumns?: boolean;
    /**
     * Optional="true" a value indicating whether a members' set expressions on ROWS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
     */
    addCalculatedMembersOnRows?: boolean;
    /**
     * Optional="true" a value indicating whether a members' set expressions on COLUMNS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
     */
    addCalculatedMembersOnColumns?: boolean;
    /**
     * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on ROWS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
     */
    dimensionPropertiesOnRows?: any[];
    /**
     * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on COLUMNS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
     */
    dimensionPropertiesOnColumns?: any[];
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsXmlaOptions {
    /**
     * Optional="false" The URL of the XMLA server.
     */
    serverUrl?: string;
    /**
     * The catalog name.
     */
    catalog?: string;
    /**
     * The name of the cube in the data source.
     */
    cube?: string;
    /**
     * The name of the measure group in the data source.
     */
    measureGroup?: string;
    /**
     * An object containing information about how the request to the XMLA server should be processed.
     */
    requestOptions?: IgPivotDataSelectorDataSourceOptionsXmlaOptionsRequestOptions;
    /**
     * Enables/disables caching of the XMLA result object.
     */
    enableResultCache?: boolean;
    /**
     * Additional properties sent with every discover request.
     *                         The object is treated as a key/value store where each property name is used as the key and the property value as the value.
     */
    discoverProperties?: any;
    /**
     * Additional properties sent with every execute request.
     *                         The object is treated as a key/value store where each property name is used as the key and the property value as the value.
     */
    executeProperties?: any;
    /**
     * Optional="true" a javascript object containing information about how the request to the xmla server should be processed
     */
    mdxSettings?: IgPivotDataSelectorDataSourceOptionsXmlaOptionsMdxSettings;
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsXmlaOptions
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure {
    /**
     * Optional="false" A unique name for the measure.
     */
    name?: string;
    /**
     * A caption for the measure.
     */
    caption?: string;
    /**
     * Optional="false" An aggregator function called when each cell is evaluated.
     *                                         Returns a value for the cell. If the returned value is null, no cell will be created in for the data source result.
     */
    aggregator?: Function;
    /**
     * The path used when displaying the measure in the user interface. Nested folders are indicated by a backslash (\).
     */
    displayFolder?: string;
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension {
    /**
     * A unique name for the measures dimension.
     *                                     The default value is "Measures". This name is used to create the names of dimensions using the following pattern:
     *                                     [<measuresDimensionMetadata.name>].[<measureMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the measures dimension.
     *                                     The default value is "Measures".
     */
    caption?: string;
    /**
     * An array of measure metadata objects.
     */
    measures?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure[];
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel {
    /**
     * Optional="false" A name for the level.
     *                                             The unique name of the level is formed using the following pattern:
     *                                             {<hierarchy.uniqueName>}.[<levelMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the level.
     */
    caption?: string;
    /**
     * A function called for each item of the data source array when level members are created.
     *                                             Based on the item parameter the function should return a value that will form the $.ig.Member’s name and caption.
     */
    memberProvider?: Function;
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie {
    /**
     * Optional="false" A name for the hierarchy.
     *                                         The unique name of the hierarchy is formed using the following pattern:
     *                                         [<parentDimension.name>].[<hierarchyMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the hierarchy.
     */
    caption?: string;
    /**
     * The path to be used when displaying the hierarchy in the user interface.
     *                                         Nested folders are indicated by a backslash (\).
     *                                         The folder hierarchy will appear under parent dimension node.
     */
    displayFolder?: string;
    /**
     * An array of level metadata objects.
     */
    levels?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel[];
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension {
    /**
     * Optional="false" A unique name for the dimension.
     */
    name?: string;
    /**
     * A caption for the dimension.
     */
    caption?: string;
    /**
     * An array of hierarchy metadata objects.
     */
    hierarchies?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie[];
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube {
    /**
     * Optional="false" A unique name for the cube.
     */
    name?: string;
    /**
     * A caption for the cube.
     */
    caption?: string;
    /**
     * An object providing information about the measures' root node.
     */
    measuresDimension?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension;
    /**
     * An array of dimension metadata objects.
     */
    dimensions?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCubeDimension[];
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata {
    /**
     * Optional="false" Metadata used for the creation of the cube.
     */
    cube?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadataCube;
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptionsFlatDataOptions {
    /**
     * Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource.
     *                         string Specifies the name of the property in which data records are held if the response is wrapped.
     *                         null Option is ignored.
     */
    responseDataKey?: string;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     *                         null Option is ignored.
     */
    responseDataType?: string;
    /**
     * Optional="false" An object containing processing instructions for the $.ig.DataSource data.
     */
    metadata?: IgPivotDataSelectorDataSourceOptionsFlatDataOptionsMetadata;
    /**
     * Option for IgPivotDataSelectorDataSourceOptionsFlatDataOptions
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDataSourceOptions {
    /**
     * Settings for creating an instance of $.ig.OlapXmlaDataSource.
     */
    xmlaOptions?: IgPivotDataSelectorDataSourceOptionsXmlaOptions;
    /**
     * Settings for creating an instance of $.ig.OlapFlatDataSource.
     */
    flatDataOptions?: IgPivotDataSelectorDataSourceOptionsFlatDataOptions;
    /**
     * A list of measure names separated by comma (,). These will be the measures of the data source.
     */
    measures?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
     */
    filters?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
     */
    rows?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
     */
    columns?: string;
    /**
     * Option for IgPivotDataSelectorDataSourceOptions
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorDragAndDropSettings {
    /**
     * Which element the draggable helper should be appended to while dragging.
     */
    appendTo?: any;
    /**
     * Specifies the containment for the drag helper. The area inside of which the                                     helper is contained would be scrollable while dragging.
     */
    containment?: any;
    /**
     * Specifies z-index that would be set for the drag helper.
     */
    zIndex?: number;
    /**
     * Option for IgPivotDataSelectorDragAndDropSettings
     */
    [optionName: string]: any;
}
interface DataSelectorRenderedEvent {
    (event: Event, ui: DataSelectorRenderedEventUIParam): void;
}
interface DataSelectorRenderedEventUIParam {
    /**
     * Used to get a reference to the data selector.
     */
    owner?: any;
}
interface DataSourceInitializedEvent {
    (event: Event, ui: DataSourceInitializedEventUIParam): void;
}
interface DataSourceInitializedEventUIParam {
    /**
     * Used to get a reference to the data selector.
     */
    owner?: any;
    /**
     * Used to get a reference to the data source.
     */
    dataSource?: any;
    /**
     * Used to see if an error has occured during initialization.
     */
    error?: any;
    /**
     * Used to get a reference to the root of the data source metatadata root item.
     */
    metadataTreeRoot?: any;
}
interface DataSourceUpdatedEvent {
    (event: Event, ui: DataSourceUpdatedEventUIParam): void;
}
interface DataSourceUpdatedEventUIParam {
    /**
     * Used to get a reference to the data selector.
     */
    owner?: any;
    /**
     * Used to get a reference to the data source.
     */
    dataSource?: any;
    /**
     * Used to see if an error has occured during update.
     */
    error?: any;
    /**
     * Used to get the result of the update operation.
     */
    result?: any;
}
interface DeferUpdateChangedEvent {
    (event: Event, ui: DeferUpdateChangedEventUIParam): void;
}
interface DeferUpdateChangedEventUIParam {
    /**
     * Used to get a reference to the data selector.
     */
    owner?: any;
    /**
     * Used to get the defer update value.
     */
    deferUpdate?: any;
}
interface DragStartEvent {
    (event: Event, ui: DragStartEventUIParam): void;
}
interface DragStartEventUIParam {
    /**
     * Used to get a reference to the data.
     */
    metadata?: any;
    /**
     * Used to get a reference to the helper.
     */
    helper?: any;
    /**
     * Used to get a reference to the offset.
     */
    offset?: any;
    /**
     * Used to get a reference to the original position of the draggable element.
     */
    originalPosition?: any;
    /**
     * Used to get a reference to the current position of the draggable element.
     */
    position?: any;
}
interface DragEvent {
    (event: Event, ui: DragEventUIParam): void;
}
interface DragEventUIParam {
    /**
     * Used to get a reference to the data.
     */
    metadata?: any;
    /**
     * Used to get a reference to the helper.
     */
    helper?: any;
    /**
     * Used to get a reference to the offset.
     */
    offset?: any;
    /**
     * Used to get a reference to the original position of the draggable element.
     */
    originalPosition?: any;
    /**
     * Used to get a reference to the current position of the draggable element.
     */
    position?: any;
}
interface DragStopEvent {
    (event: Event, ui: DragStopEventUIParam): void;
}
interface DragStopEventUIParam {
    /**
     * Used to get a reference to the helper.
     */
    helper?: any;
    /**
     * Used to get a reference to the offset.
     */
    offset?: any;
    /**
     * Used to get a reference to the original position of the draggable element.
     */
    originalPosition?: any;
    /**
     * Used to get a reference to the current position of the draggable element.
     */
    position?: any;
}
interface MetadataDroppingEvent {
    (event: Event, ui: MetadataDroppingEventUIParam): void;
}
interface MetadataDroppingEventUIParam {
    /**
     * Used to the drop target.
     */
    targetElement?: any;
    /**
     * Used to the dragged element.
     */
    draggedElement?: any;
    /**
     * Used to get a reference to the data.
     */
    metadata?: any;
    /**
     * Used to get the index at which the metadata will be inserted.
     */
    metadataIndex?: any;
    /**
     * Used to get a reference to the helper.
     */
    helper?: any;
    /**
     * Used to get a reference to the offset.
     */
    offset?: any;
    /**
     * Used to get a reference to the current position of the draggable element.
     */
    position?: any;
}
interface MetadataDroppedEvent {
    (event: Event, ui: MetadataDroppedEventUIParam): void;
}
interface MetadataDroppedEventUIParam {
    /**
     * Used to the drop target.
     */
    targetElement?: any;
    /**
     * Used to the dragged element.
     */
    draggedElement?: any;
    /**
     * Used to get a reference to the data.
     */
    metadata?: any;
    /**
     * Used to get the index at which the metadata is inserted.
     */
    metadataIndex?: any;
    /**
     * Used to get a reference to the helper.
     */
    helper?: any;
    /**
     * Used to get a reference to the offset.
     */
    offset?: any;
    /**
     * Used to get a reference to the current position of the draggable element.
     */
    position?: any;
}
interface MetadataRemovingEvent {
    (event: Event, ui: MetadataRemovingEventUIParam): void;
}
interface MetadataRemovingEventUIParam {
    /**
     * Used to the dragged element.
     */
    targetElement?: any;
    /**
     * Used to get a reference to the data.
     */
    metadata?: any;
}
interface MetadataRemovedEvent {
    (event: Event, ui: MetadataRemovedEventUIParam): void;
}
interface MetadataRemovedEventUIParam {
    /**
     * Used to get a reference to the data.
     */
    metadata?: any;
}
interface FilterDropDownOpeningEvent {
    (event: Event, ui: FilterDropDownOpeningEventUIParam): void;
}
interface FilterDropDownOpeningEventUIParam {
    /**
     * Used to the hierarchy.
     */
    hierarchy?: any;
}
interface FilterDropDownOpenedEvent {
    (event: Event, ui: FilterDropDownOpenedEventUIParam): void;
}
interface FilterDropDownOpenedEventUIParam {
    /**
     * Used to the hierarchy.
     */
    hierarchy?: any;
    /**
     * Used to the drop down.
     */
    dropDownElement?: any;
}
interface FilterMembersLoadedEvent {
    (event: Event, ui: FilterMembersLoadedEventUIParam): void;
}
interface FilterMembersLoadedEventUIParam {
    /**
     * Used to get the parent node or the igTree instance in the initial load.
     */
    parent?: any;
    rootFilterMembers?: any;
    filterMembers?: any;
}
interface FilterDropDownOkEvent {
    (event: Event, ui: FilterDropDownOkEventUIParam): void;
}
interface FilterDropDownOkEventUIParam {
    /**
     * Used to the hierarchy.
     */
    hierarchy?: any;
    filterMembers?: any;
    /**
     * Used to the drop down.
     */
    dropDownElement?: any;
}
interface FilterDropDownClosingEvent {
    (event: Event, ui: FilterDropDownClosingEventUIParam): void;
}
interface FilterDropDownClosingEventUIParam {
    /**
     * Used to the hierarchy.
     */
    hierarchy?: any;
    /**
     * Used to the drop down.
     */
    dropDownElement?: any;
}
interface FilterDropDownClosedEvent {
    (event: Event, ui: FilterDropDownClosedEventUIParam): void;
}
interface FilterDropDownClosedEventUIParam {
    /**
     * Used to the hierarchy.
     */
    hierarchy?: any;
}
interface IgPivotDataSelector {
    width?: any;
    /**
     * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
     */
    height?: any;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     */
    dataSource?: any;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *                 The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     */
    dataSourceOptions?: IgPivotDataSelectorDataSourceOptions;
    /**
     * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
     */
    deferUpdate?: boolean;
    /**
     * Settings for the drag and drop functionality of the igPivotDataSelector.
     */
    dragAndDropSettings?: IgPivotDataSelectorDragAndDropSettings;
    /**
     * Specifies the parent for the drop downs.
     */
    dropDownParent?: any;
    /**
     * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
     */
    disableRowsDropArea?: boolean;
    /**
     * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
     */
    disableColumnsDropArea?: boolean;
    /**
     * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
     */
    disableMeasuresDropArea?: boolean;
    /**
     * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
     */
    disableFiltersDropArea?: boolean;
    /**
     * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
     *                 paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
     *                 paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
     *                 paramType="string" The unique name of the item.
     *                 returnType="bool"  The function must return true if the item should be accepted.
     */
    customMoveValidation?: Function;
    /**
     * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     */
    dataSelectorRendered?: DataSelectorRenderedEvent;
    /**
     * Fired after the data source has initialized.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.dataSource to get a reference to the data source.
     *                 Use ui.error to see if an error has occured during initialization.
     *                 Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
     */
    dataSourceInitialized?: DataSourceInitializedEvent;
    /**
     * Fired after the data source has updated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.dataSource to get a reference to the data source.
     *                 Use ui.error to see if an error has occured during update.
     *                 Use ui.result to get the result of the update operation.
     */
    dataSourceUpdated?: DataSourceUpdatedEvent;
    /**
     * Fired when the defer update checkbox changes.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.deferUpdate to get the defer update value.
     */
    deferUpdateChanged?: DeferUpdateChangedEvent;
    /**
     * Fired on drag start. Return false to cancel the drag.
     * Use ui.metadatato get a reference to the data.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    dragStart?: DragStartEvent;
    /**
     * Fired on drag. Return false to cancel the dragging.
     * Use ui.metadatato get a reference to the data.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    drag?: DragEvent;
    /**
     * Fired on drag stop.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    dragStop?: DragStopEvent;
    /**
     * Fired before a metadata item drop. Return false to cancel the drop.
     *                 Use ui.targetElement for a reference to the drop target.
     *                 Use ui.draggedElement for a reference to the dragged element.
     * Use ui.metadatato get a reference to the data.
     *                 Use ui.metadataIndex to get the index at which the metadata will be inserted.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    metadataDropping?: MetadataDroppingEvent;
    /**
     * Fired after a metadata item drop.
     *                 Use ui.targetElement for a reference to the drop target.
     *                 Use ui.draggedElement for a reference to the dragged element.
     * Use ui.metadatato get a reference to the data.
     *                 Use ui.metadataIndex to get the index at which the metadata is inserted.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    metadataDropped?: MetadataDroppedEvent;
    /**
     * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
     *                 Use ui.targetElement for a reference to the dragged element.
     *                 Use ui.metadatato get a reference to the data.
     */
    metadataRemoving?: MetadataRemovingEvent;
    /**
     * Fired after a metadata item is removed when the user clicks the close icon.
     *                 Use ui.metadatato get a reference to the data.
     */
    metadataRemoved?: MetadataRemovedEvent;
    /**
     * Fired before the filter members drop down opens. Return false to cancel the opening.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     */
    filterDropDownOpening?: FilterDropDownOpeningEvent;
    /**
     * Fired after the filter members drop down opens.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.dropDownElement for a reference to the drop down.
     */
    filterDropDownOpened?: FilterDropDownOpenedEvent;
    /**
     * Fired after the filter members are loaded.
     *                 Use ui.parent to get the parent node or the igTree instance in the initial load.
     *                 Use ui.rootFilterMembers for a collection with the root filter members (deprecated).
     *                 Use ui.filterMembers for a collection with the newly loaded filter members.
     */
    filterMembersLoaded?: FilterMembersLoadedEvent;
    /**
     * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
     *                 Use ui.dropDownElement for a reference to the drop down.
     */
    filterDropDownOk?: FilterDropDownOkEvent;
    /**
     * Fired before the filter members drop down closes. Return false to cancel the closing.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.dropDownElement for a reference to the drop down.
     */
    filterDropDownClosing?: FilterDropDownClosingEvent;
    /**
     * Fired after the filter members drop down closes.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     */
    filterDropDownClosed?: FilterDropDownClosedEvent;
    /**
     * Option for igPivotDataSelector
     */
    [optionName: string]: any;
}
interface IgPivotDataSelectorMethods {
    /**
     * Updates the data source.
     */
    update(): void;
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     * 1. Remove custom CSS classes that were added.
     * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     * 3. Unbind all events that were bound.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igPivotDataSelector"): IgPivotDataSelectorMethods;
}
interface JQuery {
    igPivotDataSelector(methodName: "update"): void;
    igPivotDataSelector(methodName: "destroy"): void;
    /**
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "height"): any;
    /**
     * This is the total height of the grid, including all UI elements - scroll container with data rows, header, footer, filter row -  (if any), etc.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *                 The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceOptions"): IgPivotDataSelectorDataSourceOptions;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *                 The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceOptions", optionValue: IgPivotDataSelectorDataSourceOptions): void;
    /**
     * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "deferUpdate"): boolean;
    /**
     * Setting deferUpdate to true will not apply changes to the data source until the update method is called or the update layout button is clicked.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "deferUpdate", optionValue: boolean): void;
    /**
     * Settings for the drag and drop functionality of the igPivotDataSelector.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dragAndDropSettings"): IgPivotDataSelectorDragAndDropSettings;
    /**
     * Settings for the drag and drop functionality of the igPivotDataSelector.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dragAndDropSettings", optionValue: IgPivotDataSelectorDragAndDropSettings): void;
    /**
     * Gets the parent for the drop downs.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dropDownParent"): any;
    /**
     * Sets the parent for the drop downs.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dropDownParent", optionValue: any): void;
    /**
     * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "disableRowsDropArea"): boolean;
    /**
     * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "disableRowsDropArea", optionValue: boolean): void;
    /**
     * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "disableColumnsDropArea"): boolean;
    /**
     * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "disableColumnsDropArea", optionValue: boolean): void;
    /**
     * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "disableMeasuresDropArea"): boolean;
    /**
     * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "disableMeasuresDropArea", optionValue: boolean): void;
    /**
     * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "disableFiltersDropArea"): boolean;
    /**
     * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "disableFiltersDropArea", optionValue: boolean): void;
    /**
     * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
     *                 paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
     *                 paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
     *                 paramType="string" The unique name of the item.
     *                 returnType="bool"  The function must return true if the item should be accepted.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "customMoveValidation"): Function;
    /**
     * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
     *                 paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
     *                 paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
     *                 paramType="string" The unique name of the item.
     *                 returnType="bool"  The function must return true if the item should be accepted.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "customMoveValidation", optionValue: Function): void;
    /**
     * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSelectorRendered"): DataSelectorRenderedEvent;
    /**
     * Fired after the data selector is rendered. Changing the data source instance will re-render the data selector.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSelectorRendered", optionValue: DataSelectorRenderedEvent): void;
    /**
     * Fired after the data source has initialized.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.dataSource to get a reference to the data source.
     *                 Use ui.error to see if an error has occured during initialization.
     *                 Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceInitialized"): DataSourceInitializedEvent;
    /**
     * Fired after the data source has initialized.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.dataSource to get a reference to the data source.
     *                 Use ui.error to see if an error has occured during initialization.
     *                 Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceInitialized", optionValue: DataSourceInitializedEvent): void;
    /**
     * Fired after the data source has updated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.dataSource to get a reference to the data source.
     *                 Use ui.error to see if an error has occured during update.
     *                 Use ui.result to get the result of the update operation.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceUpdated"): DataSourceUpdatedEvent;
    /**
     * Fired after the data source has updated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.dataSource to get a reference to the data source.
     *                 Use ui.error to see if an error has occured during update.
     *                 Use ui.result to get the result of the update operation.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dataSourceUpdated", optionValue: DataSourceUpdatedEvent): void;
    /**
     * Fired when the defer update checkbox changes.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.deferUpdate to get the defer update value.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "deferUpdateChanged"): DeferUpdateChangedEvent;
    /**
     * Fired when the defer update checkbox changes.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the data selector.
     *                 Use ui.deferUpdate to get the defer update value.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "deferUpdateChanged", optionValue: DeferUpdateChangedEvent): void;
    /**
     * Fired on drag start. Return false to cancel the drag.
     * Use ui.metadatato get a reference to the data.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dragStart"): DragStartEvent;
    /**
     * Fired on drag start. Return false to cancel the drag.
     * Use ui.metadatato get a reference to the data.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dragStart", optionValue: DragStartEvent): void;
    /**
     * Fired on drag. Return false to cancel the dragging.
     * Use ui.metadatato get a reference to the data.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "drag"): DragEvent;
    /**
     * Fired on drag. Return false to cancel the dragging.
     * Use ui.metadatato get a reference to the data.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "drag", optionValue: DragEvent): void;
    /**
     * Fired on drag stop.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dragStop"): DragStopEvent;
    /**
     * Fired on drag stop.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.originalPosition to get a reference to the original position of the draggable element.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "dragStop", optionValue: DragStopEvent): void;
    /**
     * Fired before a metadata item drop. Return false to cancel the drop.
     *                 Use ui.targetElement for a reference to the drop target.
     *                 Use ui.draggedElement for a reference to the dragged element.
     * Use ui.metadatato get a reference to the data.
     *                 Use ui.metadataIndex to get the index at which the metadata will be inserted.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "metadataDropping"): MetadataDroppingEvent;
    /**
     * Fired before a metadata item drop. Return false to cancel the drop.
     *                 Use ui.targetElement for a reference to the drop target.
     *                 Use ui.draggedElement for a reference to the dragged element.
     * Use ui.metadatato get a reference to the data.
     *                 Use ui.metadataIndex to get the index at which the metadata will be inserted.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "metadataDropping", optionValue: MetadataDroppingEvent): void;
    /**
     * Fired after a metadata item drop.
     *                 Use ui.targetElement for a reference to the drop target.
     *                 Use ui.draggedElement for a reference to the dragged element.
     * Use ui.metadatato get a reference to the data.
     *                 Use ui.metadataIndex to get the index at which the metadata is inserted.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "metadataDropped"): MetadataDroppedEvent;
    /**
     * Fired after a metadata item drop.
     *                 Use ui.targetElement for a reference to the drop target.
     *                 Use ui.draggedElement for a reference to the dragged element.
     * Use ui.metadatato get a reference to the data.
     *                 Use ui.metadataIndex to get the index at which the metadata is inserted.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "metadataDropped", optionValue: MetadataDroppedEvent): void;
    /**
     * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
     *                 Use ui.targetElement for a reference to the dragged element.
     *                 Use ui.metadatato get a reference to the data.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "metadataRemoving"): MetadataRemovingEvent;
    /**
     * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
     *                 Use ui.targetElement for a reference to the dragged element.
     *                 Use ui.metadatato get a reference to the data.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "metadataRemoving", optionValue: MetadataRemovingEvent): void;
    /**
     * Fired after a metadata item is removed when the user clicks the close icon.
     *                 Use ui.metadatato get a reference to the data.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "metadataRemoved"): MetadataRemovedEvent;
    /**
     * Fired after a metadata item is removed when the user clicks the close icon.
     *                 Use ui.metadatato get a reference to the data.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "metadataRemoved", optionValue: MetadataRemovedEvent): void;
    /**
     * Fired before the filter members drop down opens. Return false to cancel the opening.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOpening"): FilterDropDownOpeningEvent;
    /**
     * Fired before the filter members drop down opens. Return false to cancel the opening.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOpening", optionValue: FilterDropDownOpeningEvent): void;
    /**
     * Fired after the filter members drop down opens.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.dropDownElement for a reference to the drop down.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOpened"): FilterDropDownOpenedEvent;
    /**
     * Fired after the filter members drop down opens.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.dropDownElement for a reference to the drop down.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOpened", optionValue: FilterDropDownOpenedEvent): void;
    /**
     * Fired after the filter members are loaded.
     *                 Use ui.parent to get the parent node or the igTree instance in the initial load.
     *                 Use ui.rootFilterMembers for a collection with the root filter members (deprecated).
     *                 Use ui.filterMembers for a collection with the newly loaded filter members.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterMembersLoaded"): FilterMembersLoadedEvent;
    /**
     * Fired after the filter members are loaded.
     *                 Use ui.parent to get the parent node or the igTree instance in the initial load.
     *                 Use ui.rootFilterMembers for a collection with the root filter members (deprecated).
     *                 Use ui.filterMembers for a collection with the newly loaded filter members.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterMembersLoaded", optionValue: FilterMembersLoadedEvent): void;
    /**
     * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
     *                 Use ui.dropDownElement for a reference to the drop down.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOk"): FilterDropDownOkEvent;
    /**
     * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
     *                 Use ui.dropDownElement for a reference to the drop down.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownOk", optionValue: FilterDropDownOkEvent): void;
    /**
     * Fired before the filter members drop down closes. Return false to cancel the closing.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.dropDownElement for a reference to the drop down.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownClosing"): FilterDropDownClosingEvent;
    /**
     * Fired before the filter members drop down closes. Return false to cancel the closing.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *                 Use ui.dropDownElement for a reference to the drop down.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownClosing", optionValue: FilterDropDownClosingEvent): void;
    /**
     * Fired after the filter members drop down closes.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownClosed"): FilterDropDownClosedEvent;
    /**
     * Fired after the filter members drop down closes.
     *                 Use ui.hierarchy for a reference to the hierarchy.
     *
     * @optionValue New value to be set.
     */
    igPivotDataSelector(optionLiteral: 'option', optionName: "filterDropDownClosed", optionValue: FilterDropDownClosedEvent): void;
    igPivotDataSelector(options: IgPivotDataSelector): JQuery;
    igPivotDataSelector(optionLiteral: 'option', optionName: string): any;
    igPivotDataSelector(optionLiteral: 'option', options: IgPivotDataSelector): JQuery;
    igPivotDataSelector(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igPivotDataSelector(methodName: string, ...methodParams: any[]): any;
}
interface IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions {
    /**
     * The value is applied to XmlHttpRequest.withCredentials if supported by the user agent.
     *                         Setting this property to true will allow IE8/IE9 to make authenticated cross-origin requests to tusted domains through XmlHttpRequest instead of XDomainRequest
     *                         and will prompt the user for credentials.
     */
    withCredentials?: boolean;
    /**
     * A callback to be invoked right before the request is send to the server. Extends beforeSend callback of jQuery.ajaxвЂ™s options object.
     */
    beforeSend?: Function;
    /**
     * Option for IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings {
    /**
     * Optional="true" a value indicating whether a NON EMPTY clause is present on ROWS axis. Default value is true
     */
    nonEmptyOnRows?: boolean;
    /**
     * Optional="true" a value indicating whether a NON EMPTY clause is present on COLUMNS axis. Default value is true
     */
    nonEmptyOnColumns?: boolean;
    /**
     * Optional="true" a value indicating whether a members' set expressions on ROWS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
     */
    addCalculatedMembersOnRows?: boolean;
    /**
     * Optional="true" a value indicating whether a members' set expressions on COLUMNS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
     */
    addCalculatedMembersOnColumns?: boolean;
    /**
     * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on ROWS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
     */
    dimensionPropertiesOnRows?: any[];
    /**
     * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on COLUMNS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
     */
    dimensionPropertiesOnColumns?: any[];
    /**
     * Option for IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsXmlaOptions {
    /**
     * Optional="false" The URL of the XMLA server.
     */
    serverUrl?: string;
    /**
     * The catalog name.
     */
    catalog?: string;
    /**
     * The name of the cube in the data source.
     */
    cube?: string;
    /**
     * The name of the measure group in the data source.
     */
    measureGroup?: string;
    /**
     * An object containing information about how the request to the XMLA server should be processed.
     */
    requestOptions?: IgPivotGridDataSourceOptionsXmlaOptionsRequestOptions;
    /**
     * Enables/disables caching of the XMLA result object.
     */
    enableResultCache?: boolean;
    /**
     * Additional properties sent with every discover request.
     *                     The object is treated as a key/value store where each property name is used as the key and the property value as the value.
     */
    discoverProperties?: any;
    /**
     * Additional properties sent with every execute request.
     *                     The object is treated as a key/value store where each property name is used as the key and the property value as the value.
     */
    executeProperties?: any;
    /**
     * Optional="true" a javascript object containing information about how the request to the xmla server should be processed
     */
    mdxSettings?: IgPivotGridDataSourceOptionsXmlaOptionsMdxSettings;
    /**
     * Option for IgPivotGridDataSourceOptionsXmlaOptions
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure {
    /**
     * Optional="false" A unique name for the measure.
     */
    name?: string;
    /**
     * A caption for the measure.
     */
    caption?: string;
    /**
     * Optional="false" An aggregator function called when each cell is evaluated.
     *                                     Returns a value for the cell. If the returned value is null, no cell will be created in for the data source result.
     */
    aggregator?: Function;
    /**
     * The path used when displaying the measure in the user interface. Nested folders are indicated by a backslash (\).
     */
    displayFolder?: string;
    /**
     * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension {
    /**
     * A unique name for the measures dimension.
     *                                 The default value is "Measures". This name is used to create the names of dimensions using the following pattern:
     *                                 [<measuresDimensionMetadata.name>].[<measureMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the measures dimension.
     *                                 The default value is "Measures".
     */
    caption?: string;
    /**
     * An array of measure metadata objects.
     */
    measures?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure[];
    /**
     * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel {
    /**
     * Optional="false" A name for the level.
     *                                         The unique name of the level is formed using the following pattern:
     *                                         {<hierarchy.uniqueName>}.[<levelMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the level.
     */
    caption?: string;
    /**
     * A function called for each item of the data source array when level members are created.
     *                                         Based on the item parameter the function should return a value that will form the $.ig.MemberвЂ™s name and caption.
     */
    memberProvider?: Function;
    /**
     * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie {
    /**
     * Optional="false" A name for the hierarchy.
     *                                     The unique name of the hierarchy is formed using the following pattern:
     *                                     [<parentDimension.name>].[<hierarchyMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the hierarchy.
     */
    caption?: string;
    /**
     * The path to be used when displaying the hierarchy in the user interface.
     *                                     Nested folders are indicated by a backslash (\).
     *                                     The folder hierarchy will appear under parent dimension node.
     */
    displayFolder?: string;
    /**
     * An array of level metadata objects.
     */
    levels?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel[];
    /**
     * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension {
    /**
     * Optional="false" A unique name for the dimension.
     */
    name?: string;
    /**
     * A caption for the dimension.
     */
    caption?: string;
    /**
     * An array of hierarchy metadata objects.
     */
    hierarchies?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie[];
    /**
     * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube {
    /**
     * Optional="false" A unique name for the cube.
     */
    name?: string;
    /**
     * A caption for the cube.
     */
    caption?: string;
    /**
     * An object providing information about the measures' root node.
     */
    measuresDimension?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension;
    /**
     * An array of dimension metadata objects.
     */
    dimensions?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCubeDimension[];
    /**
     * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsFlatDataOptionsMetadata {
    /**
     * Optional="false" Metadata used for the creation of the cube.
     */
    cube?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadataCube;
    /**
     * Option for IgPivotGridDataSourceOptionsFlatDataOptionsMetadata
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptionsFlatDataOptions {
    /**
     * Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource.
     *                     string Specifies the name of the property in which data records are held if the response is wrapped.
     *                     null Option is ignored.
     */
    responseDataKey?: string;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     *                     null Option is ignored.
     */
    responseDataType?: string;
    /**
     * Optional="false" An object containing processing instructions for the $.ig.DataSource data.
     */
    metadata?: IgPivotGridDataSourceOptionsFlatDataOptionsMetadata;
    /**
     * Option for IgPivotGridDataSourceOptionsFlatDataOptions
     */
    [optionName: string]: any;
}
interface IgPivotGridDataSourceOptions {
    /**
     * Settings for creating an instance of $.ig.OlapXmlaDataSource.
     */
    xmlaOptions?: IgPivotGridDataSourceOptionsXmlaOptions;
    /**
     * Settings for creating an instance of $.ig.OlapFlatDataSource.
     */
    flatDataOptions?: IgPivotGridDataSourceOptionsFlatDataOptions;
    /**
     * A list of measure names separated by comma (,). These will be the measures of the data source.
     */
    measures?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
     */
    filters?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
     */
    rows?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
     */
    columns?: string;
    /**
     * Option for IgPivotGridDataSourceOptions
     */
    [optionName: string]: any;
}
interface IgPivotGridLevelSortDirection {
    /**
     * Specifies the unique name of the level, which will be sorted.
     */
    levelUniqueName?: string;
    /**
     * Specifies the sort direction. If no direction is specified, the level is going to be sorted in the direction specified by the firstLevelSortDirection option.
     */
    sortDirection?: any;
    /**
     * Specifies what type of sorting will be applied to the header cells. If no behavior is specified, the level is going to be sorted with the behavior specified in the defaultLevelSortBehavior option.
     */
    sortBehavior?: any;
    /**
     * Option for IgPivotGridLevelSortDirection
     */
    [optionName: string]: any;
}
interface IgPivotGridGridOptionsFeatures {
    /**
     * Option for IgPivotGridGridOptionsFeatures
     */
    [optionName: string]: any;
}
interface IgPivotGridGridOptions {
    /**
     * Default column width that will be set for all columns.
     */
    defaultColumnWidth?: any;
    /**
     * Headers will be fixed if this option is set to true, and only the grid data will be scrollable.
     */
    fixedHeaders?: boolean;
    /**
     * Caption text that will be shown above the pivot grid header.
     */
    caption?: string;
    /**
     * A list of grid features definitions. The supported features are Resizing and Tooltips. Each feature goes with its separate options that are documented for the feature accordingly.
     */
    features?: IgPivotGridGridOptionsFeatures;
    /**
     * Initial tabIndex attribute that will be set on the container element.
     */
    tabIndex?: number;
    /**
     * Enables/disables rendering of alternating row styles (odd and even rows receive different styling). Note that if a custom jQuery template is set, this has no effect and CSS for the row should be adjusted manually in the template contents.
     */
    alternateRowStyles?: boolean;
    /**
     * Enables/disables rendering of ui-state-hover classes when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
     */
    enableHoverStyles?: boolean;
    /**
     * Option for IgPivotGridGridOptions
     */
    [optionName: string]: any;
}
interface IgPivotGridDragAndDropSettings {
    /**
     * Which element the draggable helper should be appended to while dragging.
     */
    appendTo?: any;
    /**
     * Specifies the containment for the drag helper. The area inside of which the                 helper is contained would be scrollable while dragging.
     */
    containment?: any;
    /**
     * Specifies z-index that would be set for the drag helper.
     */
    zIndex?: number;
    /**
     * Option for IgPivotGridDragAndDropSettings
     */
    [optionName: string]: any;
}
interface PivotGridHeadersRenderedEvent {
    (event: Event, ui: PivotGridHeadersRenderedEventUIParam): void;
}
interface PivotGridHeadersRenderedEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get a reference to the igGrid widget, which holds the headers.
     */
    grid?: any;
    /**
     * Used to get a reference to the headers table DOM element.
     */
    table?: any;
}
interface PivotGridRenderedEvent {
    (event: Event, ui: PivotGridRenderedEventUIParam): void;
}
interface PivotGridRenderedEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get reference to the igGrid widget, which represents the data.
     */
    grid?: any;
}
interface TupleMemberExpandingEvent {
    (event: Event, ui: TupleMemberExpandingEventUIParam): void;
}
interface TupleMemberExpandingEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get a reference to the data source.
     */
    dataSource?: any;
    /**
     * Used to get the name of axis, which holds the member and the tuple.
     */
    axisName?: any;
    /**
     * Used to get the index of the tuple in the axis.
     */
    tupleIndex?: any;
    /**
     * Used to get the index of the member in the tuple.
     */
    memberIndex?: any;
}
interface TupleMemberExpandedEvent {
    (event: Event, ui: TupleMemberExpandedEventUIParam): void;
}
interface TupleMemberExpandedEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get a reference to the data source.
     */
    dataSource?: any;
    /**
     * Used to get the name of axis, which holds the member and the tuple.
     */
    axisName?: any;
    /**
     * Used to get the index of the tuple in the axis.
     */
    tupleIndex?: any;
    /**
     * Used to get the index of the member in the tuple.
     */
    memberIndex?: any;
}
interface TupleMemberCollapsingEvent {
    (event: Event, ui: TupleMemberCollapsingEventUIParam): void;
}
interface TupleMemberCollapsingEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get a reference to the data source.
     */
    dataSource?: any;
    /**
     * Used to get the name of axis, which holds the member and the tuple.
     */
    axisName?: any;
    /**
     * Used to get the index of the tuple in the axis.
     */
    tupleIndex?: any;
    /**
     * Used to get the index of the member in the tuple.
     */
    memberIndex?: any;
}
interface TupleMemberCollapsedEvent {
    (event: Event, ui: TupleMemberCollapsedEventUIParam): void;
}
interface TupleMemberCollapsedEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get a reference to the data source.
     */
    dataSource?: any;
    /**
     * Used to get the name of axis, which holds the member and the tuple.
     */
    axisName?: any;
    /**
     * Used to get the index of the tuple in the axis.
     */
    tupleIndex?: any;
    /**
     * Used to get the index of the member in the tuple.
     */
    memberIndex?: any;
}
interface SortingEvent {
    (event: Event, ui: SortingEventUIParam): void;
}
interface SortingEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get an array of the tuple indices and sort directions that will be used.
     */
    sortDirections?: any;
}
interface SortedEvent {
    (event: Event, ui: SortedEventUIParam): void;
}
interface SortedEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get an array of the tuple indices and sort directions that were passed to the table view.
     */
    sortDirections?: any;
    /**
     * Used to get an array of the tuple indices and sort directions that were actually applied to the table view.
     */
    appliedSortDirections?: any;
}
interface HeadersSortingEvent {
    (event: Event, ui: HeadersSortingEventUIParam): void;
}
interface HeadersSortingEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get an array of the level names and sort directions that will be used.
     */
    levelSortDirections?: any;
}
interface HeadersSortedEvent {
    (event: Event, ui: HeadersSortedEventUIParam): void;
}
interface HeadersSortedEventUIParam {
    /**
     * Used to get a reference to the pivot grid.
     */
    owner?: any;
    /**
     * Used to get an array of the level names and sort directions that were used.
     */
    levelSortDirections?: any;
    /**
     * Used to get an array of the level names and sort directions that were actually applied to the table view.
     */
    appliedLevelSortDirections?: any;
}
interface IgPivotGrid {
    width?: any;
    /**
     * This is the total height of the grid.
     */
    height?: any;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     */
    dataSource?: any;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *             The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     */
    dataSourceOptions?: IgPivotGridDataSourceOptions;
    /**
     * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
     */
    deferUpdate?: boolean;
    /**
     * A boolean value indicating whether a parent in the columns is in front of its children.
     *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
     *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     */
    isParentInFrontForColumns?: boolean;
    /**
     * A boolean value indicating whether a parent in the rows is in front of its children.
     *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
     *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     */
    isParentInFrontForRows?: boolean;
    /**
     * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
     */
    compactColumnHeaders?: boolean;
    /**
     * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
     */
    compactRowHeaders?: boolean;
    /**
     * A value indicating whether the layout that row headers should be arranged.            standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.            superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).            tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The columnвЂ™s width is dependent on the defaultRowHEaderWidth, which can be set to вЂњnullвЂќ to enable the built-in auto-sizing functionality).
     *
     * Valid values:
     * "standard"
     * "superCompact"
     * "tree"
     */
    rowHeadersLayout?: any;
    /**
     * The indentation for every level column when the compactColumnHeaders is set to true.
     */
    compactColumnHeaderIndentation?: number;
    /**
     * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
     */
    compactRowHeaderIndentation?: number;
    /**
     * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
     */
    rowHeaderLinkGroupIndentation?: number;
    /**
     * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
     */
    treeRowHeaderIndentation?: number;
    /**
     * Specifies the width of the row headers.
     */
    defaultRowHeaderWidth?: number;
    /**
     * Enables sorting of the value cells in columns.
     */
    allowSorting?: boolean;
    /**
     * Specifies the default sort direction for the rows.
     */
    firstSortDirection?: any;
    /**
     * Enables sorting of the header cells in rows.
     */
    allowHeaderRowsSorting?: boolean;
    /**
     * Enables sorting of the header cells in columns.
     */
    allowHeaderColumnsSorting?: boolean;
    /**
     * An array of level sort direction items, which predefine the sorted header cells.
     */
    levelSortDirections?: IgPivotGridLevelSortDirection[];
    /**
     * Specifies the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
     *
     * Valid values:
     * "system" Sorts the headers by a specified sort key.
     * "alphabetical" Sorts alphabetically the header captions.
     */
    defaultLevelSortBehavior?: any;
    /**
     * Specifies the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
     */
    firstLevelSortDirection?: any;
    /**
     * Options specific to the igGrid that will render the pivot grid view.
     */
    gridOptions?: IgPivotGridGridOptions;
    /**
     * Settings for the drag and drop functionality of the igPivotGrid.
     */
    dragAndDropSettings?: IgPivotGridDragAndDropSettings;
    /**
     * Specifies the parent for the drop downs.
     */
    dropDownParent?: any;
    /**
     * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
     */
    disableRowsDropArea?: boolean;
    /**
     * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
     */
    disableColumnsDropArea?: boolean;
    /**
     * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
     */
    disableMeasuresDropArea?: boolean;
    /**
     * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
     */
    disableFiltersDropArea?: boolean;
    /**
     * Hide the rows drop area.
     */
    hideRowsDropArea?: boolean;
    /**
     * Hide the columns drop area.
     */
    hideColumnsDropArea?: boolean;
    /**
     * Hide the measures drop area.
     */
    hideMeasuresDropArea?: boolean;
    /**
     * Hide the filters drop area.
     */
    hideFiltersDropArea?: boolean;
    /**
     * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
     *             paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
     *             paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
     *             paramType="string" The unique name of the item.
     *             returnType="bool"  The function must return true if the item should be accepted.
     */
    customMoveValidation?: Function;
    /**
     * Fired after the data source has initialized.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.error to see if an error has occured during initialization.
     *             Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
     */
    dataSourceInitialized?: DataSourceInitializedEvent;
    /**
     * Fired after the data source has updated.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.error to see if an error has occured during update.
     *             Use ui.result to get the result of the update operation.
     */
    dataSourceUpdated?: DataSourceUpdatedEvent;
    /**
     * Event fired after the headers have been rendered.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.grid to get a reference to the igGrid widget, which holds the headers.
     *             Use ui.table to get a reference to the headers table DOM element.
     */
    pivotGridHeadersRendered?: PivotGridHeadersRenderedEvent;
    /**
     * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.grid to get reference to the igGrid widget, which represents the data.
     */
    pivotGridRendered?: PivotGridRenderedEvent;
    /**
     * Fired before the expand of the tuple member.
     *             Function takes arguments evt and ui. Return false to cancel the expanding.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     */
    tupleMemberExpanding?: TupleMemberExpandingEvent;
    /**
     * Fired after the expand of the tuple member.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     */
    tupleMemberExpanded?: TupleMemberExpandedEvent;
    /**
     * Fired before the collapse of the tuple member.
     *             Function takes arguments evt and ui. Return false to cancel the collapsing.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     */
    tupleMemberCollapsing?: TupleMemberCollapsingEvent;
    /**
     * Fired after the collapse of the tuple member.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     */
    tupleMemberCollapsed?: TupleMemberCollapsedEvent;
    /**
     * Fired before the sorting of the columns.
     *             Function takes arguments evt and ui. Return false to cancel the sorting.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.sortDirections to get an array of the tuple indices and sort directions that will be used.
     */
    sorting?: SortingEvent;
    /**
     * Fired after the sorting of the columns.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.sortDirections to get an array of the tuple indices and sort directions that were passed to the table view.
     *             Use ui.appliedSortDirections to get an array of the tuple indices and sort directions that were actually applied to the table view.
     */
    sorted?: SortedEvent;
    /**
     * Fired before the sorting of the headers.
     *             Function takes arguments evt and ui. Return false to cancel the sorting.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.levelSortDirections to get an array of the level names and sort directions that will be used.
     */
    headersSorting?: HeadersSortingEvent;
    /**
     * Fired after the sorting of the headers.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.levelSortDirections to get an array of the level names and sort directions that were used.
     *             Use ui.appliedLevelSortDirections to get an array of the level names and sort directions that were actually applied to the table view.
     */
    headersSorted?: HeadersSortedEvent;
    /**
     * Fired on drag start. Return false to cancel the dragging.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    dragStart?: DragStartEvent;
    /**
     * Fired on drag. Return false to cancel the drag.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    drag?: DragEvent;
    /**
     * Fired on drag stop.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    dragStop?: DragStopEvent;
    /**
     * Fired before a metadata item drop. Return false to cancel the drop.
     *             Use ui.targetElement for a reference to the drop target.
     *             Use ui.draggedElement for a reference to the metadata item element.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.metadataIndex to get the index at which the metadata will be inserted.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    metadataDropping?: MetadataDroppingEvent;
    /**
     * Fired after a metadata item drop.
     *             Use ui.targetElement for a reference to the drop target.
     *             Use ui.draggedElement for a reference to the dragged element.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.metadataIndex to get the index at which the metadata is inserted.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    metadataDropped?: MetadataDroppedEvent;
    /**
     * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
     *             Use ui.targetElement for a reference to the dragged element.
     *             Use ui.metadatato get a reference to the data.
     */
    metadataRemoving?: MetadataRemovingEvent;
    /**
     * Fired after a metadata item is removed when the user clicks the close icon.
     *             Use ui.metadatato get a reference to the data.
     */
    metadataRemoved?: MetadataRemovedEvent;
    /**
     * Fired before the filter members drop down opens. Return false to cancel the opening.
     *             Use ui.hierarchy for a reference to the hierarchy.
     */
    filterDropDownOpening?: FilterDropDownOpeningEvent;
    /**
     * Fired after the filter members drop down opens.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.dropDownElement for a reference to the drop down.
     */
    filterDropDownOpened?: FilterDropDownOpenedEvent;
    /**
     * Fired after the filter members are loaded.
     *             Use ui.parent to get the parent node or the igTree instance in the initial load.
     *             Use ui.rootFilterMembers for a collection with the root filter members (deprecated).
     *             Use ui.filterMembers for a collection with the newly loaded filter members.
     */
    filterMembersLoaded?: FilterMembersLoadedEvent;
    /**
     * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
     *             Use ui.dropDownElement for a reference to the drop down.
     */
    filterDropDownOk?: FilterDropDownOkEvent;
    /**
     * Fired before the filter members drop down closes. Return false to cancel the closing.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.dropDownElement for a reference to the drop down.
     */
    filterDropDownClosing?: FilterDropDownClosingEvent;
    /**
     * Fired after the filter members drop down closes.
     *             Use ui.hierarchy for a reference to the hierarchy.
     */
    filterDropDownClosed?: FilterDropDownClosedEvent;
    /**
     * Option for igPivotGrid
     */
    [optionName: string]: any;
}
interface IgPivotGridMethods {
    /**
     * Returns the igGrid instance used to render the OLAP data.
     */
    grid(): Object;
    /**
     * Triggers an update on the data source and the igPivotGrid.
     */
    updateGrid(): void;
    /**
     * Expands a member from the data source and returns true if the expand succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
     *
     * @param tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
     * @param tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
     * @param memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
     * @param shouldUpdate A flag indicating whether the data source should be updated after the expand.
     */
    expandTupleMember(tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean;
    /**
     * Collapses a member from the data source and returns true if the collapse succeeds. If the data source has a pending update, the method will return false. Note that igPivotGrid to will display the expanded result after the data source is updated.
     *
     * @param tupleLocation The name of the parent axis - 'columnAxis' or 'rowAxis'.
     * @param tupleIndex The index of the containing tuple. This index should correspond to the position of the tuple in the original unsorted result of the data source.
     * @param memberIndex The index of the member in the tuple. This index should correspond to the position of the member in the original unsorted result of the data source.
     * @param shouldUpdate A flag indicating whether the data source should be updated after the expand.
     */
    collapseTupleMember(tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean;
    /**
     * Returns an array with the applied sort directions on the igPivotGrid's columns. The returned array contains objects with the following properties:
     * memberNames: The names of the members in the tuple.
     * tupleIndex: The index of the tuple on the column axis in the original unsorted result.
     * sortDirection: The direction of the sort - ascending or descending.
     */
    appliedColumnSortDirections(): any[];
    /**
     * Returns an array with the applied level sort direction items, which were used for the sorting of the header cells. The returned array contains objects with the following properties:
     * levelUniqueName: Specifies the unique name of the level, which was sorted.
     * sortDirection: The direction of the header sort - ascending or descending.
     */
    appliedLevelSortDirections(): any[];
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     * 1. Remove custom CSS classes that were added.
     * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     * 3. Unbind all events that were bound.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igPivotGrid"): IgPivotGridMethods;
}
interface JQuery {
    igPivotGrid(methodName: "grid"): Object;
    igPivotGrid(methodName: "updateGrid"): void;
    igPivotGrid(methodName: "expandTupleMember", tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean;
    igPivotGrid(methodName: "collapseTupleMember", tupleLocation: string, tupleIndex: number, memberIndex: number, shouldUpdate?: boolean): boolean;
    igPivotGrid(methodName: "appliedColumnSortDirections"): any[];
    igPivotGrid(methodName: "appliedLevelSortDirections"): any[];
    igPivotGrid(methodName: "destroy"): void;
    /**
     */
    igPivotGrid(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igPivotGrid(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * This is the total height of the grid.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "height"): any;
    /**
     * This is the total height of the grid.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *             The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dataSourceOptions"): IgPivotGridDataSourceOptions;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *             The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dataSourceOptions", optionValue: IgPivotGridDataSourceOptions): void;
    /**
     * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "deferUpdate"): boolean;
    /**
     * Setting deferUpdate to true will not apply changes to the data source until the updateGrid method is called.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "deferUpdate", optionValue: boolean): void;
    /**
     * A boolean value indicating whether a parent in the columns is in front of its children.
     *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
     *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "isParentInFrontForColumns"): boolean;
    /**
     * A boolean value indicating whether a parent in the columns is in front of its children.
     *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
     *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "isParentInFrontForColumns", optionValue: boolean): void;
    /**
     * A boolean value indicating whether a parent in the rows is in front of its children.
     *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
     *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "isParentInFrontForRows"): boolean;
    /**
     * A boolean value indicating whether a parent in the rows is in front of its children.
     *             If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
     *             If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "isParentInFrontForRows", optionValue: boolean): void;
    /**
     * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "compactColumnHeaders"): boolean;
    /**
     * A boolean value indicating whether the column headers should be arranged for compact header layout i.e. each hierarchy is in a single row.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "compactColumnHeaders", optionValue: boolean): void;
    /**
     * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "compactRowHeaders"): boolean;
    /**
     * A boolean value indicating whether the row headers should be arranged for compact header layout i.e. each hierarchy is in a single column.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "compactRowHeaders", optionValue: boolean): void;
    /**
     * A value indicating whether the layout that row headers should be arranged.            standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.            superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).            tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The columnвЂ™s width is dependent on the defaultRowHEaderWidth, which can be set to вЂњnullвЂќ to enable the built-in auto-sizing functionality).
     */
    igPivotGrid(optionLiteral: 'option', optionName: "rowHeadersLayout"): any;
    /**
     * A value indicating whether the layout that row headers should be arranged.            standard Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on its right.            superCompact Each hierarchy in the rows is displayed in a separate column. The child members of a member in the rows are displayed on above or below it (Depending on the isParentInFrontForRows setting).            tree All hierarchies in the rows are displayed in a tree-like structure in a single column (The columnвЂ™s width is dependent on the defaultRowHEaderWidth, which can be set to вЂњnullвЂќ to enable the built-in auto-sizing functionality).
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "rowHeadersLayout", optionValue: any): void;
    /**
     * The indentation for every level column when the compactColumnHeaders is set to true.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "compactColumnHeaderIndentation"): number;
    /**
     * The indentation for every level column when the compactColumnHeaders is set to true.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "compactColumnHeaderIndentation", optionValue: number): void;
    /**
     * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "compactRowHeaderIndentation"): number;
    /**
     * The indentation for every level row when the rowHeadersLayout is set to 'superCompact'.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "compactRowHeaderIndentation", optionValue: number): void;
    /**
     * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "rowHeaderLinkGroupIndentation"): number;
    /**
     * Use it when you set rowHeadersLayout to "tree". This property will set a margin between the level's caption and the next level's (underlined text) caption.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "rowHeaderLinkGroupIndentation", optionValue: number): void;
    /**
     * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "treeRowHeaderIndentation"): number;
    /**
     * The indentation for the neighboring hierarchy's level row when the rowHeaderLayout is set to 'tree'.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "treeRowHeaderIndentation", optionValue: number): void;
    /**
     * Gets the width of the row headers.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "defaultRowHeaderWidth"): number;
    /**
     * Sets the width of the row headers.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "defaultRowHeaderWidth", optionValue: number): void;
    /**
     * Enables sorting of the value cells in columns.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "allowSorting"): boolean;
    /**
     * Enables sorting of the value cells in columns.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "allowSorting", optionValue: boolean): void;
    /**
     * Gets the default sort direction for the rows.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "firstSortDirection"): any;
    /**
     * Sets the default sort direction for the rows.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "firstSortDirection", optionValue: any): void;
    /**
     * Enables sorting of the header cells in rows.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "allowHeaderRowsSorting"): boolean;
    /**
     * Enables sorting of the header cells in rows.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "allowHeaderRowsSorting", optionValue: boolean): void;
    /**
     * Enables sorting of the header cells in columns.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "allowHeaderColumnsSorting"): boolean;
    /**
     * Enables sorting of the header cells in columns.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "allowHeaderColumnsSorting", optionValue: boolean): void;
    /**
     * An array of level sort direction items, which predefine the sorted header cells.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "levelSortDirections"): IgPivotGridLevelSortDirection[];
    /**
     * An array of level sort direction items, which predefine the sorted header cells.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "levelSortDirections", optionValue: IgPivotGridLevelSortDirection[]): void;
    /**
     * Gets the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "defaultLevelSortBehavior"): any;
    /**
     * Sets the default sort behavior for the levels if no sort behavior is specified in an item from the levelSortDirections option.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "defaultLevelSortBehavior", optionValue: any): void;
    /**
     * Gets the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "firstLevelSortDirection"): any;
    /**
     * Sets the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "firstLevelSortDirection", optionValue: any): void;
    /**
     * Options specific to the igGrid that will render the pivot grid view.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "gridOptions"): IgPivotGridGridOptions;
    /**
     * Options specific to the igGrid that will render the pivot grid view.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "gridOptions", optionValue: IgPivotGridGridOptions): void;
    /**
     * Settings for the drag and drop functionality of the igPivotGrid.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dragAndDropSettings"): IgPivotGridDragAndDropSettings;
    /**
     * Settings for the drag and drop functionality of the igPivotGrid.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dragAndDropSettings", optionValue: IgPivotGridDragAndDropSettings): void;
    /**
     * Gets the parent for the drop downs.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dropDownParent"): any;
    /**
     * Sets the parent for the drop downs.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dropDownParent", optionValue: any): void;
    /**
     * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "disableRowsDropArea"): boolean;
    /**
     * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "disableRowsDropArea", optionValue: boolean): void;
    /**
     * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "disableColumnsDropArea"): boolean;
    /**
     * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "disableColumnsDropArea", optionValue: boolean): void;
    /**
     * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "disableMeasuresDropArea"): boolean;
    /**
     * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "disableMeasuresDropArea", optionValue: boolean): void;
    /**
     * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "disableFiltersDropArea"): boolean;
    /**
     * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "disableFiltersDropArea", optionValue: boolean): void;
    /**
     * Hide the rows drop area.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "hideRowsDropArea"): boolean;
    /**
     * Hide the rows drop area.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "hideRowsDropArea", optionValue: boolean): void;
    /**
     * Hide the columns drop area.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "hideColumnsDropArea"): boolean;
    /**
     * Hide the columns drop area.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "hideColumnsDropArea", optionValue: boolean): void;
    /**
     * Hide the measures drop area.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "hideMeasuresDropArea"): boolean;
    /**
     * Hide the measures drop area.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "hideMeasuresDropArea", optionValue: boolean): void;
    /**
     * Hide the filters drop area.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "hideFiltersDropArea"): boolean;
    /**
     * Hide the filters drop area.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "hideFiltersDropArea", optionValue: boolean): void;
    /**
     * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
     *             paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
     *             paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
     *             paramType="string" The unique name of the item.
     *             returnType="bool"  The function must return true if the item should be accepted.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "customMoveValidation"): Function;
    /**
     * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
     *             paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
     *             paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
     *             paramType="string" The unique name of the item.
     *             returnType="bool"  The function must return true if the item should be accepted.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "customMoveValidation", optionValue: Function): void;
    /**
     * Fired after the data source has initialized.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.error to see if an error has occured during initialization.
     *             Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dataSourceInitialized"): DataSourceInitializedEvent;
    /**
     * Fired after the data source has initialized.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.error to see if an error has occured during initialization.
     *             Use ui.metadataTreeRoot to get a reference to the root of the data source metatadata root item.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dataSourceInitialized", optionValue: DataSourceInitializedEvent): void;
    /**
     * Fired after the data source has updated.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.error to see if an error has occured during update.
     *             Use ui.result to get the result of the update operation.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dataSourceUpdated"): DataSourceUpdatedEvent;
    /**
     * Fired after the data source has updated.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.error to see if an error has occured during update.
     *             Use ui.result to get the result of the update operation.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dataSourceUpdated", optionValue: DataSourceUpdatedEvent): void;
    /**
     * Event fired after the headers have been rendered.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.grid to get a reference to the igGrid widget, which holds the headers.
     *             Use ui.table to get a reference to the headers table DOM element.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "pivotGridHeadersRendered"): PivotGridHeadersRenderedEvent;
    /**
     * Event fired after the headers have been rendered.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.grid to get a reference to the igGrid widget, which holds the headers.
     *             Use ui.table to get a reference to the headers table DOM element.
     *
     * @optionValue Define event handler function.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "pivotGridHeadersRendered", optionValue: PivotGridHeadersRenderedEvent): void;
    /**
     * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.grid to get reference to the igGrid widget, which represents the data.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "pivotGridRendered"): PivotGridRenderedEvent;
    /**
     * Event fired after the whole grid widget has been rendered (including headers, footers, etc.).
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.grid to get reference to the igGrid widget, which represents the data.
     *
     * @optionValue Define event handler function.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "pivotGridRendered", optionValue: PivotGridRenderedEvent): void;
    /**
     * Fired before the expand of the tuple member.
     *             Function takes arguments evt and ui. Return false to cancel the expanding.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberExpanding"): TupleMemberExpandingEvent;
    /**
     * Fired before the expand of the tuple member.
     *             Function takes arguments evt and ui. Return false to cancel the expanding.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberExpanding", optionValue: TupleMemberExpandingEvent): void;
    /**
     * Fired after the expand of the tuple member.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberExpanded"): TupleMemberExpandedEvent;
    /**
     * Fired after the expand of the tuple member.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberExpanded", optionValue: TupleMemberExpandedEvent): void;
    /**
     * Fired before the collapse of the tuple member.
     *             Function takes arguments evt and ui. Return false to cancel the collapsing.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberCollapsing"): TupleMemberCollapsingEvent;
    /**
     * Fired before the collapse of the tuple member.
     *             Function takes arguments evt and ui. Return false to cancel the collapsing.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberCollapsing", optionValue: TupleMemberCollapsingEvent): void;
    /**
     * Fired after the collapse of the tuple member.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberCollapsed"): TupleMemberCollapsedEvent;
    /**
     * Fired after the collapse of the tuple member.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.dataSource to get a reference to the data source.
     *             Use ui.axisName to get the name of axis, which holds the member and the tuple.
     *             Use ui.tupleIndex to get the index of the tuple in the axis.
     *             Use ui.memberIndex to get the index of the member in the tuple.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "tupleMemberCollapsed", optionValue: TupleMemberCollapsedEvent): void;
    /**
     * Fired before the sorting of the columns.
     *             Function takes arguments evt and ui. Return false to cancel the sorting.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.sortDirections to get an array of the tuple indices and sort directions that will be used.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "sorting"): SortingEvent;
    /**
     * Fired before the sorting of the columns.
     *             Function takes arguments evt and ui. Return false to cancel the sorting.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.sortDirections to get an array of the tuple indices and sort directions that will be used.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "sorting", optionValue: SortingEvent): void;
    /**
     * Fired after the sorting of the columns.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.sortDirections to get an array of the tuple indices and sort directions that were passed to the table view.
     *             Use ui.appliedSortDirections to get an array of the tuple indices and sort directions that were actually applied to the table view.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "sorted"): SortedEvent;
    /**
     * Fired after the sorting of the columns.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.sortDirections to get an array of the tuple indices and sort directions that were passed to the table view.
     *             Use ui.appliedSortDirections to get an array of the tuple indices and sort directions that were actually applied to the table view.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "sorted", optionValue: SortedEvent): void;
    /**
     * Fired before the sorting of the headers.
     *             Function takes arguments evt and ui. Return false to cancel the sorting.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.levelSortDirections to get an array of the level names and sort directions that will be used.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "headersSorting"): HeadersSortingEvent;
    /**
     * Fired before the sorting of the headers.
     *             Function takes arguments evt and ui. Return false to cancel the sorting.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.levelSortDirections to get an array of the level names and sort directions that will be used.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "headersSorting", optionValue: HeadersSortingEvent): void;
    /**
     * Fired after the sorting of the headers.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.levelSortDirections to get an array of the level names and sort directions that were used.
     *             Use ui.appliedLevelSortDirections to get an array of the level names and sort directions that were actually applied to the table view.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "headersSorted"): HeadersSortedEvent;
    /**
     * Fired after the sorting of the headers.
     *             Function takes arguments evt and ui.
     *             Use ui.owner to get a reference to the pivot grid.
     *             Use ui.levelSortDirections to get an array of the level names and sort directions that were used.
     *             Use ui.appliedLevelSortDirections to get an array of the level names and sort directions that were actually applied to the table view.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "headersSorted", optionValue: HeadersSortedEvent): void;
    /**
     * Fired on drag start. Return false to cancel the dragging.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dragStart"): DragStartEvent;
    /**
     * Fired on drag start. Return false to cancel the dragging.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dragStart", optionValue: DragStartEvent): void;
    /**
     * Fired on drag. Return false to cancel the drag.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "drag"): DragEvent;
    /**
     * Fired on drag. Return false to cancel the drag.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "drag", optionValue: DragEvent): void;
    /**
     * Fired on drag stop.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dragStop"): DragStopEvent;
    /**
     * Fired on drag stop.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.originalPosition to get a reference to the original position of the draggable element.
     *             Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "dragStop", optionValue: DragStopEvent): void;
    /**
     * Fired before a metadata item drop. Return false to cancel the drop.
     *             Use ui.targetElement for a reference to the drop target.
     *             Use ui.draggedElement for a reference to the metadata item element.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.metadataIndex to get the index at which the metadata will be inserted.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "metadataDropping"): MetadataDroppingEvent;
    /**
     * Fired before a metadata item drop. Return false to cancel the drop.
     *             Use ui.targetElement for a reference to the drop target.
     *             Use ui.draggedElement for a reference to the metadata item element.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.metadataIndex to get the index at which the metadata will be inserted.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "metadataDropping", optionValue: MetadataDroppingEvent): void;
    /**
     * Fired after a metadata item drop.
     *             Use ui.targetElement for a reference to the drop target.
     *             Use ui.draggedElement for a reference to the dragged element.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.metadataIndex to get the index at which the metadata is inserted.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.position to get a reference to the current position of the draggable element.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "metadataDropped"): MetadataDroppedEvent;
    /**
     * Fired after a metadata item drop.
     *             Use ui.targetElement for a reference to the drop target.
     *             Use ui.draggedElement for a reference to the dragged element.
     *             Use ui.metadatato get a reference to the data.
     *             Use ui.metadataIndex to get the index at which the metadata is inserted.
     *             Use ui.helper to get a reference to the helper.
     *             Use ui.offset to get a reference to the offset.
     *             Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "metadataDropped", optionValue: MetadataDroppedEvent): void;
    /**
     * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
     *             Use ui.targetElement for a reference to the dragged element.
     *             Use ui.metadatato get a reference to the data.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "metadataRemoving"): MetadataRemovingEvent;
    /**
     * Fired before a metadata item is removed when the user clicks the close icon. Return false to cancel the removing.
     *             Use ui.targetElement for a reference to the dragged element.
     *             Use ui.metadatato get a reference to the data.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "metadataRemoving", optionValue: MetadataRemovingEvent): void;
    /**
     * Fired after a metadata item is removed when the user clicks the close icon.
     *             Use ui.metadatato get a reference to the data.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "metadataRemoved"): MetadataRemovedEvent;
    /**
     * Fired after a metadata item is removed when the user clicks the close icon.
     *             Use ui.metadatato get a reference to the data.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "metadataRemoved", optionValue: MetadataRemovedEvent): void;
    /**
     * Fired before the filter members drop down opens. Return false to cancel the opening.
     *             Use ui.hierarchy for a reference to the hierarchy.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOpening"): FilterDropDownOpeningEvent;
    /**
     * Fired before the filter members drop down opens. Return false to cancel the opening.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOpening", optionValue: FilterDropDownOpeningEvent): void;
    /**
     * Fired after the filter members drop down opens.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.dropDownElement for a reference to the drop down.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOpened"): FilterDropDownOpenedEvent;
    /**
     * Fired after the filter members drop down opens.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.dropDownElement for a reference to the drop down.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOpened", optionValue: FilterDropDownOpenedEvent): void;
    /**
     * Fired after the filter members are loaded.
     *             Use ui.parent to get the parent node or the igTree instance in the initial load.
     *             Use ui.rootFilterMembers for a collection with the root filter members (deprecated).
     *             Use ui.filterMembers for a collection with the newly loaded filter members.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterMembersLoaded"): FilterMembersLoadedEvent;
    /**
     * Fired after the filter members are loaded.
     *             Use ui.parent to get the parent node or the igTree instance in the initial load.
     *             Use ui.rootFilterMembers for a collection with the root filter members (deprecated).
     *             Use ui.filterMembers for a collection with the newly loaded filter members.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterMembersLoaded", optionValue: FilterMembersLoadedEvent): void;
    /**
     * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
     *             Use ui.dropDownElement for a reference to the drop down.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOk"): FilterDropDownOkEvent;
    /**
     * Fired after the OK button in the filter members drop down is clicked. Return false to cancel the applying of the filters.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.filterMembers for a collection with the selected filter members. If all filter members are selected the collection will be empty.
     *             Use ui.dropDownElement for a reference to the drop down.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownOk", optionValue: FilterDropDownOkEvent): void;
    /**
     * Fired before the filter members drop down closes. Return false to cancel the closing.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.dropDownElement for a reference to the drop down.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownClosing"): FilterDropDownClosingEvent;
    /**
     * Fired before the filter members drop down closes. Return false to cancel the closing.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *             Use ui.dropDownElement for a reference to the drop down.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownClosing", optionValue: FilterDropDownClosingEvent): void;
    /**
     * Fired after the filter members drop down closes.
     *             Use ui.hierarchy for a reference to the hierarchy.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownClosed"): FilterDropDownClosedEvent;
    /**
     * Fired after the filter members drop down closes.
     *             Use ui.hierarchy for a reference to the hierarchy.
     *
     * @optionValue New value to be set.
     */
    igPivotGrid(optionLiteral: 'option', optionName: "filterDropDownClosed", optionValue: FilterDropDownClosedEvent): void;
    igPivotGrid(options: IgPivotGrid): JQuery;
    igPivotGrid(optionLiteral: 'option', optionName: string): any;
    igPivotGrid(optionLiteral: 'option', options: IgPivotGrid): JQuery;
    igPivotGrid(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igPivotGrid(methodName: string, ...methodParams: any[]): any;
}
interface IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions {
    /**
     * The value is applied to XmlHttpRequest.withCredentials if supported by the user agent.
     * Setting this property to true will allow IE8/IE9 to make authenticated cross-origin requests to tusted domains through XmlHttpRequest instead of XDomainRequest
     * and will prompt the user for credentials.
     */
    withCredentials?: boolean;
    /**
     * A callback to be invoked right before the request is send to the server. Extends beforeSend callback of jQuery.ajax’s options object.
     */
    beforeSend?: Function;
    /**
     * Option for IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings {
    /**
     * Optional="true" a value indicating whether a NON EMPTY clause is present on ROWS axis. Default value is true
     */
    nonEmptyOnRows?: boolean;
    /**
     * Optional="true" a value indicating whether a NON EMPTY clause is present on COLUMNS axis. Default value is true
     */
    nonEmptyOnColumns?: boolean;
    /**
     * Optional="true" a value indicating whether a members' set expressions on ROWS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
     */
    addCalculatedMembersOnRows?: boolean;
    /**
     * Optional="true" a value indicating whether a members' set expressions on COLUMNS axis should be wrapped with AddCalculatedMembers MDX method. Default value is true
     */
    addCalculatedMembersOnColumns?: boolean;
    /**
     * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on ROWS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
     */
    dimensionPropertiesOnRows?: any[];
    /**
     * Optional="true" a string array with the names of intrinsic non-context sensitive member properties applied on COLUMNS axis. By defult CHILDREN_CARDINALITY and PARENT_UNIQUE_NAME properties are always added to DIMENSION PROPERTIES
     */
    dimensionPropertiesOnColumns?: any[];
    /**
     * Option for IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsXmlaOptions {
    /**
     * Optional="false" The URL of the XMLA server.
     */
    serverUrl?: string;
    /**
     * The catalog name.
     */
    catalog?: string;
    /**
     * The name of the cube in the data source.
     */
    cube?: string;
    /**
     * The name of the measure group in the data source.
     */
    measureGroup?: string;
    /**
     * An object containing information about how the request to the XMLA server should be processed.
     */
    requestOptions?: IgPivotViewDataSourceOptionsXmlaOptionsRequestOptions;
    /**
     * Enables/disables caching of the XMLA result object.
     */
    enableResultCache?: boolean;
    /**
     * Additional properties sent with every discover request.
     * The object is treated as a key/value store where each property name is used as the key and the property value as the value.
     */
    discoverProperties?: any;
    /**
     * Additional properties sent with every execute request.
     * The object is treated as a key/value store where each property name is used as the key and the property value as the value.
     */
    executeProperties?: any;
    /**
     * Optional="true" a javascript object containing information about how the request to the xmla server should be processed
     */
    mdxSettings?: IgPivotViewDataSourceOptionsXmlaOptionsMdxSettings;
    /**
     * Option for IgPivotViewDataSourceOptionsXmlaOptions
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure {
    /**
     * Optional="false" A unique name for the measure.
     */
    name?: string;
    /**
     * A caption for the measure.
     */
    caption?: string;
    /**
     * Optional="false" An aggregator function called when each cell is evaluated.
     * Returns a value for the cell. If the returned value is null, no cell will be created in for the data source result.
     */
    aggregator?: Function;
    /**
     * The path used when displaying the measure in the user interface. Nested folders are indicated by a backslash (\).
     */
    displayFolder?: string;
    /**
     * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension {
    /**
     * A unique name for the measures dimension.
     * The default value is "Measures". This name is used to create the names of dimensions using the following pattern:
     * [<measuresDimensionMetadata.name>].[<measureMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the measures dimension.
     * The default value is "Measures".
     */
    caption?: string;
    /**
     * An array of measure metadata objects.
     */
    measures?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimensionMeasure[];
    /**
     * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel {
    /**
     * Optional="false" A name for the level.
     * The unique name of the level is formed using the following pattern:
     * {<hierarchy.uniqueName>}.[<levelMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the level.
     */
    caption?: string;
    /**
     * A function called for each item of the data source array when level members are created.
     * Based on the item parameter the function should return a value that will form the $.ig.Member’s name and caption.
     */
    memberProvider?: Function;
    /**
     * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie {
    /**
     * Optional="false" A name for the hierarchy.
     * The unique name of the hierarchy is formed using the following pattern:
     * [<parentDimension.name>].[<hierarchyMetadata.name>]
     */
    name?: string;
    /**
     * A caption for the hierarchy.
     */
    caption?: string;
    /**
     * The path to be used when displaying the hierarchy in the user interface.
     * Nested folders are indicated by a backslash (\).
     * The folder hierarchy will appear under parent dimension node.
     */
    displayFolder?: string;
    /**
     * An array of level metadata objects.
     */
    levels?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchieLevel[];
    /**
     * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension {
    /**
     * Optional="false" A unique name for the dimension.
     */
    name?: string;
    /**
     * A caption for the dimension.
     */
    caption?: string;
    /**
     * An array of hierarchy metadata objects.
     */
    hierarchies?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimensionHierarchie[];
    /**
     * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube {
    /**
     * Optional="false" A unique name for the cube.
     */
    name?: string;
    /**
     * A caption for the cube.
     */
    caption?: string;
    /**
     * An object providing information about the measures' root node.
     */
    measuresDimension?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeMeasuresDimension;
    /**
     * An array of dimension metadata objects.
     */
    dimensions?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCubeDimension[];
    /**
     * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsFlatDataOptionsMetadata {
    /**
     * Optional="false" Metadata used for the creation of the cube.
     */
    cube?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadataCube;
    /**
     * Option for IgPivotViewDataSourceOptionsFlatDataOptionsMetadata
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptionsFlatDataOptions {
    /**
     * Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource.
     * string Specifies the name of the property in which data records are held if the response is wrapped.
     * null Option is ignored.
     */
    responseDataKey?: string;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     * null Option is ignored.
     */
    responseDataType?: string;
    /**
     * Optional="false" An object containing processing instructions for the $.ig.DataSource data.
     */
    metadata?: IgPivotViewDataSourceOptionsFlatDataOptionsMetadata;
    /**
     * Option for IgPivotViewDataSourceOptionsFlatDataOptions
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSourceOptions {
    /**
     * Settings for creating an instance of $.ig.OlapXmlaDataSource.
     */
    xmlaOptions?: IgPivotViewDataSourceOptionsXmlaOptions;
    /**
     * Settings for creating an instance of $.ig.OlapFlatDataSource.
     */
    flatDataOptions?: IgPivotViewDataSourceOptionsFlatDataOptions;
    /**
     * A list of measure names separated by comma (,). These will be the measures of the data source.
     */
    measures?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be hierarchies in the filters of the data source.
     */
    filters?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the rows of the data source.
     */
    rows?: string;
    /**
     * A list of hierarchy names separated by comma (,). These will be the hierarchies in the columns of the data source.
     */
    columns?: string;
    /**
     * Option for IgPivotViewDataSourceOptions
     */
    [optionName: string]: any;
}
interface IgPivotViewPivotGridOptionsLevelSortDirection {
    /**
     * Specifies the unique name of the level, which will be sorted.
     */
    levelUniqueName?: string;
    /**
     * Specifies the sort direction. If no direction is specified,the level is going to be sorted in the direction specified by the firstLevelSortDirection option.
     */
    sortDirection?: any;
    /**
     * Option for IgPivotViewPivotGridOptionsLevelSortDirection
     */
    [optionName: string]: any;
}
interface IgPivotViewPivotGridOptionsGridOptionsFeatures {
    /**
     * Option for IgPivotViewPivotGridOptionsGridOptionsFeatures
     */
    [optionName: string]: any;
}
interface IgPivotViewPivotGridOptionsGridOptions {
    /**
     * Default column width that will be set for all columns.
     */
    defaultColumnWidth?: any;
    /**
     * Headers will be fixed if this option is set to true, and only the grid data will be scrollable.
     */
    fixedHeaders?: boolean;
    /**
     * Caption text that will be shown above the pivot grid header.
     */
    caption?: string;
    /**
     * A list of grid features definitions. The supported features are Resizing and Tooltips. Each feature goes with its separate options that are documented for the feature accordingly.
     */
    features?: IgPivotViewPivotGridOptionsGridOptionsFeatures;
    /**
     * Initial tabIndex attribute that will be set on the container element.
     */
    tabIndex?: number;
    /**
     * Enables/disables rendering of alternating row styles (odd and even rows receive different styling). Note that if a custom jQuery template is set, this has no effect and CSS for the row should be adjusted manually in the template contents.
     */
    alternateRowStyles?: boolean;
    /**
     * Enables/disables rendering of ui-state-hover classes when the mouse is over a record. This can be useful in templating scenarios, for example, where we don't want to apply hover styling to templated content.
     */
    enableHoverStyles?: boolean;
    /**
     * Option for IgPivotViewPivotGridOptionsGridOptions
     */
    [optionName: string]: any;
}
interface IgPivotViewPivotGridOptionsDragAndDropSettings {
    /**
     * Which element the draggable helper should be appended to while dragging.
     */
    appendTo?: any;
    /**
     * Specifies the containment for the drag helper. The area inside of which the helper is contained would be scrollable while dragging.
     */
    containment?: any;
    /**
     * Specifies z-index that would be set for the drag helper.
     */
    zIndex?: number;
    /**
     * Option for IgPivotViewPivotGridOptionsDragAndDropSettings
     */
    [optionName: string]: any;
}
interface IgPivotViewPivotGridOptions {
    /**
     * A boolean value indicating whether a parent in the columns is in front of its children.
     * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
     * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     */
    isParentInFrontForColumns?: boolean;
    /**
     * A boolean value indicating whether a parent in the rows is in front of its children.
     * If set to true, the query set sorts members in a level in their natural order - child members immediately follow their parent members.
     * If set to false the query set sorts the members in a level using a post-natural order. In other words, child members precede their parents.
     */
    isParentInFrontForRows?: boolean;
    /**
     * A boolean value indicating wheter the column headers should be arranged for compact header layout – each hieararchy is in a single row.
     */
    compactColumnHeaders?: boolean;
    /**
     * A value indicating wheter the layout that row headers should be arranged. For compact header layout – each hieararchy is in a single column.
     */
    rowHeadersLayout?: any;
    /**
     * The indentation for every level column when the compactColumnHeaders is set to true.
     */
    compactColumnHeaderIndentation?: number;
    /**
     * The indentation for every level row when the rowHeadersLayout is set to 'compact'.
     */
    compactRowHeaderIndentation?: number;
    /**
     * Typle="number" Specifies the width of the row headers.
     */
    defaultRowHeaderWidth?: number;
    /**
     * Enables sorting of the value cells in columns.
     */
    allowSorting?: boolean;
    /**
     * Spefies the default sort direction for the rows.
     */
    firstSortDirection?: any;
    /**
     * Enables sorting of the header cells in rows.
     */
    allowHeaderRowsSorting?: boolean;
    /**
     * Enables sorting of the header cells in columns.
     */
    allowHeaderColumnsSorting?: boolean;
    /**
     * An array of level sort direction items, which predefine the sorted header cells.
     */
    levelSortDirections?: IgPivotViewPivotGridOptionsLevelSortDirection[];
    /**
     * Spefies the default sort direction for the levels if no sort direction is specified in an item from the levelSortDirections option.
     */
    firstLevelSortDirection?: any;
    /**
     * Options specific to the igGrid that will render the pivot grid view.
     */
    gridOptions?: IgPivotViewPivotGridOptionsGridOptions;
    /**
     * Settings for the drag and drop functionality of the igPivotDataSelector.
     */
    dragAndDropSettings?: IgPivotViewPivotGridOptionsDragAndDropSettings;
    /**
     * Specifies the parent for the drop downs.
     */
    dropDownParent?: any;
    /**
     * Disable the drag and drop for the rows drop area and the ability to use filtering and remove items from it.
     */
    disableRowsDropArea?: boolean;
    /**
     * Disable the drag and drop for the columns drop area and the ability to use filtering and remove items from it.
     */
    disableColumnsDropArea?: boolean;
    /**
     * Disable the drag and drop for the measures drop area and the ability to use filtering and remove items from it.
     */
    disableMeasuresDropArea?: boolean;
    /**
     * Disable the drag and drop for the filters drop area and the ability to use filtering and remove items from it.
     */
    disableFiltersDropArea?: boolean;
    /**
     * Hide the rows drop area.
     */
    hideRowsDropArea?: boolean;
    /**
     * Hide the columns drop area.
     */
    hideColumnsDropArea?: boolean;
    /**
     * Hide the measures drop area.
     */
    hideMeasuresDropArea?: boolean;
    /**
     * Hide the filters drop area.
     */
    hideFiltersDropArea?: boolean;
    /**
     * A function that will be called to determine if an item can be moved in or dropped on an area of the pivot grid.
     * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
     * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
     * paramType="string" The unique name of the item.
     * returnType="bool"  The function must return true if the item should be accepted.
     */
    customMoveValidation?: Function;
    /**
     * Option for IgPivotViewPivotGridOptions
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSelectorOptionsDragAndDropSettings {
    /**
     * Which element the draggable helper should be appended to while dragging.
     */
    appendTo?: any;
    /**
     * Specifies the containment for the drag helper. The area inside of which the helper is contained would be scrollable while dragging.
     */
    containment?: any;
    /**
     * Specifies z-index that would be set for the drag helper.
     */
    zIndex?: number;
    /**
     * Option for IgPivotViewDataSelectorOptionsDragAndDropSettings
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSelectorOptions {
    /**
     * Settings for the drag and drop functionality of the igPivotDataSelector.
     */
    dragAndDropSettings?: IgPivotViewDataSelectorOptionsDragAndDropSettings;
    /**
     * Specifies the parent for the drop downs.
     */
    dropDownParent?: any;
    /**
     * A function that will be called to determine if an item can be moved in or dropped on an area of the data selector.
     * paramType="string" The location where the item will be moved - igPivotGrid, igPivotDataSelector, filters, rows, columns or measures.
     * paramType="string" The type of the item - Hierarchy, Measure or MeasureList.
     * paramType="string" The unique name of the item.
     * returnType="bool"  The function must return true if the item should be accepted.
     */
    customMoveValidation?: Function;
    /**
     * Option for IgPivotViewDataSelectorOptions
     */
    [optionName: string]: any;
}
interface IgPivotViewPivotGridPanel {
    /**
     * Determines if the panel containing the igPivotGrid will be resizable.
     */
    resizable?: boolean;
    /**
     * Determines if the panel containing the igPivotGrid will be collapsible.
     */
    collapsible?: boolean;
    /**
     * Determines if the panel containing the igPivotGrid will initially collapsed.
     */
    collapsed?: boolean;
    /**
     * Determines the size of the igPivotGrid panel.
     */
    size?: any;
    /**
     * Option for IgPivotViewPivotGridPanel
     */
    [optionName: string]: any;
}
interface IgPivotViewDataSelectorPanel {
    /**
     * Determines the position of the data selector panel inside the igPivotView widget.
     */
    location?: any;
    /**
     * Determines if the panel containing the igPivotDataSelector will be resizable.
     */
    resizable?: boolean;
    /**
     * Determines if the panel containing the igPivotDataSelector will be collapsible.
     */
    collapsible?: boolean;
    /**
     * Determines if the panel containing the igPivotDataSelector will initially collapsed.
     */
    collapsed?: boolean;
    /**
     * Determines the size of the igPivotDataSelector  panel. The recommended value is 250px.
     */
    size?: any;
    /**
     * Option for IgPivotViewDataSelectorPanel
     */
    [optionName: string]: any;
}
interface IgPivotView {
    width?: any;
    height?: any;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     */
    dataSource?: any;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     */
    dataSourceOptions?: IgPivotViewDataSourceOptions;
    /**
     * Configuration settings that will be assigned to the igPivotGrid widget.
     */
    pivotGridOptions?: IgPivotViewPivotGridOptions;
    /**
     * Configuration settings that will be assigned to the igPivotDataSelector widget.
     */
    dataSelectorOptions?: IgPivotViewDataSelectorOptions;
    /**
     * Configuration settings for the panel containing the igPivotGrid.
     */
    pivotGridPanel?: IgPivotViewPivotGridPanel;
    /**
     * Configuration settings for the panel containing the igPivotDataSelector.
     */
    dataSelectorPanel?: IgPivotViewDataSelectorPanel;
    /**
     * Option for igPivotView
     */
    [optionName: string]: any;
}
interface IgPivotViewMethods {
    /**
     * Returns the igPivotGrid instance of the pivot view.
     */
    pivotGrid(): Object;
    /**
     * Returns the igPivotDataSelector instance of the pivot view.
     */
    dataSelector(): Object;
    /**
     * Returns the igSplitter instance used to separate the pivot grid and the data selector.
     */
    splitter(): Object;
    /**
     * Destroy is part of the jQuery UI widget API and does the following:
     * 1. Remove custom CSS classes that were added.
     * 2. Unwrap any wrapping elements such as scrolling divs and other containers.
     * 3. Unbind all events that were bound.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igPivotView"): IgPivotViewMethods;
}
interface JQuery {
    igPivotView(methodName: "pivotGrid"): Object;
    igPivotView(methodName: "dataSelector"): Object;
    igPivotView(methodName: "splitter"): Object;
    igPivotView(methodName: "destroy"): void;
    /**
     */
    igPivotView(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igPivotView(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igPivotView(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igPivotView(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     */
    igPivotView(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * An instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     *
     * @optionValue New value to be set.
     */
    igPivotView(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     */
    igPivotView(optionLiteral: 'option', optionName: "dataSourceOptions"): IgPivotViewDataSourceOptions;
    /**
     * An object that will be used to create an instance of $.ig.OlapXmlaDataSource or $.ig.OlapFlatDataSource.
     * The provided value must contain an object with settings for one of the data source types - xmlaOptions or flatDataOptions.
     *
     * @optionValue New value to be set.
     */
    igPivotView(optionLiteral: 'option', optionName: "dataSourceOptions", optionValue: IgPivotViewDataSourceOptions): void;
    /**
     * Configuration settings that will be assigned to the igPivotGrid widget.
     */
    igPivotView(optionLiteral: 'option', optionName: "pivotGridOptions"): IgPivotViewPivotGridOptions;
    /**
     * Configuration settings that will be assigned to the igPivotGrid widget.
     *
     * @optionValue New value to be set.
     */
    igPivotView(optionLiteral: 'option', optionName: "pivotGridOptions", optionValue: IgPivotViewPivotGridOptions): void;
    /**
     * Configuration settings that will be assigned to the igPivotDataSelector widget.
     */
    igPivotView(optionLiteral: 'option', optionName: "dataSelectorOptions"): IgPivotViewDataSelectorOptions;
    /**
     * Configuration settings that will be assigned to the igPivotDataSelector widget.
     *
     * @optionValue New value to be set.
     */
    igPivotView(optionLiteral: 'option', optionName: "dataSelectorOptions", optionValue: IgPivotViewDataSelectorOptions): void;
    /**
     * Configuration settings for the panel containing the igPivotGrid.
     */
    igPivotView(optionLiteral: 'option', optionName: "pivotGridPanel"): IgPivotViewPivotGridPanel;
    /**
     * Configuration settings for the panel containing the igPivotGrid.
     *
     * @optionValue New value to be set.
     */
    igPivotView(optionLiteral: 'option', optionName: "pivotGridPanel", optionValue: IgPivotViewPivotGridPanel): void;
    /**
     * Configuration settings for the panel containing the igPivotDataSelector.
     */
    igPivotView(optionLiteral: 'option', optionName: "dataSelectorPanel"): IgPivotViewDataSelectorPanel;
    /**
     * Configuration settings for the panel containing the igPivotDataSelector.
     *
     * @optionValue New value to be set.
     */
    igPivotView(optionLiteral: 'option', optionName: "dataSelectorPanel", optionValue: IgPivotViewDataSelectorPanel): void;
    igPivotView(options: IgPivotView): JQuery;
    igPivotView(optionLiteral: 'option', optionName: string): any;
    igPivotView(optionLiteral: 'option', options: IgPivotView): JQuery;
    igPivotView(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igPivotView(methodName: string, ...methodParams: any[]): any;
}
interface IgPopover {
    /**
     * Controls whether the popover will close on blur or not
     */
    closeOnBlur?: boolean;
    /**
     * controls the direction in which the control shows relative to the target element
     *
     * Valid values:
     * "auto" lets the control show on the side where enough space is available with the following priority top > bottom > right > left
     * "left" shows popover on the left side of the target element
     * "right" shows popover on the right side of the target element
     * "top" shows popover on the top of the target element
     * "bottom" shows popover on the bottom of the target element
     */
    direction?: any;
    /**
     * controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
     *
     * Valid values:
     * "auto" lets the control choose a position depending on available space with the following priority balanced > end > start
     * "balanced" the popover is positioned at the middle of the target element
     * "start" the popover is positioned at the beginning of the target element
     * "end" the popover is positioned at the end of the target element
     */
    position?: any;
    /**
     * defines width for the popover. leave null for auto.
     */
    width?: any;
    /**
     * defines height for the popover. leave null for auto
     */
    height?: any;
    /**
     * defines width the popover won't go under the value even if no specific one is set.
     */
    minWidth?: any;
    /**
     * defines width the popover won't exceed even if no specific one is set.
     */
    maxWidth?: any;
    /**
     * defines height the popover won't exceed even if no specific one is set.
     */
    maxHeight?: any;
    /**
     * Sets the time popover fades in and out when showing/hiding
     */
    animationDuration?: number;
    /**
     * sets the content for the popover container. If left null the content will be get from the target.string   String content of the popover container
     */
    contentTemplate?: any;
    /**
     * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
     */
    selectors?: string;
    /**
     * Sets the content for the popover header
     */
    headerTemplate?: IgPopoverHeaderTemplate;
    showOn?: any;
    /**
     * Sets the containment for the popover. Accepts a jQuery object
     */
    containment?: any;
    /**
     * Controls where the popover DOM should be attached to.
     *
     * Valid values:
     * "object" A reference to the parent jQuery object
     */
    appendTo?: any;
    /**
     * Event fired before popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will show for.
     * Use ui.content to get or set the content to be shown as a string.
     * Use ui.popover to get the popover element showing.
     * Use ui.owner to get reference to the igPopover widget
     */
    showing?: ShowingEvent;
    /**
     * Event fired after popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover showed for.
     * Use ui.content to get the content that was shown as a string.
     * Use ui.popover to get the popover element shown.
     * Use ui.owner to get reference to the igPopover widget
     */
    shown?: ShownEvent;
    /**
     * Event fired before popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will hide for.
     * Use ui.content to get the current content displayed in the popover as a string.
     * Use ui.popover to get the popover element hiding.
     * Use ui.owner to get reference to the igPopover widget
     */
    hiding?: HidingEvent;
    /**
     * Event fired after popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover is hidden for.
     * Use ui.content to get the content displayed in the popover as a string.
     * Use ui.popover to get the popover element hidden.
     * Use ui.owner to get reference to the igPopover widget
     */
    hidden?: HiddenEvent;
    /**
     * Option for igPopover
     */
    [optionName: string]: any;
}
interface IgPopoverMethods {
    /**
     * Destroys the popover widget.
     */
    destroy(): void;
    /**
     * Returns the ID of the element the popover is attached to
     */
    id(): string;
    /**
     * Returns the container for the popover contents
     */
    container(): Object;
    /**
     * Shows the popover for the specified target
     *
     * @param trg     The element to show popover for.
     * @param content     The string to set for the popover to show.
     */
    show(trg?: Element, content?: string): void;
    /**
     * Hides the popover for the specified target
     */
    hide(): void;
    /**
     * Gets the currently set content for the popover container
     */
    getContent(): string;
    /**
     * Sets the content for the popover container
     *
     * @param newCnt     The popover content to set.
     */
    setContent(newCnt: string): void;
    /**
     * Gets the popover current target
     */
    target(): Object;
    /**
     * Gets the current coordinates of the popover
     */
    getCoordinates(): Object;
    /**
     * Set the currently coordinates of the popover
     *
     * @param pos     The popover coordinates in pixels.
     */
    setCoordinates(pos: Object): void;
}
interface JQuery {
    data(propertyName: "igPopover"): IgPopoverMethods;
}
interface JQuery {
    igPopover(methodName: "destroy"): void;
    igPopover(methodName: "id"): string;
    igPopover(methodName: "container"): Object;
    igPopover(methodName: "show", trg?: Element, content?: string): void;
    igPopover(methodName: "hide"): void;
    igPopover(methodName: "getContent"): string;
    igPopover(methodName: "setContent", newCnt: string): void;
    igPopover(methodName: "target"): Object;
    igPopover(methodName: "getCoordinates"): Object;
    igPopover(methodName: "setCoordinates", pos: Object): void;
    /**
     * Controls whether the popover will close on blur or not
     */
    igPopover(optionLiteral: 'option', optionName: "closeOnBlur"): boolean;
    /**
     * Controls whether the popover will close on blur or not
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "closeOnBlur", optionValue: boolean): void;
    /**
     * Controls the direction in which the control shows relative to the target element
     */
    igPopover(optionLiteral: 'option', optionName: "direction"): any;
    /**
     * Controls the direction in which the control shows relative to the target element
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "direction", optionValue: any): void;
    /**
     * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
     */
    igPopover(optionLiteral: 'option', optionName: "position"): any;
    /**
     * Controls the position of the popover according to the target element in case the popover is larger than the target on the side we want to position, if the popover is smaller it should always be in the middle of the visible area
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "position", optionValue: any): void;
    /**
     * Defines width for the popover. leave null for auto.
     */
    igPopover(optionLiteral: 'option', optionName: "width"): any;
    /**
     * Defines width for the popover. leave null for auto.
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * Defines height for the popover. leave null for auto
     */
    igPopover(optionLiteral: 'option', optionName: "height"): any;
    /**
     * Defines height for the popover. leave null for auto
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Defines width the popover won't go under the value even if no specific one is set.
     */
    igPopover(optionLiteral: 'option', optionName: "minWidth"): any;
    /**
     * Defines width the popover won't go under the value even if no specific one is set.
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "minWidth", optionValue: any): void;
    /**
     * Defines width the popover won't exceed even if no specific one is set.
     */
    igPopover(optionLiteral: 'option', optionName: "maxWidth"): any;
    /**
     * Defines width the popover won't exceed even if no specific one is set.
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "maxWidth", optionValue: any): void;
    /**
     * Defines height the popover won't exceed even if no specific one is set.
     */
    igPopover(optionLiteral: 'option', optionName: "maxHeight"): any;
    /**
     * Defines height the popover won't exceed even if no specific one is set.
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "maxHeight", optionValue: any): void;
    /**
     * The time popover fades in and out when showing/hiding
     */
    igPopover(optionLiteral: 'option', optionName: "animationDuration"): number;
    /**
     * Sets the time popover fades in and out when showing/hiding
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;
    /**
     * The content for the popover container. If left null the content will be get from the target.string   String content of the popover container
     */
    igPopover(optionLiteral: 'option', optionName: "contentTemplate"): any;
    /**
     * Sets the content for the popover container. If left null the content will be get from the target.string   String content of the popover container
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "contentTemplate", optionValue: any): void;
    /**
     * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
     */
    igPopover(optionLiteral: 'option', optionName: "selectors"): string;
    /**
     * Selectors indicating which items should show popovers. The predefined value is [title]. Customize if you're using something other then the title attribute for the popover content, or if you need a different selector for event delegation. When changing this option, you likely need to also change the contentTemplate option
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "selectors", optionValue: string): void;
    /**
     * The content for the popover header
     */
    igPopover(optionLiteral: 'option', optionName: "headerTemplate"): IgPopoverHeaderTemplate;
    /**
     * Sets the content for the popover header
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "headerTemplate", optionValue: IgPopoverHeaderTemplate): void;
    /**
     */
    igPopover(optionLiteral: 'option', optionName: "showOn"): any;
    /**
     */
    igPopover(optionLiteral: 'option', optionName: "showOn", optionValue: any): void;
    /**
     * The containment for the popover. Accepts a jQuery object
     */
    igPopover(optionLiteral: 'option', optionName: "containment"): any;
    /**
     * Sets the containment for the popover. Accepts a jQuery object
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "containment", optionValue: any): void;
    /**
     * Controls where the popover DOM should be attached to.
     */
    igPopover(optionLiteral: 'option', optionName: "appendTo"): any;
    /**
     * Controls where the popover DOM should be attached to.
     *
     * @optionValue New value to be set.
     */
    igPopover(optionLiteral: 'option', optionName: "appendTo", optionValue: any): void;
    /**
     * Event fired before popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will show for.
     * Use ui.content to get or set the content to be shown as a string.
     * Use ui.popover to get the popover element showing.
     * Use ui.owner to get reference to the igPopover widget
     */
    igPopover(optionLiteral: 'option', optionName: "showing"): ShowingEvent;
    /**
     * Event fired before popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will show for.
     * Use ui.content to get or set the content to be shown as a string.
     * Use ui.popover to get the popover element showing.
     * Use ui.owner to get reference to the igPopover widget
     *
     * @optionValue Define event handler function.
     */
    igPopover(optionLiteral: 'option', optionName: "showing", optionValue: ShowingEvent): void;
    /**
     * Event fired after popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover showed for.
     * Use ui.content to get the content that was shown as a string.
     * Use ui.popover to get the popover element shown.
     * Use ui.owner to get reference to the igPopover widget
     */
    igPopover(optionLiteral: 'option', optionName: "shown"): ShownEvent;
    /**
     * Event fired after popover is shown.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover showed for.
     * Use ui.content to get the content that was shown as a string.
     * Use ui.popover to get the popover element shown.
     * Use ui.owner to get reference to the igPopover widget
     *
     * @optionValue Define event handler function.
     */
    igPopover(optionLiteral: 'option', optionName: "shown", optionValue: ShownEvent): void;
    /**
     * Event fired before popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will hide for.
     * Use ui.content to get the current content displayed in the popover as a string.
     * Use ui.popover to get the popover element hiding.
     * Use ui.owner to get reference to the igPopover widget
     */
    igPopover(optionLiteral: 'option', optionName: "hiding"): HidingEvent;
    /**
     * Event fired before popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover will hide for.
     * Use ui.content to get the current content displayed in the popover as a string.
     * Use ui.popover to get the popover element hiding.
     * Use ui.owner to get reference to the igPopover widget
     *
     * @optionValue Define event handler function.
     */
    igPopover(optionLiteral: 'option', optionName: "hiding", optionValue: HidingEvent): void;
    /**
     * Event fired after popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover is hidden for.
     * Use ui.content to get the content displayed in the popover as a string.
     * Use ui.popover to get the popover element hidden.
     * Use ui.owner to get reference to the igPopover widget
     */
    igPopover(optionLiteral: 'option', optionName: "hidden"): HiddenEvent;
    /**
     * Event fired after popover is hidden.
     * Function takes arguments evt and ui.
     * Use ui.element to get the element the popover is hidden for.
     * Use ui.content to get the content displayed in the popover as a string.
     * Use ui.popover to get the popover element hidden.
     * Use ui.owner to get reference to the igPopover widget
     *
     * @optionValue Define event handler function.
     */
    igPopover(optionLiteral: 'option', optionName: "hidden", optionValue: HiddenEvent): void;
    igPopover(options: IgPopover): JQuery;
    igPopover(optionLiteral: 'option', optionName: string): any;
    igPopover(optionLiteral: 'option', options: IgPopover): JQuery;
    igPopover(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igPopover(methodName: string, ...methodParams: any[]): any;
}
interface IgRadialGaugeRange {
    /**
     * Gets or sets the name of the range.
     */
    name?: string;
    /**
     * Gets or sets the starting value of the range.
     */
    startValue?: number;
    /**
     * Gets or sets the ending value of the range.
     */
    endValue?: number;
    /**
     * Gets or sets the starting value of the outer extent of the range.
     */
    outerStartExtent?: number;
    /**
     * Gets or sets the ending value of the outer extent of the range.
     */
    outerEndExtent?: number;
    /**
     * Gets or sets the starting value of the inner extent of the range.
     */
    innerStartExtent?: number;
    /**
     * Gets or sets the ending value of the inner extent of the range.
     */
    innerEndExtent?: number;
    /**
     * Gets or sets the brush for the entire range.
     */
    brush?: string;
    /**
     * Gets or sets the brush for the outline of the range.
     */
    outline?: string;
    /**
     * Gets or sets the thickness of the range outline.
     */
    strokeThickness?: number;
    /**
     * Gets or sets the flag used to determine if the range should be removed. If set to true, the range (if existing) is removed.
     */
    remove?: boolean;
    /**
     * Option for IgRadialGaugeRange
     */
    [optionName: string]: any;
}
interface IgRadialGauge {
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * Gets or sets the scale ranges to render on the linear gauge.
     */
    ranges?: IgRadialGaugeRange[];
    /**
     * Gets or sets a collection of brushes to be used as the palette for gauge ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    rangeBrushes?: any;
    /**
     * Gets or sets a collection of brushes to be used as the palette for gauge outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    rangeOutlines?: any;
    /**
     * Gets or sets the minimum value of the scale.
     */
    minimumValue?: number;
    /**
     * Gets or sets the maximum value of the scale.
     */
    maximumValue?: number;
    /**
     * Gets or sets the interval to use for the scale.
     */
    interval?: number;
    /**
     * Gets or sets the x position of the center of the gauge with the value ranging from 0 to 1.
     */
    centerX?: number;
    /**
     * Gets or sets the y position of the center of the gauge with the value ranging from 0 to 1.
     */
    centerY?: number;
    /**
     * Gets or sets the value at which to point the needle of the gauge.
     */
    value?: number;
    /**
     * Gets or sets the start angle for the scale in degrees.
     */
    scaleStartAngle?: number;
    /**
     * Gets or sets the end angle for the scale in degrees.
     */
    scaleEndAngle?: number;
    /**
     * Gets or sets the direction in which the scale sweeps around the center from the start angle to end angle.
     *
     * Valid values:
     * "counterclockwise"
     * "clockwise"
     */
    scaleSweepDirection?: any;
    /**
     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.
     */
    transitionDuration?: number;
    /**
     * Gets or sets the easing function used to morph the current series.
     */
    transitionEasingFunction?: any;
    /**
     * Gets or sets the brush to use when rendering the fill of the needle.
     */
    needleBrush?: string;
    /**
     * Gets or sets the brush to use when rendering the outline of the needle.
     */
    needleOutline?: string;
    /**
     * Gets or sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needleStartExtent?: number;
    /**
     * Gets or sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needleEndExtent?: number;
    /**
     * Gets or sets the shape to use when rendering the needle from a number of options.
     *
     * Valid values:
     * "none"
     * "rectangle"
     * "triangle"
     * "needle"
     * "trapezoid"
     * "rectangleWithBulb"
     * "triangleWithBulb"
     * "needleWithBulb"
     * "trapezoidWithBulb"
     */
    needleShape?: any;
    /**
     * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needleStartWidthRatio?: number;
    /**
     * Gets or sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needleEndWidthRatio?: number;
    /**
     * Gets or sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needleBaseFeatureWidthRatio?: number;
    /**
     * Gets or sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needleBaseFeatureExtent?: number;
    /**
     * Gets or sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needlePointFeatureWidthRatio?: number;
    /**
     * Gets or sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needlePointFeatureExtent?: number;
    /**
     * Gets or sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    needlePivotWidthRatio?: number;
    /**
     * Gets or sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
     */
    needlePivotInnerWidthRatio?: number;
    /**
     * Gets or sets the shape to use for the needle cap.
     *
     * Valid values:
     * "none"
     * "circle"
     * "circleWithHole"
     * "circleOverlay"
     * "circleOverlayWithHole"
     * "circleUnderlay"
     * "circleUnderlayWithHole"
     */
    needlePivotShape?: any;
    /**
     * Gets or sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    scaleStartExtent?: number;
    /**
     * Gets or sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
     */
    needlePivotBrush?: string;
    /**
     * Gets or sets the brush to use for the outlines of the needle cap.
     */
    needlePivotOutline?: string;
    needleStrokeThickness?: number;
    needlePivotStrokeThickness?: number;
    /**
     * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    scaleEndExtent?: number;
    /**
     * Gets or sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    labelExtent?: number;
    /**
     * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     */
    labelInterval?: number;
    /**
     * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    tickStartExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    tickEndExtent?: number;
    /**
     * Gets or sets the stroke thickness to use when rendering ticks.
     */
    tickStrokeThickness?: number;
    /**
     * Gets or sets the brush to use for the major tickmarks.
     */
    tickBrush?: string;
    /**
     * Gets or sets the brush to use for the label font.
     */
    fontBrush?: string;
    /**
     * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    minorTickStartExtent?: number;
    /**
     * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    minorTickEndExtent?: number;
    /**
     * Gets or sets the stroke thickness to use when rendering minor ticks.
     */
    minorTickStrokeThickness?: number;
    /**
     * Gets or sets the brush to use for the minor tickmarks.
     */
    minorTickBrush?: string;
    /**
     * Gets or sets the number of minor tickmarks to place between major tickmarks.
     */
    minorTickCount?: number;
    /**
     * Gets or sets the brush to use to fill the background of the scale.
     */
    scaleBrush?: string;
    /**
     * Gets or sets the brush to use to fill the backing of the gauge.
     */
    backingBrush?: string;
    /**
     * Gets or sets the brush to use for the outline of the backing.
     */
    backingOutline?: string;
    /**
     * Gets or sets the stroke thickness of the backing outline.
     */
    backingStrokeThickness?: number;
    /**
     * Gets or sets the outer extent of the gauge backing.
     */
    backingOuterExtent?: number;
    /**
     * Gets or sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
     */
    backingOversweep?: number;
    /**
     * Gets or sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
     */
    scaleOversweep?: number;
    /**
     * Gets or sets the over or shape to use for the excess fill area for the scale.
     *
     * Valid values:
     * "auto"
     * "circular"
     * "fitted"
     */
    scaleOversweepShape?: any;
    /**
     * Gets or sets the corner rounding radius to use for the fitted scale backings.
     */
    backingCornerRadius?: number;
    /**
     * Gets or sets the inner extent of the gauge backing.
     */
    backingInnerExtent?: number;
    /**
     * Gets or sets the type of shape to use for the backing of the gauge.
     *
     * Valid values:
     * "circular"
     * "fitted"
     */
    backingShape?: any;
    /**
     * Gets or sets the multiplying factor to apply to the normal radius of the gauge.
     * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
     * This introduces a multiplicative factor to that value.
     */
    radiusMultiplier?: number;
    /**
     * Gets or sets the strategy to use for omitting labels if the first and last label have the same value.
     *
     * Valid values:
     * "omitLast"
     * "omitFirst"
     * "omitNeither"
     * "omitBoth"
     */
    duplicateLabelOmissionStrategy?: any;
    font?: any;
    /**
     * Gets the transition progress of the animation when the control is animating.
     */
    transitionProgress?: number;
    formatLabel?: FormatLabelEvent;
    alignLabel?: AlignLabelEvent;
    /**
     * Option for igRadialGauge
     */
    [optionName: string]: any;
}
interface IgRadialGaugeMethods {
    /**
     * Returns a string containing the names of all the ranges delimited with a \n symbol.
     */
    getRangeNames(): string;
    /**
     * Adds a new range to the radial gauge.
     *
     * @param value
     */
    addRange(value: Object): void;
    /**
     * Removes a specified range.
     *
     * @param value
     */
    removeRange(value: Object): void;
    /**
     * Updates the range.
     *
     * @param value
     */
    updateRange(value: Object): void;
    /**
     * Clears the ranges in the radial gauge.
     */
    clearRanges(): void;
    /**
     * Scales a value on the gauge's main scale to an angle around the center point of the gauge, in radians.
     *
     * @param value
     */
    scaleValue(value: Object): void;
    /**
     * Unscales a value from an angle in radians to the represented value along the main scale of the gauge.
     *
     * @param value
     */
    unscaleValue(value: Object): void;
    /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
     *
     * @param x
     * @param y
     */
    getValueForPoint(x: Object, y: Object): number;
    /**
     * Gets the point on the gauge for a given scale value and extent.
     *
     * @param value
     * @param extent
     */
    getPointForValue(value: Object, extent: Object): void;
    /**
     * Returns true if the main gauge needle bounding box contains the point provided, otherwise false.
     *
     * @param x
     * @param y
     */
    needleContainsPoint(x: Object, y: Object): void;
    /**
     * Exports the visual data for the radial gauge.
     */
    exportVisualData(): void;
    /**
     * Flushes the gauge.
     */
    flush(): void;
    /**
     * Destroys widget.
     */
    destroy(): void;
    /**
     * Returns true if the style was updated for the radial gauge.
     */
    styleUpdated(): void;
}
interface JQuery {
    data(propertyName: "igRadialGauge"): IgRadialGaugeMethods;
}
interface JQuery {
    igRadialGauge(methodName: "getRangeNames"): string;
    igRadialGauge(methodName: "addRange", value: Object): void;
    igRadialGauge(methodName: "removeRange", value: Object): void;
    igRadialGauge(methodName: "updateRange", value: Object): void;
    igRadialGauge(methodName: "clearRanges"): void;
    igRadialGauge(methodName: "scaleValue", value: Object): void;
    igRadialGauge(methodName: "unscaleValue", value: Object): void;
    igRadialGauge(methodName: "getValueForPoint", x: Object, y: Object): number;
    igRadialGauge(methodName: "getPointForValue", value: Object, extent: Object): void;
    igRadialGauge(methodName: "needleContainsPoint", x: Object, y: Object): void;
    igRadialGauge(methodName: "exportVisualData"): void;
    igRadialGauge(methodName: "flush"): void;
    igRadialGauge(methodName: "destroy"): void;
    igRadialGauge(methodName: "styleUpdated"): void;
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igRadialGauge(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igRadialGauge(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the gauge. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  the scale ranges to render on the linear gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "ranges"): IgRadialGaugeRange[];
    /**
     * Sets the scale ranges to render on the linear gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "ranges", optionValue: IgRadialGaugeRange[]): void;
    /**
     * Gets  a collection of brushes to be used as the palette for gauge ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "rangeBrushes"): any;
    /**
     * Sets a collection of brushes to be used as the palette for gauge ranges.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "rangeBrushes", optionValue: any): void;
    /**
     * Gets  a collection of brushes to be used as the palette for gauge outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "rangeOutlines"): any;
    /**
     * Sets a collection of brushes to be used as the palette for gauge outlines.
     * The value provided should be an array of css color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "rangeOutlines", optionValue: any): void;
    /**
     * Gets  the minimum value of the scale.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minimumValue"): number;
    /**
     * Sets the minimum value of the scale.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minimumValue", optionValue: number): void;
    /**
     * Gets  the maximum value of the scale.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "maximumValue"): number;
    /**
     * Sets the maximum value of the scale.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "maximumValue", optionValue: number): void;
    /**
     * Gets  the interval to use for the scale.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "interval"): number;
    /**
     * Sets the interval to use for the scale.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "interval", optionValue: number): void;
    /**
     * Gets  the x position of the center of the gauge with the value ranging from 0 to 1.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "centerX"): number;
    /**
     * Sets the x position of the center of the gauge with the value ranging from 0 to 1.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "centerX", optionValue: number): void;
    /**
     * Gets  the y position of the center of the gauge with the value ranging from 0 to 1.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "centerY"): number;
    /**
     * Sets the y position of the center of the gauge with the value ranging from 0 to 1.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "centerY", optionValue: number): void;
    /**
     * Gets  the value at which to point the needle of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "value"): number;
    /**
     * Sets the value at which to point the needle of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "value", optionValue: number): void;
    /**
     * Gets  the start angle for the scale in degrees.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleStartAngle"): number;
    /**
     * Sets the start angle for the scale in degrees.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleStartAngle", optionValue: number): void;
    /**
     * Gets  the end angle for the scale in degrees.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleEndAngle"): number;
    /**
     * Sets the end angle for the scale in degrees.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleEndAngle", optionValue: number): void;
    /**
     * Gets  the direction in which the scale sweeps around the center from the start angle to end angle.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleSweepDirection"): any;
    /**
     * Sets the direction in which the scale sweeps around the center from the start angle to end angle.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleSweepDirection", optionValue: any): void;
    /**
     * Gets  the number of milliseconds over which changes to the gauge should be animated.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "transitionDuration"): number;
    /**
     * Sets the number of milliseconds over which changes to the gauge should be animated.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "transitionDuration", optionValue: number): void;
    /**
     * Gets  the easing function used to morph the current series.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "transitionEasingFunction"): any;
    /**
     * Sets the easing function used to morph the current series.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "transitionEasingFunction", optionValue: any): void;
    /**
     * Gets  the brush to use when rendering the fill of the needle.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleBrush"): string;
    /**
     * Sets the brush to use when rendering the fill of the needle.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleBrush", optionValue: string): void;
    /**
     * Gets  the brush to use when rendering the outline of the needle.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleOutline"): string;
    /**
     * Sets the brush to use when rendering the outline of the needle.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleOutline", optionValue: string): void;
    /**
     * Gets  the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleStartExtent"): number;
    /**
     * Sets the extent (from -1 to 1) at which to start rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleStartExtent", optionValue: number): void;
    /**
     * Gets  the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleEndExtent"): number;
    /**
     * Sets the extent (from -1 to 1) at which to end rendering the needle, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleEndExtent", optionValue: number): void;
    /**
     * Gets  the shape to use when rendering the needle from a number of options.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleShape"): any;
    /**
     * Sets the shape to use when rendering the needle from a number of options.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleShape", optionValue: any): void;
    /**
     * Gets  the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleStartWidthRatio"): number;
    /**
     * Sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleStartWidthRatio", optionValue: number): void;
    /**
     * Gets  the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleEndWidthRatio"): number;
    /**
     * Sets the width of the needle at its point using a value from (0 to 1). Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleEndWidthRatio", optionValue: number): void;
    /**
     * Gets  the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleBaseFeatureWidthRatio"): number;
    /**
     * Sets the width of the needle at its feature which is closest to the base (e.g. a bulb) with a value from 0 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleBaseFeatureWidthRatio", optionValue: number): void;
    /**
     * Gets  the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleBaseFeatureExtent"): number;
    /**
     * Sets the extent of the feature which is closest to the base (e.g. a bulb) with a value from -1 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleBaseFeatureExtent", optionValue: number): void;
    /**
     * Gets  the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePointFeatureWidthRatio"): number;
    /**
     * Sets the width of the needle at its feature which is closest to the point (e.g. the tapering point of a needle) with a value from 0 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePointFeatureWidthRatio", optionValue: number): void;
    /**
     * Gets  the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePointFeatureExtent"): number;
    /**
     * Sets the extent of the feature which is closest to the point (e.g. the tapering point of a needle) with a value from -1 to 1. Note: Only some needle shapes respect this property.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePointFeatureExtent", optionValue: number): void;
    /**
     * Gets  the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotWidthRatio"): number;
    /**
     * Sets the width of the cap of the needle with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotWidthRatio", optionValue: number): void;
    /**
     * Gets  the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotInnerWidthRatio"): number;
    /**
     * Sets the width of the inner cutout section of the needle cap with a value from 0 to 1. Note: Will only take effect if you have a cap set on the needle that has a cutout section.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotInnerWidthRatio", optionValue: number): void;
    /**
     * Gets  the shape to use for the needle cap.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotShape"): any;
    /**
     * Sets the shape to use for the needle cap.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotShape", optionValue: any): void;
    /**
     * Gets  the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleStartExtent"): number;
    /**
     * Sets the position at which to start rendering the scale, measured from the center of the gauge as a value from 0 to 1.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleStartExtent", optionValue: number): void;
    /**
     * Gets  the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotBrush"): string;
    /**
     * Sets the brush to use for filling the needle cap. Note: this only applies to certain cap shapes.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the outlines of the needle cap.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotOutline"): string;
    /**
     * Sets the brush to use for the outlines of the needle cap.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotOutline", optionValue: string): void;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleStrokeThickness"): number;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needleStrokeThickness", optionValue: number): void;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotStrokeThickness"): number;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "needlePivotStrokeThickness", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleEndExtent", optionValue: number): void;
    /**
     * Gets  the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "labelExtent"): number;
    /**
     * Sets the position at which to put the labels as a value from 0 to 1, measured form the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "labelExtent", optionValue: number): void;
    /**
     * Gets  the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "labelInterval"): number;
    /**
     * Sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "labelInterval", optionValue: number): void;
    /**
     * Gets  the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "tickStartExtent"): number;
    /**
     * Sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "tickStartExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "tickEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "tickEndExtent", optionValue: number): void;
    /**
     * Gets  the stroke thickness to use when rendering ticks.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "tickStrokeThickness"): number;
    /**
     * Sets the stroke thickness to use when rendering ticks.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "tickStrokeThickness", optionValue: number): void;
    /**
     * Gets  the brush to use for the major tickmarks.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "tickBrush"): string;
    /**
     * Sets the brush to use for the major tickmarks.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "tickBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the label font.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "fontBrush"): string;
    /**
     * Sets the brush to use for the label font.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "fontBrush", optionValue: string): void;
    /**
     * Gets  the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickStartExtent"): number;
    /**
     * Sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickStartExtent", optionValue: number): void;
    /**
     * Gets  the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickEndExtent"): number;
    /**
     * Sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the center of the gauge.
     * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickEndExtent", optionValue: number): void;
    /**
     * Gets  the stroke thickness to use when rendering minor ticks.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickStrokeThickness"): number;
    /**
     * Sets the stroke thickness to use when rendering minor ticks.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickStrokeThickness", optionValue: number): void;
    /**
     * Gets  the brush to use for the minor tickmarks.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickBrush"): string;
    /**
     * Sets the brush to use for the minor tickmarks.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickBrush", optionValue: string): void;
    /**
     * Gets  the number of minor tickmarks to place between major tickmarks.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickCount"): number;
    /**
     * Sets the number of minor tickmarks to place between major tickmarks.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "minorTickCount", optionValue: number): void;
    /**
     * Gets  the brush to use to fill the background of the scale.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleBrush"): string;
    /**
     * Sets the brush to use to fill the background of the scale.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleBrush", optionValue: string): void;
    /**
     * Gets  the brush to use to fill the backing of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingBrush"): string;
    /**
     * Sets the brush to use to fill the backing of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingBrush", optionValue: string): void;
    /**
     * Gets  the brush to use for the outline of the backing.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingOutline"): string;
    /**
     * Sets the brush to use for the outline of the backing.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingOutline", optionValue: string): void;
    /**
     * Gets  the stroke thickness of the backing outline.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingStrokeThickness"): number;
    /**
     * Sets the stroke thickness of the backing outline.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingStrokeThickness", optionValue: number): void;
    /**
     * Gets  the outer extent of the gauge backing.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingOuterExtent"): number;
    /**
     * Sets the outer extent of the gauge backing.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingOuterExtent", optionValue: number): void;
    /**
     * Gets  the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingOversweep"): number;
    /**
     * Sets the over sweep angle to apply to the backing if it is displaying fitted (in degrees). Must be greater or equal to 0.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingOversweep", optionValue: number): void;
    /**
     * Gets  the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleOversweep"): number;
    /**
     * Sets the extra degrees of sweep to apply to the scale background. Must be greater or equal to 0.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleOversweep", optionValue: number): void;
    /**
     * Gets  the over or shape to use for the excess fill area for the scale.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleOversweepShape"): any;
    /**
     * Sets the over or shape to use for the excess fill area for the scale.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "scaleOversweepShape", optionValue: any): void;
    /**
     * Gets  the corner rounding radius to use for the fitted scale backings.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingCornerRadius"): number;
    /**
     * Sets the corner rounding radius to use for the fitted scale backings.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingCornerRadius", optionValue: number): void;
    /**
     * Gets  the inner extent of the gauge backing.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingInnerExtent"): number;
    /**
     * Sets the inner extent of the gauge backing.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingInnerExtent", optionValue: number): void;
    /**
     * Gets  the type of shape to use for the backing of the gauge.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingShape"): any;
    /**
     * Sets the type of shape to use for the backing of the gauge.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "backingShape", optionValue: any): void;
    /**
     * Gets  the multiplying factor to apply to the normal radius of the gauge.
     * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
     * This introduces a multiplicative factor to that value.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "radiusMultiplier"): number;
    /**
     * Sets the multiplying factor to apply to the normal radius of the gauge.
     * The radius of the gauge is defined by the minimum of the width and height of the control divided by 2.0.
     * This introduces a multiplicative factor to that value.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "radiusMultiplier", optionValue: number): void;
    /**
     * Gets  the strategy to use for omitting labels if the first and last label have the same value.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "duplicateLabelOmissionStrategy"): any;
    /**
     * Sets the strategy to use for omitting labels if the first and last label have the same value.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "duplicateLabelOmissionStrategy", optionValue: any): void;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "font"): any;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "font", optionValue: any): void;
    /**
     * Gets the transition progress of the animation when the control is animating.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "transitionProgress"): number;
    /**
     * The transition progress of the animation when the control is animating.
     *
     * @optionValue New value to be set.
     */
    igRadialGauge(optionLiteral: 'option', optionName: "transitionProgress", optionValue: number): void;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "formatLabel"): FormatLabelEvent;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "formatLabel", optionValue: FormatLabelEvent): void;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "alignLabel"): AlignLabelEvent;
    /**
     */
    igRadialGauge(optionLiteral: 'option', optionName: "alignLabel", optionValue: AlignLabelEvent): void;
    igRadialGauge(options: IgRadialGauge): JQuery;
    igRadialGauge(optionLiteral: 'option', optionName: string): any;
    igRadialGauge(optionLiteral: 'option', options: IgRadialGauge): JQuery;
    igRadialGauge(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igRadialGauge(methodName: string, ...methodParams: any[]): any;
}
interface IgRadialMenuItem {
    /**
     * Gets or sets a value indicating what type of item is being provided.
     *
     * Valid values:
     * "button"
     * "coloritem"
     * "colorwell"
     * "list"
     * "numericitem"
     * "numericgauge"
     */
    type?: any;
    /**
     * Gets or sets the unique name of the item within the menu.
     */
    name?: string;
    /**
     * Gets or sets the name of the child item that represents the most recently interacted with item. Note other item properties may be set to "{RecentItem}" to have them automatically set to values of the associated recent child item.
     */
    recentItemName?: string;
    /**
     * Returns or sets the value of the numeric item.
     */
    value?: number;
    /**
     * Returns or sets the value while the user is interacting with the element.
     */
    pendingValue?: any;
    /**
     * Returns or sets a boolean indicating if the children should be rotated to align with the location of this element.
     */
    autoRotateChildren?: boolean;
    /**
     * Returns or sets the brush used for the arc displayed within the tool when checked.
     */
    checkedHighlightBrush?: string;
    /**
     * Returns or sets the foreground for the inner area of the item.
     */
    foreground?: string;
    /**
     * Returns or sets the brush used for the arc displayed within the tool when hot tracked.
     */
    highlightBrush?: string;
    /**
     * Returns or sets the background of the inner area of the menu item.
     */
    innerAreaFill?: string;
    /**
     * Returns or sets the brush for the background of the inner area of the menu item that is under the pointer.
     */
    innerAreaHotTrackFill?: string;
    /**
     * Returns or sets the brush for the default border of the inner area for the menu item that is under the pointer.
     */
    innerAreaHotTrackStroke?: string;
    /**
     * Returns or sets the brush for the default border of the inner area for the menu item.
     */
    innerAreaStroke?: string;
    /**
     * Returns or sets the thickness of the border for the inner area for the menu item.
     */
    innerAreaStrokeThickness?: number;
    /**
     * Returns or sets a boolean indicating whether the item is enabled.
     */
    isEnabled?: boolean;
    /**
     * Returns or sets a boolean indicating if a tooltip may be displayed for the item.
     */
    isToolTipEnabled?: boolean;
    /**
     * Returns or sets the brush for the background of the button within the outer ring for a menu item that is under the pointer.
     */
    outerRingButtonHotTrackFill?: string;
    /**
     * Returns or sets the foreground of the buttons in the outer ring of the menu that is under the pointer.
     */
    outerRingButtonHotTrackForeground?: string;
    /**
     * Returns or sets the brush for the default border of the button within the outer ring for a menu item that is under the pointer.
     */
    outerRingButtonHotTrackStroke?: string;
    /**
     * Returns or sets the default background of the button within the outer ring for a menu item.
     */
    outerRingButtonFill?: string;
    /**
     * Returns or sets the brush for the foreground of the buttons in the outer ring of the menu.
     */
    outerRingButtonForeground?: string;
    /**
     * Returns or sets the brush for the default border of the button within the outer ring for a menu item.
     */
    outerRingButtonStroke?: string;
    /**
     * Returns or sets the width of the outline of a button in the outer ring of the menu.
     */
    outerRingButtonStrokeThickness?: number;
    /**
     * Returns or sets the tooltip to be displayed for the radial menu item.
     */
    toolTip?: any;
    /**
     * Returns or sets the wedge at which the item should be positioned.
     */
    wedgeIndex?: number;
    /**
     * Returns or sets the number of wedges that the item should occupy.
     */
    wedgeSpan?: number;
    /**
     * Returns or sets a boolean indicating if the RecentItem property is updated when a child item is clicked.
     */
    autoUpdateRecentItem?: boolean;
    /**
     * Returns or sets an enumeration indicating where the child items are displayed.
     *
     * Valid values:
     * "asChildren" The Items are displayed within a separate level that is accessed by clicking on the button in the outer ring of the xamRadialMenu for the parent.
     * "asSiblingsWhenChecked" The items are displayed as siblings of the parent as long as the IsChecked is set to true.
     * "none" The child items are not displayed.
     */
    childItemPlacement?: any;
    /**
     * Returns or sets a value indicating how the IsChecked property may be changed.
     *
     * Valid values:
     * "none" The item is not checkable
     * "checkBox" The item is checkable and may be independantly checked or unchecked without affecting other items.
     * "radioButton" The item is checkable. Only 1 item from the items with the same GroupName may be checked at a time and the checked item may not be unchecked.
     * "radioButtonAllowAllUp" The item is checkable. Only 1 item from the items with the same GroupName may be checked at a time and the checked item may not be checked allowing all items to be unchecked.
     */
    checkBehavior?: any;
    /**
     * Returns or sets a boolean indicating if the item is displayed as checked.
     */
    isChecked?: boolean;
    /**
     * Returns or sets the name used to identify which RadioButton type items will be grouped together when determining the item to uncheck when the item is checked.
     */
    groupName?: string;
    /**
     * Returns or sets the header of the menu item.
     */
    header?: any;
    /**
     * Returns or sets the uri of the image for the item.
     */
    iconUri?: string;
    /**
     * Returns or sets the color that the item represents.
     * Note: When the Color property is set, several of the brush properties are changed.
     */
    color?: any;
    /**
     * Returns or sets the brush used to render the line that represents the PendingValue
     */
    pendingValueNeedleBrush?: string;
    /**
     * Returns or sets a boolean indicating whether space should be left before the first tickmark.
     */
    reserveFirstSlice?: boolean;
    /**
     * Returns or sets the amount that the PendingValue should be adjusted when incrementing or decrementing the value.
     */
    smallIncrement?: number;
    /**
     * Returns or sets the brush used to render the tick marks.
     */
    tickBrush?: string;
    /**
     * Returns or sets the values of the ticks.
     */
    ticks?: any;
    /**
     * Returns or sets the starting color for the track.
     */
    trackStartColor?: any;
    /**
     * Returns or sets the ending color for the track.
     */
    trackEndColor?: any;
    /**
     * Returns or sets the brush used to represent the Value
     */
    valueNeedleBrush?: string;
    /**
     * Cancel="false" Invoked when one navigates back to the item after viewing the child items.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.item to obtain reference to the item.
     */
    closed?: any;
    /**
     * Cancel="false" Invoked when one navigates to the view the child items.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.item to obtain reference to the item.
     */
    opened?: any;
    /**
     * Cancel="false" Occurs when the IsChecked is changed to true.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.item to obtain reference to the item.
     */
    checked?: any;
    /**
     * Cancel="false" Occurs when the item area is clicked.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.item to obtain reference to the item.
     */
    click?: any;
    /**
     * Cancel="false" Occurs when the IsChecked is changed to false.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.item to obtain reference to the item.
     */
    unchecked?: any;
    /**
     * Cancel="false" Event invoked when the Color property is changed.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.oldValue to obtain the previous value.
     * Use ui.newValue to obtain the new value.
     * Use ui.item to obtain reference to the item.
     */
    colorChanged?: any;
    /**
     * Cancel="false" Occurs when the item area of a descendant color well is clicked.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.item to obtain reference to the item.
     */
    colorWellClick?: any;
    /**
     * Cancel="false" Event invoked when the Value property is changed.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.oldValue to obtain the previous value.
     * Use ui.newValue to obtain the new value.
     * Use ui.item to obtain reference to the item.
     */
    valueChanged?: any;
    /**
     * Cancel="false" Event invoked when the PendingValue property is changed.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     * Use ui.oldValue to obtain the previous value.
     * Use ui.newValue to obtain the new value.
     * Use ui.item to obtain reference to the item.
     */
    pendingValueChanged?: any;
    /**
     * Option for IgRadialMenuItem
     */
    [optionName: string]: any;
}
interface ClosedEvent {
    (event: Event, ui: ClosedEventUIParam): void;
}
interface ClosedEventUIParam {
    /**
     * Used to obtain reference to menu widget.
     */
    owner?: any;
}
interface OpenedEvent {
    (event: Event, ui: OpenedEventUIParam): void;
}
interface OpenedEventUIParam {
    /**
     * Used to obtain reference to menu widget.
     */
    owner?: any;
}
interface IgRadialMenu {
    /**
     * Gets or sets the items in the menu.
     */
    items?: IgRadialMenuItem[];
    /**
     * Gets or sets the name of the item within the menu whose children are currently displayed.
     */
    currentOpenMenuItemName?: string;
    /**
     * Returns or sets the width of the center button content.
     */
    centerButtonContentWidth?: number;
    /**
     * Returns or sets the height of the center button content.
     */
    centerButtonContentHeight?: number;
    /**
     * Returns or sets the background of the center button of the menu when the IsOpen property is false.
     */
    centerButtonClosedFill?: string;
    /**
     * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen property is false.
     */
    centerButtonClosedStroke?: string;
    /**
     * Returns or sets the background of the center button of the menu when the IsOpen property is true.
     */
    centerButtonFill?: string;
    /**
     * Returns or sets the background of the center button of the menu when under the pointer.
     */
    centerButtonHotTrackFill?: string;
    /**
     * Returns or sets the brush used for the outline of the ring of the center button when under the pointer.
     */
    centerButtonHotTrackStroke?: string;
    /**
     * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen is true.
     */
    centerButtonStroke?: string;
    /**
     * Returns or sets the width of the outline of the inner rings of the menu.
     */
    centerButtonStrokeThickness?: number;
    /**
     * The font for the control
     */
    font?: string;
    /**
     * Returns or sets a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
     */
    isOpen?: boolean;
    /**
     * Returns or sets the brush for the backing of the radial menu.
     */
    menuBackground?: string;
    /**
     * Returns or sets the duration of the animation performed when the IsOpen property is changed.
     */
    menuItemOpenCloseAnimationDuration?: number;
    /**
     * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
     */
    menuItemOpenCloseAnimationEasingFunction?: any;
    /**
     * Returns or sets the duration of the animation performed when the IsOpen property is changed.
     */
    menuOpenCloseAnimationDuration?: number;
    /**
     * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
     */
    menuOpenCloseAnimationEasingFunction?: any;
    /**
     * Returns or sets the minimum number of wedges displayed by the menu.
     */
    minWedgeCount?: number;
    /**
     * Returns or sets the background of the outer ring of the menu.
     */
    outerRingFill?: string;
    /**
     * Returns or sets the thickness of the outer ring of the menu.
     */
    outerRingThickness?: number;
    /**
     * Returns or sets the brush used for the outline of the outer ring.
     */
    outerRingStroke?: string;
    /**
     * Returns or sets the width of the outline of the outer ring of the menu.
     */
    outerRingStrokeThickness?: number;
    /**
     * Returns or sets the starting angle of the items in degrees.
     */
    rotationInDegrees?: number;
    /**
     * Returns or sets the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
     */
    rotationAsPercentageOfWedge?: number;
    /**
     * Returns or sets the amount of padding around each wedge in degrees.
     */
    wedgePaddingInDegrees?: number;
    /**
     * Invoked when the IsOpen property is changed to false.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     */
    closed?: ClosedEvent;
    /**
     * Invoked when the IsOpen property is changed to true.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     */
    opened?: OpenedEvent;
    /**
     * Option for igRadialMenu
     */
    [optionName: string]: any;
}
interface IgRadialMenuMethods {
    /**
     * Gets or sets the value of a property for the item created with the specified key
     *
     * @param itemKey The name of the item
     * @param key The name of the property/option
     * @param value The new value for the property or undefined to obtain the current value
     */
    itemOption(itemKey: string, key: string, value: Object): Object;
    /**
     * Exports visual data from the radial menu to aid in unit testing
     */
    exportVisualData(): void;
    /**
     * Forces any pending deferred work to render on the radial menu before continuing
     */
    flush(): void;
    /**
     * Destroys the widget.
     */
    destroy(): void;
    /**
     * Notify the radial menu that style information used for rendering the menu may have been updated.
     */
    styleUpdated(): void;
}
interface JQuery {
    data(propertyName: "igRadialMenu"): IgRadialMenuMethods;
}
interface JQuery {
    igRadialMenu(methodName: "itemOption", itemKey: string, key: string, value: Object): Object;
    igRadialMenu(methodName: "exportVisualData"): void;
    igRadialMenu(methodName: "flush"): void;
    igRadialMenu(methodName: "destroy"): void;
    igRadialMenu(methodName: "styleUpdated"): void;
    /**
     * Gets  the items in the menu.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "items"): IgRadialMenuItem[];
    /**
     * Sets the items in the menu.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "items", optionValue: IgRadialMenuItem[]): void;
    /**
     * Gets  the name of the item within the menu whose children are currently displayed.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "currentOpenMenuItemName"): string;
    /**
     * Sets the name of the item within the menu whose children are currently displayed.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "currentOpenMenuItemName", optionValue: string): void;
    /**
     * Returns  the width of the center button content.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonContentWidth"): number;
    /**
     * Returns or sets the width of the center button content.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonContentWidth", optionValue: number): void;
    /**
     * Returns  the height of the center button content.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonContentHeight"): number;
    /**
     * Returns or sets the height of the center button content.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonContentHeight", optionValue: number): void;
    /**
     * Returns  the background of the center button of the menu when the IsOpen property is false.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonClosedFill"): string;
    /**
     * Returns or sets the background of the center button of the menu when the IsOpen property is false.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonClosedFill", optionValue: string): void;
    /**
     * Returns  the brush used for the outline of the ring of the center button when the IsOpen property is false.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonClosedStroke"): string;
    /**
     * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen property is false.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonClosedStroke", optionValue: string): void;
    /**
     * Returns  the background of the center button of the menu when the IsOpen property is true.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonFill"): string;
    /**
     * Returns or sets the background of the center button of the menu when the IsOpen property is true.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonFill", optionValue: string): void;
    /**
     * Returns  the background of the center button of the menu when under the pointer.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonHotTrackFill"): string;
    /**
     * Returns or sets the background of the center button of the menu when under the pointer.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonHotTrackFill", optionValue: string): void;
    /**
     * Returns  the brush used for the outline of the ring of the center button when under the pointer.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonHotTrackStroke"): string;
    /**
     * Returns or sets the brush used for the outline of the ring of the center button when under the pointer.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonHotTrackStroke", optionValue: string): void;
    /**
     * Returns  the brush used for the outline of the ring of the center button when the IsOpen is true.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonStroke"): string;
    /**
     * Returns or sets the brush used for the outline of the ring of the center button when the IsOpen is true.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonStroke", optionValue: string): void;
    /**
     * Returns  the width of the outline of the inner rings of the menu.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonStrokeThickness"): number;
    /**
     * Returns or sets the width of the outline of the inner rings of the menu.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "centerButtonStrokeThickness", optionValue: number): void;
    /**
     * The font for the control
     */
    igRadialMenu(optionLiteral: 'option', optionName: "font"): string;
    /**
     * The font for the control
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "font", optionValue: string): void;
    /**
     * Returns  a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "isOpen"): boolean;
    /**
     * Returns or sets a boolean indicating whether the items of the menu are currently displayed. When closed, only the center button is rendered.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "isOpen", optionValue: boolean): void;
    /**
     * Returns  the brush for the backing of the radial menu.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuBackground"): string;
    /**
     * Returns or sets the brush for the backing of the radial menu.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuBackground", optionValue: string): void;
    /**
     * Returns  the duration of the animation performed when the IsOpen property is changed.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuItemOpenCloseAnimationDuration"): number;
    /**
     * Returns or sets the duration of the animation performed when the IsOpen property is changed.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuItemOpenCloseAnimationDuration", optionValue: number): void;
    /**
     * Returns  the easing function applied to the animation that occurs when the IsOpen property is changed.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuItemOpenCloseAnimationEasingFunction"): any;
    /**
     * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuItemOpenCloseAnimationEasingFunction", optionValue: any): void;
    /**
     * Returns  the duration of the animation performed when the IsOpen property is changed.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuOpenCloseAnimationDuration"): number;
    /**
     * Returns or sets the duration of the animation performed when the IsOpen property is changed.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuOpenCloseAnimationDuration", optionValue: number): void;
    /**
     * Returns  the easing function applied to the animation that occurs when the IsOpen property is changed.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuOpenCloseAnimationEasingFunction"): any;
    /**
     * Returns or sets the easing function applied to the animation that occurs when the IsOpen property is changed.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "menuOpenCloseAnimationEasingFunction", optionValue: any): void;
    /**
     * Returns  the minimum number of wedges displayed by the menu.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "minWedgeCount"): number;
    /**
     * Returns or sets the minimum number of wedges displayed by the menu.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "minWedgeCount", optionValue: number): void;
    /**
     * Returns  the background of the outer ring of the menu.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "outerRingFill"): string;
    /**
     * Returns or sets the background of the outer ring of the menu.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "outerRingFill", optionValue: string): void;
    /**
     * Returns  the thickness of the outer ring of the menu.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "outerRingThickness"): number;
    /**
     * Returns or sets the thickness of the outer ring of the menu.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "outerRingThickness", optionValue: number): void;
    /**
     * Returns  the brush used for the outline of the outer ring.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "outerRingStroke"): string;
    /**
     * Returns or sets the brush used for the outline of the outer ring.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "outerRingStroke", optionValue: string): void;
    /**
     * Returns  the width of the outline of the outer ring of the menu.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "outerRingStrokeThickness"): number;
    /**
     * Returns or sets the width of the outline of the outer ring of the menu.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "outerRingStrokeThickness", optionValue: number): void;
    /**
     * Returns  the starting angle of the items in degrees.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "rotationInDegrees"): number;
    /**
     * Returns or sets the starting angle of the items in degrees.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "rotationInDegrees", optionValue: number): void;
    /**
     * Returns  the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "rotationAsPercentageOfWedge"): number;
    /**
     * Returns or sets the starting angle of the items expressed as the percentage of the width of a single wedge/slice.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "rotationAsPercentageOfWedge", optionValue: number): void;
    /**
     * Returns  the amount of padding around each wedge in degrees.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "wedgePaddingInDegrees"): number;
    /**
     * Returns or sets the amount of padding around each wedge in degrees.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "wedgePaddingInDegrees", optionValue: number): void;
    /**
     * Invoked when the IsOpen property is changed to false.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "closed"): ClosedEvent;
    /**
     * Invoked when the IsOpen property is changed to false.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "closed", optionValue: ClosedEvent): void;
    /**
     * Invoked when the IsOpen property is changed to true.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "opened"): OpenedEvent;
    /**
     * Invoked when the IsOpen property is changed to true.
     * Function takes a first argument ui.
     * Use ui.owner to obtain reference to menu widget.
     *
     * @optionValue New value to be set.
     */
    igRadialMenu(optionLiteral: 'option', optionName: "opened", optionValue: OpenedEvent): void;
    igRadialMenu(options: IgRadialMenu): JQuery;
    igRadialMenu(optionLiteral: 'option', optionName: string): any;
    igRadialMenu(optionLiteral: 'option', options: IgRadialMenu): JQuery;
    igRadialMenu(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igRadialMenu(methodName: string, ...methodParams: any[]): any;
}
interface HoverChangeEvent {
    (event: Event, ui: HoverChangeEventUIParam): void;
}
interface HoverChangeEventUIParam {
    /**
     * Used to get new value.
     */
    value?: any;
    /**
     * Used to get old value.
     */
    oldValue?: any;
}
interface ValueChangeEvent {
    (event: Event, ui: ValueChangeEventUIParam): void;
}
interface ValueChangeEventUIParam {
    /**
     * Used to get new value.
     */
    value?: any;
    /**
     * Used to get old value.
     */
    oldValue?: any;
}
interface IgRating {
    /**
     * Gets or sets vertical or horizontal orientation of votes.
     * Change of that option is not supported after igRating was created.
     */
    vertical?: boolean;
    /**
     * Gets or sets value (selected votes or percent).
     */
    value?: number;
    /**
     * Gets or sets value-hover (hovered votes or percent of hovered votes). Default is same as value.
     */
    valueHover?: number;
    /**
     * Gets or sets number of votes.
     */
    voteCount?: number;
    /**
     * Gets or sets custom width of a vote in pixels. In case of 0 the run time style value is used.
     */
    voteWidth?: number;
    /**
     * Gets or sets custom height of a vote in pixels. In case of 0 the run time style value is used.
     */
    voteHeight?: number;
    /**
     * Gets or sets direction of selected and hovered votes. Change of that option is not supported after igRating was created.
     * Value true: from left to right or from top to bottom.
     * Value false: from right to left or from bottom to left.
     */
    swapDirection?: boolean;
    /**
     * Gets or sets percent or vote number to measure value and value-hover.
     * Value true: value is measured as percent (from 0 to 1).
     * Value false: value is measured in number of voted (from 0 to voteCount)
     */
    valueAsPercent?: boolean;
    /**
     * Gets sets ability to get focus. Change of that option is not supported after igRating was created.
     * Value true: can get focus and process key events.
     * Value false: cannot get focus.
     */
    focusable?: boolean;
    /**
     * Gets or sets precision. Precision of value and valueHover.
     *
     * Valid values:
     * "exact" Value corresponds location of mouse.
     * "half" Value is rounded to the half of vote.
     * "whole" Value is rounded to the number of votes.
     */
    precision?: any;
    /**
     * Gets or sets part of vote-size, which is considered as zero value.
     * It has effect only when precision is set to "half" or "whole".
     * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
     * Same is applied for mouseover as well.
     */
    precisionZeroVote?: number;
    /**
     * Gets or sets number of decimal places used to round value and value-hover.
     * Negative value will disable that option and value will not be rounded.
     * Notes:
     * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
     * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
     * If it is larger than 15, then 15 is used.
     */
    roundedDecimalPlaces?: number;
    /**
     * Gets or sets selector for css classes.
     * That option allows replacing all default css styles by custom values.
     * Application should provide css classes for all members defined in the css options with "theme" selector.
     */
    theme?: string;
    /**
     * Gets or sets object which contains options supported by igValidator.
     * Note that for onblur validation depends on the "focusable" option.
     * Example:
     * $('#rating1').igRating({ validatorOptions: { required: true, minValue: 0.2 } });
     */
    validatorOptions?: any;
    /**
     * Gets or sets custom css votes.
     * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
     * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
     * Item at index [0] on second level is used for css class of vote in normal state.
     * Item at index [1] on second level is used for css class of vote in selected state.
     * Item at index [2] on second level is used for css class of vote in hover state.
     * Examples:
     * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
     * will customize only second vote with normalCss for normal state, hoverCss for hover state and selectedCss for selected state.
     * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
     * will customize selected and hover states for first 3 votes with classes h# and s#.
     */
    cssVotes?: any;
    /**
     * Event which is raised before hover value is changed.
     * If application returns false, then action is canceled and hover value stays unchanged.
     * Function takes arguments evt and ui.
     * Use ui.value to get new value.
     * Use ui.oldValue to get old value.
     */
    hoverChange?: HoverChangeEvent;
    /**
     * Event which is raised before (selected) value is changed.
     * If application returns false, then action is canceled and value stays unchanged.
     * Function takes arguments evt and ui.
     * Use ui.value to get new value.
     * Use ui.oldValue to get old value.
     */
    valueChange?: ValueChangeEvent;
    /**
     * Option for igRating
     */
    [optionName: string]: any;
}
interface IgRatingMethods {
    /**
     * Gets reference to igValidator used by igRating.
     *
     * @param destroy     Request to destroy validator.
     */
    validator(destroy?: boolean): Object;
    /**
     * Trigger validation.
     */
    validate(): boolean;
    /**
     * Gets sets (selected) value.
     * returnType="number|object" If parameter is not 'number', then exact value rendered with selected css is returned. Otherwise, reference to igRating is returned.
     *
     * @param val     New value which is rendered with selected css.
     */
    value(val: number): void;
    /**
     * Gets sets hover value.
     * returnType="number|object" If parameter is not "number", then last value which was rendered with hover css is returned. Otherwise, reference to igRating is returned.
     *
     * @param val     New value which will be rendered with hover css when rating gets mouse.
     */
    valueHover(val?: number): void;
    /**
     * Checks if igRating has focus.
     */
    hasFocus(): boolean;
    /**
     * Sets focus to igRating. That has effect only when options.focusable is enabled.
     */
    focus(): Object;
    /**
     * Destroys igRating.
     */
    destroy(): Object;
}
interface JQuery {
    data(propertyName: "igRating"): IgRatingMethods;
}
interface JQuery {
    igRating(methodName: "validator", destroy?: boolean): Object;
    igRating(methodName: "validate"): boolean;
    igRating(methodName: "value", val: number): void;
    igRating(methodName: "valueHover", val?: number): void;
    igRating(methodName: "hasFocus"): boolean;
    igRating(methodName: "focus"): Object;
    igRating(methodName: "destroy"): Object;
    /**
     * Gets  vertical or horizontal orientation of votes.
     * Change of that option is not supported after igRating was created.
     */
    igRating(optionLiteral: 'option', optionName: "vertical"): boolean;
    /**
     * Sets vertical or horizontal orientation of votes.
     * Change of that option is not supported after igRating was created.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "vertical", optionValue: boolean): void;
    /**
     * Gets  value (selected votes or percent).
     */
    igRating(optionLiteral: 'option', optionName: "value"): number;
    /**
     * Sets value (selected votes or percent).
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "value", optionValue: number): void;
    /**
     * Gets  value-hover (hovered votes or percent of hovered votes). Default is same as value.
     */
    igRating(optionLiteral: 'option', optionName: "valueHover"): number;
    /**
     * Sets value-hover (hovered votes or percent of hovered votes). Default is same as value.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "valueHover", optionValue: number): void;
    /**
     * Gets  number of votes.
     */
    igRating(optionLiteral: 'option', optionName: "voteCount"): number;
    /**
     * Sets number of votes.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "voteCount", optionValue: number): void;
    /**
     * Gets  custom width of a vote in pixels. In case of 0 the run time style value is used.
     */
    igRating(optionLiteral: 'option', optionName: "voteWidth"): number;
    /**
     * Sets custom width of a vote in pixels. In case of 0 the run time style value is used.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "voteWidth", optionValue: number): void;
    /**
     * Gets  custom height of a vote in pixels. In case of 0 the run time style value is used.
     */
    igRating(optionLiteral: 'option', optionName: "voteHeight"): number;
    /**
     * Sets custom height of a vote in pixels. In case of 0 the run time style value is used.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "voteHeight", optionValue: number): void;
    /**
     * Gets  direction of selected and hovered votes. Change of that option is not supported after igRating was created.
     * Value true: from left to right or from top to bottom.
     * Value false: from right to left or from bottom to left.
     */
    igRating(optionLiteral: 'option', optionName: "swapDirection"): boolean;
    /**
     * Sets direction of selected and hovered votes. Change of that option is not supported after igRating was created.
     * Value true: from left to right or from top to bottom.
     * Value false: from right to left or from bottom to left.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "swapDirection", optionValue: boolean): void;
    /**
     * Gets  percent or vote number to measure value and value-hover.
     * Value true: value is measured as percent (from 0 to 1).
     * Value false: value is measured in number of voted (from 0 to voteCount)
     */
    igRating(optionLiteral: 'option', optionName: "valueAsPercent"): boolean;
    /**
     * Sets percent or vote number to measure value and value-hover.
     * Value true: value is measured as percent (from 0 to 1).
     * Value false: value is measured in number of voted (from 0 to voteCount)
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "valueAsPercent", optionValue: boolean): void;
    /**
     * Gets  ability to get focus. Change of that option is not supported after igRating was created.
     * Value true: can get focus and process key events.
     * Value false: cannot get focus.
     */
    igRating(optionLiteral: 'option', optionName: "focusable"): boolean;
    /**
     * Sets ability to get focus. Change of that option is not supported after igRating was created.
     * Value true: can get focus and process key events.
     * Value false: cannot get focus.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "focusable", optionValue: boolean): void;
    /**
     * Gets  precision. Precision of value and valueHover.
     */
    igRating(optionLiteral: 'option', optionName: "precision"): any;
    /**
     * Sets precision. Precision of value and valueHover.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "precision", optionValue: any): void;
    /**
     * Gets  part of vote-size, which is considered as zero value.
     * It has effect only when precision is set to "half" or "whole".
     * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
     * Same is applied for mouseover as well.
     */
    igRating(optionLiteral: 'option', optionName: "precisionZeroVote"): number;
    /**
     * Sets part of vote-size, which is considered as zero value.
     * It has effect only when precision is set to "half" or "whole".
     * If user clicks between edge of the first vote and (sizeOfVote * precisionZeroVote), then value is set to 0.
     * Same is applied for mouseover as well.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "precisionZeroVote", optionValue: number): void;
    /**
     * Gets  number of decimal places used to round value and value-hover.
     * Negative value will disable that option and value will not be rounded.
     * Notes:
     * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
     * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
     * If it is larger than 15, then 15 is used.
     */
    igRating(optionLiteral: 'option', optionName: "roundedDecimalPlaces"): number;
    /**
     * Sets number of decimal places used to round value and value-hover.
     * Negative value will disable that option and value will not be rounded.
     * Notes:
     * If precision is "whole" or "half" and roundedDecimalPlaces is set in range of 0..2, then 3 is used.
     * If valueAsPercent is enabled and roundedDecimalPlaces is set to 0, then 1 is used.
     * If it is larger than 15, then 15 is used.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "roundedDecimalPlaces", optionValue: number): void;
    /**
     * Gets  selector for css classes.
     * That option allows replacing all default css styles by custom values.
     * Application should provide css classes for all members defined in the css options with "theme" selector.
     */
    igRating(optionLiteral: 'option', optionName: "theme"): string;
    /**
     * Sets selector for css classes.
     * That option allows replacing all default css styles by custom values.
     * Application should provide css classes for all members defined in the css options with "theme" selector.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "theme", optionValue: string): void;
    /**
     * Gets  object which contains options supported by igValidator.
     * Note that for onblur validation depends on the "focusable" option.
     * Example:
     * $('#rating1').igRating({ validatorOptions: { required: true, minValue: 0.2 } });
     */
    igRating(optionLiteral: 'option', optionName: "validatorOptions"): any;
    /**
     * Sets object which contains options supported by igValidator.
     * Note that for onblur validation depends on the "focusable" option.
     * Example:
     * $('#rating1').igRating({ validatorOptions: { required: true, minValue: 0.2 } });
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "validatorOptions", optionValue: any): void;
    /**
     * Gets  custom css votes.
     * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
     * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
     * Item at index [0] on second level is used for css class of vote in normal state.
     * Item at index [1] on second level is used for css class of vote in selected state.
     * Item at index [2] on second level is used for css class of vote in hover state.
     * Examples:
     * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
     * will customize only second vote with normalCss for normal state, hoverCss for hover state and selectedCss for selected state.
     * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
     * will customize selected and hover states for first 3 votes with classes h# and s#.
     */
    igRating(optionLiteral: 'option', optionName: "cssVotes"): any;
    /**
     * Sets custom css votes.
     * That object should be 2-dimentional array or object with indexes, where every item of first level represents settings for a vote at that index.
     * Second level of an item is settings for a vote and it should contain classes for a specific state of vote.
     * Item at index [0] on second level is used for css class of vote in normal state.
     * Item at index [1] on second level is used for css class of vote in selected state.
     * Item at index [2] on second level is used for css class of vote in hover state.
     * Examples:
     * { 1: { 0: "normalCss", 1: "selectedCss", 2: "hoverCss"} }
     * will customize only second vote with normalCss for normal state, hoverCss for hover state and selectedCss for selected state.
     * [[null, 's1', 'h1'], [null, 's2', 'h2'], [null, 's3', 'h3']]
     * will customize selected and hover states for first 3 votes with classes h# and s#.
     *
     * @optionValue New value to be set.
     */
    igRating(optionLiteral: 'option', optionName: "cssVotes", optionValue: any): void;
    /**
     * Event which is raised before hover value is changed.
     * If application returns false, then action is canceled and hover value stays unchanged.
     * Function takes arguments evt and ui.
     * Use ui.value to get new value.
     * Use ui.oldValue to get old value.
     */
    igRating(optionLiteral: 'option', optionName: "hoverChange"): HoverChangeEvent;
    /**
     * Event which is raised before hover value is changed.
     * If application returns false, then action is canceled and hover value stays unchanged.
     * Function takes arguments evt and ui.
     * Use ui.value to get new value.
     * Use ui.oldValue to get old value.
     *
     * @optionValue Define event handler function.
     */
    igRating(optionLiteral: 'option', optionName: "hoverChange", optionValue: HoverChangeEvent): void;
    /**
     * Event which is raised before (selected) value is changed.
     * If application returns false, then action is canceled and value stays unchanged.
     * Function takes arguments evt and ui.
     * Use ui.value to get new value.
     * Use ui.oldValue to get old value.
     */
    igRating(optionLiteral: 'option', optionName: "valueChange"): ValueChangeEvent;
    /**
     * Event which is raised before (selected) value is changed.
     * If application returns false, then action is canceled and value stays unchanged.
     * Function takes arguments evt and ui.
     * Use ui.value to get new value.
     * Use ui.oldValue to get old value.
     *
     * @optionValue Define event handler function.
     */
    igRating(optionLiteral: 'option', optionName: "valueChange", optionValue: ValueChangeEvent): void;
    igRating(options: IgRating): JQuery;
    igRating(optionLiteral: 'option', optionName: string): any;
    igRating(optionLiteral: 'option', options: IgRating): JQuery;
    igRating(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igRating(methodName: string, ...methodParams: any[]): any;
}
interface StartingEvent {
    (event: Event, ui: StartingEventUIParam): void;
}
interface StartingEventUIParam {
    /**
     * Used to obtain reference to igScroll.
     */
    owner?: any;
}
interface StartedEvent {
    (event: Event, ui: StartedEventUIParam): void;
}
interface StartedEventUIParam {
    /**
     * Used to obtain reference to igScroll.
     */
    owner?: any;
}
interface ScrollingEvent {
    (event: Event, ui: ScrollingEventUIParam): void;
}
interface ScrollingEventUIParam {
    /**
     * Used to obtain reference to igScroll.
     */
    owner?: any;
    /**
     * Used to obtain increment/decrement of horizontal scroller. That member can be modified and igScoll will use that new custom value.
     */
    deltaX?: any;
    /**
     * Used to obtain increment/decrement of vertical scroller. That member can be modified and igScoll will use that new custom value.
     */
    deltaY?: any;
}
interface ScrolledEvent {
    (event: Event, ui: ScrolledEventUIParam): void;
}
interface ScrolledEventUIParam {
    /**
     * Used to obtain reference to igScroll.
     */
    owner?: any;
    /**
     * Used to obtain increment/decrement of horizontal scroller.
     */
    deltaX?: any;
    /**
     * Used to obtain increment/decrement of vertical scroller.
     */
    deltaY?: any;
}
interface StoppedEvent {
    (event: Event, ui: StoppedEventUIParam): void;
}
interface StoppedEventUIParam {
    /**
     * Used to obtain reference to igScroll.
     */
    owner?: any;
}
interface IgScroll {
    /**
     * Sets gets opacity of dragged thumb. Default value is 1. That is applied only when x/yThumb is "draggable".
     */
    thumbOpacityDrag?: number;
    /**
     * Sets gets opacity of thumb. Default value is 0.5.
     */
    thumbOpacity?: boolean;
    /**
     * Sets gets option to cancel touchstart event and explicitly raise mouse events on touchend.
     */
    cancelStart?: boolean;
    /**
     * Sets gets option to perform scrolling only in one direction.
     */
    oneDirection?: boolean;
    /**
     * Sets gets scroll direction.
     */
    direction?: any;
    /**
     * Sets gets duration of animation effect in millisecods to show thumbs. Value less than 5 will disable animation. Default value is 300.
     */
    animateShowDuration?: number;
    /**
     * Sets gets duration of animation effect in millisecods to hide thumbs. Value less than 5 will disable animation. Default value is 500.
     */
    animateHideDuration?: number;
    /**
     * Sets gets delay in milliseconds to hide thumbs, which is used when none of thumbs is draggable. If value is less than 5, then 5 is used. Default value is 200.
     */
    hideThumbsDelay?: number;
    /**
     * Sets gets delay in milliseconds to hide thumbs, which is used when any of thumbs is draggable. If value is less than 5, then 5 is used. Default value is 1000.
     */
    hideDragThumbsDelay?: number;
    /**
     * Sets gets inertia for horizontal scrolling. The larger value, the longer inertia. Range from 0.97 to 0. Default value is 0.8.
     */
    xInertia?: number;
    /**
     * Sets gets inertia for vertical scrolling. The larger value, the longer inertia. Range from 0.97 to 0. Default value is 0.85.
     */
    yInertia?: number;
    /**
     * .
     */
    xThumb?: any;
    /**
     * .
     */
    yThumb?: any;
    xLabel?: any;
    yLabel?: any;
    /**
     * Sets gets margin between left edge of horizontal scrollbar (position of xThumb) and edge of target element. Number of pixels.
     */
    marginLeft?: number;
    /**
     * Sets gets margin between right edge of horizontal scrollbar (position of xThumb) and edge of target element. Number of pixels.
     */
    marginRight?: number;
    /**
     * Sets gets margin between top edge of vertical scrollbar (position of yThumb) and edge of target element. Number of pixels.
     */
    marginTop?: number;
    /**
     * Sets gets margin between bottom edge of vertical scrollbar (position of yThumb) and edge of target element. Number of pixels.
     */
    marginBottom?: number;
    /**
     * Sets gets reference to html element which is used for horizontal scrolling. Value also may contain jquery selector instead of element.
     */
    xScroller?: Element;
    /**
     * Sets gets reference to html element which is used for vertical scrolling. Value also may contain jquery selector instead of element.
     */
    yScroller?: Element;
    /**
     * Event which is raised before start scrolling.
     * Return false in order to cancel action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     */
    starting?: StartingEvent;
    /**
     * Event which is raised after start scrolling.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     */
    started?: StartedEvent;
    /**
     * Event which is raised before scrolling.
     * Return false in order to cancel action.
     * Function takes arguments evt and ui.
     * Note: while inertia, the evt parameter is not available.
     * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     * Use ui.deltaX to obtain increment/decrement of horizontal scroller. That member can be modified and igScoll will use that new custom value.
     * Use ui.deltaY to obtain increment/decrement of vertical scroller. That member can be modified and igScoll will use that new custom value.
     */
    scrolling?: ScrollingEvent;
    /**
     * Event which is raised after scrolling.
     * Function takes arguments evt and ui.
     * Note: while inertia, the evt parameter is not available.
     * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     * Use ui.deltaX to obtain increment/decrement of horizontal scroller.
     * Use ui.deltaY to obtain increment/decrement of vertical scroller.
     */
    scrolled?: ScrolledEvent;
    /**
     * Event which is raised when scrolling was stopped.
     * Function takes arguments evt and ui.
     * Note: the first (evt) parameter is not available and equal to null.
     * Use ui.owner to obtain reference to igScroll.
     */
    stopped?: StoppedEvent;
    /**
     * Option for igScroll
     */
    [optionName: string]: any;
}
interface IgScrollMethods {
    /**
     * Gets sets scrollLeft attribute for horizontal scroller.
     * returnType="number|object" Returns scrollLeft or reference to igScroll.
     *
     * @param val     new value for scrollLeft.
     */
    scrollLeft(val?: number): void;
    /**
     * Gets sets scrollTop attribute for vertical scroller.
     * returnType="number|object" Returns scrollTop or reference to igScroll.
     *
     * @param val     new value for scrollTop.
     */
    scrollTop(val?: number): void;
    /**
     * Gets scrollWidth attribute of horizontal scroller.
     */
    scrollWidth(): number;
    /**
     * Gets scrollHeight attribute of vertical scroller.
     */
    scrollHeight(): number;
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igScroll"): IgScrollMethods;
}
interface JQuery {
    igScroll(methodName: "scrollLeft", val?: number): void;
    igScroll(methodName: "scrollTop", val?: number): void;
    igScroll(methodName: "scrollWidth"): number;
    igScroll(methodName: "scrollHeight"): number;
    igScroll(methodName: "destroy"): void;
    /**
     * Sets gets opacity of dragged thumb. Default value is 1. That is applied only when x/yThumb is "draggable".
     */
    igScroll(optionLiteral: 'option', optionName: "thumbOpacityDrag"): number;
    /**
     * Sets gets opacity of dragged thumb. Default value is 1. That is applied only when x/yThumb is "draggable".
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "thumbOpacityDrag", optionValue: number): void;
    /**
     * Sets gets opacity of thumb. Default value is 0.5.
     */
    igScroll(optionLiteral: 'option', optionName: "thumbOpacity"): boolean;
    /**
     * Sets gets opacity of thumb. Default value is 0.5.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "thumbOpacity", optionValue: boolean): void;
    /**
     * Sets gets option to cancel touchstart event and explicitly raise mouse events on touchend.
     */
    igScroll(optionLiteral: 'option', optionName: "cancelStart"): boolean;
    /**
     * Sets gets option to cancel touchstart event and explicitly raise mouse events on touchend.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "cancelStart", optionValue: boolean): void;
    /**
     * Sets gets option to perform scrolling only in one direction.
     */
    igScroll(optionLiteral: 'option', optionName: "oneDirection"): boolean;
    /**
     * Sets gets option to perform scrolling only in one direction.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "oneDirection", optionValue: boolean): void;
    /**
     * Sets gets scroll direction.
     */
    igScroll(optionLiteral: 'option', optionName: "direction"): any;
    /**
     * Sets gets scroll direction.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "direction", optionValue: any): void;
    /**
     * Sets gets duration of animation effect in millisecods to show thumbs. Value less than 5 will disable animation. Default value is 300.
     */
    igScroll(optionLiteral: 'option', optionName: "animateShowDuration"): number;
    /**
     * Sets gets duration of animation effect in millisecods to show thumbs. Value less than 5 will disable animation. Default value is 300.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "animateShowDuration", optionValue: number): void;
    /**
     * Sets gets duration of animation effect in millisecods to hide thumbs. Value less than 5 will disable animation. Default value is 500.
     */
    igScroll(optionLiteral: 'option', optionName: "animateHideDuration"): number;
    /**
     * Sets gets duration of animation effect in millisecods to hide thumbs. Value less than 5 will disable animation. Default value is 500.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "animateHideDuration", optionValue: number): void;
    /**
     * Sets gets delay in milliseconds to hide thumbs, which is used when none of thumbs is draggable. If value is less than 5, then 5 is used. Default value is 200.
     */
    igScroll(optionLiteral: 'option', optionName: "hideThumbsDelay"): number;
    /**
     * Sets gets delay in milliseconds to hide thumbs, which is used when none of thumbs is draggable. If value is less than 5, then 5 is used. Default value is 200.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "hideThumbsDelay", optionValue: number): void;
    /**
     * Sets gets delay in milliseconds to hide thumbs, which is used when any of thumbs is draggable. If value is less than 5, then 5 is used. Default value is 1000.
     */
    igScroll(optionLiteral: 'option', optionName: "hideDragThumbsDelay"): number;
    /**
     * Sets gets delay in milliseconds to hide thumbs, which is used when any of thumbs is draggable. If value is less than 5, then 5 is used. Default value is 1000.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "hideDragThumbsDelay", optionValue: number): void;
    /**
     * Sets gets inertia for horizontal scrolling. The larger value, the longer inertia. Range from 0.97 to 0. Default value is 0.8.
     */
    igScroll(optionLiteral: 'option', optionName: "xInertia"): number;
    /**
     * Sets gets inertia for horizontal scrolling. The larger value, the longer inertia. Range from 0.97 to 0. Default value is 0.8.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "xInertia", optionValue: number): void;
    /**
     * Sets gets inertia for vertical scrolling. The larger value, the longer inertia. Range from 0.97 to 0. Default value is 0.85.
     */
    igScroll(optionLiteral: 'option', optionName: "yInertia"): number;
    /**
     * Sets gets inertia for vertical scrolling. The larger value, the longer inertia. Range from 0.97 to 0. Default value is 0.85.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "yInertia", optionValue: number): void;
    /**
     * .
     */
    igScroll(optionLiteral: 'option', optionName: "xThumb"): any;
    /**
     * .
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "xThumb", optionValue: any): void;
    /**
     * .
     */
    igScroll(optionLiteral: 'option', optionName: "yThumb"): any;
    /**
     * .
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "yThumb", optionValue: any): void;
    /**
     */
    igScroll(optionLiteral: 'option', optionName: "xLabel"): any;
    /**
     */
    igScroll(optionLiteral: 'option', optionName: "xLabel", optionValue: any): void;
    /**
     */
    igScroll(optionLiteral: 'option', optionName: "yLabel"): any;
    /**
     */
    igScroll(optionLiteral: 'option', optionName: "yLabel", optionValue: any): void;
    /**
     * Sets gets margin between left edge of horizontal scrollbar (position of xThumb) and edge of target element. Number of pixels.
     */
    igScroll(optionLiteral: 'option', optionName: "marginLeft"): number;
    /**
     * Sets gets margin between left edge of horizontal scrollbar (position of xThumb) and edge of target element. Number of pixels.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "marginLeft", optionValue: number): void;
    /**
     * Sets gets margin between right edge of horizontal scrollbar (position of xThumb) and edge of target element. Number of pixels.
     */
    igScroll(optionLiteral: 'option', optionName: "marginRight"): number;
    /**
     * Sets gets margin between right edge of horizontal scrollbar (position of xThumb) and edge of target element. Number of pixels.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "marginRight", optionValue: number): void;
    /**
     * Sets gets margin between top edge of vertical scrollbar (position of yThumb) and edge of target element. Number of pixels.
     */
    igScroll(optionLiteral: 'option', optionName: "marginTop"): number;
    /**
     * Sets gets margin between top edge of vertical scrollbar (position of yThumb) and edge of target element. Number of pixels.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "marginTop", optionValue: number): void;
    /**
     * Sets gets margin between bottom edge of vertical scrollbar (position of yThumb) and edge of target element. Number of pixels.
     */
    igScroll(optionLiteral: 'option', optionName: "marginBottom"): number;
    /**
     * Sets gets margin between bottom edge of vertical scrollbar (position of yThumb) and edge of target element. Number of pixels.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "marginBottom", optionValue: number): void;
    /**
     * Sets gets reference to html element which is used for horizontal scrolling. Value also may contain jquery selector instead of element.
     */
    igScroll(optionLiteral: 'option', optionName: "xScroller"): Element;
    /**
     * Sets gets reference to html element which is used for horizontal scrolling. Value also may contain jquery selector instead of element.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "xScroller", optionValue: Element): void;
    /**
     * Sets gets reference to html element which is used for vertical scrolling. Value also may contain jquery selector instead of element.
     */
    igScroll(optionLiteral: 'option', optionName: "yScroller"): Element;
    /**
     * Sets gets reference to html element which is used for vertical scrolling. Value also may contain jquery selector instead of element.
     *
     * @optionValue New value to be set.
     */
    igScroll(optionLiteral: 'option', optionName: "yScroller", optionValue: Element): void;
    /**
     * Event which is raised before start scrolling.
     * Return false in order to cancel action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     */
    igScroll(optionLiteral: 'option', optionName: "starting"): StartingEvent;
    /**
     * Event which is raised before start scrolling.
     * Return false in order to cancel action.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     *
     * @optionValue Define event handler function.
     */
    igScroll(optionLiteral: 'option', optionName: "starting", optionValue: StartingEvent): void;
    /**
     * Event which is raised after start scrolling.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     */
    igScroll(optionLiteral: 'option', optionName: "started"): StartedEvent;
    /**
     * Event which is raised after start scrolling.
     * Function takes arguments evt and ui.
     * Use evt.originalEvent to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     *
     * @optionValue Define event handler function.
     */
    igScroll(optionLiteral: 'option', optionName: "started", optionValue: StartedEvent): void;
    /**
     * Event which is raised before scrolling.
     * Return false in order to cancel action.
     * Function takes arguments evt and ui.
     * Note: while inertia, the evt parameter is not available.
     * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     * Use ui.deltaX to obtain increment/decrement of horizontal scroller. That member can be modified and igScoll will use that new custom value.
     * Use ui.deltaY to obtain increment/decrement of vertical scroller. That member can be modified and igScoll will use that new custom value.
     */
    igScroll(optionLiteral: 'option', optionName: "scrolling"): ScrollingEvent;
    /**
     * Event which is raised before scrolling.
     * Return false in order to cancel action.
     * Function takes arguments evt and ui.
     * Note: while inertia, the evt parameter is not available.
     * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     * Use ui.deltaX to obtain increment/decrement of horizontal scroller. That member can be modified and igScoll will use that new custom value.
     * Use ui.deltaY to obtain increment/decrement of vertical scroller. That member can be modified and igScoll will use that new custom value.
     *
     * @optionValue Define event handler function.
     */
    igScroll(optionLiteral: 'option', optionName: "scrolling", optionValue: ScrollingEvent): void;
    /**
     * Event which is raised after scrolling.
     * Function takes arguments evt and ui.
     * Note: while inertia, the evt parameter is not available.
     * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     * Use ui.deltaX to obtain increment/decrement of horizontal scroller.
     * Use ui.deltaY to obtain increment/decrement of vertical scroller.
     */
    igScroll(optionLiteral: 'option', optionName: "scrolled"): ScrolledEvent;
    /**
     * Event which is raised after scrolling.
     * Function takes arguments evt and ui.
     * Note: while inertia, the evt parameter is not available.
     * Use evt.originalEvent (with validation for not null of evt) to obtain reference to event of browser.
     * Use ui.owner to obtain reference to igScroll.
     * Use ui.deltaX to obtain increment/decrement of horizontal scroller.
     * Use ui.deltaY to obtain increment/decrement of vertical scroller.
     *
     * @optionValue Define event handler function.
     */
    igScroll(optionLiteral: 'option', optionName: "scrolled", optionValue: ScrolledEvent): void;
    /**
     * Event which is raised when scrolling was stopped.
     * Function takes arguments evt and ui.
     * Note: the first (evt) parameter is not available and equal to null.
     * Use ui.owner to obtain reference to igScroll.
     */
    igScroll(optionLiteral: 'option', optionName: "stopped"): StoppedEvent;
    /**
     * Event which is raised when scrolling was stopped.
     * Function takes arguments evt and ui.
     * Note: the first (evt) parameter is not available and equal to null.
     * Use ui.owner to obtain reference to igScroll.
     *
     * @optionValue Define event handler function.
     */
    igScroll(optionLiteral: 'option', optionName: "stopped", optionValue: StoppedEvent): void;
    igScroll(options: IgScroll): JQuery;
    igScroll(optionLiteral: 'option', optionName: string): any;
    igScroll(optionLiteral: 'option', options: IgScroll): JQuery;
    igScroll(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igScroll(methodName: string, ...methodParams: any[]): any;
}
interface IgLoading {
    cssClass?: any;
    includeVerticalOffset?: boolean;
    /**
     * Option for igLoading
     */
    [optionName: string]: any;
}
interface IgLoadingMethods {
    indicatorElement(): void;
    indicator(): void;
    show(refresh: Object): void;
    hide(): void;
    refreshPos(): void;
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igLoading"): IgLoadingMethods;
}
interface IgSliderBookmarks {
    /**
     * Get or set the bookmark value. Should be between slider min and max values.
     */
    value?: number;
    /**
     * Get or set the bookmark title. Show in tooltip on hover.
     */
    title?: string;
    /**
     * Get or set whether the bookmark is disabled or not.
     */
    disabled?: boolean;
    /**
     * Get or set a custom css class to be applied to the bookmark anchor element.
     */
    css?: string;
    /**
     * Option for IgSliderBookmarks
     */
    [optionName: string]: any;
}
interface StartEvent {
    (event: Event, ui: StartEventUIParam): void;
}
interface StartEventUIParam {
}
interface SlideEvent {
    (event: Event, ui: SlideEventUIParam): void;
}
interface SlideEventUIParam {
}
interface StopEvent {
    (event: Event, ui: StopEventUIParam): void;
}
interface StopEventUIParam {
}
interface ChangeEvent {
    (event: Event, ui: ChangeEventUIParam): void;
}
interface ChangeEventUIParam {
}
interface BookmarkHitEvent {
    (event: Event, ui: BookmarkHitEventUIParam): void;
}
interface BookmarkHitEventUIParam {
}
interface BookmarkClickEvent {
    (event: Event, ui: BookmarkClickEventUIParam): void;
}
interface BookmarkClickEventUIParam {
}
interface IgSlider {
    /**
     * Get or set whether the slide handle will animate when it is moved.
     */
    animate?: boolean;
    /**
     * Get or set the slider range maximum value.
     */
    max?: number;
    /**
     * Get or set the slider range minimum value.
     */
    min?: number;
    /**
     * Get or set the slider orientation.
     */
    orientation?: any;
    /**
     * Get or set the step with which the value is increased.
     */
    step?: number;
    /**
     * Get or set the slider value.
     */
    value?: number;
    /**
     * Get or set the bookmarks array.
     */
    bookmarks?: IgSliderBookmarks;
    /**
     * Get or set the whether to show bookmarks title on bookmark hover or not.
     */
    showBookmarkTitle?: boolean;
    /**
     * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
     */
    syncHandleWithBookmark?: boolean;
    /**
     * Defines the slide start event.
     */
    start?: StartEvent;
    /**
     * Defines the slide event. Fired when the user is sliding with mouse.
     */
    slide?: SlideEvent;
    /**
     * Defines the slide stop event. Fired to mark the end of a sliding action.
     */
    stop?: StopEvent;
    /**
     * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
     */
    change?: ChangeEvent;
    /**
     * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
     */
    bookmarkHit?: BookmarkHitEvent;
    /**
     * Defines the slider bookmark click event. Fired when a bookmark is clicked.
     */
    bookmarkClick?: BookmarkClickEvent;
    /**
     * Option for igSlider
     */
    [optionName: string]: any;
}
interface IgSliderMethods {
    widget(): void;
    destroy(): void;
    clearBookmarks(): void;
    value(newValue: Object): void;
}
interface JQuery {
    data(propertyName: "igSlider"): IgSliderMethods;
}
interface IgProgressBar {
    animate?: boolean;
    animateTimeout?: number;
    max?: number;
    min?: number;
    orientation?: string;
    value?: number;
    width?: string;
    height?: string;
    range?: boolean;
    /**
     * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
     */
    queue?: boolean;
    endValue?: number;
    change?: ChangeEvent;
    /**
     * Option for igProgressBar
     */
    [optionName: string]: any;
}
interface IgProgressBarMethods {
    widget(): void;
    destroy(): void;
    value(newValue: Object): void;
}
interface JQuery {
    data(propertyName: "igProgressBar"): IgProgressBarMethods;
}
interface IgButtonLink {
    href?: any;
    target?: any;
    title?: any;
    /**
     * Option for IgButtonLink
     */
    [optionName: string]: any;
}
interface IgButtonIcons {
    primary?: any;
    secondary?: any;
    /**
     * Option for IgButtonIcons
     */
    [optionName: string]: any;
}
interface IgButton {
    width?: any;
    height?: any;
    link?: IgButtonLink;
    labelText?: string;
    centerLabel?: boolean;
    css?: any;
    onlyIcons?: boolean;
    icons?: IgButtonIcons;
    title?: boolean;
    /**
     * Option for igButton
     */
    [optionName: string]: any;
}
interface IgButtonMethods {
    setTitle(title: Object): void;
    widget(): void;
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igButton"): IgButtonMethods;
}
interface IgTooltip {
    text?: string;
    arrowLocation?: string;
    /**
     * Option for igTooltip
     */
    [optionName: string]: any;
}
interface IgTooltipMethods {
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igTooltip"): IgTooltipMethods;
}
interface CaptureEvent {
    (event: Event, ui: CaptureEventUIParam): void;
}
interface CaptureEventUIParam {
}
interface MouseWrapper {
    cancel?: string;
    distance?: number;
    delay?: number;
    start?: StartEvent;
    drag?: DragEvent;
    stop?: StopEvent;
    capture?: CaptureEvent;
    /**
     * Option for mouseWrapper
     */
    [optionName: string]: any;
}
interface MouseWrapperMethods {
    destroy(): void;
}
interface JQuery {
    data(propertyName: "mouseWrapper"): MouseWrapperMethods;
}
interface IgResponsiveContainer {
    /**
     * The time between two resize checks in milliseconds.
     */
    pollingInterval?: number;
    /**
     * Option for igResponsiveContainer
     */
    [optionName: string]: any;
}
interface IgResponsiveContainerMethods {
    /**
     * Destroys the ResponsiveContainer widget
     */
    destroy(): void;
    /**
     * Starts the automatic size check procedure
     */
    startPoller(): void;
    /**
     * Stops the automatic size check procedure
     */
    stopPoller(): void;
    /**
     * Removes a callback from the callbacks collection.
     *
     * @param callbackId    The callback id to remove.
     */
    removeCallback(callbackId: number): void;
    /**
     * Adds a callback to the callback collection.
     *
     * @param callback    The function to call when requirements are met.
     * @param owner    The owner object of the function.
     * @param reactionStep    The sensitivity of the size change recognition.
     * @param reactionDirection    The dimensions the changes of which to be traced.
     */
    addCallback(callback: Function, owner: Object, reactionStep: number, reactionDirection: Object): void;
}
interface JQuery {
    data(propertyName: "igResponsiveContainer"): IgResponsiveContainerMethods;
}
interface JQuery {
    igLoading(methodName: "indicatorElement"): void;
    igLoading(methodName: "indicator"): void;
    igLoading(methodName: "show", refresh: Object): void;
    igLoading(methodName: "hide"): void;
    igLoading(methodName: "refreshPos"): void;
    igLoading(methodName: "destroy"): void;
    /**
     */
    igLoading(optionLiteral: 'option', optionName: "cssClass"): any;
    /**
     */
    igLoading(optionLiteral: 'option', optionName: "cssClass", optionValue: any): void;
    /**
     */
    igLoading(optionLiteral: 'option', optionName: "includeVerticalOffset"): boolean;
    /**
     */
    igLoading(optionLiteral: 'option', optionName: "includeVerticalOffset", optionValue: boolean): void;
    igLoading(options: IgLoading): JQuery;
    igLoading(optionLiteral: 'option', optionName: string): any;
    igLoading(optionLiteral: 'option', options: IgLoading): JQuery;
    igLoading(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igLoading(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igSlider(methodName: "widget"): void;
    igSlider(methodName: "destroy"): void;
    igSlider(methodName: "clearBookmarks"): void;
    igSlider(methodName: "value", newValue: Object): void;
    /**
     * Get or set whether the slide handle will animate when it is moved.
     */
    igSlider(optionLiteral: 'option', optionName: "animate"): boolean;
    /**
     * Get or set whether the slide handle will animate when it is moved.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "animate", optionValue: boolean): void;
    /**
     * Get or set the slider range maximum value.
     */
    igSlider(optionLiteral: 'option', optionName: "max"): number;
    /**
     * Get or set the slider range maximum value.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "max", optionValue: number): void;
    /**
     * Get or set the slider range minimum value.
     */
    igSlider(optionLiteral: 'option', optionName: "min"): number;
    /**
     * Get or set the slider range minimum value.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "min", optionValue: number): void;
    /**
     * Get or set the slider orientation.
     */
    igSlider(optionLiteral: 'option', optionName: "orientation"): any;
    /**
     * Get or set the slider orientation.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "orientation", optionValue: any): void;
    /**
     * Get or set the step with which the value is increased.
     */
    igSlider(optionLiteral: 'option', optionName: "step"): number;
    /**
     * Get or set the step with which the value is increased.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "step", optionValue: number): void;
    /**
     * Get or set the slider value.
     */
    igSlider(optionLiteral: 'option', optionName: "value"): number;
    /**
     * Get or set the slider value.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "value", optionValue: number): void;
    /**
     * Get or set the bookmarks array.
     */
    igSlider(optionLiteral: 'option', optionName: "bookmarks"): IgSliderBookmarks;
    /**
     * Get or set the bookmarks array.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "bookmarks", optionValue: IgSliderBookmarks): void;
    /**
     * Get or set the whether to show bookmarks title on bookmark hover or not.
     */
    igSlider(optionLiteral: 'option', optionName: "showBookmarkTitle"): boolean;
    /**
     * Get or set the whether to show bookmarks title on bookmark hover or not.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "showBookmarkTitle", optionValue: boolean): void;
    /**
     * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
     */
    igSlider(optionLiteral: 'option', optionName: "syncHandleWithBookmark"): boolean;
    /**
     * Get or set whether the handle will be moved to the bookmark position when a bookmark is clicked.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "syncHandleWithBookmark", optionValue: boolean): void;
    /**
     * Defines the slide start event.
     */
    igSlider(optionLiteral: 'option', optionName: "start"): StartEvent;
    /**
     * Defines the slide start event.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "start", optionValue: StartEvent): void;
    /**
     * Defines the slide event. Fired when the user is sliding with mouse.
     */
    igSlider(optionLiteral: 'option', optionName: "slide"): SlideEvent;
    /**
     * Defines the slide event. Fired when the user is sliding with mouse.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "slide", optionValue: SlideEvent): void;
    /**
     * Defines the slide stop event. Fired to mark the end of a sliding action.
     */
    igSlider(optionLiteral: 'option', optionName: "stop"): StopEvent;
    /**
     * Defines the slide stop event. Fired to mark the end of a sliding action.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "stop", optionValue: StopEvent): void;
    /**
     * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
     */
    igSlider(optionLiteral: 'option', optionName: "change"): ChangeEvent;
    /**
     * Defines the slider value change event. Fired when the value of the slider changes. It fires after the slide event.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "change", optionValue: ChangeEvent): void;
    /**
     * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
     */
    igSlider(optionLiteral: 'option', optionName: "bookmarkHit"): BookmarkHitEvent;
    /**
     * Defines the slider bookmark hit event. Fired when the slider handle passes after the bookmark value.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "bookmarkHit", optionValue: BookmarkHitEvent): void;
    /**
     * Defines the slider bookmark click event. Fired when a bookmark is clicked.
     */
    igSlider(optionLiteral: 'option', optionName: "bookmarkClick"): BookmarkClickEvent;
    /**
     * Defines the slider bookmark click event. Fired when a bookmark is clicked.
     *
     * @optionValue New value to be set.
     */
    igSlider(optionLiteral: 'option', optionName: "bookmarkClick", optionValue: BookmarkClickEvent): void;
    igSlider(options: IgSlider): JQuery;
    igSlider(optionLiteral: 'option', optionName: string): any;
    igSlider(optionLiteral: 'option', options: IgSlider): JQuery;
    igSlider(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igSlider(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igProgressBar(methodName: "widget"): void;
    igProgressBar(methodName: "destroy"): void;
    igProgressBar(methodName: "value", newValue: Object): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "animate"): boolean;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "animate", optionValue: boolean): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "animateTimeout"): number;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "animateTimeout", optionValue: number): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "max"): number;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "max", optionValue: number): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "min"): number;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "min", optionValue: number): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "orientation"): string;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "orientation", optionValue: string): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "value"): number;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "value", optionValue: number): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "width"): string;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "width", optionValue: string): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "height"): string;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "height", optionValue: string): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "range"): boolean;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "range", optionValue: boolean): void;
    /**
     * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
     */
    igProgressBar(optionLiteral: 'option', optionName: "queue"): boolean;
    /**
     * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately.
     *
     * @optionValue New value to be set.
     */
    igProgressBar(optionLiteral: 'option', optionName: "queue", optionValue: boolean): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "endValue"): number;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "endValue", optionValue: number): void;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "change"): ChangeEvent;
    /**
     */
    igProgressBar(optionLiteral: 'option', optionName: "change", optionValue: ChangeEvent): void;
    igProgressBar(options: IgProgressBar): JQuery;
    igProgressBar(optionLiteral: 'option', optionName: string): any;
    igProgressBar(optionLiteral: 'option', options: IgProgressBar): JQuery;
    igProgressBar(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igProgressBar(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igButton(methodName: "setTitle", title: Object): void;
    igButton(methodName: "widget"): void;
    igButton(methodName: "destroy"): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "link"): IgButtonLink;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "link", optionValue: IgButtonLink): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "labelText"): string;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "labelText", optionValue: string): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "centerLabel"): boolean;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "centerLabel", optionValue: boolean): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "css"): any;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "css", optionValue: any): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "onlyIcons"): boolean;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "onlyIcons", optionValue: boolean): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "icons"): IgButtonIcons;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "icons", optionValue: IgButtonIcons): void;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "title"): boolean;
    /**
     */
    igButton(optionLiteral: 'option', optionName: "title", optionValue: boolean): void;
    igButton(options: IgButton): JQuery;
    igButton(optionLiteral: 'option', optionName: string): any;
    igButton(optionLiteral: 'option', options: IgButton): JQuery;
    igButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igButton(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igTooltip(methodName: "destroy"): void;
    /**
     */
    igTooltip(optionLiteral: 'option', optionName: "text"): string;
    /**
     */
    igTooltip(optionLiteral: 'option', optionName: "text", optionValue: string): void;
    /**
     */
    igTooltip(optionLiteral: 'option', optionName: "arrowLocation"): string;
    /**
     */
    igTooltip(optionLiteral: 'option', optionName: "arrowLocation", optionValue: string): void;
    igTooltip(options: IgTooltip): JQuery;
    igTooltip(optionLiteral: 'option', optionName: string): any;
    igTooltip(optionLiteral: 'option', options: IgTooltip): JQuery;
    igTooltip(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTooltip(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    mouseWrapper(methodName: "destroy"): void;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "cancel"): string;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "cancel", optionValue: string): void;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "distance"): number;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "distance", optionValue: number): void;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "delay"): number;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "delay", optionValue: number): void;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "start"): StartEvent;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "start", optionValue: StartEvent): void;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "drag"): DragEvent;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "drag", optionValue: DragEvent): void;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "stop"): StopEvent;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "stop", optionValue: StopEvent): void;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "capture"): CaptureEvent;
    /**
     */
    mouseWrapper(optionLiteral: 'option', optionName: "capture", optionValue: CaptureEvent): void;
    mouseWrapper(options: MouseWrapper): JQuery;
    mouseWrapper(optionLiteral: 'option', optionName: string): any;
    mouseWrapper(optionLiteral: 'option', options: MouseWrapper): JQuery;
    mouseWrapper(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    mouseWrapper(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igResponsiveContainer(methodName: "destroy"): void;
    igResponsiveContainer(methodName: "startPoller"): void;
    igResponsiveContainer(methodName: "stopPoller"): void;
    igResponsiveContainer(methodName: "removeCallback", callbackId: number): void;
    igResponsiveContainer(methodName: "addCallback", callback: Function, owner: Object, reactionStep: number, reactionDirection: Object): void;
    /**
     * The time between two resize checks in milliseconds.
     */
    igResponsiveContainer(optionLiteral: 'option', optionName: "pollingInterval"): number;
    /**
     * The time between two resize checks in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igResponsiveContainer(optionLiteral: 'option', optionName: "pollingInterval", optionValue: number): void;
    igResponsiveContainer(options: IgResponsiveContainer): JQuery;
    igResponsiveContainer(optionLiteral: 'option', optionName: string): any;
    igResponsiveContainer(optionLiteral: 'option', options: IgResponsiveContainer): JQuery;
    igResponsiveContainer(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igResponsiveContainer(methodName: string, ...methodParams: any[]): any;
}
interface IgSparkline {
    /**
     * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
     */
    width?: any;
    /**
     * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
     */
    height?: any;
    /**
     * Gets or sets the sparkline brush.
     */
    brush?: string;
    /**
     * Gets or sets the negative brush of the sparkline.
     */
    negativeBrush?: string;
    /**
     * Gets or sets the marker brush of the sparkline.
     */
    markerBrush?: string;
    /**
     * Gets or sets the negative marker brush of the sparkline.
     */
    negativeMarkerBrush?: string;
    /**
     * Gets or sets the first marker brush of the sparkline.
     */
    firstMarkerBrush?: string;
    /**
     * Gets or sets the last marker brush of the sparkline.
     */
    lastMarkerBrush?: string;
    /**
     * Gets or sets the high marker brush of the sparkline.
     */
    highMarkerBrush?: string;
    /**
     * Gets or sets the low marker brush of the sparkline.
     */
    lowMarkerBrush?: string;
    /**
     * Gets or sets the trendline brush of the sparkline.
     */
    trendLineBrush?: string;
    /**
     * Gets or sets the horizontal axis line brush of the sparkline.
     */
    horizontalAxisBrush?: string;
    /**
     * Gets or sets the vertical axis line brush of the sparkline.
     */
    verticalAxisBrush?: string;
    /**
     * Gets or sets the normal range brush of the sparkline.
     */
    normalRangeFill?: string;
    /**
     * Gets or sets the display state of the horizontal axis.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    horizontalAxisVisibility?: any;
    /**
     * Gets or sets the display state of the vertical axis.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    verticalAxisVisibility?: any;
    /**
     * Gets or sets the marker visibility of the sparkline.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    markerVisibility?: any;
    /**
     * Gets or sets the negative marker visibility of the sparkline.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    negativeMarkerVisibility?: any;
    /**
     * Gets or sets the first marker visibility of the sparkline.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    firstMarkerVisibility?: any;
    /**
     * Gets or sets the last marker visibility of the sparkline.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    lastMarkerVisibility?: any;
    /**
     * Gets or sets the low marker visibility of the sparkline.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    lowMarkerVisibility?: any;
    /**
     * Gets or sets the high marker visibility of the sparkline.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    highMarkerVisibility?: any;
    /**
     * Gets or sets the normal range visibility of the sparkline.
     *
     * Valid values:
     * "visible"
     * "collapsed"
     */
    normalRangeVisibility?: any;
    /**
     * Gets or sets the position of the normal range on the sparkline.
     */
    displayNormalRangeInFront?: boolean;
    /**
     * Gets or sets the marker size of the sparkline.
     */
    markerSize?: number;
    /**
     * Gets or sets the first marker size of the sparkline.
     */
    firstMarkerSize?: number;
    /**
     * Gets or sets the last marker size of the sparkline.
     */
    lastMarkerSize?: number;
    /**
     * Gets or sets the high marker size of the sparkline.
     */
    highMarkerSize?: number;
    /**
     * Gets or sets the low marker size of the sparkline.
     */
    lowMarkerSize?: number;
    /**
     * Gets or sets the negative marker size of the sparkline.
     */
    negativeMarkerSize?: number;
    /**
     * Gets or sets the line thickness of the sparkline.
     */
    lineThickness?: number;
    /**
     * Gets or sets the string path to the value column.
     */
    valueMemberPath?: string;
    /**
     * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
     */
    labelMemberPath?: string;
    /**
     * Gets or sets the type of trendline used by the sparkline.
     *
     * Valid values:
     * "none"
     * "linearFit"
     * "quadraticFit"
     * "cubicFit"
     * "quarticFit"
     * "quinticFit"
     * "logarithmicFit"
     * "exponentialFit"
     * "powerLawFit"
     * "simpleAverage"
     * "exponentialAverage"
     * "modifiedAverage"
     * "cumulativeAverage"
     * "weightedAverage"
     */
    trendLineType?: any;
    /**
     * Gets or sets the trendline period used by the sparkline.
     */
    trendLinePeriod?: number;
    /**
     * Gets or sets the thickness of the sparkline's trendline.
     */
    trendLineThickness?: number;
    /**
     * Gets or sets the minimum value of the normal range.
     */
    normalRangeMinimum?: number;
    /**
     * Gets or sets the maximum value of the normal range.
     */
    normalRangeMaximum?: number;
    /**
     * Gets or sets the display type of the sparkline.
     *
     * Valid values:
     * "line" Display the sparkline as a line.
     * "area" Display the sparkline as a filled polygon.
     * "column" Display the sparkline as a set of columns.
     * "winLoss" Display the sparkline as a set of columns on a boolean scale.
     */
    displayType?: any;
    /**
     * Gets or sets the way null values are interpreted.
     *
     * Valid values:
     * "linearInterpolate"
     * "dontPlot"
     */
    unknownValuePlotting?: any;
    /**
     * The value or content to display on the vertical axis.
     * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
     */
    verticalAxisLabel?: any;
    /**
     * The value or content to display on the horizontal axis.
     * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
     */
    horizontalAxisLabel?: any;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
     */
    formatLabel?: any;
    /**
     * Event which is raised before data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igSparkline.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     */
    dataBinding?: DataBindingEvent;
    /**
     * Event which is raised after data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igSparkline.
     * Use ui.data to obtain reference to array actual data which is displayed by chart.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     */
    dataBound?: DataBoundEvent;
    /**
     * Option for igSparkline
     */
    [optionName: string]: any;
}
interface IgSparklineMethods {
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igSparkline"): IgSparklineMethods;
}
interface JQuery {
    igSparkline(methodName: "destroy"): void;
    /**
     * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igSparkline(optionLiteral: 'option', optionName: "width"): any;
    /**
     * The width of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
     */
    igSparkline(optionLiteral: 'option', optionName: "height"): any;
    /**
     * The height of the sparkline. It can be set as a number in pixels, string (px) or percentage (%).
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  the sparkline brush.
     */
    igSparkline(optionLiteral: 'option', optionName: "brush"): string;
    /**
     * Sets the sparkline brush.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "brush", optionValue: string): void;
    /**
     * Gets  the negative brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "negativeBrush"): string;
    /**
     * Sets the negative brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "negativeBrush", optionValue: string): void;
    /**
     * Gets  the marker brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "markerBrush"): string;
    /**
     * Sets the marker brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "markerBrush", optionValue: string): void;
    /**
     * Gets  the negative marker brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "negativeMarkerBrush"): string;
    /**
     * Sets the negative marker brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "negativeMarkerBrush", optionValue: string): void;
    /**
     * Gets  the first marker brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "firstMarkerBrush"): string;
    /**
     * Sets the first marker brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "firstMarkerBrush", optionValue: string): void;
    /**
     * Gets  the last marker brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "lastMarkerBrush"): string;
    /**
     * Sets the last marker brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "lastMarkerBrush", optionValue: string): void;
    /**
     * Gets  the high marker brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "highMarkerBrush"): string;
    /**
     * Sets the high marker brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "highMarkerBrush", optionValue: string): void;
    /**
     * Gets  the low marker brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "lowMarkerBrush"): string;
    /**
     * Sets the low marker brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "lowMarkerBrush", optionValue: string): void;
    /**
     * Gets  the trendline brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "trendLineBrush"): string;
    /**
     * Sets the trendline brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "trendLineBrush", optionValue: string): void;
    /**
     * Gets  the horizontal axis line brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "horizontalAxisBrush"): string;
    /**
     * Sets the horizontal axis line brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "horizontalAxisBrush", optionValue: string): void;
    /**
     * Gets  the vertical axis line brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "verticalAxisBrush"): string;
    /**
     * Sets the vertical axis line brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "verticalAxisBrush", optionValue: string): void;
    /**
     * Gets  the normal range brush of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "normalRangeFill"): string;
    /**
     * Sets the normal range brush of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "normalRangeFill", optionValue: string): void;
    /**
     * Gets  the display state of the horizontal axis.
     */
    igSparkline(optionLiteral: 'option', optionName: "horizontalAxisVisibility"): any;
    /**
     * Sets the display state of the horizontal axis.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "horizontalAxisVisibility", optionValue: any): void;
    /**
     * Gets  the display state of the vertical axis.
     */
    igSparkline(optionLiteral: 'option', optionName: "verticalAxisVisibility"): any;
    /**
     * Sets the display state of the vertical axis.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "verticalAxisVisibility", optionValue: any): void;
    /**
     * Gets  the marker visibility of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "markerVisibility"): any;
    /**
     * Sets the marker visibility of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "markerVisibility", optionValue: any): void;
    /**
     * Gets  the negative marker visibility of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "negativeMarkerVisibility"): any;
    /**
     * Sets the negative marker visibility of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "negativeMarkerVisibility", optionValue: any): void;
    /**
     * Gets  the first marker visibility of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "firstMarkerVisibility"): any;
    /**
     * Sets the first marker visibility of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "firstMarkerVisibility", optionValue: any): void;
    /**
     * Gets  the last marker visibility of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "lastMarkerVisibility"): any;
    /**
     * Sets the last marker visibility of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "lastMarkerVisibility", optionValue: any): void;
    /**
     * Gets  the low marker visibility of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "lowMarkerVisibility"): any;
    /**
     * Sets the low marker visibility of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "lowMarkerVisibility", optionValue: any): void;
    /**
     * Gets  the high marker visibility of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "highMarkerVisibility"): any;
    /**
     * Sets the high marker visibility of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "highMarkerVisibility", optionValue: any): void;
    /**
     * Gets  the normal range visibility of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "normalRangeVisibility"): any;
    /**
     * Sets the normal range visibility of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "normalRangeVisibility", optionValue: any): void;
    /**
     * Gets  the position of the normal range on the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "displayNormalRangeInFront"): boolean;
    /**
     * Sets the position of the normal range on the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "displayNormalRangeInFront", optionValue: boolean): void;
    /**
     * Gets  the marker size of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "markerSize"): number;
    /**
     * Sets the marker size of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "markerSize", optionValue: number): void;
    /**
     * Gets  the first marker size of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "firstMarkerSize"): number;
    /**
     * Sets the first marker size of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "firstMarkerSize", optionValue: number): void;
    /**
     * Gets  the last marker size of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "lastMarkerSize"): number;
    /**
     * Sets the last marker size of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "lastMarkerSize", optionValue: number): void;
    /**
     * Gets  the high marker size of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "highMarkerSize"): number;
    /**
     * Sets the high marker size of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "highMarkerSize", optionValue: number): void;
    /**
     * Gets  the low marker size of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "lowMarkerSize"): number;
    /**
     * Sets the low marker size of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "lowMarkerSize", optionValue: number): void;
    /**
     * Gets  the negative marker size of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "negativeMarkerSize"): number;
    /**
     * Sets the negative marker size of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "negativeMarkerSize", optionValue: number): void;
    /**
     * Gets  the line thickness of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "lineThickness"): number;
    /**
     * Sets the line thickness of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "lineThickness", optionValue: number): void;
    /**
     * Gets  the string path to the value column.
     */
    igSparkline(optionLiteral: 'option', optionName: "valueMemberPath"): string;
    /**
     * Sets the string path to the value column.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "valueMemberPath", optionValue: string): void;
    /**
     * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
     */
    igSparkline(optionLiteral: 'option', optionName: "labelMemberPath"): string;
    /**
     * String identifier of a column or property name to get labels from on each item in the data source.  These labels will be retrieved from the first and last item, and displayed by the horizontal axis.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "labelMemberPath", optionValue: string): void;
    /**
     * Gets  the type of trendline used by the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "trendLineType"): any;
    /**
     * Sets the type of trendline used by the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "trendLineType", optionValue: any): void;
    /**
     * Gets  the trendline period used by the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "trendLinePeriod"): number;
    /**
     * Sets the trendline period used by the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "trendLinePeriod", optionValue: number): void;
    /**
     * Gets  the thickness of the sparkline's trendline.
     */
    igSparkline(optionLiteral: 'option', optionName: "trendLineThickness"): number;
    /**
     * Sets the thickness of the sparkline's trendline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "trendLineThickness", optionValue: number): void;
    /**
     * Gets  the minimum value of the normal range.
     */
    igSparkline(optionLiteral: 'option', optionName: "normalRangeMinimum"): number;
    /**
     * Sets the minimum value of the normal range.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "normalRangeMinimum", optionValue: number): void;
    /**
     * Gets  the maximum value of the normal range.
     */
    igSparkline(optionLiteral: 'option', optionName: "normalRangeMaximum"): number;
    /**
     * Sets the maximum value of the normal range.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "normalRangeMaximum", optionValue: number): void;
    /**
     * Gets  the display type of the sparkline.
     */
    igSparkline(optionLiteral: 'option', optionName: "displayType"): any;
    /**
     * Sets the display type of the sparkline.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "displayType", optionValue: any): void;
    /**
     * Gets  the way null values are interpreted.
     */
    igSparkline(optionLiteral: 'option', optionName: "unknownValuePlotting"): any;
    /**
     * Sets the way null values are interpreted.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "unknownValuePlotting", optionValue: any): void;
    /**
     * The value or content to display on the vertical axis.
     * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
     */
    igSparkline(optionLiteral: 'option', optionName: "verticalAxisLabel"): any;
    /**
     * The value or content to display on the vertical axis.
     * This can be set to a formatted string, such as "{0:n}", or it can be set to a DataTemplate.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "verticalAxisLabel", optionValue: any): void;
    /**
     * The value or content to display on the horizontal axis.
     * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
     */
    igSparkline(optionLiteral: 'option', optionName: "horizontalAxisLabel"): any;
    /**
     * The value or content to display on the horizontal axis.
     * This can be set to a formatted string, such as "{0}", or it can be set to a DataTemplate.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "horizontalAxisLabel", optionValue: any): void;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
     */
    igSparkline(optionLiteral: 'option', optionName: "formatLabel"): any;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
     *
     * @optionValue New value to be set.
     */
    igSparkline(optionLiteral: 'option', optionName: "formatLabel", optionValue: any): void;
    /**
     * Event which is raised before data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igSparkline.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     */
    igSparkline(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;
    /**
     * Event which is raised before data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igSparkline.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     *
     * @optionValue Define event handler function.
     */
    igSparkline(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;
    /**
     * Event which is raised after data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igSparkline.
     * Use ui.data to obtain reference to array actual data which is displayed by chart.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     */
    igSparkline(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;
    /**
     * Event which is raised after data binding.
     * Function takes first argument null and second argument ui.
     * Use ui.owner to obtain reference to igSparkline.
     * Use ui.data to obtain reference to array actual data which is displayed by chart.
     * Use ui.dataSource to obtain reference to instance of $.ig.DataSource.
     *
     * @optionValue Define event handler function.
     */
    igSparkline(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;
    igSparkline(options: IgSparkline): JQuery;
    igSparkline(optionLiteral: 'option', optionName: string): any;
    igSparkline(optionLiteral: 'option', options: IgSparkline): JQuery;
    igSparkline(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igSparkline(methodName: string, ...methodParams: any[]): any;
}
interface IgSplitButtonItem {
    /**
     * Item name
     */
    name?: string;
    /**
     * Item display label
     */
    label?: string;
    /**
     * Css class to represent the iconClass of the item
     */
    iconClass?: string;
    /**
     * Option for IgSplitButtonItem
     */
    [optionName: string]: any;
}
interface IgSplitButton {
    /**
     * Button items.
     */
    items?: IgSplitButtonItem[];
    /**
     * Default button item.
     */
    defaultItemName?: string;
    /**
     * Specifies whether the default button will be switched when another button is selected.
     */
    swapDefaultEnabled?: boolean;
    click?: ClickEvent;
    /**
     * Event fired after the button is expanded.
     */
    expanded?: ExpandedEvent;
    /**
     * Event fired before a button item is expanded.
     */
    expanding?: ExpandingEvent;
    /**
     * Event fired after the button is collapsed.
     */
    collapsed?: CollapsedEvent;
    /**
     * Event fired before a button item is collapsed.
     */
    collapsing?: CollapsingEvent;
    /**
     * Option for igSplitButton
     */
    [optionName: string]: any;
}
interface IgSplitButtonMethods {
    /**
     * Switch to given button.
     *
     * @param button . The button to which we are going to switch.
     */
    switchToButton(button: Object): void;
    widget(): void;
    /**
     * Toggle widget state between collapsed and expanded.
     *
     * @param e
     */
    toggle(e: Object): void;
    /**
     * Collapse the widget.
     *
     * @param e
     */
    collapse(e: Object): void;
    /**
     * Expands the widget.
     *
     * @param e
     */
    expand(e: Object): void;
    /**
     * Destroy the widget.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igSplitButton"): IgSplitButtonMethods;
}
interface JQuery {
    igSplitButton(methodName: "switchToButton", button: Object): void;
    igSplitButton(methodName: "widget"): void;
    igSplitButton(methodName: "toggle", e: Object): void;
    igSplitButton(methodName: "collapse", e: Object): void;
    igSplitButton(methodName: "expand", e: Object): void;
    igSplitButton(methodName: "destroy"): void;
    /**
     * Button items.
     */
    igSplitButton(optionLiteral: 'option', optionName: "items"): IgSplitButtonItem[];
    /**
     * Button items.
     *
     * @optionValue New value to be set.
     */
    igSplitButton(optionLiteral: 'option', optionName: "items", optionValue: IgSplitButtonItem[]): void;
    /**
     * Default button item.
     */
    igSplitButton(optionLiteral: 'option', optionName: "defaultItemName"): string;
    /**
     * Default button item.
     *
     * @optionValue New value to be set.
     */
    igSplitButton(optionLiteral: 'option', optionName: "defaultItemName", optionValue: string): void;
    /**
     * Gets whether the default button will be switched when another button is selected.
     */
    igSplitButton(optionLiteral: 'option', optionName: "swapDefaultEnabled"): boolean;
    /**
     * Sets whether the default button will be switched when another button is selected.
     *
     * @optionValue New value to be set.
     */
    igSplitButton(optionLiteral: 'option', optionName: "swapDefaultEnabled", optionValue: boolean): void;
    /**
     */
    igSplitButton(optionLiteral: 'option', optionName: "click"): ClickEvent;
    /**
     */
    igSplitButton(optionLiteral: 'option', optionName: "click", optionValue: ClickEvent): void;
    /**
     * Event fired after the button is expanded.
     */
    igSplitButton(optionLiteral: 'option', optionName: "expanded"): ExpandedEvent;
    /**
     * Event fired after the button is expanded.
     *
     * @optionValue Define event handler function.
     */
    igSplitButton(optionLiteral: 'option', optionName: "expanded", optionValue: ExpandedEvent): void;
    /**
     * Event fired before a button item is expanded.
     */
    igSplitButton(optionLiteral: 'option', optionName: "expanding"): ExpandingEvent;
    /**
     * Event fired before a button item is expanded.
     *
     * @optionValue Define event handler function.
     */
    igSplitButton(optionLiteral: 'option', optionName: "expanding", optionValue: ExpandingEvent): void;
    /**
     * Event fired after the button is collapsed.
     */
    igSplitButton(optionLiteral: 'option', optionName: "collapsed"): CollapsedEvent;
    /**
     * Event fired after the button is collapsed.
     *
     * @optionValue Define event handler function.
     */
    igSplitButton(optionLiteral: 'option', optionName: "collapsed", optionValue: CollapsedEvent): void;
    /**
     * Event fired before a button item is collapsed.
     */
    igSplitButton(optionLiteral: 'option', optionName: "collapsing"): CollapsingEvent;
    /**
     * Event fired before a button item is collapsed.
     *
     * @optionValue Define event handler function.
     */
    igSplitButton(optionLiteral: 'option', optionName: "collapsing", optionValue: CollapsingEvent): void;
    igSplitButton(options: IgSplitButton): JQuery;
    igSplitButton(optionLiteral: 'option', optionName: string): any;
    igSplitButton(optionLiteral: 'option', options: IgSplitButton): JQuery;
    igSplitButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igSplitButton(methodName: string, ...methodParams: any[]): any;
}
interface IgSplitterPanel {
    /**
     * Size="string|int" Gets sets the size of the panel
     */
    size?: any;
    /**
     * Gets sets the minimum size that the panel can have
     */
    min?: any;
    /**
     * Gets sets the maximum size that the panel can have
     */
    max?: any;
    /**
     * Gets sets whether the panel can be resized
     */
    resizable?: boolean;
    /**
     * Gets sets whether the panel is initially collapsed
     */
    collapsed?: boolean;
    /**
     * Gets sets whether the panel can be collapsed
     */
    collapsible?: boolean;
    /**
     * Option for IgSplitterPanel
     */
    [optionName: string]: any;
}
interface ResizeStartedEvent {
    (event: Event, ui: ResizeStartedEventUIParam): void;
}
interface ResizeStartedEventUIParam {
    /**
     * Used to get a reference to the splitter instance.
     */
    owner?: any;
}
interface ResizingEvent {
    (event: Event, ui: ResizingEventUIParam): void;
}
interface ResizingEventUIParam {
    /**
     * Used to get a reference to the splitter instance.
     */
    owner?: any;
}
interface ResizeEndedEvent {
    (event: Event, ui: ResizeEndedEventUIParam): void;
}
interface ResizeEndedEventUIParam {
    /**
     * Used to get a reference to the splitter instance.
     */
    owner?: any;
}
interface LayoutRefreshingEvent {
    (event: Event, ui: LayoutRefreshingEventUIParam): void;
}
interface LayoutRefreshingEventUIParam {
    /**
     * Used to get a reference to the splitter instance.
     */
    owner?: any;
}
interface LayoutRefreshedEvent {
    (event: Event, ui: LayoutRefreshedEventUIParam): void;
}
interface LayoutRefreshedEventUIParam {
    /**
     * Used to get a reference to the splitter instance.
     */
    owner?: any;
}
interface IgSplitter {
    /**
     * Gets sets how the width of the control can be set.
     */
    width?: any;
    /**
     * Gets sets how the height of the control can be set.
     */
    height?: any;
    /**
     * Specifies the orientation of the splitter.
     *
     * Valid values:
     * "vertical"
     * "horizontal"
     */
    orientation?: any;
    /**
     * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
     */
    panels?: IgSplitterPanel[];
    /**
     * Specifies drag delta of the split bar. In order to start dragging move, the mouse has to be moved specific distance from original position.
     */
    dragDelta?: number;
    /**
     * Specifies whether the other splitters on the page will be resized as this splitter resizes.
     */
    resizeOtherSplitters?: boolean;
    /**
     * Fired after collapsing is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     * Use ui.index to get an index of collased panel.
     */
    collapsed?: CollapsedEvent;
    /**
     * Fired after expanding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     * Use ui.index to get an index of expanded panel.
     */
    expanded?: ExpandedEvent;
    /**
     * Fired before split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    resizeStarted?: ResizeStartedEvent;
    /**
     * Fired while split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    resizing?: ResizingEvent;
    /**
     * Fired after split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    resizeEnded?: ResizeEndedEvent;
    /**
     * Fired before the panels are going to go refreshed because of browser's resizing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    layoutRefreshing?: LayoutRefreshingEvent;
    /**
     * Fired after the panels are refreshed because of browser's resizing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    layoutRefreshed?: LayoutRefreshedEvent;
    /**
     * Option for igSplitter
     */
    [optionName: string]: any;
}
interface IgSplitterMethods {
    /**
     * Returns the element that represents this widget.
     */
    widget(): Object;
    /**
     * Expand the specified panel.
     *
     * @param index     Specifies the index of the panel to expand.
     */
    expandAt(index: Object): void;
    /**
     * Collapse the specified panel.
     *
     * @param index     Specifies the index of the panel to collapse.
     */
    collapseAt(index: Object): void;
    /**
     * Retrieves the jQuery element of the first panel.
     */
    firstPanel(): Object;
    /**
     * Retrieves the jQuery element of the second panel.
     */
    secondPanel(): Object;
    /**
     * You can refresh layout after the splitter is rendered in order to render it correctly.
     */
    refreshLayout(): void;
    /**
     * You can set new size of the first panel after the splitter is rendered.
     *
     * @param size    Specifies the new size of the first panel.
     */
    setFirstPanelSize(size: Object): void;
    /**
     * You can set new size of the second panel after the splitter is rendered.
     *
     * @param size    Specifies the new size of the second panel.
     */
    setSecondPanelSize(size: Object): void;
    /**
     * Destructor
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igSplitter"): IgSplitterMethods;
}
interface JQuery {
    igSplitter(methodName: "widget"): Object;
    igSplitter(methodName: "expandAt", index: Object): void;
    igSplitter(methodName: "collapseAt", index: Object): void;
    igSplitter(methodName: "firstPanel"): Object;
    igSplitter(methodName: "secondPanel"): Object;
    igSplitter(methodName: "refreshLayout"): void;
    igSplitter(methodName: "setFirstPanelSize", size: Object): void;
    igSplitter(methodName: "setSecondPanelSize", size: Object): void;
    igSplitter(methodName: "destroy"): void;
    /**
     * Gets  how the width of the control can be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "width"): any;
    /**
     * Sets how the width of the control can be set.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * Gets  how the height of the control can be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "height"): any;
    /**
     * Sets how the height of the control can be set.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets the orientation of the splitter.
     */
    igSplitter(optionLiteral: 'option', optionName: "orientation"): any;
    /**
     * Sets the orientation of the splitter.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "orientation", optionValue: any): void;
    /**
     * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
     */
    igSplitter(optionLiteral: 'option', optionName: "panels"): IgSplitterPanel[];
    /**
     * Array of objects options that specify the panels settings. The panels are no more than two. Settings are specified via enumeration.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "panels", optionValue: IgSplitterPanel[]): void;
    /**
     * Gets drag delta of the split bar. In order to start dragging move, the mouse has to be moved specific distance from original position.
     */
    igSplitter(optionLiteral: 'option', optionName: "dragDelta"): number;
    /**
     * Sets drag delta of the split bar. In order to start dragging move, the mouse has to be moved specific distance from original position.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "dragDelta", optionValue: number): void;
    /**
     * Gets whether the other splitters on the page will be resized as this splitter resizes.
     */
    igSplitter(optionLiteral: 'option', optionName: "resizeOtherSplitters"): boolean;
    /**
     * Sets whether the other splitters on the page will be resized as this splitter resizes.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "resizeOtherSplitters", optionValue: boolean): void;
    /**
     * Fired after collapsing is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     * Use ui.index to get an index of collased panel.
     */
    igSplitter(optionLiteral: 'option', optionName: "collapsed"): CollapsedEvent;
    /**
     * Fired after collapsing is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     * Use ui.index to get an index of collased panel.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "collapsed", optionValue: CollapsedEvent): void;
    /**
     * Fired after expanding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     * Use ui.index to get an index of expanded panel.
     */
    igSplitter(optionLiteral: 'option', optionName: "expanded"): ExpandedEvent;
    /**
     * Fired after expanding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     * Use ui.index to get an index of expanded panel.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "expanded", optionValue: ExpandedEvent): void;
    /**
     * Fired before split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    igSplitter(optionLiteral: 'option', optionName: "resizeStarted"): ResizeStartedEvent;
    /**
     * Fired before split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "resizeStarted", optionValue: ResizeStartedEvent): void;
    /**
     * Fired while split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    igSplitter(optionLiteral: 'option', optionName: "resizing"): ResizingEvent;
    /**
     * Fired while split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "resizing", optionValue: ResizingEvent): void;
    /**
     * Fired after split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    igSplitter(optionLiteral: 'option', optionName: "resizeEnded"): ResizeEndedEvent;
    /**
     * Fired after split bar move is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "resizeEnded", optionValue: ResizeEndedEvent): void;
    /**
     * Fired before the panels are going to go refreshed because of browser's resizing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    igSplitter(optionLiteral: 'option', optionName: "layoutRefreshing"): LayoutRefreshingEvent;
    /**
     * Fired before the panels are going to go refreshed because of browser's resizing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "layoutRefreshing", optionValue: LayoutRefreshingEvent): void;
    /**
     * Fired after the panels are refreshed because of browser's resizing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     */
    igSplitter(optionLiteral: 'option', optionName: "layoutRefreshed"): LayoutRefreshedEvent;
    /**
     * Fired after the panels are refreshed because of browser's resizing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the splitter instance.
     *
     * @optionValue New value to be set.
     */
    igSplitter(optionLiteral: 'option', optionName: "layoutRefreshed", optionValue: LayoutRefreshedEvent): void;
    igSplitter(options: IgSplitter): JQuery;
    igSplitter(optionLiteral: 'option', optionName: string): any;
    igSplitter(optionLiteral: 'option', options: IgSplitter): JQuery;
    igSplitter(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igSplitter(methodName: string, ...methodParams: any[]): any;
}
interface TileRenderingEvent {
    (event: Event, ui: TileRenderingEventUIParam): void;
}
interface TileRenderingEventUIParam {
    /**
     * Used to get a reference to the tile manager performing rendering.
     */
    owner?: any;
    /**
     * Used to get a reference to the tile being rendered
     */
    tile?: any;
}
interface TileRenderedEvent {
    (event: Event, ui: TileRenderedEventUIParam): void;
}
interface TileRenderedEventUIParam {
    /**
     * Used to get a reference to the tile manager performing rendering.
     */
    owner?: any;
    /**
     * Used to get a reference to the rendered tile
     */
    tile?: any;
}
interface TileMaximizingEvent {
    (event: Event, ui: TileMaximizingEventUIParam): void;
}
interface TileMaximizingEventUIParam {
    /**
     * Used to get a reference to the tile manager performing the maximizing the tile belongs to.
     */
    owner?: any;
    /**
     * Used to get the jQuery element of the tile being maximized
     */
    tile?: any;
    /**
     * Used to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
     */
    minimizingTile?: any;
}
interface TileMaximizedEvent {
    (event: Event, ui: TileMaximizedEventUIParam): void;
}
interface TileMaximizedEventUIParam {
    /**
     * Used to get a reference to the tile manager the maximized tile belongs to.
     */
    owner?: any;
    /**
     * Used to get the jQuery element of the maximized tile
     */
    tile?: any;
}
interface TileMinimizingEvent {
    (event: Event, ui: TileMinimizingEventUIParam): void;
}
interface TileMinimizingEventUIParam {
    /**
     * Used to get a reference to the tile manager performing the minimizing the tile belongs to.
     */
    owner?: any;
    /**
     * Used to get the jQuery element of the tile being minimized
     */
    tile?: any;
    /**
     * Used to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
     */
    maximizingTile?: any;
}
interface TileMinimizedEvent {
    (event: Event, ui: TileMinimizedEventUIParam): void;
}
interface TileMinimizedEventUIParam {
    /**
     * Used to get a reference to the tile manager the minimized tile belongs to.
     */
    owner?: any;
    /**
     * Used to get the jQuery element of the minimized tile
     */
    tile?: any;
}
interface IgTileManager {
    width?: any;
    /**
     * Gets sets the height of the container.
     */
    height?: any;
    /**
     * Gets sets the width of each column in the container.
     */
    columnWidth?: any;
    /**
     * The height of each column in the container.
     */
    columnHeight?: any;
    /**
     * Gets sets the columns count in the container.
     */
    cols?: any;
    /**
     * Gets sets the rows count in the container.
     */
    rows?: any;
    /**
     * Gets sets the horizontal spacing between tiles.
     *                 number The horizontal spacing between tiles can be set as a number.
     */
    marginLeft?: number;
    /**
     * Gets sets the vertical spacing between tiles.
     *                 number The vertical spacing between tiles can be set as a number.
     */
    marginTop?: number;
    /**
     * Gets sets whether the items will rearrange when the container is resized.
     */
    rearrangeItems?: boolean;
    /**
     * Gets sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.                array An array with colSpan, rowSpan, colIndex, rowIndex configurations for each tile.                null Default tile configurations of rowSpan: 1 and colSpan: 1 will be used.
     *
     * Valid values:
     * "array" An array with colSpan, rowSpan, colIndex, rowIndex configurations for each tile.
     */
    items?: any;
    /**
     * Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     */
    dataSource?: any;
    /**
     * Gets sets the content of the tiles in minimized state.
     */
    minimizedState?: any;
    /**
     * Gets sets the content of the tiles in maximized state.
     */
    maximizedState?: any;
    /**
     * Gets sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
     */
    maximizedTileIndex?: any;
    /**
     * Gets sets how many columns to be displayed in the right panel when the tiles are minimized.
     */
    rightPanelCols?: any;
    /**
     * Gets sets the width of the minimized tiles in the right panel.
     */
    rightPanelTilesWidth?: any;
    /**
     * Gets sets the height of the minimized tiles in the right panel.
     */
    rightPanelTilesHeight?: any;
    /**
     * Gets sets whether the right panel should show scrollbar when tiles are overflowing.
     */
    showRightPanelScroll?: boolean;
    /**
     * Gets sets whether the splitter should be shown.
     */
    showSplitter?: boolean;
    /**
     * Gets sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
     */
    preventMaximizingSelector?: string;
    /**
     * Gets sets the duration of the animations in the tile manager.
     */
    animationDuration?: number;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it.
     */
    dataSourceUrl?: string;
    /**
     * see $.ig.DataSource.
     */
    responseDataKey?: any;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     * null Option is ignored.
     */
    responseDataType?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * Specifies the HTTP verb to be used to issue the request.
     */
    requestType?: string;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
     */
    responseContentType?: string;
    /**
     * Fired before databinding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing databinding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource the tile manager is to be databound to.
     */
    dataBinding?: DataBindingEvent;
    /**
     * Fired after databinding is complete
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing databinding.
     * Use ui.dataView to get a reference to the data the tile manager is databound to.
     * Use ui.success to get see if the databinding was performed correctly.
     * Use ui.errorMessage to get the error message if the databinding failed.
     */
    dataBound?: DataBoundEvent;
    /**
     * Fired before rendering of the tile manager begins.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     * Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
     * Use ui.items to get a reference to the item configurations the tile manager has.
     */
    rendering?: RenderingEvent;
    /**
     * Fired after rendering of the tile manager completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     */
    rendered?: RenderedEvent;
    /**
     * Event fired before a tile is rendered in the container
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the tile manager performing rendering.
     *                 Use ui.tile to get a reference to the tile being rendered
     */
    tileRendering?: TileRenderingEvent;
    /**
     * Event fired after a tile has been rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     * Use ui.tile to get a reference to the rendered tile
     */
    tileRendered?: TileRenderedEvent;
    /**
     * Fired before a tile in the tile manager is maximized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
     * Use ui.tile to get the jQuery element of the tile being maximized
     *                 Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
     */
    tileMaximizing?: TileMaximizingEvent;
    /**
     * Fired after a tile in the tile manager is maximized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
     * Use ui.tile to get the jQuery element of the maximized tile
     */
    tileMaximized?: TileMaximizedEvent;
    /**
     * Fired before a tile in the tile manager is minimized.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
     *                 Use ui.tile to get the jQuery element of the tile being minimized
     *                 Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
     */
    tileMinimizing?: TileMinimizingEvent;
    /**
     * Fired after a tile in the tile manager is minimized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
     * Use ui.tile to get the jQuery element of the minimized tile
     */
    tileMinimized?: TileMinimizedEvent;
    /**
     * Option for igTileManager
     */
    [optionName: string]: any;
}
interface IgTileManagerMethods {
    /**
     * Maximizes a given tile.
     *
     * @param $tileToMaximize Specifies the jQuery object of the tile element to be maximized.
     * @param animDuration Specifies the animation duration for this maximizing.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    maximize($tileToMaximize: Object, animDuration?: number, event?: Object): void;
    /**
     * Minimizes the maximized tile. Has no effect if no maximized tile is present.
     *
     * @param animDuration Specifies the animation duration for this minimize.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    minimize(animDuration?: number, event?: Object): void;
    /**
     * Returns the maximized tile or null if such is not present.
     * returnType="object|null" Returns the maximized tile or null if such is not present.
     */
    maximizedTile(): void;
    /**
     * Returns an array with the tiles in minimized state or null if such are not present.
     * returnType="object|null" Returns an array with the tiles in minimized state or null if such are not present.
     */
    minimizedTiles(): void;
    /**
     * Returns the splitter associated with this tile manager or
     * null if the tile manager was instantiated with maximizedTileIndex.
     * returnType="object|null" Returns the splitter associated with this tile manager or
     * null if the tile manager was instantiated with maximizedTileIndex.
     */
    splitter(): void;
    /**
     * Returns the layout manager associated with this tile manager.
     */
    layoutManager(): Object;
    /**
     * Reflow the tile manager. Rearranging the tiles to fit in the container
     *
     * @param forceReflow Indicates whether the reflow should be forced. Useful in cases where the items size and position was changed manually.
     * @param animationDuration The animation duration to be used for this reflow only.
     * @param event Indicates the browser even which triggered this action (not API).
     */
    reflow(forceReflow?: Object, animationDuration?: number, event?: Object): void;
    /**
     * Returns the element that represents this widget.
     */
    widget(): Object;
    /**
     * Performs databinding on the tile manager
     */
    dataBind(): void;
    /**
     * Destructor
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igTileManager"): IgTileManagerMethods;
}
interface JQuery {
    igTileManager(methodName: "maximize", $tileToMaximize: Object, animDuration?: number, event?: Object): void;
    igTileManager(methodName: "minimize", animDuration?: number, event?: Object): void;
    igTileManager(methodName: "maximizedTile"): void;
    igTileManager(methodName: "minimizedTiles"): void;
    igTileManager(methodName: "splitter"): void;
    igTileManager(methodName: "layoutManager"): Object;
    igTileManager(methodName: "reflow", forceReflow?: Object, animationDuration?: number, event?: Object): void;
    igTileManager(methodName: "widget"): Object;
    igTileManager(methodName: "dataBind"): void;
    igTileManager(methodName: "destroy"): void;
    /**
     */
    igTileManager(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igTileManager(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * Gets  the height of the container.
     */
    igTileManager(optionLiteral: 'option', optionName: "height"): any;
    /**
     * Sets the height of the container.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets  the width of each column in the container.
     */
    igTileManager(optionLiteral: 'option', optionName: "columnWidth"): any;
    /**
     * Sets the width of each column in the container.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "columnWidth", optionValue: any): void;
    /**
     * The height of each column in the container.
     */
    igTileManager(optionLiteral: 'option', optionName: "columnHeight"): any;
    /**
     * The height of each column in the container.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "columnHeight", optionValue: any): void;
    /**
     * Gets  the columns count in the container.
     */
    igTileManager(optionLiteral: 'option', optionName: "cols"): any;
    /**
     * Sets the columns count in the container.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "cols", optionValue: any): void;
    /**
     * Gets  the rows count in the container.
     */
    igTileManager(optionLiteral: 'option', optionName: "rows"): any;
    /**
     * Sets the rows count in the container.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "rows", optionValue: any): void;
    /**
     * Gets  the horizontal spacing between tiles.
     *                 number The horizontal spacing between tiles can be set as a number.
     */
    igTileManager(optionLiteral: 'option', optionName: "marginLeft"): number;
    /**
     * Sets the horizontal spacing between tiles.
     *                 number The horizontal spacing between tiles can be set as a number.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "marginLeft", optionValue: number): void;
    /**
     * Gets  the vertical spacing between tiles.
     *                 number The vertical spacing between tiles can be set as a number.
     */
    igTileManager(optionLiteral: 'option', optionName: "marginTop"): number;
    /**
     * Sets the vertical spacing between tiles.
     *                 number The vertical spacing between tiles can be set as a number.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "marginTop", optionValue: number): void;
    /**
     * Gets  whether the items will rearrange when the container is resized.
     */
    igTileManager(optionLiteral: 'option', optionName: "rearrangeItems"): boolean;
    /**
     * Sets whether the items will rearrange when the container is resized.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "rearrangeItems", optionValue: boolean): void;
    /**
     * Gets  the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.                array An array with colSpan, rowSpan, colIndex, rowIndex configurations for each tile.                null Default tile configurations of rowSpan: 1 and colSpan: 1 will be used.
     */
    igTileManager(optionLiteral: 'option', optionName: "items"): any;
    /**
     * Sets the tiles configurations. Every tile is described by rowSpan, colSpan, rowIndex and colIndex.                array An array with colSpan, rowSpan, colIndex, rowIndex configurations for each tile.                null Default tile configurations of rowSpan: 1 and colSpan: 1 will be used.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "items", optionValue: any): void;
    /**
     * Gets any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * Sets any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * Gets  the content of the tiles in minimized state.
     */
    igTileManager(optionLiteral: 'option', optionName: "minimizedState"): any;
    /**
     * Sets the content of the tiles in minimized state.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "minimizedState", optionValue: any): void;
    /**
     * Gets  the content of the tiles in maximized state.
     */
    igTileManager(optionLiteral: 'option', optionName: "maximizedState"): any;
    /**
     * Sets the content of the tiles in maximized state.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "maximizedState", optionValue: any): void;
    /**
     * Gets  the index of which items configuration will be used for positioning and sizing of the maximized tile.
     */
    igTileManager(optionLiteral: 'option', optionName: "maximizedTileIndex"): any;
    /**
     * Sets the index of which items configuration will be used for positioning and sizing of the maximized tile.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "maximizedTileIndex", optionValue: any): void;
    /**
     * Gets  how many columns to be displayed in the right panel when the tiles are minimized.
     */
    igTileManager(optionLiteral: 'option', optionName: "rightPanelCols"): any;
    /**
     * Sets how many columns to be displayed in the right panel when the tiles are minimized.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "rightPanelCols", optionValue: any): void;
    /**
     * Gets  the width of the minimized tiles in the right panel.
     */
    igTileManager(optionLiteral: 'option', optionName: "rightPanelTilesWidth"): any;
    /**
     * Sets the width of the minimized tiles in the right panel.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "rightPanelTilesWidth", optionValue: any): void;
    /**
     * Gets  the height of the minimized tiles in the right panel.
     */
    igTileManager(optionLiteral: 'option', optionName: "rightPanelTilesHeight"): any;
    /**
     * Sets the height of the minimized tiles in the right panel.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "rightPanelTilesHeight", optionValue: any): void;
    /**
     * Gets  whether the right panel should show scrollbar when tiles are overflowing.
     */
    igTileManager(optionLiteral: 'option', optionName: "showRightPanelScroll"): boolean;
    /**
     * Sets whether the right panel should show scrollbar when tiles are overflowing.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "showRightPanelScroll", optionValue: boolean): void;
    /**
     * Gets  whether the splitter should be shown.
     */
    igTileManager(optionLiteral: 'option', optionName: "showSplitter"): boolean;
    /**
     * Sets whether the splitter should be shown.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "showSplitter", optionValue: boolean): void;
    /**
     * Gets  JQuery selector that specifies which elements will not trigger maximizing when clicked on.
     */
    igTileManager(optionLiteral: 'option', optionName: "preventMaximizingSelector"): string;
    /**
     * Sets JQuery selector that specifies which elements will not trigger maximizing when clicked on.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "preventMaximizingSelector", optionValue: string): void;
    /**
     * Gets  the duration of the animations in the tile manager.
     */
    igTileManager(optionLiteral: 'option', optionName: "animationDuration"): number;
    /**
     * Sets the duration of the animations in the tile manager.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;
    /**
     * Gets a remote URL accepted by $.ig.DataSource in order to request data from it.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataSourceUrl"): string;
    /**
     * Sets a remote URL accepted by $.ig.DataSource in order to request data from it.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;
    /**
     * See $.ig.DataSource.
     */
    igTileManager(optionLiteral: 'option', optionName: "responseDataKey"): any;
    /**
     * See $.ig.DataSource.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "responseDataKey", optionValue: any): void;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     * null Option is ignored.
     */
    igTileManager(optionLiteral: 'option', optionName: "responseDataType"): string;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     * null Option is ignored.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "responseDataType", optionValue: string): void;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataSourceType"): string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;
    /**
     * Specifies the HTTP verb to be used to issue the request.
     */
    igTileManager(optionLiteral: 'option', optionName: "requestType"): string;
    /**
     * Specifies the HTTP verb to be used to issue the request.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
     */
    igTileManager(optionLiteral: 'option', optionName: "responseContentType"): string;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;
    /**
     * Fired before databinding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing databinding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource the tile manager is to be databound to.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;
    /**
     * Fired before databinding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing databinding.
     * Use ui.dataSource to get a reference to the $.ig.DataSource the tile manager is to be databound to.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;
    /**
     * Fired after databinding is complete
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing databinding.
     * Use ui.dataView to get a reference to the data the tile manager is databound to.
     * Use ui.success to get see if the databinding was performed correctly.
     * Use ui.errorMessage to get the error message if the databinding failed.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;
    /**
     * Fired after databinding is complete
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing databinding.
     * Use ui.dataView to get a reference to the data the tile manager is databound to.
     * Use ui.success to get see if the databinding was performed correctly.
     * Use ui.errorMessage to get the error message if the databinding failed.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;
    /**
     * Fired before rendering of the tile manager begins.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     * Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
     * Use ui.items to get a reference to the item configurations the tile manager has.
     */
    igTileManager(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;
    /**
     * Fired before rendering of the tile manager begins.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     * Use ui.tiles to get a reference to the tiles the tile manager is going to render. If using data source this referes to the data provided.
     * Use ui.items to get a reference to the item configurations the tile manager has.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;
    /**
     * Fired after rendering of the tile manager completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     */
    igTileManager(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Fired after rendering of the tile manager completes.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Event fired before a tile is rendered in the container
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the tile manager performing rendering.
     *                 Use ui.tile to get a reference to the tile being rendered
     */
    igTileManager(optionLiteral: 'option', optionName: "tileRendering"): TileRenderingEvent;
    /**
     * Event fired before a tile is rendered in the container
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the tile manager performing rendering.
     *                 Use ui.tile to get a reference to the tile being rendered
     *
     * @optionValue Define event handler function.
     */
    igTileManager(optionLiteral: 'option', optionName: "tileRendering", optionValue: TileRenderingEvent): void;
    /**
     * Event fired after a tile has been rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     * Use ui.tile to get a reference to the rendered tile
     */
    igTileManager(optionLiteral: 'option', optionName: "tileRendered"): TileRenderedEvent;
    /**
     * Event fired after a tile has been rendered in the container
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing rendering.
     * Use ui.tile to get a reference to the rendered tile
     *
     * @optionValue Define event handler function.
     */
    igTileManager(optionLiteral: 'option', optionName: "tileRendered", optionValue: TileRenderedEvent): void;
    /**
     * Fired before a tile in the tile manager is maximized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
     * Use ui.tile to get the jQuery element of the tile being maximized
     *                 Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
     */
    igTileManager(optionLiteral: 'option', optionName: "tileMaximizing"): TileMaximizingEvent;
    /**
     * Fired before a tile in the tile manager is maximized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager performing the maximizing the tile belongs to.
     * Use ui.tile to get the jQuery element of the tile being maximized
     *                 Use ui.minimizingTile to get reference to the tile that is minimizing simultaneously or null if no tile is minimizing.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "tileMaximizing", optionValue: TileMaximizingEvent): void;
    /**
     * Fired after a tile in the tile manager is maximized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
     * Use ui.tile to get the jQuery element of the maximized tile
     */
    igTileManager(optionLiteral: 'option', optionName: "tileMaximized"): TileMaximizedEvent;
    /**
     * Fired after a tile in the tile manager is maximized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager the maximized tile belongs to.
     * Use ui.tile to get the jQuery element of the maximized tile
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "tileMaximized", optionValue: TileMaximizedEvent): void;
    /**
     * Fired before a tile in the tile manager is minimized.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
     *                 Use ui.tile to get the jQuery element of the tile being minimized
     *                 Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
     */
    igTileManager(optionLiteral: 'option', optionName: "tileMinimizing"): TileMinimizingEvent;
    /**
     * Fired before a tile in the tile manager is minimized.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the tile manager performing the minimizing the tile belongs to.
     *                 Use ui.tile to get the jQuery element of the tile being minimized
     *                 Use ui.maximizingTile to get reference to the tile that is maximizing simultaneously or null if no tile is maximizing.
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "tileMinimizing", optionValue: TileMinimizingEvent): void;
    /**
     * Fired after a tile in the tile manager is minimized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
     * Use ui.tile to get the jQuery element of the minimized tile
     */
    igTileManager(optionLiteral: 'option', optionName: "tileMinimized"): TileMinimizedEvent;
    /**
     * Fired after a tile in the tile manager is minimized.
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tile manager the minimized tile belongs to.
     * Use ui.tile to get the jQuery element of the minimized tile
     *
     * @optionValue New value to be set.
     */
    igTileManager(optionLiteral: 'option', optionName: "tileMinimized", optionValue: TileMinimizedEvent): void;
    igTileManager(options: IgTileManager): JQuery;
    igTileManager(optionLiteral: 'option', optionName: string): any;
    igTileManager(optionLiteral: 'option', options: IgTileManager): JQuery;
    igTileManager(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTileManager(methodName: string, ...methodParams: any[]): any;
}
interface ToolbarButtonClickEvent {
    (event: Event, ui: ToolbarButtonClickEventUIParam): void;
}
interface ToolbarButtonClickEventUIParam {
}
interface ToolbarComboOpeningEvent {
    (event: Event, ui: ToolbarComboOpeningEventUIParam): void;
}
interface ToolbarComboOpeningEventUIParam {
}
interface ToolbarComboSelectedEvent {
    (event: Event, ui: ToolbarComboSelectedEventUIParam): void;
}
interface ToolbarComboSelectedEventUIParam {
}
interface ToolbarCustomItemClickEvent {
    (event: Event, ui: ToolbarCustomItemClickEventUIParam): void;
}
interface ToolbarCustomItemClickEventUIParam {
}
interface ItemRemovedEvent {
    (event: Event, ui: ItemRemovedEventUIParam): void;
}
interface ItemRemovedEventUIParam {
}
interface ItemAddedEvent {
    (event: Event, ui: ItemAddedEventUIParam): void;
}
interface ItemAddedEventUIParam {
}
interface ItemDisableEvent {
    (event: Event, ui: ItemDisableEventUIParam): void;
}
interface ItemDisableEventUIParam {
}
interface ItemEnabledEvent {
    (event: Event, ui: ItemEnabledEventUIParam): void;
}
interface ItemEnabledEventUIParam {
}
interface WindowResizedEvent {
    (event: Event, ui: WindowResizedEventUIParam): void;
}
interface WindowResizedEventUIParam {
}
interface IgToolbar {
    /**
     * Set or get the widget height.
     */
    height?: any;
    /**
     * Set or get the widget width.
     */
    width?: any;
    /**
     * Set or get allowCollapsing property
     */
    allowCollapsing?: boolean;
    /**
     * The css class that will be applied to collapseButtonIcon.
     */
    collapseButtonIcon?: string;
    /**
     * The css class that will be applied to expandButtonIcon.
     */
    expandButtonIcon?: string;
    /**
     * Formal name of the widget.
     */
    name?: string;
    /**
     * Display Name of the widget.
     */
    displayName?: string;
    /**
     * Get or set Toolbar's items.
     */
    items?: any[];
    /**
     * Get or set widget's isExpanded property.
     */
    isExpanded?: boolean;
    /**
     * Cance="false" Event fired after a click on any toolbar button
     */
    toolbarButtonClick?: ToolbarButtonClickEvent;
    /**
     * Event fired before fully opened toolbar combo
     */
    toolbarComboOpening?: ToolbarComboOpeningEvent;
    /**
     * Event fired after toolbar combo is selected
     */
    toolbarComboSelected?: ToolbarComboSelectedEvent;
    /**
     * Event fired after a click on custom item
     */
    toolbarCustomItemClick?: ToolbarCustomItemClickEvent;
    /**
     * Event fired after item is removed
     */
    itemRemoved?: ItemRemovedEvent;
    /**
     * Event fired after item is added
     */
    itemAdded?: ItemAddedEvent;
    /**
     * Event fired before item finish collapsing
     */
    collapsing?: CollapsingEvent;
    /**
     * Cancel="false Event fired after item is collapsed"
     */
    collapsed?: CollapsedEvent;
    /**
     * Event fired before item is expanded
     */
    expanding?: ExpandingEvent;
    /**
     * Event fired after item is expanded
     */
    expanded?: ExpandedEvent;
    /**
     * Fired after item is dissabled
     */
    itemDisable?: ItemDisableEvent;
    /**
     * Fired after item is enabled
     */
    itemEnabled?: ItemEnabledEvent;
    /**
     * Cance="false" Fired after the window is resized
     */
    windowResized?: WindowResizedEvent;
    /**
     * Option for igToolbar
     */
    [optionName: string]: any;
}
interface IgToolbarMethods {
    /**
     * Returns the element on which the widget was instantiated
     */
    widget(): void;
    /**
     * Gets the item with provided index.
     *
     * @param index . The index of the item.
     */
    getItem(index: Object): Object;
    /**
     * Add item to widget item array
     *
     * @param item . The item to be added.
     */
    addItem(item: Object): void;
    /**
     * Remove the item matching provided index.
     *
     * @param index . The index of the item.
     */
    removeItem(index: Object): Object;
    /**
     * Disable item matching provided index.
     *
     * @param index . The index of the item.
     * @param disabled . The disabled property value.
     */
    disableItem(index: Object, disabled: Object): void;
    /**
     * Activate item matching provided index.
     *
     * @param index . The index of the item.
     * @param activated . The activate property value.
     */
    activateItem(index: Object, activated: Object): void;
    /**
     * Deactivate all buttons.
     */
    deactivateAll(): void;
    /**
     * Destroy the widget.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igToolbar"): IgToolbarMethods;
}
interface JQuery {
    igToolbar(methodName: "widget"): void;
    igToolbar(methodName: "getItem", index: Object): Object;
    igToolbar(methodName: "addItem", item: Object): void;
    igToolbar(methodName: "removeItem", index: Object): Object;
    igToolbar(methodName: "disableItem", index: Object, disabled: Object): void;
    igToolbar(methodName: "activateItem", index: Object, activated: Object): void;
    igToolbar(methodName: "deactivateAll"): void;
    igToolbar(methodName: "destroy"): void;
    /**
     * Set or get the widget height.
     */
    igToolbar(optionLiteral: 'option', optionName: "height"): any;
    /**
     * Set or get the widget height.
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Set or get the widget width.
     */
    igToolbar(optionLiteral: 'option', optionName: "width"): any;
    /**
     * Set or get the widget width.
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * Set or get allowCollapsing property
     */
    igToolbar(optionLiteral: 'option', optionName: "allowCollapsing"): boolean;
    /**
     * Set or get allowCollapsing property
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "allowCollapsing", optionValue: boolean): void;
    /**
     * The css class that will be applied to collapseButtonIcon.
     */
    igToolbar(optionLiteral: 'option', optionName: "collapseButtonIcon"): string;
    /**
     * The css class that will be applied to collapseButtonIcon.
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "collapseButtonIcon", optionValue: string): void;
    /**
     * The css class that will be applied to expandButtonIcon.
     */
    igToolbar(optionLiteral: 'option', optionName: "expandButtonIcon"): string;
    /**
     * The css class that will be applied to expandButtonIcon.
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "expandButtonIcon", optionValue: string): void;
    /**
     * Formal name of the widget.
     */
    igToolbar(optionLiteral: 'option', optionName: "name"): string;
    /**
     * Formal name of the widget.
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "name", optionValue: string): void;
    /**
     * Display Name of the widget.
     */
    igToolbar(optionLiteral: 'option', optionName: "displayName"): string;
    /**
     * Display Name of the widget.
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "displayName", optionValue: string): void;
    /**
     * Get or set Toolbar's items.
     */
    igToolbar(optionLiteral: 'option', optionName: "items"): any[];
    /**
     * Get or set Toolbar's items.
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "items", optionValue: any[]): void;
    /**
     * Get or set widget's isExpanded property.
     */
    igToolbar(optionLiteral: 'option', optionName: "isExpanded"): boolean;
    /**
     * Get or set widget's isExpanded property.
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "isExpanded", optionValue: boolean): void;
    /**
     * Cance="false" Event fired after a click on any toolbar button
     */
    igToolbar(optionLiteral: 'option', optionName: "toolbarButtonClick"): ToolbarButtonClickEvent;
    /**
     * Cance="false" Event fired after a click on any toolbar button
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "toolbarButtonClick", optionValue: ToolbarButtonClickEvent): void;
    /**
     * Event fired before fully opened toolbar combo
     */
    igToolbar(optionLiteral: 'option', optionName: "toolbarComboOpening"): ToolbarComboOpeningEvent;
    /**
     * Event fired before fully opened toolbar combo
     *
     * @optionValue Define event handler function.
     */
    igToolbar(optionLiteral: 'option', optionName: "toolbarComboOpening", optionValue: ToolbarComboOpeningEvent): void;
    /**
     * Event fired after toolbar combo is selected
     */
    igToolbar(optionLiteral: 'option', optionName: "toolbarComboSelected"): ToolbarComboSelectedEvent;
    /**
     * Event fired after toolbar combo is selected
     *
     * @optionValue Define event handler function.
     */
    igToolbar(optionLiteral: 'option', optionName: "toolbarComboSelected", optionValue: ToolbarComboSelectedEvent): void;
    /**
     * Event fired after a click on custom item
     */
    igToolbar(optionLiteral: 'option', optionName: "toolbarCustomItemClick"): ToolbarCustomItemClickEvent;
    /**
     * Event fired after a click on custom item
     *
     * @optionValue Define event handler function.
     */
    igToolbar(optionLiteral: 'option', optionName: "toolbarCustomItemClick", optionValue: ToolbarCustomItemClickEvent): void;
    /**
     * Event fired after item is removed
     */
    igToolbar(optionLiteral: 'option', optionName: "itemRemoved"): ItemRemovedEvent;
    /**
     * Event fired after item is removed
     *
     * @optionValue Define event handler function.
     */
    igToolbar(optionLiteral: 'option', optionName: "itemRemoved", optionValue: ItemRemovedEvent): void;
    /**
     * Event fired after item is added
     */
    igToolbar(optionLiteral: 'option', optionName: "itemAdded"): ItemAddedEvent;
    /**
     * Event fired after item is added
     *
     * @optionValue Define event handler function.
     */
    igToolbar(optionLiteral: 'option', optionName: "itemAdded", optionValue: ItemAddedEvent): void;
    /**
     * Event fired before item finish collapsing
     */
    igToolbar(optionLiteral: 'option', optionName: "collapsing"): CollapsingEvent;
    /**
     * Event fired before item finish collapsing
     *
     * @optionValue Define event handler function.
     */
    igToolbar(optionLiteral: 'option', optionName: "collapsing", optionValue: CollapsingEvent): void;
    /**
     * Cancel="false Event fired after item is collapsed"
     */
    igToolbar(optionLiteral: 'option', optionName: "collapsed"): CollapsedEvent;
    /**
     * Cancel="false Event fired after item is collapsed"
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "collapsed", optionValue: CollapsedEvent): void;
    /**
     * Event fired before item is expanded
     */
    igToolbar(optionLiteral: 'option', optionName: "expanding"): ExpandingEvent;
    /**
     * Event fired before item is expanded
     *
     * @optionValue Define event handler function.
     */
    igToolbar(optionLiteral: 'option', optionName: "expanding", optionValue: ExpandingEvent): void;
    /**
     * Event fired after item is expanded
     */
    igToolbar(optionLiteral: 'option', optionName: "expanded"): ExpandedEvent;
    /**
     * Event fired after item is expanded
     *
     * @optionValue Define event handler function.
     */
    igToolbar(optionLiteral: 'option', optionName: "expanded", optionValue: ExpandedEvent): void;
    /**
     * Fired after item is dissabled
     */
    igToolbar(optionLiteral: 'option', optionName: "itemDisable"): ItemDisableEvent;
    /**
     * Fired after item is dissabled
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "itemDisable", optionValue: ItemDisableEvent): void;
    /**
     * Fired after item is enabled
     */
    igToolbar(optionLiteral: 'option', optionName: "itemEnabled"): ItemEnabledEvent;
    /**
     * Fired after item is enabled
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "itemEnabled", optionValue: ItemEnabledEvent): void;
    /**
     * Cance="false" Fired after the window is resized
     */
    igToolbar(optionLiteral: 'option', optionName: "windowResized"): WindowResizedEvent;
    /**
     * Cance="false" Fired after the window is resized
     *
     * @optionValue New value to be set.
     */
    igToolbar(optionLiteral: 'option', optionName: "windowResized", optionValue: WindowResizedEvent): void;
    igToolbar(options: IgToolbar): JQuery;
    igToolbar(optionLiteral: 'option', optionName: string): any;
    igToolbar(optionLiteral: 'option', options: IgToolbar): JQuery;
    igToolbar(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igToolbar(methodName: string, ...methodParams: any[]): any;
}
interface ActivatingEvent {
    (event: Event, ui: ActivatingEventUIParam): void;
}
interface ActivatingEventUIParam {
    /**
     * Used to get a reference to the toolbar button performing the activation.
     */
    owner?: any;
}
interface ActivatedEvent {
    (event: Event, ui: ActivatedEventUIParam): void;
}
interface ActivatedEventUIParam {
    /**
     * Used to get reference to the toolbar button performing the activation.
     */
    owner?: any;
}
interface DeactivatingEvent {
    (event: Event, ui: DeactivatingEventUIParam): void;
}
interface DeactivatingEventUIParam {
    /**
     * Used to get a reference to the toolbar button performing the deactivation.
     */
    owner?: any;
}
interface DeactivatedEvent {
    (event: Event, ui: DeactivatedEventUIParam): void;
}
interface DeactivatedEventUIParam {
    /**
     * Used to get reference to the toolbar button performing the deactivation.
     */
    owner?: any;
}
interface IgToolbarButton {
    /**
     * Enable/Disable the "Toggling" of a button.
     */
    allowToggling?: boolean;
    /**
     * Enable/Disable the "Selecting" of a button.
     */
    isSelected?: boolean;
    /**
     * Event fired before the toolbar button is activated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the toolbar button performing the activation.
     */
    activating?: ActivatingEvent;
    /**
     * Event fired after the toolbar button is activated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the toolbar button performing the activation.
     */
    activated?: ActivatedEvent;
    /**
     * Event fired before the toolbar button is deactivated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the toolbar button performing the deactivation.
     */
    deactivating?: DeactivatingEvent;
    /**
     * Event fired after the toolbar button is deactivated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the toolbar button performing the deactivation.
     */
    deactivated?: DeactivatedEvent;
    /**
     * Option for igToolbarButton
     */
    [optionName: string]: any;
}
interface IgToolbarButtonMethods {
    /**
     * Toggle toolbar button
     */
    toggle(): void;
    /**
     * Activate toolbar button
     *
     * @param event
     */
    activate(event: Object): void;
    /**
     * Deactivate toolbar button
     *
     * @param event
     */
    deactivate(event: Object): void;
    /**
     * Returns the element that represents this widget.
     */
    widget(): Object;
    /**
     * Destroy the widget.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igToolbarButton"): IgToolbarButtonMethods;
}
interface JQuery {
    igToolbarButton(methodName: "toggle"): void;
    igToolbarButton(methodName: "activate", event: Object): void;
    igToolbarButton(methodName: "deactivate", event: Object): void;
    igToolbarButton(methodName: "widget"): Object;
    igToolbarButton(methodName: "destroy"): void;
    /**
     * Gets the "Toggling" of a button.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "allowToggling"): boolean;
    /**
     * Enable/Disable the "Toggling" of a button.
     *
     * @optionValue New value to be set.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "allowToggling", optionValue: boolean): void;
    /**
     * Gets the "Selecting" of a button.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "isSelected"): boolean;
    /**
     * Enable/Disable the "Selecting" of a button.
     *
     * @optionValue New value to be set.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "isSelected", optionValue: boolean): void;
    /**
     * Event fired before the toolbar button is activated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the toolbar button performing the activation.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "activating"): ActivatingEvent;
    /**
     * Event fired before the toolbar button is activated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the toolbar button performing the activation.
     *
     * @optionValue Define event handler function.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "activating", optionValue: ActivatingEvent): void;
    /**
     * Event fired after the toolbar button is activated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the toolbar button performing the activation.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "activated"): ActivatedEvent;
    /**
     * Event fired after the toolbar button is activated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the toolbar button performing the activation.
     *
     * @optionValue Define event handler function.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "activated", optionValue: ActivatedEvent): void;
    /**
     * Event fired before the toolbar button is deactivated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the toolbar button performing the deactivation.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "deactivating"): DeactivatingEvent;
    /**
     * Event fired before the toolbar button is deactivated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get a reference to the toolbar button performing the deactivation.
     *
     * @optionValue Define event handler function.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "deactivating", optionValue: DeactivatingEvent): void;
    /**
     * Event fired after the toolbar button is deactivated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the toolbar button performing the deactivation.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "deactivated"): DeactivatedEvent;
    /**
     * Event fired after the toolbar button is deactivated.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the toolbar button performing the deactivation.
     *
     * @optionValue Define event handler function.
     */
    igToolbarButton(optionLiteral: 'option', optionName: "deactivated", optionValue: DeactivatedEvent): void;
    igToolbarButton(options: IgToolbarButton): JQuery;
    igToolbarButton(optionLiteral: 'option', optionName: string): any;
    igToolbarButton(optionLiteral: 'option', options: IgToolbarButton): JQuery;
    igToolbarButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igToolbarButton(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeBindingsBindings {
    /**
     * Option for IgTreeBindingsBindings
     */
    [optionName: string]: any;
}
interface IgTreeBindings {
    /**
     * Specifies the name of the data source property the value of which would be the node text.
     */
    textKey?: string;
    /**
     * Specifies the XPath to the text attribute/node. Used in client-only binding directly to XML.
     */
    textXPath?: string;
    /**
     * Specifies the name of the data source property the value of which would be the node value.
     */
    valueKey?: string;
    /**
     * Specifies the XPath to the value attribute/node. Used in client-only binding directly to XML.
     */
    valueXPath?: string;
    /**
     * Specifies the name of the data source property the value of which would be used as a URL
     * for the node image.
     */
    imageUrlKey?: string;
    /**
     * Specifies the XPath to the image URL attribute/node. Used in client-only binding directly to XML.
     */
    imageUrlXPath?: string;
    /**
     * Specifies the name of the data source property the value of which would be used as an href
     * attribute for the node anchor.
     */
    navigateUrlKey?: string;
    /**
     * Specifies the XPath to the navigate URL attribute/node. Used in client-only binding directly to XML.
     */
    navigateUrlXPath?: string;
    /**
     * Specifies the name of the data source property the value of which would be used as a target
     * attribute for the node anchor.
     */
    targetKey?: string;
    /**
     * Specifies the name of the data source property the value of which would indicate that the
     * node is expanded on initial load.
     */
    expandedKey?: string;
    /**
     * Specifies the name of the data source property the value of which is the primary key attribute
     * for the data. This property is used when load on demand is enabled and if specified the node paths
     * would be generated using primary keys instead of indices.
     */
    primaryKey?: string;
    /**
     * Specifies the node content template for the current layer of bindings. The igTree utilizes igTemplating
     * for generating node content templates. A good example of how to setup templating can be found here http://www.infragistics.com/community/blogs/marina_stoyanova/archive/2014/06/17/how-to-use-templates-to-style-the-different-nodes-of-the-ignite-ui-tree-control.aspx
     */
    nodeContentTemplate?: string;
    /**
     * Specifies the name of the data source property that holds the child data of the current layer node.
     */
    childDataProperty?: string;
    /**
     * Specifies the XPath to the child data node. Used in client-only binding directly to XML.
     */
    childDataXPath?: string;
    /**
     * Specifies the XPath to the root data node. Used in client-only binding directly to XML.
     */
    searchFieldXPath?: string;
    /**
     * Specifies the next layer of bindings in a recursive fashion.
     */
    bindings?: IgTreeBindingsBindings;
    /**
     * Option for IgTreeBindings
     */
    [optionName: string]: any;
}
interface IgTreeDragAndDropSettings {
    /**
     * Specifies whether the widget will accept D&D from other controls. boolean. Default value is false.
     */
    allowDrop?: boolean;
    /**
     * when Ctrl key is hold, else it means "move". Just like in Windows explorer. None means the tree does not accept this node.
     */
    dragAndDropMode?: any;
    /**
     * Specifies the opacity of the drag helper: 0 is fully transparent while 1 is fully opaque.
     */
    dragOpacity?: number;
    /**
     * Specifies whether the helper would revert to its original position upon an invalid drop.
     */
    revert?: boolean;
    /**
     * Specifies the duration of the revert animation.
     */
    revertDuration?: number;
    /**
     * Specifies z-index that would be set for the drag helper.
     */
    zIndex?: number;
    /**
     * Specifies the delay between mousedown and the start of the actual drag. Smaller values make the nodes
     * more sensitive to drag.
     */
    dragStartDelay?: number;
    /**
     * Specifies whether when dragging over a collapsed node with children the node will expand after
     * the timeout specified in the expandDelay option.
     */
    expandOnDragOver?: boolean;
    /**
     * Specifies the delay after hovering a parent node before it expands to show its children during drag.
     */
    expandDelay?: number;
    /**
     * Specifies the helper for the drag operation. 'default' would render the internal helper,
     */
    helper?: any;
    /**
     * Returning true from this function would render the drop point valid, while false would make it invalid.
     * The function has one parameter which is the current drop point and the context of the function is the
     * drag element.
     */
    customDropValidation?: Function;
    /**
     * Specifies the containment for the drag helper. The area inside of which the helper is contained would be scrollable while dragging.
     */
    containment?: any;
    /**
     * Specifies the HTML markup for the invalid helper.
     */
    invalidMoveToMarkup?: string;
    /**
     * Specifies the HTML markup for the "move to" helper.
     */
    moveToMarkup?: string;
    /**
     * Specifies the HTML markup for the "move between" helper.
     */
    moveBetweenMarkup?: string;
    /**
     * Specifies the HTML markup for the "move after" helper.
     */
    moveAfterMarkup?: string;
    /**
     * Specifies the HTML markup for the "move before" helper.
     */
    moveBeforeMarkup?: string;
    /**
     * Specifies the HTML markup for the "copy to" helper.
     */
    copyToMarkup?: string;
    /**
     * Specifies the HTML markup for the "copy between" helper.
     */
    copyBetweenMarkup?: string;
    /**
     * Specifies the HTML markup for the "copy after" helper.
     */
    copyAfterMarkup?: string;
    /**
     * Specifies the HTML markup for the "copy before" helper.
     */
    copyBeforeMarkup?: string;
    /**
     * Option for IgTreeDragAndDropSettings
     */
    [optionName: string]: any;
}
interface NodeCheckstateChangingEvent {
    (event: Event, ui: NodeCheckstateChangingEventUIParam): void;
}
interface NodeCheckstateChangingEventUIParam {
    /**
     * Used to get a reference to the tree.
     */
    owner?: any;
    /**
     * Used to get a reference to the node object the checkbox of which is being interacted with.
     */
    node?: any;
    /**
     * Used to get the current state of the checkbox.
     */
    currentState?: any;
    /**
     * Used to get the new future state of the checkbox.
     */
    newState?: any;
    /**
     * Used to get the collection of all checked nodes before the new state is applied.
     */
    currentCheckedNodes?: any;
}
interface NodeCheckstateChangedEvent {
    (event: Event, ui: NodeCheckstateChangedEventUIParam): void;
}
interface NodeCheckstateChangedEventUIParam {
    /**
     * Used to get a reference to the tree.
     */
    owner?: any;
    /**
     * Used to get a reference to the node object the checkbox of which is being interacted with.
     */
    node?: any;
    /**
     * Used to get the new current state of the checkbox.
     */
    newState?: any;
    /**
     * Used to get the collection of all checked nodes.
     */
    newCheckedNodes?: any;
    /**
     * Used to get the collection of all partially checked nodes.
     */
    newPartiallyCheckedNodes?: any;
}
interface NodePopulatingEvent {
    (event: Event, ui: NodePopulatingEventUIParam): void;
}
interface NodePopulatingEventUIParam {
    /**
     * Used to get a reference to the path of the node being populated.
     */
    path?: any;
    /**
     * Used to get a reference to the jQuery element of the node being populated.
     */
    element?: any;
    /**
     * Used to get the node data.
     */
    data?: any;
    /**
     * Used to get a reference to the bindings object for the level at which the populating node is located.
     */
    binding?: any;
}
interface NodePopulatedEvent {
    (event: Event, ui: NodePopulatedEventUIParam): void;
}
interface NodePopulatedEventUIParam {
    /**
     * Used to get a reference to the path of the populated node.
     */
    path?: any;
    /**
     * Used to get a reference to the jQuery element of the populated node.
     */
    element?: any;
    /**
     * Used to get the node data.
     */
    data?: any;
    /**
     * Used to get a reference to the bindings object for the level at which the populated node is located.
     */
    binding?: any;
}
interface NodeCollapsingEvent {
    (event: Event, ui: NodeCollapsingEventUIParam): void;
}
interface NodeCollapsingEventUIParam {
    /**
     * Used to get a reference to the tree.
     */
    owner?: any;
    /**
     * Used to get a reference to the node object about to collapse.
     */
    node?: any;
}
interface NodeCollapsedEvent {
    (event: Event, ui: NodeCollapsedEventUIParam): void;
}
interface NodeCollapsedEventUIParam {
    /**
     * Used to get a reference to the tree.
     */
    owner?: any;
    /**
     * Used to get a reference to the collapsed node object.
     */
    node?: any;
}
interface NodeExpandingEvent {
    (event: Event, ui: NodeExpandingEventUIParam): void;
}
interface NodeExpandingEventUIParam {
    /**
     * Used to get a reference to the tree.
     */
    owner?: any;
    /**
     * Used to get a reference to the node object about to expand.
     */
    node?: any;
}
interface NodeExpandedEvent {
    (event: Event, ui: NodeExpandedEventUIParam): void;
}
interface NodeExpandedEventUIParam {
    /**
     * Used to get a reference to the tree.
     */
    owner?: any;
    /**
     * Used to get a reference to the expanded node object.
     */
    node?: any;
}
interface NodeClickEvent {
    (event: Event, ui: NodeClickEventUIParam): void;
}
interface NodeClickEventUIParam {
    /**
     * Used to get a reference to the tree.
     */
    owner?: any;
    /**
     * Used to get a reference to the node object being clicked.
     */
    node?: any;
}
interface NodeDoubleClickEvent {
    (event: Event, ui: NodeDoubleClickEventUIParam): void;
}
interface NodeDoubleClickEventUIParam {
    /**
     * Used to get a reference to the path of the double clicked node.
     */
    path?: any;
    /**
     * Used to get a reference to the jQuery element of the double clicked node.
     */
    element?: any;
    /**
     * Used to get the node data.
     */
    data?: any;
    /**
     * Used to get a reference to the bindings object for the level at which the double clicked node is located.
     */
    binding?: any;
}
interface NodeDroppingEvent {
    (event: Event, ui: NodeDroppingEventUIParam): void;
}
interface NodeDroppingEventUIParam {
    /**
     * Used to gets a reference to the binding.
     */
    binding?: any;
    /**
     * Used to get a reference to the data.
     */
    data?: any;
    /**
     * Used to get a reference to the draggable element (the node).
     */
    draggable?: any;
    /**
     * Used to get a reference to the element.
     */
    element?: any;
    /**
     * Used to get a reference to the helper.
     */
    helper?: any;
    /**
     * Used to get a reference to the offset.
     */
    offset?: any;
    /**
     * Used to get a reference to the node path.
     */
    path?: any;
    /**
     * Used to get a reference to the current position of the draggable element.
     */
    position?: any;
}
interface NodeDroppedEvent {
    (event: Event, ui: NodeDroppedEventUIParam): void;
}
interface NodeDroppedEventUIParam {
    /**
     * Used to gets a reference to the binding.
     */
    binding?: any;
    /**
     * Used to get a reference to the data.
     */
    data?: any;
    /**
     * Used to get a reference to the draggable element (the node).
     */
    draggable?: any;
    /**
     * Used to get a reference to the element.
     */
    element?: any;
    /**
     * Used to get a reference to the helper.
     */
    helper?: any;
    /**
     * Used to get a reference to the offset.
     */
    offset?: any;
    /**
     * Used to get a reference to the node path.
     */
    path?: any;
    /**
     * Used to get a reference to the current position of the draggable element.
     */
    position?: any;
}
interface IgTree {
    width?: any;
    height?: any;
    /**
     * Gets the type of checkboxes rendered before the tree nodes. Can be set only at initialization.
     *
     * Valid values:
     * "off" Checkboxes are turned off and not rendered for the tree.
     * "biState" Checkboxes are rendered and support two states (checked and unchecked). Checkboxes do not cascade down or up in this mode.
     * "triState" Checkboxes are rendered and support three states (checked, partial and unchecked). Checkboxes cascade up and down in this mode.
     */
    checkboxMode?: any;
    /**
     * If set to true then only one branch at each level of the tree can be expanded at a time. Otherwise multiple branches can be expanded at a time.
     */
    singleBranchExpand?: boolean;
    /**
     * Setting this option to false would make the tree to not apply hover styles on the nodes when they are hovered
     */
    hotTracking?: boolean;
    /**
     * String Image with the specified URL will be rendered for each node that has children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     */
    parentNodeImageUrl?: string;
    /**
     * String Specified class with a CSS sprite would be rendered for each node that has children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     */
    parentNodeImageClass?: string;
    /**
     * String Specified a tooltip that would be rendered for each node that has children.
     * null Option is ignored
     */
    parentNodeImageTooltip?: string;
    /**
     * String Image with the specified URL will be rendered for each node that has no children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     */
    leafNodeImageUrl?: string;
    /**
     * String Specified class with a CSS sprite would be rendered for each node that has no children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     */
    leafNodeImageClass?: string;
    /**
     * String Specified a tooltip that would be rendered for each node that has no children.
     * null Option is ignored
     */
    leafNodeImageTooltip?: string;
    /**
     * Specifies the duration of each animation such as the expand/collapse.
     */
    animationDuration?: number;
    /**
     * Specifies the node data-path separator character.
     */
    pathSeparator?: string;
    /**
     * Specifies any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     */
    dataSource?: any;
    /**
     * Specifies a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    dataSourceUrl?: string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    dataSourceType?: string;
    /**
     * See $.ig.DataSource.
     * string Specifies the name of the property in which data records are held if the response is wrapped.
     * null Option is ignored.
     */
    responseDataKey?: string;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     * null Option is ignored.
     */
    responseDataType?: string;
    /**
     * Specifies the HTTP verb to be used to issue the request
     */
    requestType?: string;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     */
    responseContentType?: string;
    /**
     * Specifies the depth down to which the tree would be expanded upon initial render.
     */
    initialExpandDepth?: number;
    /**
     * Specifies all the data would be bound initially or each child collection would be bound upon demand.
     */
    loadOnDemand?: boolean;
    /**
     * Specifies the data binding properties and keys.
     */
    bindings?: IgTreeBindings;
    /**
     * Specifies the default target of the node anchor.
     */
    defaultNodeTarget?: string;
    /**
     * If set to true it would enable drag and drop functionality.
     */
    dragAndDrop?: boolean;
    /**
     * URL to which updating requests will be made.
     */
    updateUrl?: string;
    /**
     * Specific settings for the drag and drop functionality.
     */
    dragAndDropSettings?: IgTreeDragAndDropSettings;
    /**
     * Fired before databinding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing databinding.
     */
    dataBinding?: DataBindingEvent;
    /**
     * Fired after databinding is finished
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing databinding.
     * Use ui.dataView to get a reference to the data the tree has been databound to.
     */
    dataBound?: DataBoundEvent;
    /**
     * Fired before rendering of the tree begins
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing rendering.
     * Use ui.dataView to get a reference to the data the tree is going to render.
     */
    rendering?: RenderingEvent;
    /**
     * Fired after rendering of the tree has finished
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     */
    rendered?: RenderedEvent;
    /**
     * Fired before a new node is selected
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.selectedNodes to get a reference to currently selected nodes.
     * Use ui.newNodes to get a reference to the new nodes getting selected.
     */
    selectionChanging?: SelectionChangingEvent;
    /**
     * Fired after a new node is selected
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.selectedNodes to get a reference to the selected nodes.
     * Use ui.newNodes to get a reference to the newly added nodes to the selection.
     */
    selectionChanged?: SelectionChangedEvent;
    /**
     * Fired before the checkstate of a node is changed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object the checkbox of which is being interacted with.
     * Use ui.currentState to get the current state of the checkbox.
     * Use ui.newState to get the new future state of the checkbox.
     * Use ui.currentCheckedNodes to get the collection of all checked nodes before the new state is applied.
     */
    nodeCheckstateChanging?: NodeCheckstateChangingEvent;
    /**
     * Fired after the checkstate of a node is changed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object the checkbox of which is being interacted with.
     * Use ui.newState to get the new current state of the checkbox.
     * Use ui.newCheckedNodes to get the collection of all checked nodes.
     * Use ui.newPartiallyCheckedNodes to get the collection of all partially checked nodes.
     */
    nodeCheckstateChanged?: NodeCheckstateChangedEvent;
    /**
     * Fired before the children of a node are populated in the case of load on demand
     * Use ui.path to get a reference to the path of the node being populated.
     * Use ui.element to get a reference to the jQuery element of the node being populated.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the populating node is located.
     */
    nodePopulating?: NodePopulatingEvent;
    /**
     * Fired after the children of a node are populated in the case of load on demand
     * Use ui.path to get a reference to the path of the populated node.
     * Use ui.element to get a reference to the jQuery element of the populated node.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the populated node is located.
     */
    nodePopulated?: NodePopulatedEvent;
    /**
     * Fired before a node is collapsed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object about to collapse.
     */
    nodeCollapsing?: NodeCollapsingEvent;
    /**
     * Fired after a node is collapsed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the collapsed node object.
     */
    nodeCollapsed?: NodeCollapsedEvent;
    /**
     * Fired before a node is expanded
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object about to expand.
     */
    nodeExpanding?: NodeExpandingEvent;
    /**
     * Fired after a node is expanded
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the expanded node object.
     */
    nodeExpanded?: NodeExpandedEvent;
    /**
     * Fired on node click
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object being clicked.
     */
    nodeClick?: NodeClickEvent;
    /**
     * Fired on node double click
     * Use ui.path to get a reference to the path of the double clicked node.
     * Use ui.element to get a reference to the jQuery element of the double clicked node.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the double clicked node is located.
     */
    nodeDoubleClick?: NodeDoubleClickEvent;
    /**
     * Fired on node drag start
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    dragStart?: DragStartEvent;
    /**
     * Fired on node drag
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    drag?: DragEvent;
    /**
     * Fired after a drag operation has completed
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    dragStop?: DragStopEvent;
    /**
     * Fired before a node drop
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.draggable to get a reference to the draggable element (the node).
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    nodeDropping?: NodeDroppingEvent;
    /**
     * Fired after a node drop
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.draggable to get a reference to the draggable element (the node).
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    nodeDropped?: NodeDroppedEvent;
    /**
     * Option for igTree
     */
    [optionName: string]: any;
}
interface IgTreeMethods {
    /**
     * Returns the element that represents this widget.
     */
    widget(): Object;
    /**
     * Performs databinding on the tree.
     */
    dataBind(): void;
    /**
     * Toggles the checkstate of a node if checkboxMode is not set to off, otherwise does nothing.
     *
     * @param node     Specifies the jQuery object of the node element the checkbox of which would be toggled.
     * @param event     Indicates the browser even which triggered this action (not API).
     */
    toggleCheckstate(node: Object, event?: Object): void;
    /**
     * Toggles the collapse/expand for the specified node.
     *
     * @param node     Specifies the jQuery object of the node element the checkbox of which would be toggled.
     * @param event     Indicates the browser even which triggered this action if this is not an API call.
     */
    toggle(node: Object, event?: Object): void;
    /**
     * Expands the tree down to the specified node.
     *
     * @param node     Specifies the jQuery object of the node element down to which the tree would be expanded.
     * @param toSelect     Specifies the whether to select the node after expanding to it.
     */
    expandToNode(node: Object, toSelect?: boolean): void;
    /**
     * Expands the specified node.
     *
     * @param node     Specifies the jQuery object of the node element to expand.
     */
    expand(node: Object): void;
    /**
     * Collapses the specified node.
     *
     * @param node     Specifies the jQuery object of the node element to collapse.
     */
    collapse(node: Object): void;
    /**
     * Retrieves the parent node of the specified node.
     *
     * @param node     Specifies the jQuery selected node element to collapse.
     */
    parentNode(node: Object): Object;
    /**
     * Retrieves the jQuery element of the node with the specified path.
     *
     * @param nodePath     Specifies the path to the required node.
     */
    nodeByPath(nodePath: string): Object;
    /**
     * Retrieves the jQuery element of the node with the specified value.
     *
     * @param value     Specifies the value of the required node.
     */
    nodesByValue(value: string): Object;
    /**
     * Retrieves all the node objects that have their checkboxes checked.
     */
    checkedNodes(): any[];
    /**
     * Retrieves all the node objects that have their checkboxes unchecked.
     */
    uncheckedNodes(): any[];
    /**
     * Retrieves all the node objects that have their checkboxes partially checked.
     */
    partiallyCheckedNodes(): any[];
    /**
     * Selects a node.
     *
     * @param node     Specifies the jQuery object of the node element to be toggled.
     * @param event     Indicates the browser even which triggered this action (not API).
     */
    select(node: Object, event?: Object): void;
    /**
     * Deselects the specified node.
     *
     * @param node     Specifies the jQuery object of the node element to be deselected.
     */
    deselect(node: Object): void;
    /**
     * Deselects all the selected nodes.
     */
    clearSelection(): void;
    /**
     * Retrieves the selected node.
     */
    selectedNode(): Object;
    /**
     * Retrieves all node objects with the specified text (case sensitive).
     *
     * @param text     The text to search by.
     * @param parent     The jQuery selected node element. If not specified then search would start from the root of the tree.
     */
    findNodesByText(text: string, parent?: Object): Object;
    /**
     * Retrieves all immediate children of the specified parent with the specified text (case sensitive).
     *
     * @param text     The text to search by.
     * @param parent     The jQuery selected node element the children of which would be retrieved.
     */
    findImmediateNodesByText(text: string, parent?: Object): Object;
    /**
     * Retrieves the n-th jQuery node element child of the specified parent.
     *
     * @param index     Specifies the index to be retrieved.
     * @param parent     The jQuery object of the parent node element.
     */
    nodeByIndex(index: number, parent?: Object): Object;
    /**
     * Retrieves a node object from provided jQuery node element.
     *
     * @param element     Specifies the jQuery object of the node element.
     */
    nodeFromElement(element: Object): Object;
    /**
     * Retrieves a node object collection of the immediate children of the provided node.
     *
     * @param parent     Specifies the jQuery object of the node element.
     */
    children(parent: Object): Object;
    /**
     * Retrieves a node object collection of the immediate children of the node with the provided path.
     *
     * @param path     Specifies the path of the node the children of which are being retrieved.
     */
    childrenByPath(path: string): Object;
    /**
     * Returns true if the provided node is selected and false otherwise.
     *
     * @param node     Specifies the jQuery object of the node element.
     */
    isSelected(node: Object): boolean;
    /**
     * Returns true if the provided node is expanded and false otherwise.
     *
     * @param node     Specifies the jQuery object of the node element.
     */
    isExpanded(node: Object): boolean;
    /**
     * Returns true if the provided node has its checkstate checked and false otherwise.
     *
     * @param node     Specifies the jQuery object of the node element.
     */
    isChecked(node: Object): boolean;
    /**
     * Returns true if the provided node has its checkstate checked and false otherwise.
     *
     * @param node     Specifies the jQuery object of the node element.
     */
    checkState(node: Object): string;
    /**
     * Adds a new array of nodes to the tree. New nodes are appended to the root or to a specified parent node.
     *
     * @param node     Specifies the data used to create the new node.
     * @param parent     Specifies the jQuery object of the parent node the nodes are to be appended to.
     * @param nodeIndex     Specifies the index at which the node to be inserted.
     */
    addNode(node: Object, parent?: Object, nodeIndex?: number): void;
    /**
     * Removes the node with with the specified path and all of its children.
     *
     * @param path     Specifies the path of the node to be removed.
     */
    removeAt(path: string): void;
    /**
     * Removing all the nodes with the specified value.
     *
     * @param value     Specifies the value of the nodes to be removed.
     */
    removeNodesByValue(value: string): void;
    /**
     * Performs a UI update on the provided node element with the new provided data member.
     *
     * @param element     Specifies the node to be updated.
     * @param data Specifies the new data item the node would update according to.
     */
    applyChangesToNode(element: Object, data: Object): void;
    /**
     * Returns the transaction log stack.
     */
    transactionLog(): Object;
    /**
     * Returns the data for the node with specified path.
     *
     * @param path     Specifies the node path for which the data is returned.
     */
    nodeDataFor(path: string): Object;
    /**
     * Destructor
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igTree"): IgTreeMethods;
}
interface JQuery {
    igTree(methodName: "widget"): Object;
    igTree(methodName: "dataBind"): void;
    igTree(methodName: "toggleCheckstate", node: Object, event?: Object): void;
    igTree(methodName: "toggle", node: Object, event?: Object): void;
    igTree(methodName: "expandToNode", node: Object, toSelect?: boolean): void;
    igTree(methodName: "expand", node: Object): void;
    igTree(methodName: "collapse", node: Object): void;
    igTree(methodName: "parentNode", node: Object): Object;
    igTree(methodName: "nodeByPath", nodePath: string): Object;
    igTree(methodName: "nodesByValue", value: string): Object;
    igTree(methodName: "checkedNodes"): any[];
    igTree(methodName: "uncheckedNodes"): any[];
    igTree(methodName: "partiallyCheckedNodes"): any[];
    igTree(methodName: "select", node: Object, event?: Object): void;
    igTree(methodName: "deselect", node: Object): void;
    igTree(methodName: "clearSelection"): void;
    igTree(methodName: "selectedNode"): Object;
    igTree(methodName: "findNodesByText", text: string, parent?: Object): Object;
    igTree(methodName: "findImmediateNodesByText", text: string, parent?: Object): Object;
    igTree(methodName: "nodeByIndex", index: number, parent?: Object): Object;
    igTree(methodName: "nodeFromElement", element: Object): Object;
    igTree(methodName: "children", parent: Object): Object;
    igTree(methodName: "childrenByPath", path: string): Object;
    igTree(methodName: "isSelected", node: Object): boolean;
    igTree(methodName: "isExpanded", node: Object): boolean;
    igTree(methodName: "isChecked", node: Object): boolean;
    igTree(methodName: "checkState", node: Object): string;
    igTree(methodName: "addNode", node: Object, parent?: Object, nodeIndex?: number): void;
    igTree(methodName: "removeAt", path: string): void;
    igTree(methodName: "removeNodesByValue", value: string): void;
    igTree(methodName: "applyChangesToNode", element: Object, data: Object): void;
    igTree(methodName: "transactionLog"): Object;
    igTree(methodName: "nodeDataFor", path: string): Object;
    igTree(methodName: "destroy"): void;
    /**
     */
    igTree(optionLiteral: 'option', optionName: "width"): any;
    /**
     */
    igTree(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     */
    igTree(optionLiteral: 'option', optionName: "height"): any;
    /**
     */
    igTree(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Gets the type of checkboxes rendered before the tree nodes. Can be set only at initialization.
     */
    igTree(optionLiteral: 'option', optionName: "checkboxMode"): any;
    /**
     * The type of checkboxes rendered before the tree nodes. Can be set only at initialization.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "checkboxMode", optionValue: any): void;
    /**
     * If set to true then only one branch at each level of the tree can be expanded at a time. Otherwise multiple branches can be expanded at a time.
     */
    igTree(optionLiteral: 'option', optionName: "singleBranchExpand"): boolean;
    /**
     * If set to true then only one branch at each level of the tree can be expanded at a time. Otherwise multiple branches can be expanded at a time.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "singleBranchExpand", optionValue: boolean): void;
    /**
     * Setting this option to false would make the tree to not apply hover styles on the nodes when they are hovered
     */
    igTree(optionLiteral: 'option', optionName: "hotTracking"): boolean;
    /**
     * Setting this option to false would make the tree to not apply hover styles on the nodes when they are hovered
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "hotTracking", optionValue: boolean): void;
    /**
     * String Image with the specified URL will be rendered for each node that has children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     */
    igTree(optionLiteral: 'option', optionName: "parentNodeImageUrl"): string;
    /**
     * String Image with the specified URL will be rendered for each node that has children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "parentNodeImageUrl", optionValue: string): void;
    /**
     * String Specified class with a CSS sprite would be rendered for each node that has children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     */
    igTree(optionLiteral: 'option', optionName: "parentNodeImageClass"): string;
    /**
     * String Specified class with a CSS sprite would be rendered for each node that has children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "parentNodeImageClass", optionValue: string): void;
    /**
     * String Specified a tooltip that would be rendered for each node that has children.
     * null Option is ignored
     */
    igTree(optionLiteral: 'option', optionName: "parentNodeImageTooltip"): string;
    /**
     * String Specified a tooltip that would be rendered for each node that has children.
     * null Option is ignored
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "parentNodeImageTooltip", optionValue: string): void;
    /**
     * String Image with the specified URL will be rendered for each node that has no children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     */
    igTree(optionLiteral: 'option', optionName: "leafNodeImageUrl"): string;
    /**
     * String Image with the specified URL will be rendered for each node that has no children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "leafNodeImageUrl", optionValue: string): void;
    /**
     * String Specified class with a CSS sprite would be rendered for each node that has no children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     */
    igTree(optionLiteral: 'option', optionName: "leafNodeImageClass"): string;
    /**
     * String Specified class with a CSS sprite would be rendered for each node that has no children (If you define both image URL and class the URL would be rendered).
     * null Option is ignored
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "leafNodeImageClass", optionValue: string): void;
    /**
     * String Specified a tooltip that would be rendered for each node that has no children.
     * null Option is ignored
     */
    igTree(optionLiteral: 'option', optionName: "leafNodeImageTooltip"): string;
    /**
     * String Specified a tooltip that would be rendered for each node that has no children.
     * null Option is ignored
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "leafNodeImageTooltip", optionValue: string): void;
    /**
     * Gets the duration of each animation such as the expand/collapse.
     */
    igTree(optionLiteral: 'option', optionName: "animationDuration"): number;
    /**
     * Sets the duration of each animation such as the expand/collapse.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "animationDuration", optionValue: number): void;
    /**
     * Gets the node data-path separator character.
     */
    igTree(optionLiteral: 'option', optionName: "pathSeparator"): string;
    /**
     * Sets the node data-path separator character.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "pathSeparator", optionValue: string): void;
    /**
     * Gets any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     */
    igTree(optionLiteral: 'option', optionName: "dataSource"): any;
    /**
     * Sets any valid data source accepted by $.ig.DataSource, or an instance of an $.ig.DataSource itself.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dataSource", optionValue: any): void;
    /**
     * Gets a remote URL accepted by $.ig.DataSource in order to request data from it
     */
    igTree(optionLiteral: 'option', optionName: "dataSourceUrl"): string;
    /**
     * Sets a remote URL accepted by $.ig.DataSource in order to request data from it
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dataSourceUrl", optionValue: string): void;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     */
    igTree(optionLiteral: 'option', optionName: "dataSourceType"): string;
    /**
     * Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dataSourceType", optionValue: string): void;
    /**
     * See $.ig.DataSource.
     * string Gets the name of the property in which data records are held if the response is wrapped.
     * null Option is ignored.
     */
    igTree(optionLiteral: 'option', optionName: "responseDataKey"): string;
    /**
     * See $.ig.DataSource.
     * string Sets the name of the property in which data records are held if the response is wrapped.
     * null Option is ignored.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "responseDataKey", optionValue: string): void;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     * null Option is ignored.
     */
    igTree(optionLiteral: 'option', optionName: "responseDataType"): string;
    /**
     * String Explicitly set data source type (such as "json"). Please refer to the documentation of $.ig.DataSource and its type property.
     * null Option is ignored.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "responseDataType", optionValue: string): void;
    /**
     * Specifies the HTTP verb to be used to issue the request
     */
    igTree(optionLiteral: 'option', optionName: "requestType"): string;
    /**
     * Specifies the HTTP verb to be used to issue the request
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "requestType", optionValue: string): void;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     */
    igTree(optionLiteral: 'option', optionName: "responseContentType"): string;
    /**
     * Content type of the response. See http://api.jquery.com/jQuery.ajax/ => contentType
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "responseContentType", optionValue: string): void;
    /**
     * Gets the depth down to which the tree would be expanded upon initial render.
     */
    igTree(optionLiteral: 'option', optionName: "initialExpandDepth"): number;
    /**
     * Sets the depth down to which the tree would be expanded upon initial render.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "initialExpandDepth", optionValue: number): void;
    /**
     * Gets all the data would be bound initially or each child collection would be bound upon demand.
     */
    igTree(optionLiteral: 'option', optionName: "loadOnDemand"): boolean;
    /**
     * Sets all the data would be bound initially or each child collection would be bound upon demand.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "loadOnDemand", optionValue: boolean): void;
    /**
     * Gets the data binding properties and keys.
     */
    igTree(optionLiteral: 'option', optionName: "bindings"): IgTreeBindings;
    /**
     * Sets the data binding properties and keys.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "bindings", optionValue: IgTreeBindings): void;
    /**
     * Gets the default target of the node anchor.
     */
    igTree(optionLiteral: 'option', optionName: "defaultNodeTarget"): string;
    /**
     * Sets the default target of the node anchor.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "defaultNodeTarget", optionValue: string): void;
    /**
     * If set to true it would enable drag and drop functionality.
     */
    igTree(optionLiteral: 'option', optionName: "dragAndDrop"): boolean;
    /**
     * If set to true it would enable drag and drop functionality.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dragAndDrop", optionValue: boolean): void;
    /**
     * URL to which updating requests will be made.
     */
    igTree(optionLiteral: 'option', optionName: "updateUrl"): string;
    /**
     * URL to which updating requests will be made.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "updateUrl", optionValue: string): void;
    /**
     * Specific settings for the drag and drop functionality.
     */
    igTree(optionLiteral: 'option', optionName: "dragAndDropSettings"): IgTreeDragAndDropSettings;
    /**
     * Specific settings for the drag and drop functionality.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dragAndDropSettings", optionValue: IgTreeDragAndDropSettings): void;
    /**
     * Fired before databinding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing databinding.
     */
    igTree(optionLiteral: 'option', optionName: "dataBinding"): DataBindingEvent;
    /**
     * Fired before databinding is performed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing databinding.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dataBinding", optionValue: DataBindingEvent): void;
    /**
     * Fired after databinding is finished
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing databinding.
     * Use ui.dataView to get a reference to the data the tree has been databound to.
     */
    igTree(optionLiteral: 'option', optionName: "dataBound"): DataBoundEvent;
    /**
     * Fired after databinding is finished
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing databinding.
     * Use ui.dataView to get a reference to the data the tree has been databound to.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dataBound", optionValue: DataBoundEvent): void;
    /**
     * Fired before rendering of the tree begins
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing rendering.
     * Use ui.dataView to get a reference to the data the tree is going to render.
     */
    igTree(optionLiteral: 'option', optionName: "rendering"): RenderingEvent;
    /**
     * Fired before rendering of the tree begins
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree performing rendering.
     * Use ui.dataView to get a reference to the data the tree is going to render.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "rendering", optionValue: RenderingEvent): void;
    /**
     * Fired after rendering of the tree has finished
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     */
    igTree(optionLiteral: 'option', optionName: "rendered"): RenderedEvent;
    /**
     * Fired after rendering of the tree has finished
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "rendered", optionValue: RenderedEvent): void;
    /**
     * Fired before a new node is selected
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.selectedNodes to get a reference to currently selected nodes.
     * Use ui.newNodes to get a reference to the new nodes getting selected.
     */
    igTree(optionLiteral: 'option', optionName: "selectionChanging"): SelectionChangingEvent;
    /**
     * Fired before a new node is selected
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.selectedNodes to get a reference to currently selected nodes.
     * Use ui.newNodes to get a reference to the new nodes getting selected.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "selectionChanging", optionValue: SelectionChangingEvent): void;
    /**
     * Fired after a new node is selected
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.selectedNodes to get a reference to the selected nodes.
     * Use ui.newNodes to get a reference to the newly added nodes to the selection.
     */
    igTree(optionLiteral: 'option', optionName: "selectionChanged"): SelectionChangedEvent;
    /**
     * Fired after a new node is selected
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.selectedNodes to get a reference to the selected nodes.
     * Use ui.newNodes to get a reference to the newly added nodes to the selection.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "selectionChanged", optionValue: SelectionChangedEvent): void;
    /**
     * Fired before the checkstate of a node is changed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object the checkbox of which is being interacted with.
     * Use ui.currentState to get the current state of the checkbox.
     * Use ui.newState to get the new future state of the checkbox.
     * Use ui.currentCheckedNodes to get the collection of all checked nodes before the new state is applied.
     */
    igTree(optionLiteral: 'option', optionName: "nodeCheckstateChanging"): NodeCheckstateChangingEvent;
    /**
     * Fired before the checkstate of a node is changed
     * Function takes arguments evt and ui.
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object the checkbox of which is being interacted with.
     * Use ui.currentState to get the current state of the checkbox.
     * Use ui.newState to get the new future state of the checkbox.
     * Use ui.currentCheckedNodes to get the collection of all checked nodes before the new state is applied.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeCheckstateChanging", optionValue: NodeCheckstateChangingEvent): void;
    /**
     * Fired after the checkstate of a node is changed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object the checkbox of which is being interacted with.
     * Use ui.newState to get the new current state of the checkbox.
     * Use ui.newCheckedNodes to get the collection of all checked nodes.
     * Use ui.newPartiallyCheckedNodes to get the collection of all partially checked nodes.
     */
    igTree(optionLiteral: 'option', optionName: "nodeCheckstateChanged"): NodeCheckstateChangedEvent;
    /**
     * Fired after the checkstate of a node is changed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object the checkbox of which is being interacted with.
     * Use ui.newState to get the new current state of the checkbox.
     * Use ui.newCheckedNodes to get the collection of all checked nodes.
     * Use ui.newPartiallyCheckedNodes to get the collection of all partially checked nodes.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeCheckstateChanged", optionValue: NodeCheckstateChangedEvent): void;
    /**
     * Fired before the children of a node are populated in the case of load on demand
     * Use ui.path to get a reference to the path of the node being populated.
     * Use ui.element to get a reference to the jQuery element of the node being populated.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the populating node is located.
     */
    igTree(optionLiteral: 'option', optionName: "nodePopulating"): NodePopulatingEvent;
    /**
     * Fired before the children of a node are populated in the case of load on demand
     * Use ui.path to get a reference to the path of the node being populated.
     * Use ui.element to get a reference to the jQuery element of the node being populated.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the populating node is located.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodePopulating", optionValue: NodePopulatingEvent): void;
    /**
     * Fired after the children of a node are populated in the case of load on demand
     * Use ui.path to get a reference to the path of the populated node.
     * Use ui.element to get a reference to the jQuery element of the populated node.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the populated node is located.
     */
    igTree(optionLiteral: 'option', optionName: "nodePopulated"): NodePopulatedEvent;
    /**
     * Fired after the children of a node are populated in the case of load on demand
     * Use ui.path to get a reference to the path of the populated node.
     * Use ui.element to get a reference to the jQuery element of the populated node.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the populated node is located.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodePopulated", optionValue: NodePopulatedEvent): void;
    /**
     * Fired before a node is collapsed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object about to collapse.
     */
    igTree(optionLiteral: 'option', optionName: "nodeCollapsing"): NodeCollapsingEvent;
    /**
     * Fired before a node is collapsed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object about to collapse.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeCollapsing", optionValue: NodeCollapsingEvent): void;
    /**
     * Fired after a node is collapsed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the collapsed node object.
     */
    igTree(optionLiteral: 'option', optionName: "nodeCollapsed"): NodeCollapsedEvent;
    /**
     * Fired after a node is collapsed
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the collapsed node object.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeCollapsed", optionValue: NodeCollapsedEvent): void;
    /**
     * Fired before a node is expanded
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object about to expand.
     */
    igTree(optionLiteral: 'option', optionName: "nodeExpanding"): NodeExpandingEvent;
    /**
     * Fired before a node is expanded
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object about to expand.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeExpanding", optionValue: NodeExpandingEvent): void;
    /**
     * Fired after a node is expanded
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the expanded node object.
     */
    igTree(optionLiteral: 'option', optionName: "nodeExpanded"): NodeExpandedEvent;
    /**
     * Fired after a node is expanded
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the expanded node object.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeExpanded", optionValue: NodeExpandedEvent): void;
    /**
     * Fired on node click
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object being clicked.
     */
    igTree(optionLiteral: 'option', optionName: "nodeClick"): NodeClickEvent;
    /**
     * Fired on node click
     * Use ui.owner to get a reference to the tree.
     * Use ui.node to get a reference to the node object being clicked.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeClick", optionValue: NodeClickEvent): void;
    /**
     * Fired on node double click
     * Use ui.path to get a reference to the path of the double clicked node.
     * Use ui.element to get a reference to the jQuery element of the double clicked node.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the double clicked node is located.
     */
    igTree(optionLiteral: 'option', optionName: "nodeDoubleClick"): NodeDoubleClickEvent;
    /**
     * Fired on node double click
     * Use ui.path to get a reference to the path of the double clicked node.
     * Use ui.element to get a reference to the jQuery element of the double clicked node.
     * Use ui.data to get the node data.
     * Use ui.binding to get a reference to the bindings object for the level at which the double clicked node is located.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeDoubleClick", optionValue: NodeDoubleClickEvent): void;
    /**
     * Fired on node drag start
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igTree(optionLiteral: 'option', optionName: "dragStart"): DragStartEvent;
    /**
     * Fired on node drag start
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dragStart", optionValue: DragStartEvent): void;
    /**
     * Fired on node drag
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igTree(optionLiteral: 'option', optionName: "drag"): DragEvent;
    /**
     * Fired on node drag
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "drag", optionValue: DragEvent): void;
    /**
     * Fired after a drag operation has completed
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igTree(optionLiteral: 'option', optionName: "dragStop"): DragStopEvent;
    /**
     * Fired after a drag operation has completed
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.orginalPosition to get a reference to the original position of the draggable element (the node).
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "dragStop", optionValue: DragStopEvent): void;
    /**
     * Fired before a node drop
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.draggable to get a reference to the draggable element (the node).
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igTree(optionLiteral: 'option', optionName: "nodeDropping"): NodeDroppingEvent;
    /**
     * Fired before a node drop
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.draggable to get a reference to the draggable element (the node).
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeDropping", optionValue: NodeDroppingEvent): void;
    /**
     * Fired after a node drop
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.draggable to get a reference to the draggable element (the node).
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     */
    igTree(optionLiteral: 'option', optionName: "nodeDropped"): NodeDroppedEvent;
    /**
     * Fired after a node drop
     * Use ui.binding to gets a reference to the binding.
     * Use ui.datato get a reference to the data.
     * Use ui.draggable to get a reference to the draggable element (the node).
     * Use ui.element to get a reference to the element.
     * Use ui.helper to get a reference to the helper.
     * Use ui.offset to get a reference to the offset.
     * Use ui.pathto get a reference to the node path.
     * Use ui.position to get a reference to the current position of the draggable element.
     *
     * @optionValue New value to be set.
     */
    igTree(optionLiteral: 'option', optionName: "nodeDropped", optionValue: NodeDroppedEvent): void;
    igTree(options: IgTree): JQuery;
    igTree(optionLiteral: 'option', optionName: string): any;
    igTree(optionLiteral: 'option', options: IgTree): JQuery;
    igTree(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTree(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridColumnFixing {
    /**
     * Specifies altering text on column fixing header icon when column is not fixed
     */
    headerFixButtonText?: string;
    /**
     * Specifies altering text on column fixing header icon when column is fixed
     */
    headerUnfixButtonText?: string;
    /**
     * Option to show column fixing buttons in header cells/feature chooser
     */
    showFixButtons?: boolean;
    /**
     * Option enable syncing heights of rows between fixed/unfixed rows
     */
    syncRowHeights?: boolean;
    /**
     * Option to configure scroll delta when scrolling with mouse wheel or keyboard in fixed columns area
     */
    scrollDelta?: number;
    /**
     * configure on which side to render fixed area
     *
     * Valid values:
     * "left" fixed column are rendered on the left side of the main grid.
     * "right" fixed column are rendered on the right side of the main grid.
     */
    fixingDirection?: any;
    /**
     * A list of column settings that specifies custom column fixing options on a per column basis
     */
    columnSettings?: IgGridColumnFixingColumnSetting[];
    /**
     * Feature chooser text of the fixed column
     */
    featureChooserTextFixedColumn?: string;
    /**
     * Feature chooser text of the unfixed column
     */
    featureChooserTextUnfixedColumn?: string;
    /**
     * minimal visible area for unfixed columns. For instance if you fix a column(or columns) and the width of the fixed columns is such that the width of visible are of unfixed columns is less than this option then fixing will be canceled
     */
    minimalVisibleAreaWidth?: any;
    /**
     * Specify initial fixing of non data columns(like specific rowSelectors columns on the left side of the grid) when fixingDirection is left
     */
    fixNondataColumns?: boolean;
    /**
     * If true then on column fixing when creating table rows all row attributes for the unfixed rows will be set in fixed rows too. Because of performance issue you can set this option to false
     */
    populateDataRowsAttributes?: boolean;
    /**
     * Event which is fired when column fixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    columnFixing?: ColumnFixingEvent;
    /**
     * Event which is fired when column fixing operation is finished
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    columnFixed?: ColumnFixedEvent;
    /**
     * Event which is fired when column unfixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    columnUnfixing?: ColumnUnfixingEvent;
    /**
     * Event which is fired when column unfixing operation is done
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    columnUnfixed?: ColumnUnfixedEvent;
    /**
     * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason fixing has failed
     * use args.owner to get a reference to the grid widget
     */
    columnFixingRefused?: ColumnFixingRefusedEvent;
    /**
     * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason unfixing has failed
     * use args.owner to get a reference to the grid widget
     */
    columnUnfixingRefused?: ColumnUnfixingRefusedEvent;
    /**
     * Option for igTreeGridColumnFixing
     */
    [optionName: string]: any;
}
interface IgTreeGridColumnFixingMethods {
    destroy(): void;
    /**
     * Unfix column by specified column identifier - column key or column index
     *
     * @param colIdentifier    An identifier of the column to be unfixed - column index or column key.
     * @param isGroupHeader    when true indicates that the column is multi-column header.
     * @param target    Key of the column where the unfixed column should move to.
     * @param after    Specifies where the unfixed column should be moved after or before the target column. This parameter is disregarded if there is no target column specified.
     */
    unfixColumn(colIdentifier: Object, isGroupHeader?: boolean, target?: string, after?: boolean): Object;
    /**
     * Check whether heights of fixed and unfixed tables are equal - if not sync them. Similar check is made for heights of table rows.
     */
    checkAndSyncHeights(): void;
    /**
     * Unfix data skipped columns(like row selectors) if any when fixingDirection is left
     */
    unfixDataSkippedColumns(): void;
    /**
     * Unfix all columns
     */
    unfixAllColumns(): void;
    /**
     * Check whether fixing is allowed for the passed argument - columns. It should not be allowed if there is only one visible column in unfixed area and there are hidden unfixed columns
     *
     * @param columns    array of columns - could be column indexes, column keys, column object or mixed
     */
    checkFixingAllowed(columns: any[]): boolean;
    /**
     * Check whether unfixing is allowed for the passed argument - columns. It should not be allowed if there is only one visible column in fixed area and there are hidden fixed columns
     *
     * @param columns    array of columns - could be column indexes, column keys, column object or mixed
     */
    checkUnfixingAllowed(columns: any[]): boolean;
    /**
     * Fix column by specified column identifier - column index or column key
     *
     * @param colIdentifier    An identifier of the column to be fixed - column index or column key.
     * @param isGroupHeader    when true indicates that the column is multi-column header.
     * @param target    Key of the column where the fixed column should move to.
     * @param after    Specifies where the fixed column should be moved after or before the target column. This parameter is disregarded if there is no target column specified.
     */
    fixColumn(colIdentifier: Object, isGroupHeader?: boolean, target?: string, after?: boolean): Object;
    /**
     * Fix data skipped columns(like row selectors) if any when fixing direction is left. If already fixed nothing is done
     */
    fixDataSkippedColumns(): void;
    /**
     * Syncs rows heights between $rows and $anotherRows
     *
     * @param $trs    An array of rows object of fixed/unfixed container.
     * @param $anotherRows    An array of rows object of other unfixed/fixed container.
     */
    syncRowsHeights($trs: any[], $anotherRows: any[]): void;
    /**
     * Calculates width of the fixed columns.
     *
     * @param fCols    Array of grid columns. If not set then it is taken fixed columns of the grid.
     * @param excludeNonDataColumns    If set to true do not calculate the width of non-data fixed columns(like row-selectors)
     * @param includeHidden    If set to true calculates width of the hidden fixed columns(as getting their initial width)
     */
    getWidthOfFixedColumns(fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number;
}
interface JQuery {
    data(propertyName: "igTreeGridColumnFixing"): IgTreeGridColumnFixingMethods;
}
interface JQuery {
    igTreeGridColumnFixing(methodName: "destroy"): void;
    igTreeGridColumnFixing(methodName: "unfixColumn", colIdentifier: Object, isGroupHeader?: boolean, target?: string, after?: boolean): Object;
    igTreeGridColumnFixing(methodName: "checkAndSyncHeights"): void;
    igTreeGridColumnFixing(methodName: "unfixDataSkippedColumns"): void;
    igTreeGridColumnFixing(methodName: "unfixAllColumns"): void;
    igTreeGridColumnFixing(methodName: "checkFixingAllowed", columns: any[]): boolean;
    igTreeGridColumnFixing(methodName: "checkUnfixingAllowed", columns: any[]): boolean;
    igTreeGridColumnFixing(methodName: "fixColumn", colIdentifier: Object, isGroupHeader?: boolean, target?: string, after?: boolean): Object;
    igTreeGridColumnFixing(methodName: "fixDataSkippedColumns"): void;
    igTreeGridColumnFixing(methodName: "syncRowsHeights", $trs: any[], $anotherRows: any[]): void;
    igTreeGridColumnFixing(methodName: "getWidthOfFixedColumns", fCols?: any[], excludeNonDataColumns?: boolean, includeHidden?: boolean): number;
    /**
     * Gets altering text on column fixing header icon when column is not fixed
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "headerFixButtonText"): string;
    /**
     * Sets altering text on column fixing header icon when column is not fixed
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "headerFixButtonText", optionValue: string): void;
    /**
     * Gets altering text on column fixing header icon when column is fixed
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "headerUnfixButtonText"): string;
    /**
     * Sets altering text on column fixing header icon when column is fixed
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "headerUnfixButtonText", optionValue: string): void;
    /**
     * Option to show column fixing buttons in header cells/feature chooser
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "showFixButtons"): boolean;
    /**
     * Option to show column fixing buttons in header cells/feature chooser
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "showFixButtons", optionValue: boolean): void;
    /**
     * Option enable syncing heights of rows between fixed/unfixed rows
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "syncRowHeights"): boolean;
    /**
     * Option enable syncing heights of rows between fixed/unfixed rows
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "syncRowHeights", optionValue: boolean): void;
    /**
     * Option to configure scroll delta when scrolling with mouse wheel or keyboard in fixed columns area
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "scrollDelta"): number;
    /**
     * Option to configure scroll delta when scrolling with mouse wheel or keyboard in fixed columns area
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "scrollDelta", optionValue: number): void;
    /**
     * Configure on which side to render fixed area
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "fixingDirection"): any;
    /**
     * Configure on which side to render fixed area
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "fixingDirection", optionValue: any): void;
    /**
     * A list of column settings that specifies custom column fixing options on a per column basis
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnSettings"): IgGridColumnFixingColumnSetting[];
    /**
     * A list of column settings that specifies custom column fixing options on a per column basis
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridColumnFixingColumnSetting[]): void;
    /**
     * Feature chooser text of the fixed column
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextFixedColumn"): string;
    /**
     * Feature chooser text of the fixed column
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextFixedColumn", optionValue: string): void;
    /**
     * Feature chooser text of the unfixed column
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextUnfixedColumn"): string;
    /**
     * Feature chooser text of the unfixed column
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "featureChooserTextUnfixedColumn", optionValue: string): void;
    /**
     * Minimal visible area for unfixed columns. For instance if you fix a column(or columns) and the width of the fixed columns is such that the width of visible are of unfixed columns is less than this option then fixing will be canceled
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "minimalVisibleAreaWidth"): any;
    /**
     * Minimal visible area for unfixed columns. For instance if you fix a column(or columns) and the width of the fixed columns is such that the width of visible are of unfixed columns is less than this option then fixing will be canceled
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "minimalVisibleAreaWidth", optionValue: any): void;
    /**
     * Specify initial fixing of non data columns(like specific rowSelectors columns on the left side of the grid) when fixingDirection is left
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "fixNondataColumns"): boolean;
    /**
     * Specify initial fixing of non data columns(like specific rowSelectors columns on the left side of the grid) when fixingDirection is left
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "fixNondataColumns", optionValue: boolean): void;
    /**
     * If true then on column fixing when creating table rows all row attributes for the unfixed rows will be set in fixed rows too. Because of performance issue you can set this option to false
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "populateDataRowsAttributes"): boolean;
    /**
     * If true then on column fixing when creating table rows all row attributes for the unfixed rows will be set in fixed rows too. Because of performance issue you can set this option to false
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "populateDataRowsAttributes", optionValue: boolean): void;
    /**
     * Event which is fired when column fixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixing"): ColumnFixingEvent;
    /**
     * Event which is fired when column fixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixing", optionValue: ColumnFixingEvent): void;
    /**
     * Event which is fired when column fixing operation is finished
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixed"): ColumnFixedEvent;
    /**
     * Event which is fired when column fixing operation is finished
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixed", optionValue: ColumnFixedEvent): void;
    /**
     * Event which is fired when column unfixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixing"): ColumnUnfixingEvent;
    /**
     * Event which is fired when column unfixing operation is initiated
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixing", optionValue: ColumnUnfixingEvent): void;
    /**
     * Event which is fired when column unfixing operation is done
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixed"): ColumnUnfixedEvent;
    /**
     * Event which is fired when column unfixing operation is done
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixed", optionValue: ColumnUnfixedEvent): void;
    /**
     * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason fixing has failed
     * use args.owner to get a reference to the grid widget
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixingRefused"): ColumnFixingRefusedEvent;
    /**
     * Event which is fired when column fixing operation has failed - e.g. sum of the width of the fixed columns container and width of the column to be fixed exceeds the grid width
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason fixing has failed
     * use args.owner to get a reference to the grid widget
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnFixingRefused", optionValue: ColumnFixingRefusedEvent): void;
    /**
     * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason unfixing has failed
     * use args.owner to get a reference to the grid widget
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixingRefused"): ColumnUnfixingRefusedEvent;
    /**
     * Event which is fired when column unfixing operation has failed - e.g.: there is only one fixed visible column(and tries to unfix it) and at least one fixed hidden column
     * Function takes arguments evt and args.
     * use args.columnIdentifier to get columnKey or columnIndex
     * use args.isGroupHeader to get whether header cell has children(use this argument ONLY when multi-column-headers are enabled)
     * use args.errorMessage to get error message describing the reason unfixing has failed
     * use args.owner to get a reference to the grid widget
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: "columnUnfixingRefused", optionValue: ColumnUnfixingRefusedEvent): void;
    igTreeGridColumnFixing(options: IgTreeGridColumnFixing): JQuery;
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: string): any;
    igTreeGridColumnFixing(optionLiteral: 'option', options: IgTreeGridColumnFixing): JQuery;
    igTreeGridColumnFixing(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridColumnFixing(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridColumnMoving {
    /**
     * A list of column settings that specifies moving options on a per column basis.
     */
    columnSettings?: IgGridColumnMovingColumnSetting[];
    /**
     * Specify the drag-and-drop mode for the feature
     *
     * Valid values:
     * "immediate" Column headers will rearange as you drag with a space opening under the cursor for the header to be dropped on
     * "deferred" A clone of the header dragged will be created and indicators will be shown between columns to help navigate the drop.
     */
    mode?: any;
    /**
     * Specify the way columns will be rearranged
     *
     * Valid values:
     * "dom" Columns will be rearranged through dom manipulation
     * "render" Columns will not be rearranged but the grid will be rendered again with the new column order. Please note this option is incompatible with immediate move mode.
     */
    moveType?: any;
    /**
     * Specifies if header cells should include an additional button that opens a moving helper dropdown.
     */
    addMovingDropdown?: boolean;
    /**
     * Specifies width of column moving dialog
     */
    movingDialogWidth?: number;
    /**
     * Specifies height of column moving dialog
     */
    movingDialogHeight?: number;
    /**
     * Specifies time in milliseconds for animation duration to show/hide modal dialog
     */
    movingDialogAnimationDuration?: number;
    /**
     * Specifies the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
     */
    movingAcceptanceTolerance?: number;
    /**
     * Specifies the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
     */
    movingScrollTolerance?: number;
    /**
     * Specifies a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
     */
    scrollSpeedMultiplier?: number;
    /**
     * Specifies the length (in pixels) of each individual scroll operation
     */
    scrollDelta?: number;
    /**
     * Specifies whether the contents of the column being dragged will get hidden. The option is only
     * relevant in immediate moving mode.
     */
    hideHeaderContentsDuringDrag?: boolean;
    /**
     * Specifies the opacity of the drag markup, while a column header is being dragged.
     * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
     * will be used with priority over this one.
     */
    dragHelperOpacity?: number;
    /**
     * Specifies caption for each move down button in the column moving dialog
     */
    movingDialogCaptionButtonDesc?: string;
    /**
     * Specifies caption for each move up button in the column moving dialog
     */
    movingDialogCaptionButtonAsc?: string;
    /**
     * Specifies caption text for the column moving dialog
     */
    movingDialogCaptionText?: string;
    /**
     * Specifies caption text for the feature chooser entry
     */
    movingDialogDisplayText?: string;
    /**
     * Specifies text for drop tooltip in column moving dialog
     */
    movingDialogDropTooltipText?: string;
    /**
     * Specifies markup for drop tooltip in column moving dialog
     */
    movingDialogDropTooltipMarkup?: string;
    /**
     * Specifies caption for the move left dropdown button
     */
    dropDownMoveLeftText?: string;
    /**
     * Specifies caption for the move right dropdown button
     */
    dropDownMoveRightText?: string;
    /**
     * Specifies caption for the move first dropdown button
     */
    dropDownMoveFirstText?: string;
    /**
     * Specifies caption for the move last dropdown button
     */
    dropDownMoveLastText?: string;
    /**
     * Specifies tooltip text for the move indicator
     */
    movingToolTipMove?: string;
    /**
     * Specifies caption text for the feature chooser submenu button
     */
    featureChooserSubmenuText?: string;
    /**
     * Controls containment behavior of column moving dialog.
     *                 owner  The dialog will be draggable only in the grid area
     *                 window  The dialog will be draggable in the whole window area
     */
    columnMovingDialogContainment?: string;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event which is fired when a drag operation begins on a column header
     * use args.columnKey to get the column key of the column being dragged
     * use args.columnIndex to get the column index of the column being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th being dragged
     * use args.helper to get a reference to cloned DOM element that's actually being dragged
     */
    columnDragStart?: ColumnDragStartEvent;
    /**
     * Event which is fired when a drag operation ends on a column header
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     */
    columnDragEnd?: ColumnDragEndEvent;
    /**
     * Event which is fired when a drag operation is canceled
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     */
    columnDragCanceled?: ColumnDragCanceledEvent;
    /**
     * Event which is fired when a column moving operation is initiated
     * use args.columnKey to get the column key of the column that was being moved
     * use args.columnIndex to get the column index of the column that was being moved
     * use args.targetIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     */
    columnMoving?: ColumnMovingEvent;
    /**
     * Event which is fired when a column moving operation completes
     * use args.columnKey to get the column key of the column that was moved
     * use args.oldIndex to get the previous column index of the column that was moved
     * use args.newIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     */
    columnMoved?: ColumnMovedEvent;
    /**
     * Event fired before the moving dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogOpening?: MovingDialogOpeningEvent;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogOpened?: MovingDialogOpenedEvent;
    /**
     * Event fired every time the moving dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the moving dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the moving dialog div as { top, left } object, relative to the page.
     */
    movingDialogDragged?: MovingDialogDraggedEvent;
    /**
     * Event fired before the moving dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogClosing?: MovingDialogClosingEvent;
    /**
     * Event fired after the moving dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    movingDialogClosed?: MovingDialogClosedEvent;
    /**
     * Event fired before the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialogContentsRendering?: MovingDialogContentsRenderingEvent;
    /**
     * Event fired after the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    movingDialogContentsRendered?: MovingDialogContentsRenderedEvent;
    /**
     * Event fired when move up button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    movingDialogMoveUpButtonPressed?: MovingDialogMoveUpButtonPressedEvent;
    /**
     * Event fired when move down button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    movingDialogMoveDownButtonPressed?: MovingDialogMoveDownButtonPressedEvent;
    /**
     * Event fired when column moving is initiated through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    movingDialogDragColumnMoving?: MovingDialogDragColumnMovingEvent;
    /**
     * Event fired when column moving is completed through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    movingDialogDragColumnMoved?: MovingDialogDragColumnMovedEvent;
    /**
     * Option for igTreeGridColumnMoving
     */
    [optionName: string]: any;
}
interface IgTreeGridColumnMovingMethods {
    destroy(): void;
    /**
     * Moves a visible column at a specified place, in front or behind a target column or at a target index
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier of the column to be moved. It can be a key, a Multi-Column Header identificator, or an index in a number format. The latter is not supported when the grid contains multi-column headers.
     * @param target    An identifier of a column where the moved column should move to or an index at which the moved column should be moved to. In the case of a column identifier the column will be moved after it by default.
     * @param after    Specifies whether the column moved should be moved after or before the target column.
     * @param inDom    Specifies whether the column moving will be enacted through DOM manipulation or through rerendering of the grid.
     * @param callback    Specifies a custom function to be called when the column is moved.
     */
    moveColumn(column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
}
interface JQuery {
    data(propertyName: "igTreeGridColumnMoving"): IgTreeGridColumnMovingMethods;
}
interface JQuery {
    igTreeGridColumnMoving(methodName: "destroy"): void;
    igTreeGridColumnMoving(methodName: "moveColumn", column: Object, target: Object, after?: boolean, inDom?: boolean, callback?: Function): void;
    /**
     * A list of column settings that specifies moving options on a per column basis.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnSettings"): IgGridColumnMovingColumnSetting[];
    /**
     * A list of column settings that specifies moving options on a per column basis.
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridColumnMovingColumnSetting[]): void;
    /**
     * Specify the drag-and-drop mode for the feature
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Specify the drag-and-drop mode for the feature
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Specify the way columns will be rearranged
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "moveType"): any;
    /**
     * Specify the way columns will be rearranged
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "moveType", optionValue: any): void;
    /**
     * Gets if header cells should include an additional button that opens a moving helper dropdown.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "addMovingDropdown"): boolean;
    /**
     * Sets if header cells should include an additional button that opens a moving helper dropdown.
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "addMovingDropdown", optionValue: boolean): void;
    /**
     * Gets width of column moving dialog
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogWidth"): number;
    /**
     * Sets width of column moving dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogWidth", optionValue: number): void;
    /**
     * Gets height of column moving dialog
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogHeight"): number;
    /**
     * Sets height of column moving dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogHeight", optionValue: number): void;
    /**
     * Gets time in milliseconds for animation duration to show/hide modal dialog
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogAnimationDuration"): number;
    /**
     * Sets time in milliseconds for animation duration to show/hide modal dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogAnimationDuration", optionValue: number): void;
    /**
     * Gets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingAcceptanceTolerance"): number;
    /**
     * Sets the length (in pixels) between the dragged column and the column edges below which the move operation is accepted
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingAcceptanceTolerance", optionValue: number): void;
    /**
     * Gets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingScrollTolerance"): number;
    /**
     * Sets the length (in pixels) between the dragged column and the grid edges below which horizontal scrolling occurs
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingScrollTolerance", optionValue: number): void;
    /**
     * Gets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "scrollSpeedMultiplier"): number;
    /**
     * Sets a multiplier for the delay between subsequent scroll operations. The larger this number is, the slower scrolling will appear to be.
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "scrollSpeedMultiplier", optionValue: number): void;
    /**
     * Gets the length (in pixels) of each individual scroll operation
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "scrollDelta"): number;
    /**
     * Sets the length (in pixels) of each individual scroll operation
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "scrollDelta", optionValue: number): void;
    /**
     * Gets whether the contents of the column being dragged will get hidden. The option is only
     * relevant in immediate moving mode.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "hideHeaderContentsDuringDrag"): boolean;
    /**
     * Sets whether the contents of the column being dragged will get hidden. The option is only
     * relevant in immediate moving mode.
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "hideHeaderContentsDuringDrag", optionValue: boolean): void;
    /**
     * Gets the opacity of the drag markup, while a column header is being dragged.
     * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
     * will be used with priority over this one.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dragHelperOpacity"): number;
    /**
     * Sets the opacity of the drag markup, while a column header is being dragged.
     * The value must be between 0 and 1. When GroupBy is enabled, the corresponding option in the GroupBy configuration
     * will be used with priority over this one.
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dragHelperOpacity", optionValue: number): void;
    /**
     * Gets caption for each move down button in the column moving dialog
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonDesc"): string;
    /**
     * Sets caption for each move down button in the column moving dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonDesc", optionValue: string): void;
    /**
     * Gets caption for each move up button in the column moving dialog
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonAsc"): string;
    /**
     * Sets caption for each move up button in the column moving dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionButtonAsc", optionValue: string): void;
    /**
     * Gets caption text for the column moving dialog
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionText"): string;
    /**
     * Sets caption text for the column moving dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogCaptionText", optionValue: string): void;
    /**
     * Gets caption text for the feature chooser entry
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDisplayText"): string;
    /**
     * Sets caption text for the feature chooser entry
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDisplayText", optionValue: string): void;
    /**
     * Gets text for drop tooltip in column moving dialog
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipText"): string;
    /**
     * Sets text for drop tooltip in column moving dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipText", optionValue: string): void;
    /**
     * Gets markup for drop tooltip in column moving dialog
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipMarkup"): string;
    /**
     * Sets markup for drop tooltip in column moving dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDropTooltipMarkup", optionValue: string): void;
    /**
     * Gets caption for the move left dropdown button
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLeftText"): string;
    /**
     * Sets caption for the move left dropdown button
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLeftText", optionValue: string): void;
    /**
     * Gets caption for the move right dropdown button
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveRightText"): string;
    /**
     * Sets caption for the move right dropdown button
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveRightText", optionValue: string): void;
    /**
     * Gets caption for the move first dropdown button
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveFirstText"): string;
    /**
     * Sets caption for the move first dropdown button
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveFirstText", optionValue: string): void;
    /**
     * Gets caption for the move last dropdown button
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLastText"): string;
    /**
     * Sets caption for the move last dropdown button
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "dropDownMoveLastText", optionValue: string): void;
    /**
     * Gets tooltip text for the move indicator
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingToolTipMove"): string;
    /**
     * Sets tooltip text for the move indicator
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingToolTipMove", optionValue: string): void;
    /**
     * Gets caption text for the feature chooser submenu button
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "featureChooserSubmenuText"): string;
    /**
     * Sets caption text for the feature chooser submenu button
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "featureChooserSubmenuText", optionValue: string): void;
    /**
     * Controls containment behavior of column moving dialog.
     *                 owner  The dialog will be draggable only in the grid area
     *                 window  The dialog will be draggable in the whole window area
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMovingDialogContainment"): string;
    /**
     * Controls containment behavior of column moving dialog.
     *                 owner  The dialog will be draggable only in the grid area
     *                 window  The dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMovingDialogContainment", optionValue: string): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event which is fired when a drag operation begins on a column header
     * use args.columnKey to get the column key of the column being dragged
     * use args.columnIndex to get the column index of the column being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th being dragged
     * use args.helper to get a reference to cloned DOM element that's actually being dragged
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragStart"): ColumnDragStartEvent;
    /**
     * Event which is fired when a drag operation begins on a column header
     * use args.columnKey to get the column key of the column being dragged
     * use args.columnIndex to get the column index of the column being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th being dragged
     * use args.helper to get a reference to cloned DOM element that's actually being dragged
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragStart", optionValue: ColumnDragStartEvent): void;
    /**
     * Event which is fired when a drag operation ends on a column header
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragEnd"): ColumnDragEndEvent;
    /**
     * Event which is fired when a drag operation ends on a column header
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragEnd", optionValue: ColumnDragEndEvent): void;
    /**
     * Event which is fired when a drag operation is canceled
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragCanceled"): ColumnDragCanceledEvent;
    /**
     * Event which is fired when a drag operation is canceled
     * use args.columnKey to get the column key of the column that was being dragged
     * use args.columnIndex to get the column index of the column that was being dragged
     * use args.owner to get a reference to the widget
     * use args.header to get a reference to the orginal th that was being dragged
     * use args.helper to get a reference to cloned DOM element that was actually being dragged
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnDragCanceled", optionValue: ColumnDragCanceledEvent): void;
    /**
     * Event which is fired when a column moving operation is initiated
     * use args.columnKey to get the column key of the column that was being moved
     * use args.columnIndex to get the column index of the column that was being moved
     * use args.targetIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMoving"): ColumnMovingEvent;
    /**
     * Event which is fired when a column moving operation is initiated
     * use args.columnKey to get the column key of the column that was being moved
     * use args.columnIndex to get the column index of the column that was being moved
     * use args.targetIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMoving", optionValue: ColumnMovingEvent): void;
    /**
     * Event which is fired when a column moving operation completes
     * use args.columnKey to get the column key of the column that was moved
     * use args.oldIndex to get the previous column index of the column that was moved
     * use args.newIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMoved"): ColumnMovedEvent;
    /**
     * Event which is fired when a column moving operation completes
     * use args.columnKey to get the column key of the column that was moved
     * use args.oldIndex to get the previous column index of the column that was moved
     * use args.newIndex to get the new column index of the column that was being moved
     * use args.owner to get a reference to the widget
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "columnMoved", optionValue: ColumnMovedEvent): void;
    /**
     * Event fired before the moving dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpening"): MovingDialogOpeningEvent;
    /**
     * Event fired before the moving dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpening", optionValue: MovingDialogOpeningEvent): void;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpened"): MovingDialogOpenedEvent;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogOpened", optionValue: MovingDialogOpenedEvent): void;
    /**
     * Event fired every time the moving dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the moving dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the moving dialog div as { top, left } object, relative to the page.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragged"): MovingDialogDraggedEvent;
    /**
     * Event fired every time the moving dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the moving dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the moving dialog div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragged", optionValue: MovingDialogDraggedEvent): void;
    /**
     * Event fired before the moving dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosing"): MovingDialogClosingEvent;
    /**
     * Event fired before the moving dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosing", optionValue: MovingDialogClosingEvent): void;
    /**
     * Event fired after the moving dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosed"): MovingDialogClosedEvent;
    /**
     * Event fired after the moving dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialogElement to get a reference to the moving dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogClosed", optionValue: MovingDialogClosedEvent): void;
    /**
     * Event fired before the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendering"): MovingDialogContentsRenderingEvent;
    /**
     * Event fired before the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendering", optionValue: MovingDialogContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendered"): MovingDialogContentsRenderedEvent;
    /**
     * Event fired after the contents of the model dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogContentsRendered", optionValue: MovingDialogContentsRenderedEvent): void;
    /**
     * Event fired when move up button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveUpButtonPressed"): MovingDialogMoveUpButtonPressedEvent;
    /**
     * Event fired when move up button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveUpButtonPressed", optionValue: MovingDialogMoveUpButtonPressedEvent): void;
    /**
     * Event fired when move down button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveDownButtonPressed"): MovingDialogMoveDownButtonPressedEvent;
    /**
     * Event fired when move down button is pressed in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogMoveDownButtonPressed", optionValue: MovingDialogMoveDownButtonPressedEvent): void;
    /**
     * Event fired when column moving is initiated through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoving"): MovingDialogDragColumnMovingEvent;
    /**
     * Event fired when column moving is initiated through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoving", optionValue: MovingDialogDragColumnMovingEvent): void;
    /**
     * Event fired when column moving is completed through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoved"): MovingDialogDragColumnMovedEvent;
    /**
     * Event fired when column moving is completed through dragging it in the moving dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridColumnMoving widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.movingDialog to get a reference to the Moving Dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key of the column that was being moved
     * Use ui.columnIndex to get the column index of the column that was being moved
     * Use ui.targetIndex to get the new column index of the column that was being moved
     *
     * @optionValue Define event handler function.
     */
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: "movingDialogDragColumnMoved", optionValue: MovingDialogDragColumnMovedEvent): void;
    igTreeGridColumnMoving(options: IgTreeGridColumnMoving): JQuery;
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: string): any;
    igTreeGridColumnMoving(optionLiteral: 'option', options: IgTreeGridColumnMoving): JQuery;
    igTreeGridColumnMoving(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridColumnMoving(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridFiltering {
    /**
     * The property in the response that will hold the total number of records in the data source
     */
    recordCountKey?: string;
    /**
     * Specifies from which data bound level to be applied filtering - 0 is the first level
     */
    fromLevel?: number;
    /**
     * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
     */
    toLevel?: number;
    /**
     * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don't match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don't match filtering conditions
     */
    displayMode?: any;
    /**
     * Specifies the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
     * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn't.
     * This is used mainly for internal purposes.
     */
    matchFiltering?: string;
    /**
     * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
     * Supported options:
     * ${currentPageMatches} (filtering)
     * ${totalMatches} (filtering)
     * ${startRecord} (paging)
     * ${endRecord} (paging)
     * ${recordCount} (paging)
     */
    filterSummaryInPagerTemplate?: string;
    /**
     * Enables or disables the filtering case sensitivity. Works only for local filtering.If true, it enables filtering case sensitivity. If false, it disables filtering case sensitivity.
     */
    caseSensitive?: boolean;
    /**
     * Enable/disable footer visibility with summary info about the filter.
     * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
     * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
     */
    filterSummaryAlwaysVisible?: boolean;
    /**
     * Render in feature chooser. Feature chooser is dialog which lists all the enabled features (like Sorting, Filtering, Hiding etc.) of igGrid.
     */
    renderFC?: boolean;
    /**
     * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'
     */
    filterSummaryTemplate?: string;
    /**
     * type of animations for the column filter dropdowns
     *
     * Valid values:
     * "linear"
     * "none"
     */
    filterDropDownAnimations?: any;
    /**
     * Animation duration in milliseconds for the filter dropdown animations
     */
    filterDropDownAnimationDuration?: number;
    /**
     * width of the column filter dropdowns
     */
    filterDropDownWidth?: any;
    /**
     * Height of the column filter dropdowns
     * string The height of the column filter dropdowns in pixels (0px).
     * number The height of the column filter dropdowns as a number (0).
     */
    filterDropDownHeight?: any;
    /**
     * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     */
    filterExprUrlKey?: string;
    /**
     * Enable/disable filter icons visibility.
     *
     * Valid values:
     * "true" all predefined filters in the filter dropdowns will have icons rendered in front of the text
     * "false"
     */
    filterDropDownItemIcons?: any;
    /**
     * A list of column settings that specifies custom filtering options on a per column basis
     */
    columnSettings?: IgGridFilteringColumnSetting[];
    /**
     * Type of filtering. Delegates all filtering functionality to the $.ig.DataSource.
     *
     * Valid values:
     * "remote"
     * "local"
     */
    type?: any;
    /**
     * Time in milliseconds for which widget will wait for keystrokes before sending filtering request.
     */
    filterDelay?: number;
    /**
     * Default is 'simple' for non-virtualized grids, and 'advanced' when virtualization is enabled
     *
     * Valid values:
     * "simple" renders just a filter row
     * "advanced" allows to configure multiple filters from a dialog - Excel style
     */
    mode?: any;
    /**
     * Defines whether to show/hide editors in advanced mode. If false, no editors will be rendered in the advanced mode
     */
    advancedModeEditorsVisible?: boolean;
    /**
     * location of the advanced filtering button when advancedModeEditorsVisible is false (i.e. when the button is rendered in the header)
     *
     * Valid values:
     * "left"
     * "right"
     */
    advancedModeHeaderButtonLocation?: any;
    /**
     * default filter dialog width (used for Advanced filtering)
     */
    filterDialogWidth?: any;
    /**
     * default filter dialog height (used for Advanced filtering)
     */
    filterDialogHeight?: any;
    /**
     * Width of the filtering condition dropdowns in the advanced filter dialog
     */
    filterDialogFilterDropDownDefaultWidth?: any;
    /**
     * width of the filtering expression input boxes in the advanced filter dialog
     */
    filterDialogExprInputDefaultWidth?: any;
    /**
     * Width of the column chooser dropdowns in the advanced filter dialog
     */
    filterDialogColumnDropDownDefaultWidth?: any;
    /**
     * Enable/disable filter button visibility. If false,no filter dropdown buttons will be rendered and predefined list of filters will not be rendered for the columns
     */
    renderFilterButton?: boolean;
    /**
     * the filtering button for filter dropdowns can be rendered either on the left of the filter editor or on the right
     *
     * Valid values:
     * "left"
     * "right"
     */
    filterButtonLocation?: any;
    /**
     * List of configurable and localized null texts that will be used for the filter editors
     */
    nullTexts?: IgGridFilteringNullTexts;
    /**
     * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns.
     */
    labels?: IgGridFilteringLabels;
    /**
     * Custom tooltip template for the filter button, when a filter is applied
     */
    tooltipTemplate?: string;
    /**
     * Custom template for add condition area in the filter dialog.
     * The default template is "<div><span>${label1}</span><div><select></select></div><span>${label2}</span></div>"
     */
    filterDialogAddConditionTemplate?: string;
    /**
     * Custom template for options in dropdown in add condition area in the filter dialog.
     * The default template is "<option value='${value}'>${text}</option>"
     */
    filterDialogAddConditionDropDownTemplate?: string;
    /**
     * Custom template for filter dialog.
     * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
     * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
     * NOTE: The template is supported only with <tr />.
     * The default template is "<tr data-af-row><td><input data-af-col/></td><td><select data-af-cond></select></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>"
     */
    filterDialogFilterTemplate?: string;
    /**
     * Custom template for options in condition list in filter dialog
     * The default template is "<option value='${condition}'>${text}</option>"
     */
    filterDialogFilterConditionTemplate?: string;
    /**
     * add button width - in the advanced filter dialog
     */
    filterDialogAddButtonWidth?: any;
    /**
     * Width of the Ok and Cancel buttons in the advanced filtering dialogs
     */
    filterDialogOkCancelButtonWidth?: any;
    /**
     * Maximum number of filter rows in the advanced filtering dialog. if this number is exceeded, an error message will be rendered
     */
    filterDialogMaxFilterCount?: number;
    /**
     * Controls containment behavior.
     * owner  The filter dialog will be draggable only in the grid area
     * window  The filter dialog will be draggable in the whole window area
     */
    filterDialogContainment?: string;
    /**
     * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns
     */
    showEmptyConditions?: boolean;
    /**
     * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns
     */
    showNullConditions?: boolean;
    /**
     * Feature chooser text when filter is shown and filter mode is simple
     */
    featureChooserText?: string;
    /**
     * Feature chooser text when filter is hidden and filter mode is simple
     */
    featureChooserTextHide?: string;
    /**
     * Feature chooser text when filter mode is advanced
     */
    featureChooserTextAdvancedFilter?: string;
    /**
     * Enables / disables filtering persistence between states
     */
    persist?: boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before a filtering operation is executed (remote request or local).
     * Return false in order to cancel filtering operation.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.newExpressions to get filtering expressions. Filtering expressions could be changed in this event handler and after that data binding is applied. In this way the user could control filtering more easily before applying data-binding.
     */
    dataFiltering?: DataFilteringEvent;
    /**
     * Event fired after the filtering has been executed and results are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.expressions to get filtered expressions.
     */
    dataFiltered?: DataFilteredEvent;
    /**
     * Event fired before the filter dropdown is opened for a specific column.
     * Return false in order to cancel dropdown opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    dropDownOpening?: DropDownOpeningEvent;
    /**
     * Event fired after the filter dropdown is opened for a specific column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    dropDownOpened?: DropDownOpenedEvent;
    /**
     * Event fired before the filter dropdown starts closing.
     * Return false in order to cancel dropdown closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    dropDownClosing?: DropDownClosingEvent;
    /**
     * Event fired after a filter column dropdown is completely closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    dropDownClosed?: DropDownClosedEvent;
    /**
     * Event fired before the advanced filtering dialog is opened.
     * Return false in order to cancel filter dialog opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    filterDialogOpening?: FilterDialogOpeningEvent;
    /**
     * Event fired after the advanced filter dialog is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    filterDialogOpened?: FilterDialogOpenedEvent;
    /**
     * Event fired every time the advanced filter dialog changes its position.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     */
    filterDialogMoving?: FilterDialogMovingEvent;
    /**
     * Event fired before a filter row is added to the advanced filter dialog.
     * Return false in order to cancel filter adding to the advanced filtering dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filtersTableBody to get reference to filters table body DOM element.
     */
    filterDialogFilterAdding?: FilterDialogFilterAddingEvent;
    /**
     * Event fired after a filter row is added to the advanced filter dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filter to get reference to filters table row DOM element.
     */
    filterDialogFilterAdded?: FilterDialogFilterAddedEvent;
    /**
     * Event fired before the advanced filter dialog is closed.
     * Return false in order to cancel filtering dialog closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     */
    filterDialogClosing?: FilterDialogClosingEvent;
    /**
     * Event fired after the advanced filter dialog has been closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     */
    filterDialogClosed?: FilterDialogClosedEvent;
    /**
     * Event fired before the contents of the advanced filter dialog are rendered.
     * Return false in order to cancel filtering dialog rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     */
    filterDialogContentsRendering?: FilterDialogContentsRenderingEvent;
    /**
     * Event fired after the contents of the advanced filter dialog are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     */
    filterDialogContentsRendered?: FilterDialogContentsRenderedEvent;
    /**
     * Event fired when the OK button in the advanced filter dialog is pressed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    filterDialogFiltering?: FilterDialogFilteringEvent;
    /**
     * Option for igTreeGridFiltering
     */
    [optionName: string]: any;
}
interface IgTreeGridFilteringMethods {
    /**
     * Returns the count of data records that match filtering conditions
     */
    getFilteringMatchesCount(): number;
    destroy(): void;
    /**
     * Toggle filter row when mode is simple or advancedModeEditorsVisible is TRUE. Otherwise show/hide advanced dialog
     *
     * @param event     Column key
     */
    toggleFilterRowByFeatureChooser(event: string): void;
    /**
     * Applies filtering programmatically and updates the UI by default
     *
     * @param expressions     An array of filtering expressions, each one having the format {fieldName: , expr: , cond: , logic: } where  fieldName is the key of the column, expr is the actual expression string with which we would like to filter, logic is 'AND' or 'OR', and cond is one of the following strings: "equals", "doesNotEqual", "contains", "doesNotContain", "greaterThan", "lessThan", "greaterThanOrEqualTo", "lessThanOrEqualTo", "true", "false", "null", "notNull", "empty", "notEmpty", "startsWith", "endsWith", "today", "yesterday", "on", "notOn", "thisMonth", "lastMonth", "nextMonth", "before", "after", "thisYear", "lastYear", "nextYear". The difference between the empty and null filtering conditions is that empty includes null, NaN, and undefined, as well as the empty string.
     * @param updateUI     specifies whether the filter row should be also updated once the grid is filtered
     * @param addedFromAdvanced
     */
    filter(expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void;
    /**
     * Check whether filterCondition requires or not filtering expression - e.g. if filterCondition is "lastMonth", "thisMonth", "null", "notNull", "true", "false", etc. then filtering expression is NOT required
     *
     * @param filterCondition    filtering condition - e.g. "true", "false",  "yesterday", "empty", "null", etc.
     */
    requiresFilteringExpression(filterCondition: string): boolean;
}
interface JQuery {
    data(propertyName: "igTreeGridFiltering"): IgTreeGridFilteringMethods;
}
interface JQuery {
    igTreeGridFiltering(methodName: "getFilteringMatchesCount"): number;
    igTreeGridFiltering(methodName: "destroy"): void;
    igTreeGridFiltering(methodName: "toggleFilterRowByFeatureChooser", event: string): void;
    igTreeGridFiltering(methodName: "filter", expressions: any[], updateUI?: boolean, addedFromAdvanced?: boolean): void;
    igTreeGridFiltering(methodName: "requiresFilteringExpression", filterCondition: string): boolean;
    /**
     * The property in the response that will hold the total number of records in the data source
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "recordCountKey"): string;
    /**
     * The property in the response that will hold the total number of records in the data source
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "recordCountKey", optionValue: string): void;
    /**
     * Specifies from which data bound level to be applied filtering - 0 is the first level
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "fromLevel"): number;
    /**
     * Specifies from which data bound level to be applied filtering - 0 is the first level
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "fromLevel", optionValue: number): void;
    /**
     * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "toLevel"): number;
    /**
     * Specifies to which data bound level to be applied filtering - if -1 filtering should be applied to the last data bound level
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "toLevel", optionValue: number): void;
    /**
     * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don't match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don't match filtering conditions
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "displayMode"): any;
    /**
     * If displayMode is showWithAncestorsAndDescendants, show all records that match filtering conditions and their child records, even if child records don't match filtering conditions. If displayMode is showWithAncestors show only those records that match filtering conditions and do not show child records(if any) that don't match filtering conditions
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "displayMode", optionValue: any): void;
    /**
     * Gets the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
     * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn't.
     * This is used mainly for internal purposes.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "matchFiltering"): string;
    /**
     * Sets the name of a boolean property in the dataRecord object that indicates whether the dataRow matches the filtering conditions.
     * When filtering a boolean flag  with the specified name is added on each data record object with a value of true if it matches the condition or false if it doesn't.
     * This is used mainly for internal purposes.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "matchFiltering", optionValue: string): void;
    /**
     * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
     * Supported options:
     * ${currentPageMatches} (filtering)
     * ${totalMatches} (filtering)
     * ${startRecord} (paging)
     * ${endRecord} (paging)
     * ${recordCount} (paging)
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryInPagerTemplate"): string;
    /**
     * Template that is used when filtering is applied and paging is enabled and user goes to another page. It takes precedence over the pagerRecordsLabelTemplate(option from igTreeGridPaging). If it is set to null then it is taken option from igTreeGridPaging.
     * Supported options:
     * ${currentPageMatches} (filtering)
     * ${totalMatches} (filtering)
     * ${startRecord} (paging)
     * ${endRecord} (paging)
     * ${recordCount} (paging)
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryInPagerTemplate", optionValue: string): void;
    /**
     * Enables or disables the filtering case sensitivity. Works only for local filtering.If true, it enables filtering case sensitivity. If false, it disables filtering case sensitivity.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "caseSensitive"): boolean;
    /**
     * Enables or disables the filtering case sensitivity. Works only for local filtering.If true, it enables filtering case sensitivity. If false, it disables filtering case sensitivity.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;
    /**
     * Enable/disable footer visibility with summary info about the filter.
     * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
     * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryAlwaysVisible"): boolean;
    /**
     * Enable/disable footer visibility with summary info about the filter.
     * When false, the filter summary row (in the footer) will only be visible when paging is enabled (or some other feature that renders a footer).
     * When true, the filter summary row will only be visible when a filter is applied i.e. it's not visible by default.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryAlwaysVisible", optionValue: boolean): void;
    /**
     * Render in feature chooser. Feature chooser is dialog which lists all the enabled features (like Sorting, Filtering, Hiding etc.) of igGrid.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "renderFC"): boolean;
    /**
     * Render in feature chooser. Feature chooser is dialog which lists all the enabled features (like Sorting, Filtering, Hiding etc.) of igGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "renderFC", optionValue: boolean): void;
    /**
     * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryTemplate"): string;
    /**
     * Summary template that will appear in the bottom left corner of the footer. Has the format '${matches} matching records'
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterSummaryTemplate", optionValue: string): void;
    /**
     * Type of animations for the column filter dropdowns
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimations"): any;
    /**
     * Type of animations for the column filter dropdowns
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimations", optionValue: any): void;
    /**
     * Animation duration in milliseconds for the filter dropdown animations
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimationDuration"): number;
    /**
     * Animation duration in milliseconds for the filter dropdown animations
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownAnimationDuration", optionValue: number): void;
    /**
     * Width of the column filter dropdowns
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownWidth"): any;
    /**
     * Width of the column filter dropdowns
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownWidth", optionValue: any): void;
    /**
     * Height of the column filter dropdowns
     * string The height of the column filter dropdowns in pixels (0px).
     * number The height of the column filter dropdowns as a number (0).
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownHeight"): any;
    /**
     * Height of the column filter dropdowns
     * string The height of the column filter dropdowns in pixels (0px).
     * number The height of the column filter dropdowns as a number (0).
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownHeight", optionValue: any): void;
    /**
     * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterExprUrlKey"): string;
    /**
     * URL key name that specifies how the filtering expressions will be encoded for remote requests, e.g. &filter('col') = startsWith. Default is OData
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterExprUrlKey", optionValue: string): void;
    /**
     * Enable/disable filter icons visibility.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownItemIcons"): any;
    /**
     * Enable/disable filter icons visibility.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDropDownItemIcons", optionValue: any): void;
    /**
     * A list of column settings that specifies custom filtering options on a per column basis
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "columnSettings"): IgGridFilteringColumnSetting[];
    /**
     * A list of column settings that specifies custom filtering options on a per column basis
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridFilteringColumnSetting[]): void;
    /**
     * Type of filtering. Delegates all filtering functionality to the $.ig.DataSource.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "type"): any;
    /**
     * Type of filtering. Delegates all filtering functionality to the $.ig.DataSource.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * Time in milliseconds for which widget will wait for keystrokes before sending filtering request.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDelay"): number;
    /**
     * Time in milliseconds for which widget will wait for keystrokes before sending filtering request.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDelay", optionValue: number): void;
    /**
     * Default is 'simple' for non-virtualized grids, and 'advanced' when virtualization is enabled
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Default is 'simple' for non-virtualized grids, and 'advanced' when virtualization is enabled
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Defines whether to show/hide editors in advanced mode. If false, no editors will be rendered in the advanced mode
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "advancedModeEditorsVisible"): boolean;
    /**
     * Defines whether to show/hide editors in advanced mode. If false, no editors will be rendered in the advanced mode
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "advancedModeEditorsVisible", optionValue: boolean): void;
    /**
     * Location of the advanced filtering button when advancedModeEditorsVisible is false (i.e. when the button is rendered in the header)
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "advancedModeHeaderButtonLocation"): any;
    /**
     * Location of the advanced filtering button when advancedModeEditorsVisible is false (i.e. when the button is rendered in the header)
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "advancedModeHeaderButtonLocation", optionValue: any): void;
    /**
     * Default filter dialog width (used for Advanced filtering)
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogWidth"): any;
    /**
     * Default filter dialog width (used for Advanced filtering)
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogWidth", optionValue: any): void;
    /**
     * Default filter dialog height (used for Advanced filtering)
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogHeight"): any;
    /**
     * Default filter dialog height (used for Advanced filtering)
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogHeight", optionValue: any): void;
    /**
     * Width of the filtering condition dropdowns in the advanced filter dialog
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterDropDownDefaultWidth"): any;
    /**
     * Width of the filtering condition dropdowns in the advanced filter dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterDropDownDefaultWidth", optionValue: any): void;
    /**
     * Width of the filtering expression input boxes in the advanced filter dialog
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogExprInputDefaultWidth"): any;
    /**
     * Width of the filtering expression input boxes in the advanced filter dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogExprInputDefaultWidth", optionValue: any): void;
    /**
     * Width of the column chooser dropdowns in the advanced filter dialog
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogColumnDropDownDefaultWidth"): any;
    /**
     * Width of the column chooser dropdowns in the advanced filter dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogColumnDropDownDefaultWidth", optionValue: any): void;
    /**
     * Enable/disable filter button visibility. If false,no filter dropdown buttons will be rendered and predefined list of filters will not be rendered for the columns
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "renderFilterButton"): boolean;
    /**
     * Enable/disable filter button visibility. If false,no filter dropdown buttons will be rendered and predefined list of filters will not be rendered for the columns
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "renderFilterButton", optionValue: boolean): void;
    /**
     * The filtering button for filter dropdowns can be rendered either on the left of the filter editor or on the right
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterButtonLocation"): any;
    /**
     * The filtering button for filter dropdowns can be rendered either on the left of the filter editor or on the right
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterButtonLocation", optionValue: any): void;
    /**
     * List of configurable and localized null texts that will be used for the filter editors
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "nullTexts"): IgGridFilteringNullTexts;
    /**
     * List of configurable and localized null texts that will be used for the filter editors
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "nullTexts", optionValue: IgGridFilteringNullTexts): void;
    /**
     * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "labels"): IgGridFilteringLabels;
    /**
     * A list of configurable and localized labels that are used for the predefined filtering conditions in the filter dropdowns.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "labels", optionValue: IgGridFilteringLabels): void;
    /**
     * Custom tooltip template for the filter button, when a filter is applied
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "tooltipTemplate"): string;
    /**
     * Custom tooltip template for the filter button, when a filter is applied
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "tooltipTemplate", optionValue: string): void;
    /**
     * Custom template for add condition area in the filter dialog.
     * The default template is "<div><span>${label1}</span><div><select></select></div><span>${label2}</span></div>"
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionTemplate"): string;
    /**
     * Custom template for add condition area in the filter dialog.
     * The default template is "<div><span>${label1}</span><div><select></select></div><span>${label2}</span></div>"
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionTemplate", optionValue: string): void;
    /**
     * Custom template for options in dropdown in add condition area in the filter dialog.
     * The default template is "<option value='${value}'>${text}</option>"
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionDropDownTemplate"): string;
    /**
     * Custom template for options in dropdown in add condition area in the filter dialog.
     * The default template is "<option value='${value}'>${text}</option>"
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddConditionDropDownTemplate", optionValue: string): void;
    /**
     * Custom template for filter dialog.
     * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
     * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
     * NOTE: The template is supported only with <tr />.
     * The default template is "<tr data-af-row><td><input data-af-col/></td><td><select data-af-cond></select></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>"
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterTemplate"): string;
    /**
     * Custom template for filter dialog.
     * Each DOM element which is used for selecting filter conditions/columns/filter expressions has "data-*" attribute.
     * E.g.: DOM element used for selecting column has attribute "data-af-col", for selecting filter condition - "data-af-cond", for filter expression- "data-af-expr".
     * NOTE: The template is supported only with <tr />.
     * The default template is "<tr data-af-row><td><input data-af-col/></td><td><select data-af-cond></select></td><td><input data-af-expr /> </td><td><span data-af-rmv></span></td></tr>"
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterTemplate", optionValue: string): void;
    /**
     * Custom template for options in condition list in filter dialog
     * The default template is "<option value='${condition}'>${text}</option>"
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterConditionTemplate"): string;
    /**
     * Custom template for options in condition list in filter dialog
     * The default template is "<option value='${condition}'>${text}</option>"
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterConditionTemplate", optionValue: string): void;
    /**
     * Add button width - in the advanced filter dialog
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddButtonWidth"): any;
    /**
     * Add button width - in the advanced filter dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogAddButtonWidth", optionValue: any): void;
    /**
     * Width of the Ok and Cancel buttons in the advanced filtering dialogs
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOkCancelButtonWidth"): any;
    /**
     * Width of the Ok and Cancel buttons in the advanced filtering dialogs
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOkCancelButtonWidth", optionValue: any): void;
    /**
     * Maximum number of filter rows in the advanced filtering dialog. if this number is exceeded, an error message will be rendered
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogMaxFilterCount"): number;
    /**
     * Maximum number of filter rows in the advanced filtering dialog. if this number is exceeded, an error message will be rendered
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogMaxFilterCount", optionValue: number): void;
    /**
     * Controls containment behavior.
     * owner  The filter dialog will be draggable only in the grid area
     * window  The filter dialog will be draggable in the whole window area
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContainment"): string;
    /**
     * Controls containment behavior.
     * owner  The filter dialog will be draggable only in the grid area
     * window  The filter dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContainment", optionValue: string): void;
    /**
     * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "showEmptyConditions"): boolean;
    /**
     * Enable/disable empty condition visibility in the filter. If true, shows empty and not empty filtering conditions in the dropdowns
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "showEmptyConditions", optionValue: boolean): void;
    /**
     * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "showNullConditions"): boolean;
    /**
     * Enable/disable visibility of null and not null filtering conditions in the dropdowns. If true, shows null and not null filtering conditions in the dropdowns
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "showNullConditions", optionValue: boolean): void;
    /**
     * Feature chooser text when filter is shown and filter mode is simple
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserText"): string;
    /**
     * Feature chooser text when filter is shown and filter mode is simple
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;
    /**
     * Feature chooser text when filter is hidden and filter mode is simple
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextHide"): string;
    /**
     * Feature chooser text when filter is hidden and filter mode is simple
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextHide", optionValue: string): void;
    /**
     * Feature chooser text when filter mode is advanced
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextAdvancedFilter"): string;
    /**
     * Feature chooser text when filter mode is advanced
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "featureChooserTextAdvancedFilter", optionValue: string): void;
    /**
     * Enables / disables filtering persistence between states
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables filtering persistence between states
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before a filtering operation is executed (remote request or local).
     * Return false in order to cancel filtering operation.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.newExpressions to get filtering expressions. Filtering expressions could be changed in this event handler and after that data binding is applied. In this way the user could control filtering more easily before applying data-binding.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dataFiltering"): DataFilteringEvent;
    /**
     * Event fired before a filtering operation is executed (remote request or local).
     * Return false in order to cancel filtering operation.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.newExpressions to get filtering expressions. Filtering expressions could be changed in this event handler and after that data binding is applied. In this way the user could control filtering more easily before applying data-binding.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dataFiltering", optionValue: DataFilteringEvent): void;
    /**
     * Event fired after the filtering has been executed and results are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.expressions to get filtered expressions.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dataFiltered"): DataFilteredEvent;
    /**
     * Event fired after the filtering has been executed and results are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnIndex to get column index.
     * Use ui.columnKey to get column key.
     * Use ui.expressions to get filtered expressions.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dataFiltered", optionValue: DataFilteredEvent): void;
    /**
     * Event fired before the filter dropdown is opened for a specific column.
     * Return false in order to cancel dropdown opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownOpening"): DropDownOpeningEvent;
    /**
     * Event fired before the filter dropdown is opened for a specific column.
     * Return false in order to cancel dropdown opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownOpening", optionValue: DropDownOpeningEvent): void;
    /**
     * Event fired after the filter dropdown is opened for a specific column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownOpened"): DropDownOpenedEvent;
    /**
     * Event fired after the filter dropdown is opened for a specific column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownOpened", optionValue: DropDownOpenedEvent): void;
    /**
     * Event fired before the filter dropdown starts closing.
     * Return false in order to cancel dropdown closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownClosing"): DropDownClosingEvent;
    /**
     * Event fired before the filter dropdown starts closing.
     * Return false in order to cancel dropdown closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownClosing", optionValue: DropDownClosingEvent): void;
    /**
     * Event fired after a filter column dropdown is completely closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownClosed"): DropDownClosedEvent;
    /**
     * Event fired after a filter column dropdown is completely closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dropDown to get reference to dropdown DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "dropDownClosed", optionValue: DropDownClosedEvent): void;
    /**
     * Event fired before the advanced filtering dialog is opened.
     * Return false in order to cancel filter dialog opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpening"): FilterDialogOpeningEvent;
    /**
     * Event fired before the advanced filtering dialog is opened.
     * Return false in order to cancel filter dialog opening.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpening", optionValue: FilterDialogOpeningEvent): void;
    /**
     * Event fired after the advanced filter dialog is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpened"): FilterDialogOpenedEvent;
    /**
     * Event fired after the advanced filter dialog is already opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogOpened", optionValue: FilterDialogOpenedEvent): void;
    /**
     * Event fired every time the advanced filter dialog changes its position.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogMoving"): FilterDialogMovingEvent;
    /**
     * Event fired every time the advanced filter dialog changes its position.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     * Use ui.originalPosition to get the original position of the groupby dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the groupby dialog div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogMoving", optionValue: FilterDialogMovingEvent): void;
    /**
     * Event fired before a filter row is added to the advanced filter dialog.
     * Return false in order to cancel filter adding to the advanced filtering dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filtersTableBody to get reference to filters table body DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdding"): FilterDialogFilterAddingEvent;
    /**
     * Event fired before a filter row is added to the advanced filter dialog.
     * Return false in order to cancel filter adding to the advanced filtering dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filtersTableBody to get reference to filters table body DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdding", optionValue: FilterDialogFilterAddingEvent): void;
    /**
     * Event fired after a filter row is added to the advanced filter dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filter to get reference to filters table row DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdded"): FilterDialogFilterAddedEvent;
    /**
     * Event fired after a filter row is added to the advanced filter dialog.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.filter to get reference to filters table row DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFilterAdded", optionValue: FilterDialogFilterAddedEvent): void;
    /**
     * Event fired before the advanced filter dialog is closed.
     * Return false in order to cancel filtering dialog closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosing"): FilterDialogClosingEvent;
    /**
     * Event fired before the advanced filter dialog is closed.
     * Return false in order to cancel filtering dialog closing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosing", optionValue: FilterDialogClosingEvent): void;
    /**
     * Event fired after the advanced filter dialog has been closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosed"): FilterDialogClosedEvent;
    /**
     * Event fired after the advanced filter dialog has been closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogClosed", optionValue: FilterDialogClosedEvent): void;
    /**
     * Event fired before the contents of the advanced filter dialog are rendered.
     * Return false in order to cancel filtering dialog rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendering"): FilterDialogContentsRenderingEvent;
    /**
     * Event fired before the contents of the advanced filter dialog are rendered.
     * Return false in order to cancel filtering dialog rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendering", optionValue: FilterDialogContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the advanced filter dialog are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendered"): FilterDialogContentsRenderedEvent;
    /**
     * Event fired after the contents of the advanced filter dialog are rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialogElement to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogContentsRendered", optionValue: FilterDialogContentsRenderedEvent): void;
    /**
     * Event fired when the OK button in the advanced filter dialog is pressed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFiltering"): FilterDialogFilteringEvent;
    /**
     * Event fired when the OK button in the advanced filter dialog is pressed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridFiltering.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dialog to get reference to filtering dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridFiltering(optionLiteral: 'option', optionName: "filterDialogFiltering", optionValue: FilterDialogFilteringEvent): void;
    igTreeGridFiltering(options: IgTreeGridFiltering): JQuery;
    igTreeGridFiltering(optionLiteral: 'option', optionName: string): any;
    igTreeGridFiltering(optionLiteral: 'option', options: IgTreeGridFiltering): JQuery;
    igTreeGridFiltering(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridFiltering(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridHiding {
    /**
     * A list of column settings that specifies hiding options on a per column basis.
     */
    columnSettings?: IgGridHidingColumnSetting[];
    /**
     * The width in pixels of the hidden column indicator in the header.
     */
    hiddenColumnIndicatorHeaderWidth?: number;
    /**
     * Controls containment behavior.
     * owner  The column chooser dialog will be draggable only in the grid area
     * window  The column chooser dialog will be draggable in the whole window area
     */
    columnChooserContainment?: string;
    /**
     * The default column chooser width in pixels.
     */
    columnChooserWidth?: number;
    /**
     * The default column chooser height in pixels.
     */
    columnChooserHeight?: number;
    /**
     * The duration of the dropdown animation in milliseconds.
     */
    dropDownAnimationDuration?: number;
    /**
     * The caption of the column chooser dialog.
     */
    columnChooserCaptionText?: string;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
     */
    columnChooserDisplayText?: string;
    /**
     * The text displayed in the tooltip of the hidden column indicator.
     */
    hiddenColumnIndicatorTooltipText?: string;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to hide a column.
     */
    columnHideText?: string;
    /**
     * The text used in the column chooser to show column
     */
    columnChooserShowText?: string;
    /**
     * The text used in the column chooser to hide column
     */
    columnChooserHideText?: string;
    /**
     * Specifies on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
     */
    columnChooserHideOnClick?: boolean;
    /**
     * Text label for reset button.
     */
    columnChooserResetButtonLabel?: string;
    /**
     * Specifies time of milliseconds for animation duration to show/hide modal dialog
     */
    columnChooserAnimationDuration?: number;
    /**
     * Specifies text of button which apply changes in modal dialog
     */
    columnChooserButtonApplyText?: string;
    /**
     * Specifies text of button which cancel changes in modal dialog
     */
    columnChooserButtonCancelText?: string;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    columnHiding?: ColumnHidingEvent;
    /**
     * Event fired when trying to hide all columns in fixed or unfixed area.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     */
    columnHidingRefused?: ColumnHidingRefusedEvent;
    /**
     * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     */
    columnShowingRefused?: ColumnShowingRefusedEvent;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
     */
    multiColumnHiding?: MultiColumnHidingEvent;
    /**
     * Event fired after the hiding has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    columnHidden?: ColumnHiddenEvent;
    /**
     * Event fired before a showing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     */
    columnShowing?: ColumnShowingEvent;
    /**
     * Event fired after the showing has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     */
    columnShown?: ColumnShownEvent;
    /**
     * Event fired before the column chooser is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserOpening?: ColumnChooserOpeningEvent;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserOpened?: ColumnChooserOpenedEvent;
    /**
     * Event fired every time the column chooser changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
     */
    columnChooserMoving?: ColumnChooserMovingEvent;
    /**
     * Event fired before the column chooser is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserClosing?: ColumnChooserClosingEvent;
    /**
     * Event fired after the column chooser has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserClosed?: ColumnChooserClosedEvent;
    /**
     * Event fired before the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserContentsRendering?: ColumnChooserContentsRenderingEvent;
    /**
     * Event fired after the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserContentsRendered?: ColumnChooserContentsRenderedEvent;
    /**
     * Event fired when button Apply in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.columnsToShow to get array of columns identifiers which should be shown
     * Use ui.columnsToHide to get array of columns identifiers which should be hidden
     */
    columnChooserButtonApplyClick?: ColumnChooserButtonApplyClickEvent;
    /**
     * Event fired when button Reset in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    columnChooserButtonResetClick?: ColumnChooserButtonResetClickEvent;
    /**
     * Option for igTreeGridHiding
     */
    [optionName: string]: any;
}
interface IgTreeGridHidingMethods {
    destroy(): void;
    /**
     * Shows the Column Chooser dialog. If it is visible the method does nothing.
     */
    showColumnChooser(): void;
    /**
     * Hides the Column Chooser dialog. If it is not visible the method does nothing.
     */
    hideColumnChooser(): void;
    /**
     * Shows a hidden column. If the column is not hidden the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param callback    Specifies a custom function to be called when the column(s) is shown(optional)
     */
    showColumn(column: Object, isMultiColumnHeader?: boolean, callback?: Function): void;
    /**
     * Hides a visible column. If the column is hidden the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param isMultiColumnHeader    If it is true then the column is of type multicolumnheader. An identifier for the column should be of type string.
     * @param callback    Specifies a custom function to be called when the column is hidden(optional)
     */
    hideColumn(column: Object, isMultiColumnHeader?: boolean, callback?: Function): void;
    /**
     * Hides visible columns specified by the array. If the column is hidden the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param callback    Specifies a custom function to be called when all columns are hidden(optional)
     */
    hideMultiColumns(columns: any[], callback?: Function): void;
    /**
     * Show visible columns specified by the array. If the column is shown the method does nothing.
     * Note: This method is asynchronous which means that it returns immediately and any subsequent code will execute in parallel. This may lead to runtime errors. To avoid them put the subsequent code in the callback parameter provided by the method.
     *
     * @param columns    An array of identifiers for the columns. If a number is provided it will be used as a column index else if a strings is provided it will be used as a column key.
     * @param callback    Specifies a custom function to be called when all columns are shown(optional)
     */
    showMultiColumns(columns: any[], callback?: Function): void;
    /**
     * Gets whether the reset button in the column chooser dialog is to be rendered or not.
     */
    isToRenderButtonReset(): void;
    /**
     * Reset hidden/shown column to initial state of dialog(when it is opened)
     */
    resetHidingColumnChooser(): void;
    /**
     * Renders the Reset button in the Column Chooser dialog.
     */
    renderColumnChooserResetButton(): void;
    /**
     * Remove Reset button in column chooser modal dialog
     */
    removeColumnChooserResetButton(): void;
}
interface JQuery {
    data(propertyName: "igTreeGridHiding"): IgTreeGridHidingMethods;
}
interface JQuery {
    igTreeGridHiding(methodName: "destroy"): void;
    igTreeGridHiding(methodName: "showColumnChooser"): void;
    igTreeGridHiding(methodName: "hideColumnChooser"): void;
    igTreeGridHiding(methodName: "showColumn", column: Object, isMultiColumnHeader?: boolean, callback?: Function): void;
    igTreeGridHiding(methodName: "hideColumn", column: Object, isMultiColumnHeader?: boolean, callback?: Function): void;
    igTreeGridHiding(methodName: "hideMultiColumns", columns: any[], callback?: Function): void;
    igTreeGridHiding(methodName: "showMultiColumns", columns: any[], callback?: Function): void;
    igTreeGridHiding(methodName: "isToRenderButtonReset"): void;
    igTreeGridHiding(methodName: "resetHidingColumnChooser"): void;
    igTreeGridHiding(methodName: "renderColumnChooserResetButton"): void;
    igTreeGridHiding(methodName: "removeColumnChooserResetButton"): void;
    /**
     * A list of column settings that specifies hiding options on a per column basis.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnSettings"): IgGridHidingColumnSetting[];
    /**
     * A list of column settings that specifies hiding options on a per column basis.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridHidingColumnSetting[]): void;
    /**
     * The width in pixels of the hidden column indicator in the header.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorHeaderWidth"): number;
    /**
     * The width in pixels of the hidden column indicator in the header.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorHeaderWidth", optionValue: number): void;
    /**
     * Controls containment behavior.
     * owner  The column chooser dialog will be draggable only in the grid area
     * window  The column chooser dialog will be draggable in the whole window area
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContainment"): string;
    /**
     * Controls containment behavior.
     * owner  The column chooser dialog will be draggable only in the grid area
     * window  The column chooser dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContainment", optionValue: string): void;
    /**
     * The default column chooser width in pixels.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserWidth"): number;
    /**
     * The default column chooser width in pixels.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserWidth", optionValue: number): void;
    /**
     * The default column chooser height in pixels.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHeight"): number;
    /**
     * The default column chooser height in pixels.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHeight", optionValue: number): void;
    /**
     * The duration of the dropdown animation in milliseconds.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "dropDownAnimationDuration"): number;
    /**
     * The duration of the dropdown animation in milliseconds.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "dropDownAnimationDuration", optionValue: number): void;
    /**
     * The caption of the column chooser dialog.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserCaptionText"): string;
    /**
     * The caption of the column chooser dialog.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserCaptionText", optionValue: string): void;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserDisplayText"): string;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to launch the column chooser dialog.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserDisplayText", optionValue: string): void;
    /**
     * The text displayed in the tooltip of the hidden column indicator.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorTooltipText"): string;
    /**
     * The text displayed in the tooltip of the hidden column indicator.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "hiddenColumnIndicatorTooltipText", optionValue: string): void;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to hide a column.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnHideText"): string;
    /**
     * The text used in the drop down tools menu(Feature Chooser) to hide a column.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnHideText", optionValue: string): void;
    /**
     * The text used in the column chooser to show column
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserShowText"): string;
    /**
     * The text used in the column chooser to show column
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserShowText", optionValue: string): void;
    /**
     * The text used in the column chooser to hide column
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHideText"): string;
    /**
     * The text used in the column chooser to hide column
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHideText", optionValue: string): void;
    /**
     * Gets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHideOnClick"): boolean;
    /**
     * Sets on click show/hide directly to be shown/hidden columns. If columnChooserHideOnClick is false then Apply and Cancel Buttons are shown on the bottom of modal dialog. Columns are Shown/Hidden after the Apply button is clicked
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserHideOnClick", optionValue: boolean): void;
    /**
     * Text label for reset button.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserResetButtonLabel"): string;
    /**
     * Text label for reset button.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserResetButtonLabel", optionValue: string): void;
    /**
     * Gets time of milliseconds for animation duration to show/hide modal dialog
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserAnimationDuration"): number;
    /**
     * Sets time of milliseconds for animation duration to show/hide modal dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserAnimationDuration", optionValue: number): void;
    /**
     * Gets text of button which apply changes in modal dialog
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyText"): string;
    /**
     * Sets text of button which apply changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyText", optionValue: string): void;
    /**
     * Gets text of button which cancel changes in modal dialog
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonCancelText"): string;
    /**
     * Sets text of button which cancel changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonCancelText", optionValue: string): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnHiding"): ColumnHidingEvent;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnHiding", optionValue: ColumnHidingEvent): void;
    /**
     * Event fired when trying to hide all columns in fixed or unfixed area.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnHidingRefused"): ColumnHidingRefusedEvent;
    /**
     * Event fired when trying to hide all columns in fixed or unfixed area.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnHidingRefused", optionValue: ColumnHidingRefusedEvent): void;
    /**
     * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnShowingRefused"): ColumnShowingRefusedEvent;
    /**
     * Event fired when trying to show column(s) in fixed area and total width of fixed are will be larger than whole grid width.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys array of column keys. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnShowingRefused", optionValue: ColumnShowingRefusedEvent): void;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "multiColumnHiding"): MultiColumnHidingEvent;
    /**
     * Event fired before a hiding operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnKeys to get array of the hidden column keys. In case when click on Reset button in column chooser then this is an array of column keys.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "multiColumnHiding", optionValue: MultiColumnHidingEvent): void;
    /**
     * Event fired after the hiding has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnHidden"): ColumnHiddenEvent;
    /**
     * Event fired after the hiding has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the hidden column index. Has a value only if the column's key is a number.
     * Use ui.columnKey to get the hidden column key. Has a value only if the column's key is a string.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnHidden", optionValue: ColumnHiddenEvent): void;
    /**
     * Event fired before a showing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnShowing"): ColumnShowingEvent;
    /**
     * Event fired before a showing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnShowing", optionValue: ColumnShowingEvent): void;
    /**
     * Event fired after the showing has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnShown"): ColumnShownEvent;
    /**
     * Event fired after the showing has been executed and results are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the shown column index.
     * Use ui.columnKey to get the shown column key.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnShown", optionValue: ColumnShownEvent): void;
    /**
     * Event fired before the column chooser is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserOpening"): ColumnChooserOpeningEvent;
    /**
     * Event fired before the column chooser is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserOpening", optionValue: ColumnChooserOpeningEvent): void;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserOpened"): ColumnChooserOpenedEvent;
    /**
     * Event fired after the column chooser is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserOpened", optionValue: ColumnChooserOpenedEvent): void;
    /**
     * Event fired every time the column chooser changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserMoving"): ColumnChooserMovingEvent;
    /**
     * Event fired every time the column chooser changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the column chooser div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the column chooser div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserMoving", optionValue: ColumnChooserMovingEvent): void;
    /**
     * Event fired before the column chooser is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserClosing"): ColumnChooserClosingEvent;
    /**
     * Event fired before the column chooser is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserClosing", optionValue: ColumnChooserClosingEvent): void;
    /**
     * Event fired after the column chooser has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserClosed"): ColumnChooserClosedEvent;
    /**
     * Event fired after the column chooser has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserClosed", optionValue: ColumnChooserClosedEvent): void;
    /**
     * Event fired before the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendering"): ColumnChooserContentsRenderingEvent;
    /**
     * Event fired before the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendering", optionValue: ColumnChooserContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendered"): ColumnChooserContentsRenderedEvent;
    /**
     * Event fired after the contents of the column chooser are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserContentsRendered", optionValue: ColumnChooserContentsRenderedEvent): void;
    /**
     * Event fired when button Apply in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.columnsToShow to get array of columns identifiers which should be shown
     * Use ui.columnsToHide to get array of columns identifiers which should be hidden
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyClick"): ColumnChooserButtonApplyClickEvent;
    /**
     * Event fired when button Apply in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     * Use ui.columnsToShow to get array of columns identifiers which should be shown
     * Use ui.columnsToHide to get array of columns identifiers which should be hidden
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonApplyClick", optionValue: ColumnChooserButtonApplyClickEvent): void;
    /**
     * Event fired when button Reset in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonResetClick"): ColumnChooserButtonResetClickEvent;
    /**
     * Event fired when button Reset in column chooser is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridHiding widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the Column Chooser element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridHiding(optionLiteral: 'option', optionName: "columnChooserButtonResetClick", optionValue: ColumnChooserButtonResetClickEvent): void;
    igTreeGridHiding(options: IgTreeGridHiding): JQuery;
    igTreeGridHiding(optionLiteral: 'option', optionName: string): any;
    igTreeGridHiding(optionLiteral: 'option', options: IgTreeGridHiding): JQuery;
    igTreeGridHiding(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridHiding(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridDataSourceSettings {
    /**
     * The name of the property that keeps track of the expansion state of a data item. Defaults to __ig_options.expanded.
     */
    propertyExpanded?: string;
    /**
     * The name of the property that keeps track of the level in the hierarchy.Defaults to __ig_options.dataLevel.
     */
    propertyDataLevel?: string;
    /**
     * If set to TRUE it is expected that the source of data is normalized and transformed(has set dataLevel and expansion state). The source of data is used as flatDataView. Usually used when the paging is remote and paging mode is allLevels, or features are remote(and the processing of the returned result should be made on the server)
     */
    initialFlatDataView?: boolean;
    /**
     * Option for IgTreeGridDataSourceSettings
     */
    [optionName: string]: any;
}
interface IgTreeGrid {
    /**
     * Specifies the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
     */
    indentation?: string;
    /**
     * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
     */
    initialIndentationLevel?: number;
    /**
     * Specifies if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
     */
    showExpansionIndicator?: boolean;
    /**
     * Specifies the expansion indicator tooltip text.
     */
    expandTooltipText?: string;
    /**
     * Specifies the collapse indicator tooltip text.
     */
    collapseTooltipText?: string;
    /**
     * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
     */
    foreignKey?: string;
    /**
     * Specifies the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
     */
    initialExpandDepth?: number;
    /**
     * Specifies the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
     */
    foreignKeyRootValue?: number;
    /**
     * Specify whether to render non-data column which contains expander indicators
     */
    renderExpansionIndicatorColumn?: boolean;
    /**
     * a reference or name of a javascript function which changes first data cell - renders indentation according to databound level
     */
    renderFirstDataCellFunction?: any;
    /**
     * Property name of the array of child data in a hierarchical data source.
     */
    childDataKey?: string;
    /**
     * a reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
     */
    renderExpansionCellFunction?: any;
    /**
     * Specifies to the tree grid if data is loaded on demand from a remote server. Default is false.
     */
    enableRemoteLoadOnDemand?: boolean;
    /**
     * Options object to configure data source-specific settings
     */
    dataSourceSettings?: IgTreeGridDataSourceSettings;
    /**
     * Fired when a row is about to be expanded.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     */
    rowExpanding?: RowExpandingEvent;
    /**
     * Fired when a row is expanded.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     * use args.dataRecord to access the source data record
     */
    rowExpanded?: RowExpandedEvent;
    /**
     * Fired when a row is about to be collapsed.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     */
    rowCollapsing?: RowCollapsingEvent;
    /**
     * Fired after a row is collapsed
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     * use args.dataRecord to access the source data record
     */
    rowCollapsed?: RowCollapsedEvent;
    /**
     * Option for igTreeGrid
     */
    [optionName: string]: any;
}
interface IgTreeGridMethods {
    /**
     * Causes the treegrid to data bind to the data source (local or remote) , and re-render all of the data
     */
    dataBind(): void;
    /**
     * Toggle row by specified row or row identifier
     *
     * @param row     jQuery table row object or a row id.
     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     */
    toggleRow(row: Object, callback?: Function): void;
    /**
     * Expands a parent row by specified row or row identifier
     *
     * @param row     jQuery table row object or a row id.
     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     */
    expandRow(row: Object, callback?: Function): void;
    /**
     * Collapses a parent row by specified row or row identifier
     *
     * @param row     jQuery table row object, raw DOM row object or a row id.
     * @param callback     Specifies a custom function to be called when row is expanded/collapsed. The callback has 4 arguments- a reference to the current context(this), object that holds 2 properties(unfixedRow - DOM representation of the unfixed row, fixedRow - DOM representation of the fixed row, if there is no fixed columns it is undefined), reference to the dataRecord, expand - specifies whether row is expanded
     */
    collapseRow(row: Object, callback?: Function): void;
    /**
     * Destroys igTreeGrid
     */
    destroy(): Object;
}
interface JQuery {
    data(propertyName: "igTreeGrid"): IgTreeGridMethods;
}
interface JQuery {
    igTreeGrid(methodName: "dataBind"): void;
    igTreeGrid(methodName: "toggleRow", row: Object, callback?: Function): void;
    igTreeGrid(methodName: "expandRow", row: Object, callback?: Function): void;
    igTreeGrid(methodName: "collapseRow", row: Object, callback?: Function): void;
    igTreeGrid(methodName: "destroy"): Object;
    /**
     * Gets the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "indentation"): string;
    /**
     * Sets the indentation (in pixels or percent) for a tree grid row. Nested indentation is achieved by calculating the level times the indentation value. Ex: '10px' or '5%'. Default is 30.
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "indentation", optionValue: string): void;
    /**
     * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
     */
    igTreeGrid(optionLiteral: 'option', optionName: "initialIndentationLevel"): number;
    /**
     * If initial indentation level is set then it is used to be calculated width of the data skip column(usually used when remote load on demand is enabled)
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "initialIndentationLevel", optionValue: number): void;
    /**
     * Gets if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "showExpansionIndicator"): boolean;
    /**
     * Sets if rows(that have child rows) will have an expander image that will allow end users to expand and collapse them. This option can be set only at initialization.
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "showExpansionIndicator", optionValue: boolean): void;
    /**
     * Gets the expansion indicator tooltip text.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "expandTooltipText"): string;
    /**
     * Sets the expansion indicator tooltip text.
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "expandTooltipText", optionValue: string): void;
    /**
     * Gets the collapse indicator tooltip text.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "collapseTooltipText"): string;
    /**
     * Sets the collapse indicator tooltip text.
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "collapseTooltipText", optionValue: string): void;
    /**
     * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "foreignKey"): string;
    /**
     * Unique identifier used in a self-referencing flat data source. Used with primaryKey to create a relationship among flat data sources.
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "foreignKey", optionValue: string): void;
    /**
     * Gets the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "initialExpandDepth"): number;
    /**
     * Sets the depth down to which the tree grid would be expanded upon initial render. To expand all rows set value to -1. Default is -1.
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "initialExpandDepth", optionValue: number): void;
    /**
     * Gets the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
     */
    igTreeGrid(optionLiteral: 'option', optionName: "foreignKeyRootValue"): number;
    /**
     * Sets the foreign key value in the data source to treat as the root level once the grid is data bound. Defaults to -1 (which includes the entire data source)
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "foreignKeyRootValue", optionValue: number): void;
    /**
     * Specify whether to render non-data column which contains expander indicators
     */
    igTreeGrid(optionLiteral: 'option', optionName: "renderExpansionIndicatorColumn"): boolean;
    /**
     * Specify whether to render non-data column which contains expander indicators
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "renderExpansionIndicatorColumn", optionValue: boolean): void;
    /**
     * A reference or name of a javascript function which changes first data cell - renders indentation according to databound level
     */
    igTreeGrid(optionLiteral: 'option', optionName: "renderFirstDataCellFunction"): any;
    /**
     * A reference or name of a javascript function which changes first data cell - renders indentation according to databound level
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "renderFirstDataCellFunction", optionValue: any): void;
    /**
     * Property name of the array of child data in a hierarchical data source.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "childDataKey"): string;
    /**
     * Property name of the array of child data in a hierarchical data source.
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "childDataKey", optionValue: string): void;
    /**
     * A reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
     */
    igTreeGrid(optionLiteral: 'option', optionName: "renderExpansionCellFunction"): any;
    /**
     * A reference or name of a javascript function which renders expand indicators(called ONLY IF option renderExpansionIndicatorColumn is true)
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "renderExpansionCellFunction", optionValue: any): void;
    /**
     * Gets to the tree grid if data is loaded on demand from a remote server. Default is false.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "enableRemoteLoadOnDemand"): boolean;
    /**
     * Sets to the tree grid if data is loaded on demand from a remote server. Default is false.
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "enableRemoteLoadOnDemand", optionValue: boolean): void;
    /**
     * Options object to configure data source-specific settings
     */
    igTreeGrid(optionLiteral: 'option', optionName: "dataSourceSettings"): IgTreeGridDataSourceSettings;
    /**
     * Options object to configure data source-specific settings
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "dataSourceSettings", optionValue: IgTreeGridDataSourceSettings): void;
    /**
     * Fired when a row is about to be expanded.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     */
    igTreeGrid(optionLiteral: 'option', optionName: "rowExpanding"): RowExpandingEvent;
    /**
     * Fired when a row is about to be expanded.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "rowExpanding", optionValue: RowExpandingEvent): void;
    /**
     * Fired when a row is expanded.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     * use args.dataRecord to access the source data record
     */
    igTreeGrid(optionLiteral: 'option', optionName: "rowExpanded"): RowExpandedEvent;
    /**
     * Fired when a row is expanded.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     * use args.dataRecord to access the source data record
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "rowExpanded", optionValue: RowExpandedEvent): void;
    /**
     * Fired when a row is about to be collapsed.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     */
    igTreeGrid(optionLiteral: 'option', optionName: "rowCollapsing"): RowCollapsingEvent;
    /**
     * Fired when a row is about to be collapsed.
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "rowCollapsing", optionValue: RowCollapsingEvent): void;
    /**
     * Fired after a row is collapsed
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     * use args.dataRecord to access the source data record
     */
    igTreeGrid(optionLiteral: 'option', optionName: "rowCollapsed"): RowCollapsedEvent;
    /**
     * Fired after a row is collapsed
     * use args.owner to access the instance of the igTreeGrid
     * use args.row to access the row element (as a wrapped jQuery object) that is about to be expanded
     * use args.fixedRow to access the row element (as a jQuery wrapped object) in a fixed column that is about to expanded. If there are no fixed columns then this property returns undefined.
     * use args.dataLevel to access the level in the hierarchy associated with the row
     * use args.dataRecord to access the source data record
     *
     * @optionValue New value to be set.
     */
    igTreeGrid(optionLiteral: 'option', optionName: "rowCollapsed", optionValue: RowCollapsedEvent): void;
    igTreeGrid(options: IgTreeGrid): JQuery;
    igTreeGrid(optionLiteral: 'option', optionName: string): any;
    igTreeGrid(optionLiteral: 'option', options: IgTreeGrid): JQuery;
    igTreeGrid(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGrid(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridMultiColumnHeaders {
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Option for igTreeGridMultiColumnHeaders
     */
    [optionName: string]: any;
}
interface IgTreeGridMultiColumnHeadersMethods {
    destroy(): void;
    /**
     * Returns multicolumn headers array. if there aren't multicolumn headers returns undefined
     */
    getMultiColumnHeaders(): any[];
}
interface JQuery {
    data(propertyName: "igTreeGridMultiColumnHeaders"): IgTreeGridMultiColumnHeadersMethods;
}
interface JQuery {
    igTreeGridMultiColumnHeaders(methodName: "destroy"): void;
    igTreeGridMultiColumnHeaders(methodName: "getMultiColumnHeaders"): any[];
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    igTreeGridMultiColumnHeaders(options: IgTreeGridMultiColumnHeaders): JQuery;
    igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: string): any;
    igTreeGridMultiColumnHeaders(optionLiteral: 'option', options: IgTreeGridMultiColumnHeaders): JQuery;
    igTreeGridMultiColumnHeaders(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridMultiColumnHeaders(methodName: string, ...methodParams: any[]): any;
}
interface ContextRowRenderingEvent {
    (event: Event, ui: ContextRowRenderingEventUIParam): void;
}
interface ContextRowRenderingEventUIParam {
    /**
     * Used to get reference to igTreeGridPaging.
     */
    owner?: any;
    /**
     * Used to get reference to the first data row. Null if there are no records.
     */
    dataRow?: any;
    /**
     * Used to get current page index.
     */
    currentPageIndex?: any;
    /**
     * Used to get the current context row mode.
     */
    contextRowMode?: any;
}
interface ContextRowRenderedEvent {
    (event: Event, ui: ContextRowRenderedEventUIParam): void;
}
interface ContextRowRenderedEventUIParam {
    /**
     * Used to get reference to igTreeGridPaging.
     */
    owner?: any;
    /**
     * Used to get reference to the first data row. Null if there are no records.
     */
    dataRow?: any;
    /**
     * Used to get current page index.
     */
    currentPageIndex?: any;
    /**
     * Used to get array of the parent rows(of the ui.dataRow). If the dataRow is null(for instance filter is applied and no records are shown) then it is empty array. Otherwise it contains all ancestors ordered by level(including the current dataRow) - the first item is root level, the last array item is the current ui.dataRow
     */
    parentRows?: any;
    /**
     * Used to get the current context row mode.
     */
    contextRowMode?: any;
}
interface IgTreeGridPaging {
    /**
     * Sets gets paging mode.
     *
     * Valid values:
     * "rootLevelOnly" Only pages records at the root of the tree grid are displayed.
     * "allLevels" includes all visible records in paging.
     */
    mode?: any;
    /**
     * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is 'rootLevelOnly' then the context row always shows the value of the contextRowRootText option.
     *
     * Valid values:
     * "none" Does not render the contextual row
     * "parent" Renders a read-only representation of the immediate parent row
     * "breadcrumb" Renders a read-only breadcrumb trail representing the full path through all ancestors
     */
    contextRowMode?: any;
    /**
     * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
     */
    contextRowLoadingText?: string;
    /**
     * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
     */
    contextRowRootText?: string;
    /**
     * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
     */
    breadcrumbKey?: string;
    /**
     * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
     */
    breadcrumbDelimiter?: string;
    /**
     * . When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
     */
    renderContextRowFunc?: any;
    /**
     * Default number of records per page
     */
    pageSize?: number;
    /**
     * The property in the response that will hold the total number of records in the data source
     */
    recordCountKey?: string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page size
     */
    pageSizeUrlKey?: string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page index
     */
    pageIndexUrlKey?: string;
    /**
     * Current page index that's bound and rendered in the UI
     */
    currentPageIndex?: number;
    type?: any;
    /**
     * If false, a dropdown allowing to change the page size will not be rendered in the UI
     */
    showPageSizeDropDown?: boolean;
    /**
     * Label rendered in front of the page size dropdown
     */
    pageSizeDropDownLabel?: string;
    /**
     * Trailing label for the page size dropdown
     */
    pageSizeDropDownTrailingLabel?: string;
    /**
     * Page size dropdown location. Can be rendered above the grid header or inside the pager, next to the page links.
     *
     * Valid values:
     * "above" it will be rendered above the grid header
     * "inpager" it will be rendered next to page links
     */
    pageSizeDropDownLocation?: any;
    /**
     * Option specifying whether to show summary label for the currently rendered records or not
     */
    showPagerRecordsLabel?: boolean;
    /**
     * Custom pager records label template - in jQuery templating style and syntax
     */
    pagerRecordsLabelTemplate?: string;
    /**
     * Localized text for the next page label
     */
    nextPageLabelText?: string;
    /**
     * Localized text for the prev page label
     */
    prevPageLabelText?: string;
    /**
     * Localized text for the first page label
     */
    firstPageLabelText?: string;
    /**
     * Localized text for the last page label
     */
    lastPageLabelText?: string;
    /**
     * Option specifying whether to render the first and last page buttons
     */
    showFirstLastPages?: boolean;
    /**
     * Option specifying whether to render the previous and next page buttons
     */
    showPrevNextPages?: boolean;
    /**
     * Leading label for the dropdown from where the page index can be switched
     */
    currentPageDropDownLeadingLabel?: string;
    /**
     * Localized trailing label for the dropdown from where the page index can be switched
     */
    currentPageDropDownTrailingLabel?: string;
    /**
     * Custom localized tooltip for the page index dropdown
     */
    currentPageDropDownTooltip?: string;
    /**
     * Custom localized tooltip for the page size dropdown
     */
    pageSizeDropDownTooltip?: string;
    /**
     * Custom localized tooltip for the pager records label
     */
    pagerRecordsLabelTooltip?: string;
    /**
     * Custom localized tooltip for the prev. page button
     */
    prevPageTooltip?: string;
    /**
     * Custom localized tooltip for the next. page button
     */
    nextPageTooltip?: string;
    /**
     * Custom localized tooltip for the first. page button
     */
    firstPageTooltip?: string;
    /**
     * Custom localized tooltip for the last. page button
     */
    lastPageTooltip?: string;
    /**
     * Custom localized format string for tooltips of buttons that directly jump to a particular page. The format string follows the jQuery templating style and syntax. See also the pageCountLimit option.
     */
    pageTooltipFormat?: string;
    /**
     * Default: [5, 10, 20, 25, 50, 75, 100]. contents of the page size dropdown indicating what preconfigured page sizes are available to the end user
     */
    pageSizeList?: any[];
    /**
     * Sets gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then page buttons are displayed.
     */
    pageCountLimit?: number;
    /**
     * Number of pages that are constantly visible. For the invisible pages, prev and next buttons are used
     */
    visiblePageCount?: number;
    /**
     * Dropdown width for page size and page index dropdowns
     */
    defaultDropDownWidth?: number;
    /**
     * Time in milliseconds for which page dropdown will wait for keystrokes before changing the page.
     */
    delayOnPageChanged?: number;
    /**
     * Enables / disables paging persistence between states
     */
    persist?: boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before rendering context row content.
     * Return false in order to cancel this event.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igTreeGridPaging.
     * Use ui.dataRow to get reference to the first data row. Null if there are no records.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.contextRowMode to get the current context row mode.
     */
    contextRowRendering?: ContextRowRenderingEvent;
    /**
     * Event fired context row content is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igTreeGridPaging.
     * Use ui.dataRow to get reference to the first data row. Null if there are no records.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.parentRows to get array of the parent rows(of the ui.dataRow). If the dataRow is null(for instance filter is applied and no records are shown) then it is empty array. Otherwise it contains all ancestors ordered by level(including the current dataRow) - the first item is root level, the last array item is the current ui.dataRow
     * Use ui.contextRowMode to get the current context row mode.
     */
    contextRowRendered?: ContextRowRenderedEvent;
    /**
     * Event fired before the page index is changed.
     * Return false in order to cancel page index changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.newPageIndex to get new page index.
     */
    pageIndexChanging?: PageIndexChangingEvent;
    /**
     * Event fired after the page index is changed , but before grid data rebinds
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageIndex to get current page index.
     */
    pageIndexChanged?: PageIndexChangedEvent;
    /**
     * Event fired when the page size is about to be changed from the page size dropdown.
     * Return false in order to cancel page size changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageSize to get current page size.
     * Use ui.newPageSize to get new page size.
     */
    pageSizeChanging?: PageSizeChangingEvent;
    /**
     * Event fired after the page size is changed from the page size dropdown.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageSize to get current page size.
     */
    pageSizeChanged?: PageSizeChangedEvent;
    /**
     * Event fired before the pager footer is rendered (the whole area below the grid records).
     * Return false in order to cancel pager footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     */
    pagerRendering?: PagerRenderingEvent;
    /**
     * Event fired after the pager footer is rendered
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     */
    pagerRendered?: PagerRenderedEvent;
    /**
     * Option for igTreeGridPaging
     */
    [optionName: string]: any;
}
interface IgTreeGridPagingMethods {
    /**
     * Destroys the igTreeGridPaging feature by removing all elements in the pager area, unbinding events, and resetting data to discard data filtering on paging
     */
    destroy(): void;
    /**
     * Get jQuery representation of of the context row. It is rendered in the header. If there isn't such element - creates it.
     */
    getContextRow(): Object;
    /**
     * Get jQuery representation of element that holds text area of the context row. If there isn't such element - creates it.
     */
    getContextRowTextArea(): Object;
    /**
     * Gets /sets the current page index, delegates data binding and paging to $.ig.DataSource
     *
     * @param index     the page index to go to
     */
    pageIndex(index?: number): number;
    /**
     * Gets / sets the page Size. if no parameter is specified, just returns the current page size
     *
     * @param size     the page size
     */
    pageSize(size?: number): number;
}
interface JQuery {
    data(propertyName: "igTreeGridPaging"): IgTreeGridPagingMethods;
}
interface JQuery {
    igTreeGridPaging(methodName: "destroy"): void;
    igTreeGridPaging(methodName: "getContextRow"): Object;
    igTreeGridPaging(methodName: "getContextRowTextArea"): Object;
    igTreeGridPaging(methodName: "pageIndex", index?: number): number;
    igTreeGridPaging(methodName: "pageSize", size?: number): number;
    /**
     * Sets gets paging mode.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Sets gets paging mode.
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is 'rootLevelOnly' then the context row always shows the value of the contextRowRootText option.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowMode"): any;
    /**
     * When data flows to the next page there are a couple of different modes that can help communicate the context of a leaf level row. When mode option is 'rootLevelOnly' then the context row always shows the value of the contextRowRootText option.
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowMode", optionValue: any): void;
    /**
     * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowLoadingText"): string;
    /**
     * Sets/gets the text message shown while loading content of the context row(while processing breadcrumb/immediate parent row). It is set via $.html(). If set to null loading message is not shown.
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowLoadingText", optionValue: string): void;
    /**
     * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRootText"): string;
    /**
     * Sets/gets the content of the context row when the first record in the page is root(hasn't ancestors) record. It is set via $.html()
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRootText", optionValue: string): void;
    /**
     * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "breadcrumbKey"): string;
    /**
     * Sets/gets the column key of ancestor to be shown in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "breadcrumbKey", optionValue: string): void;
    /**
     * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "breadcrumbDelimiter"): string;
    /**
     * Sets/gets (it is set via  $.html()) delimiter between ancestors in the breadcrumb trail. It is used only when contextRowMode is breadcrumb
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "breadcrumbDelimiter", optionValue: string): void;
    /**
     * . When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "renderContextRowFunc"): any;
    /**
     * . When the function returns string it is used as html set in $textArea. If the function does not return result or returns false/empty string then rendering of the content of the context row should be handled by the developer(similar to canceling rendering of context row content).
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "renderContextRowFunc", optionValue: any): void;
    /**
     * Default number of records per page
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSize"): number;
    /**
     * Default number of records per page
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSize", optionValue: number): void;
    /**
     * The property in the response that will hold the total number of records in the data source
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "recordCountKey"): string;
    /**
     * The property in the response that will hold the total number of records in the data source
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "recordCountKey", optionValue: string): void;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page size
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeUrlKey"): string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page size
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeUrlKey", optionValue: string): void;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page index
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexUrlKey"): string;
    /**
     * Denotes the name of the encoded URL parameter that will state what is the currently requested page index
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexUrlKey", optionValue: string): void;
    /**
     * Current page index that's bound and rendered in the UI
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageIndex"): number;
    /**
     * Current page index that's bound and rendered in the UI
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageIndex", optionValue: number): void;
    /**
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "type"): any;
    /**
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * If false, a dropdown allowing to change the page size will not be rendered in the UI
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "showPageSizeDropDown"): boolean;
    /**
     * If false, a dropdown allowing to change the page size will not be rendered in the UI
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "showPageSizeDropDown", optionValue: boolean): void;
    /**
     * Label rendered in front of the page size dropdown
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLabel"): string;
    /**
     * Label rendered in front of the page size dropdown
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLabel", optionValue: string): void;
    /**
     * Trailing label for the page size dropdown
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTrailingLabel"): string;
    /**
     * Trailing label for the page size dropdown
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTrailingLabel", optionValue: string): void;
    /**
     * Page size dropdown location. Can be rendered above the grid header or inside the pager, next to the page links.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLocation"): any;
    /**
     * Page size dropdown location. Can be rendered above the grid header or inside the pager, next to the page links.
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownLocation", optionValue: any): void;
    /**
     * Option specifying whether to show summary label for the currently rendered records or not
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "showPagerRecordsLabel"): boolean;
    /**
     * Option specifying whether to show summary label for the currently rendered records or not
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "showPagerRecordsLabel", optionValue: boolean): void;
    /**
     * Custom pager records label template - in jQuery templating style and syntax
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTemplate"): string;
    /**
     * Custom pager records label template - in jQuery templating style and syntax
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTemplate", optionValue: string): void;
    /**
     * Localized text for the next page label
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "nextPageLabelText"): string;
    /**
     * Localized text for the next page label
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "nextPageLabelText", optionValue: string): void;
    /**
     * Localized text for the prev page label
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "prevPageLabelText"): string;
    /**
     * Localized text for the prev page label
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "prevPageLabelText", optionValue: string): void;
    /**
     * Localized text for the first page label
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "firstPageLabelText"): string;
    /**
     * Localized text for the first page label
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "firstPageLabelText", optionValue: string): void;
    /**
     * Localized text for the last page label
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "lastPageLabelText"): string;
    /**
     * Localized text for the last page label
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "lastPageLabelText", optionValue: string): void;
    /**
     * Option specifying whether to render the first and last page buttons
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "showFirstLastPages"): boolean;
    /**
     * Option specifying whether to render the first and last page buttons
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "showFirstLastPages", optionValue: boolean): void;
    /**
     * Option specifying whether to render the previous and next page buttons
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "showPrevNextPages"): boolean;
    /**
     * Option specifying whether to render the previous and next page buttons
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "showPrevNextPages", optionValue: boolean): void;
    /**
     * Leading label for the dropdown from where the page index can be switched
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownLeadingLabel"): string;
    /**
     * Leading label for the dropdown from where the page index can be switched
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownLeadingLabel", optionValue: string): void;
    /**
     * Localized trailing label for the dropdown from where the page index can be switched
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTrailingLabel"): string;
    /**
     * Localized trailing label for the dropdown from where the page index can be switched
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTrailingLabel", optionValue: string): void;
    /**
     * Custom localized tooltip for the page index dropdown
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTooltip"): string;
    /**
     * Custom localized tooltip for the page index dropdown
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "currentPageDropDownTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the page size dropdown
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTooltip"): string;
    /**
     * Custom localized tooltip for the page size dropdown
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeDropDownTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the pager records label
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTooltip"): string;
    /**
     * Custom localized tooltip for the pager records label
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRecordsLabelTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the prev. page button
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "prevPageTooltip"): string;
    /**
     * Custom localized tooltip for the prev. page button
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "prevPageTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the next. page button
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "nextPageTooltip"): string;
    /**
     * Custom localized tooltip for the next. page button
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "nextPageTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the first. page button
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "firstPageTooltip"): string;
    /**
     * Custom localized tooltip for the first. page button
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "firstPageTooltip", optionValue: string): void;
    /**
     * Custom localized tooltip for the last. page button
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "lastPageTooltip"): string;
    /**
     * Custom localized tooltip for the last. page button
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "lastPageTooltip", optionValue: string): void;
    /**
     * Custom localized format string for tooltips of buttons that directly jump to a particular page. The format string follows the jQuery templating style and syntax. See also the pageCountLimit option.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageTooltipFormat"): string;
    /**
     * Custom localized format string for tooltips of buttons that directly jump to a particular page. The format string follows the jQuery templating style and syntax. See also the pageCountLimit option.
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageTooltipFormat", optionValue: string): void;
    /**
     * Default: [5, 10, 20, 25, 50, 75, 100]. contents of the page size dropdown indicating what preconfigured page sizes are available to the end user
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeList"): any[];
    /**
     * Default: [5, 10, 20, 25, 50, 75, 100]. contents of the page size dropdown indicating what preconfigured page sizes are available to the end user
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeList", optionValue: any[]): void;
    /**
     * Gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then page buttons are displayed.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageCountLimit"): number;
    /**
     * Sets gets the number of pages which if exceeded a drop down list of page indices is displayed. If the number of pages is less than or equal to this option then page buttons are displayed.
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageCountLimit", optionValue: number): void;
    /**
     * Number of pages that are constantly visible. For the invisible pages, prev and next buttons are used
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "visiblePageCount"): number;
    /**
     * Number of pages that are constantly visible. For the invisible pages, prev and next buttons are used
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "visiblePageCount", optionValue: number): void;
    /**
     * Dropdown width for page size and page index dropdowns
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "defaultDropDownWidth"): number;
    /**
     * Dropdown width for page size and page index dropdowns
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "defaultDropDownWidth", optionValue: number): void;
    /**
     * Time in milliseconds for which page dropdown will wait for keystrokes before changing the page.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "delayOnPageChanged"): number;
    /**
     * Time in milliseconds for which page dropdown will wait for keystrokes before changing the page.
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "delayOnPageChanged", optionValue: number): void;
    /**
     * Enables / disables paging persistence between states
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables paging persistence between states
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before rendering context row content.
     * Return false in order to cancel this event.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igTreeGridPaging.
     * Use ui.dataRow to get reference to the first data row. Null if there are no records.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.contextRowMode to get the current context row mode.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRendering"): ContextRowRenderingEvent;
    /**
     * Event fired before rendering context row content.
     * Return false in order to cancel this event.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igTreeGridPaging.
     * Use ui.dataRow to get reference to the first data row. Null if there are no records.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.contextRowMode to get the current context row mode.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRendering", optionValue: ContextRowRenderingEvent): void;
    /**
     * Event fired context row content is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igTreeGridPaging.
     * Use ui.dataRow to get reference to the first data row. Null if there are no records.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.parentRows to get array of the parent rows(of the ui.dataRow). If the dataRow is null(for instance filter is applied and no records are shown) then it is empty array. Otherwise it contains all ancestors ordered by level(including the current dataRow) - the first item is root level, the last array item is the current ui.dataRow
     * Use ui.contextRowMode to get the current context row mode.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRendered"): ContextRowRenderedEvent;
    /**
     * Event fired context row content is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igTreeGridPaging.
     * Use ui.dataRow to get reference to the first data row. Null if there are no records.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.parentRows to get array of the parent rows(of the ui.dataRow). If the dataRow is null(for instance filter is applied and no records are shown) then it is empty array. Otherwise it contains all ancestors ordered by level(including the current dataRow) - the first item is root level, the last array item is the current ui.dataRow
     * Use ui.contextRowMode to get the current context row mode.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "contextRowRendered", optionValue: ContextRowRenderedEvent): void;
    /**
     * Event fired before the page index is changed.
     * Return false in order to cancel page index changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.newPageIndex to get new page index.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexChanging"): PageIndexChangingEvent;
    /**
     * Event fired before the page index is changed.
     * Return false in order to cancel page index changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageIndex to get current page index.
     * Use ui.newPageIndex to get new page index.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexChanging", optionValue: PageIndexChangingEvent): void;
    /**
     * Event fired after the page index is changed , but before grid data rebinds
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageIndex to get current page index.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexChanged"): PageIndexChangedEvent;
    /**
     * Event fired after the page index is changed , but before grid data rebinds
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageIndex to get current page index.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageIndexChanged", optionValue: PageIndexChangedEvent): void;
    /**
     * Event fired when the page size is about to be changed from the page size dropdown.
     * Return false in order to cancel page size changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageSize to get current page size.
     * Use ui.newPageSize to get new page size.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeChanging"): PageSizeChangingEvent;
    /**
     * Event fired when the page size is about to be changed from the page size dropdown.
     * Return false in order to cancel page size changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.currentPageSize to get current page size.
     * Use ui.newPageSize to get new page size.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeChanging", optionValue: PageSizeChangingEvent): void;
    /**
     * Event fired after the page size is changed from the page size dropdown.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageSize to get current page size.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeChanged"): PageSizeChangedEvent;
    /**
     * Event fired after the page size is changed from the page size dropdown.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.pageSize to get current page size.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pageSizeChanged", optionValue: PageSizeChangedEvent): void;
    /**
     * Event fired before the pager footer is rendered (the whole area below the grid records).
     * Return false in order to cancel pager footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRendering"): PagerRenderingEvent;
    /**
     * Event fired before the pager footer is rendered (the whole area below the grid records).
     * Return false in order to cancel pager footer rendering.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRendering", optionValue: PagerRenderingEvent): void;
    /**
     * Event fired after the pager footer is rendered
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRendered"): PagerRenderedEvent;
    /**
     * Event fired after the pager footer is rendered
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridPaging.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.dataSource to get reference to grid's data source.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridPaging(optionLiteral: 'option', optionName: "pagerRendered", optionValue: PagerRenderedEvent): void;
    igTreeGridPaging(options: IgTreeGridPaging): JQuery;
    igTreeGridPaging(optionLiteral: 'option', optionName: string): any;
    igTreeGridPaging(optionLiteral: 'option', options: IgTreeGridPaging): JQuery;
    igTreeGridPaging(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridPaging(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridResizing {
    /**
     * Resize the column to the size of the longest currently visible cell value.
     */
    allowDoubleClickToResize?: boolean;
    /**
     * Specifies whether the resizing should be deferred until the user finishes resizing or applied immediately.
     */
    deferredResizing?: boolean;
    /**
     * A list of column settings that specifies resizing options on a per column basis.
     */
    columnSettings?: IgGridResizingColumnSetting[];
    /**
     * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
     */
    handleThreshold?: number;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before a resizing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     */
    columnResizing?: ColumnResizingEvent;
    /**
     * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     */
    columnResizingRefused?: ColumnResizingRefusedEvent;
    /**
     * Event fired after the resizing has been executed and results are rendered
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.originalWidth to get the original column width.
     * Use ui.newWidth to get the final column width after resizing.
     */
    columnResized?: ColumnResizedEvent;
    /**
     * Option for igTreeGridResizing
     */
    [optionName: string]: any;
}
interface IgTreeGridResizingMethods {
    destroy(): void;
    /**
     * Resizes a column to a specified width in pixels, percents or auto if no width is specified.
     *
     * @param column    An identifier for the column. If a number is provided it will be used as a columnIndex else if a strings is provided it will be used as a columnKey.
     * @param width    Width of the column in pixels or percents. If no width is specified the column will be autofitted to the width of the data in it.
     */
    resize(column: Object, width?: Object): void;
}
interface JQuery {
    data(propertyName: "igTreeGridResizing"): IgTreeGridResizingMethods;
}
interface JQuery {
    igTreeGridResizing(methodName: "destroy"): void;
    igTreeGridResizing(methodName: "resize", column: Object, width?: Object): void;
    /**
     * Resize the column to the size of the longest currently visible cell value.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "allowDoubleClickToResize"): boolean;
    /**
     * Resize the column to the size of the longest currently visible cell value.
     *
     * @optionValue New value to be set.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "allowDoubleClickToResize", optionValue: boolean): void;
    /**
     * Gets whether the resizing should be deferred until the user finishes resizing or applied immediately.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "deferredResizing"): boolean;
    /**
     * Sets whether the resizing should be deferred until the user finishes resizing or applied immediately.
     *
     * @optionValue New value to be set.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "deferredResizing", optionValue: boolean): void;
    /**
     * A list of column settings that specifies resizing options on a per column basis.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "columnSettings"): IgGridResizingColumnSetting[];
    /**
     * A list of column settings that specifies resizing options on a per column basis.
     *
     * @optionValue New value to be set.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridResizingColumnSetting[]): void;
    /**
     * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "handleThreshold"): number;
    /**
     * The width in pixels of the resizing handle which is position at the right side of each resizeable column header.
     *
     * @optionValue New value to be set.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "handleThreshold", optionValue: number): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before a resizing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "columnResizing"): ColumnResizingEvent;
    /**
     * Event fired before a resizing operation is executed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "columnResizing", optionValue: ColumnResizingEvent): void;
    /**
     * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "columnResizingRefused"): ColumnResizingRefusedEvent;
    /**
     * Event fired(only when columnFixing is enabled) when trying to resize column in fixed area so total width of unfixed area to be less than minimalVisibleAreaWidth(option defined in columnFixing)
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.desiredWidth to get the desired width(before min/max coercion) for the resized column.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "columnResizingRefused", optionValue: ColumnResizingRefusedEvent): void;
    /**
     * Event fired after the resizing has been executed and results are rendered
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.originalWidth to get the original column width.
     * Use ui.newWidth to get the final column width after resizing.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "columnResized"): ColumnResizedEvent;
    /**
     * Event fired after the resizing has been executed and results are rendered
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridResizing widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnIndex to get the resized column index.
     * Use ui.columnKey to get the resized column key.
     * Use ui.originalWidth to get the original column width.
     * Use ui.newWidth to get the final column width after resizing.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridResizing(optionLiteral: 'option', optionName: "columnResized", optionValue: ColumnResizedEvent): void;
    igTreeGridResizing(options: IgTreeGridResizing): JQuery;
    igTreeGridResizing(optionLiteral: 'option', optionName: string): any;
    igTreeGridResizing(optionLiteral: 'option', options: IgTreeGridResizing): JQuery;
    igTreeGridResizing(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridResizing(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridRowSelectors {
    /**
     * determines row numbering format.
     *
     * Valid values:
     * "sequential" Defines numbering format to be the index of the visible records.
     * "hierarchical" Defines numbering format to be concatenation of the parent and children indexes.
     */
    rowSelectorNumberingMode?: any;
    /**
     * Gets the type of checkboxes rendered in the row selector. Can be set only at initialization.
     *
     * Valid values:
     * "biState" Checkboxes are rendered and support two states(checked and unchecked). Checkboxes do not cascade down or up in this mode.
     * "triState" Checkboxes are rendered and support three states(checked, partial and unchecked). Checkboxes cascade up and down in this mode.
     */
    checkBoxMode?: any;
    /**
     * Determines whether the row selectors column should contain row numbering
     */
    enableRowNumbering?: boolean;
    /**
     * Determines whether the row selectors column should contain checkboxes
     */
    enableCheckBoxes?: boolean;
    /**
     * The seed to be added to the default numbering
     */
    rowNumberingSeed?: number;
    rowSelectorColumnWidth?: any;
    /**
     * Determines whether the selection feature is required for the row selectors. If set to "false"
     * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
     * not available.
     */
    requireSelection?: boolean;
    /**
     * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
     */
    showCheckBoxesOnFocus?: boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
     */
    enableSelectAllForPaging?: boolean;
    /**
     * Custom template for "select all" overlay with paging
     * Element with attribute data-rs-select-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     */
    selectAllForPagingTemplate?: string;
    /**
     * Custom template for "deselect all" overlay with paging
     * Element with attribute data-rs-deselect-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     */
    deselectAllForPagingTemplate?: string;
    /**
     * Event fired after a row selector is clicked.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     */
    rowSelectorClicked?: RowSelectorClickedEvent;
    /**
     * Event fired when a row selector checkbox is changing.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.currentState to get the current state of the checkbox ("on","off").
     * Use ui.newState to get the new state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    checkBoxStateChanging?: CheckBoxStateChangingEvent;
    /**
     * Event fired after a row selector checkbox had changed state.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.state to get the state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    checkBoxStateChanged?: CheckBoxStateChangedEvent;
    /**
     * Option for igTreeGridRowSelectors
     */
    [optionName: string]: any;
}
interface IgTreeGridRowSelectorsMethods {
    destroy(): void;
    /**
     * Change the check state of a row by row id
     *
     * @param rowId     Row Id
     * @param toCheck     The new check state of the checkbox - true for checked or false for unchecked
     */
    changeCheckStateById(rowId: Object, toCheck: boolean): void;
    /**
     * Changes the check state of a row by index to specified value
     *
     * @param index     Row index
     * @param toCheck     The new check state of the checkbox - true for checked or false for unchecked
     */
    changeCheckState(index: number, toCheck: boolean): void;
    /**
     * Toggles the check state of a row by row id
     *
     * @param rowId     Row Id
     */
    toggleCheckStateById(rowId: Object): void;
    /**
     * Toggles the check state of a row by index
     *
     * @param index     Row index
     */
    toggleCheckState(index: number): void;
    /**
     * Gets an array of all the checked rows. Every object from the array has the following format { element: , id: , index: }
     */
    checkedRows(): any[];
    /**
     * Gets an array of all the partially checked rows. Every object from the array has the following format { element: , id: , index: }
     */
    partiallyCheckedRows(): any[];
    /**
     * Gets an array of all the unchecked rows. Every object from the array has the following format { element: , id: , index: }
     */
    uncheckedRows(): any[];
    /**
     * Returns the check state of the row by id.
     *
     * @param rowId
     */
    checkStateById(rowId: Object): string;
}
interface JQuery {
    data(propertyName: "igTreeGridRowSelectors"): IgTreeGridRowSelectorsMethods;
}
interface JQuery {
    igTreeGridRowSelectors(methodName: "destroy"): void;
    igTreeGridRowSelectors(methodName: "changeCheckStateById", rowId: Object, toCheck: boolean): void;
    igTreeGridRowSelectors(methodName: "changeCheckState", index: number, toCheck: boolean): void;
    igTreeGridRowSelectors(methodName: "toggleCheckStateById", rowId: Object): void;
    igTreeGridRowSelectors(methodName: "toggleCheckState", index: number): void;
    igTreeGridRowSelectors(methodName: "checkedRows"): any[];
    igTreeGridRowSelectors(methodName: "partiallyCheckedRows"): any[];
    igTreeGridRowSelectors(methodName: "uncheckedRows"): any[];
    igTreeGridRowSelectors(methodName: "checkStateById", rowId: Object): string;
    /**
     * Determines row numbering format.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorNumberingMode"): any;
    /**
     * Determines row numbering format.
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorNumberingMode", optionValue: any): void;
    /**
     * Gets the type of checkboxes rendered in the row selector. Can be set only at initialization.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxMode"): any;
    /**
     * The type of checkboxes rendered in the row selector. Can be set only at initialization.
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxMode", optionValue: any): void;
    /**
     * Determines whether the row selectors column should contain row numbering
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableRowNumbering"): boolean;
    /**
     * Determines whether the row selectors column should contain row numbering
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableRowNumbering", optionValue: boolean): void;
    /**
     * Determines whether the row selectors column should contain checkboxes
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableCheckBoxes"): boolean;
    /**
     * Determines whether the row selectors column should contain checkboxes
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableCheckBoxes", optionValue: boolean): void;
    /**
     * The seed to be added to the default numbering
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowNumberingSeed"): number;
    /**
     * The seed to be added to the default numbering
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowNumberingSeed", optionValue: number): void;
    /**
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorColumnWidth"): any;
    /**
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorColumnWidth", optionValue: any): void;
    /**
     * Determines whether the selection feature is required for the row selectors. If set to "false"
     * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
     * not available.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "requireSelection"): boolean;
    /**
     * Determines whether the selection feature is required for the row selectors. If set to "false"
     * the widget will not check for Selection availability. If set to "true" an exception will be thrown if Selection is
     * not available.
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "requireSelection", optionValue: boolean): void;
    /**
     * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "showCheckBoxesOnFocus"): boolean;
    /**
     * Determines whether checkboxes will be shown only if row selectors are on focus/selected.
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "showCheckBoxesOnFocus", optionValue: boolean): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableSelectAllForPaging"): boolean;
    /**
     * Enables/disables showing an overlay after clicking on the header checkbox, which allows selecting all records from all pages.
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "enableSelectAllForPaging", optionValue: boolean): void;
    /**
     * Custom template for "select all" overlay with paging
     * Element with attribute data-rs-select-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "selectAllForPagingTemplate"): string;
    /**
     * Custom template for "select all" overlay with paging
     * Element with attribute data-rs-select-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have selected ${checked} records. <a href='#' tabindex='0' data-rs-select-all>Select all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "selectAllForPagingTemplate", optionValue: string): void;
    /**
     * Custom template for "deselect all" overlay with paging
     * Element with attribute data-rs-deselect-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "deselectAllForPagingTemplate"): string;
    /**
     * Custom template for "deselect all" overlay with paging
     * Element with attribute data-rs-deselect-all is used for sellecting all the records
     * Element with attribute data-rs-close-all is used for closing the overlay
     * The default template is "<div class='ui-widget-header ui-priority-secondary' tabindex='0'><div>You have deselected ${unchecked} records. <a href='#' tabindex='0' data-rs-deselect-all>Deselect all ${totalRecordsCount} records</a><div style='float:right;'><span data-rs-close-all class='ui-icon-close ui-icon ui-button' tabindex='0'></div></span></div></div>"
     * There is also ${allCheckedRecords} parameter which is not used in the default template, but it represents the checked records from all pages.
     *
     * @optionValue New value to be set.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "deselectAllForPagingTemplate", optionValue: string): void;
    /**
     * Event fired after a row selector is clicked.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorClicked"): RowSelectorClickedEvent;
    /**
     * Event fired after a row selector is clicked.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.fixedRow to get reference to the fixed row the clicked row selector resides in(if there are fixed columns).
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "rowSelectorClicked", optionValue: RowSelectorClickedEvent): void;
    /**
     * Event fired when a row selector checkbox is changing.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.currentState to get the current state of the checkbox ("on","off").
     * Use ui.newState to get the new state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanging"): CheckBoxStateChangingEvent;
    /**
     * Event fired when a row selector checkbox is changing.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.currentState to get the current state of the checkbox ("on","off").
     * Use ui.newState to get the new state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanging", optionValue: CheckBoxStateChangingEvent): void;
    /**
     * Event fired after a row selector checkbox had changed state.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.state to get the state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanged"): CheckBoxStateChangedEvent;
    /**
     * Event fired after a row selector checkbox had changed state.
     * Function takes arguments evt and ui.
     * Use ui.row to get reference to the row the clicked row selector resides in.
     * Use ui.rowIndex to get the index of the row the clicked row selector resides in.
     * Use ui.rowKey to get the key of the row the clicked row selector resides in.
     * Use ui.rowSelector to get reference to the row selector cell.
     * Use ui.owner to get reference to igRowSelectors.
     * Use ui.grid to get reference to the igGrid the igRowSelectors are initialized for.
     * Use ui.state to get the state of the checkbox ("on","off").
     * Use ui.isHeader to check if the header check box is the one being clicked. In this case no row related args are passed.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: "checkBoxStateChanged", optionValue: CheckBoxStateChangedEvent): void;
    igTreeGridRowSelectors(options: IgTreeGridRowSelectors): JQuery;
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: string): any;
    igTreeGridRowSelectors(optionLiteral: 'option', options: IgTreeGridRowSelectors): JQuery;
    igTreeGridRowSelectors(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridRowSelectors(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridSelection {
    /**
     * Enables / Disables multiple selection of cells and rows - depending on the mode
     */
    multipleSelection?: boolean;
    /**
     * Enables / disables selection via dragging with the mouse - only applicable for cell selection
     */
    mouseDragSelect?: boolean;
    /**
     * Defines type of the selection.
     *
     * Valid values:
     * "row" Defines row selection mode.
     * "cell" Defines cell selection mode.
     */
    mode?: any;
    /**
     * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
     */
    activation?: boolean;
    /**
     * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
     */
    wrapAround?: boolean;
    /**
     * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
     */
    skipChildren?: boolean;
    /**
     * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
     */
    multipleCellSelectOnClick?: boolean;
    /**
     * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
     */
    touchDragSelect?: boolean;
    /**
     * Enables / disables selection persistance between states.
     */
    persist?: boolean;
    /**
     * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
     */
    allowMultipleRangeSelection?: boolean;
    /**
     * Event fired before row(s) are about to be selected (cancellable).
     * Return false in order to cancel selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     * Use ui.startIndex to get the start index for a range row selection.
     * Use ui.endIndex to get the end index for a range row selection.
     */
    rowSelectionChanging?: RowSelectionChangingEvent;
    /**
     * Event fired after row(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     */
    rowSelectionChanged?: RowSelectionChangedEvent;
    /**
     * Event fired before cell(s) are about to be selected (cancellable).
     * Return false in order to cancel cell selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
     * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
     * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
     * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
     */
    cellSelectionChanging?: CellSelectionChangingEvent;
    /**
     * Event fired after cell(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     */
    cellSelectionChanged?: CellSelectionChangedEvent;
    /**
     * Event fired before a cell becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active cell changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     */
    activeCellChanging?: ActiveCellChangingEvent;
    /**
     * Event fired after a cell becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     */
    activeCellChanged?: ActiveCellChangedEvent;
    /**
     * Event fired before a row becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active row changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     */
    activeRowChanging?: ActiveRowChangingEvent;
    /**
     * Event fired after a row becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     */
    activeRowChanged?: ActiveRowChangedEvent;
    /**
     * Option for igTreeGridSelection
     */
    [optionName: string]: any;
}
interface IgTreeGridSelectionMethods {
    destroy(): void;
    /**
     * Selects a row by row id
     *
     * @param id     Row Id
     */
    selectRowById(id: Object): void;
    /**
     * Clears all selected cells, selected rows, active cell and active row. Also updates the UI accordingly
     */
    clearSelection(): void;
    /**
     * Selects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed
     */
    selectCell(row: number, col: number, isFixed: Object): void;
    /**
     * Selects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    selectCellById(id: Object, colKey: string): void;
    /**
     * Deselects a cell by row/col
     *
     * @param row     Row index
     * @param col     Column index
     * @param isFixed
     */
    deselectCell(row: number, col: number, isFixed: Object): void;
    /**
     * Deselects a cell by row id/column key
     *
     * @param id     Row Id
     * @param colKey     Column key
     */
    deselectCellById(id: Object, colKey: string): void;
    /**
     * Selects a row by index
     *
     * @param index     Row index
     */
    selectRow(index: number): void;
    /**
     * Deselects a row by index
     *
     * @param index     Row index
     */
    deselectRow(index: number): void;
    /**
     * Deselects a row by row id
     *
     * @param id     Row Id
     */
    deselectRowById(id: Object): void;
    /**
     * Returns an array of selected cells in arbitrary order where every objects has the format { element: , row: , index: , rowIndex: , columnKey: } .
     * If multiple selection is disabled the function will return null.
     */
    selectedCells(): any[];
    /**
     * Returns an array of selected rows in arbitrary order where every object has the format { element: , index: } .
     * If multiple selection is disabled the function will return null.
     */
    selectedRows(): any[];
    /**
     * Returns the currently selected cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     * If multiple selection is enabled the function will return null.
     */
    selectedCell(): Object;
    /**
     * Returns the currently selected row that has the format { element: , index: }, if any.
     * If multiple selection is enabled the function will return null.
     */
    selectedRow(): Object;
    /**
     * Returns the currently active (focused) cell that has the format { element: , row: , index: , rowIndex: , columnKey: }, if any.
     */
    activeCell(): Object;
    /**
     * Returns the currently active (focused) row that has the format { element: , index: }, if any.
     */
    activeRow(): Object;
}
interface JQuery {
    data(propertyName: "igTreeGridSelection"): IgTreeGridSelectionMethods;
}
interface JQuery {
    igTreeGridSelection(methodName: "destroy"): void;
    igTreeGridSelection(methodName: "selectRowById", id: Object): void;
    igTreeGridSelection(methodName: "clearSelection"): void;
    igTreeGridSelection(methodName: "selectCell", row: number, col: number, isFixed: Object): void;
    igTreeGridSelection(methodName: "selectCellById", id: Object, colKey: string): void;
    igTreeGridSelection(methodName: "deselectCell", row: number, col: number, isFixed: Object): void;
    igTreeGridSelection(methodName: "deselectCellById", id: Object, colKey: string): void;
    igTreeGridSelection(methodName: "selectRow", index: number): void;
    igTreeGridSelection(methodName: "deselectRow", index: number): void;
    igTreeGridSelection(methodName: "deselectRowById", id: Object): void;
    igTreeGridSelection(methodName: "selectedCells"): any[];
    igTreeGridSelection(methodName: "selectedRows"): any[];
    igTreeGridSelection(methodName: "selectedCell"): Object;
    igTreeGridSelection(methodName: "selectedRow"): Object;
    igTreeGridSelection(methodName: "activeCell"): Object;
    igTreeGridSelection(methodName: "activeRow"): Object;
    /**
     * Enables / Disables multiple selection of cells and rows - depending on the mode
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "multipleSelection"): boolean;
    /**
     * Enables / Disables multiple selection of cells and rows - depending on the mode
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "multipleSelection", optionValue: boolean): void;
    /**
     * Enables / disables selection via dragging with the mouse - only applicable for cell selection
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "mouseDragSelect"): boolean;
    /**
     * Enables / disables selection via dragging with the mouse - only applicable for cell selection
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "mouseDragSelect", optionValue: boolean): void;
    /**
     * Defines type of the selection.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Defines type of the selection.
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activation"): boolean;
    /**
     * Enables / disables activation of rows and cells. Activation implies ability to perform navigating through cells and rows via the keyboard, and selecting rows and cells using CTRL / SHIFT - in the way cells/rows are selected in Ms Excel
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activation", optionValue: boolean): void;
    /**
     * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "wrapAround"): boolean;
    /**
     * If wrapAround is enabled and selection is on the first or last row or cell, then when the end user tries to go beyond that, the first/last row or cell will be selected
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "wrapAround", optionValue: boolean): void;
    /**
     * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "skipChildren"): boolean;
    /**
     * If true will basically skip going into child grids with down / up / right / left arrow keys, when in the context of hierarchical grid
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "skipChildren", optionValue: boolean): void;
    /**
     * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "multipleCellSelectOnClick"): boolean;
    /**
     * If true multiple selection of cells is done as if CTRL is being held. the option is disregarded if mode is set to row. this option is useful for enabling multiple discountinued selection on touch environments.
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "multipleCellSelectOnClick", optionValue: boolean): void;
    /**
     * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "touchDragSelect"): boolean;
    /**
     * Enables / disables selection via continuous touch event - only applicable for cell selection and touch-supported environments
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "touchDragSelect", optionValue: boolean): void;
    /**
     * Enables / disables selection persistance between states.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables selection persistance between states.
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "allowMultipleRangeSelection"): boolean;
    /**
     * Enables / disables the ability to ctrl drag multiple selection windows when selection mode is 'cell'
     *
     * @optionValue New value to be set.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "allowMultipleRangeSelection", optionValue: boolean): void;
    /**
     * Event fired before row(s) are about to be selected (cancellable).
     * Return false in order to cancel selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     * Use ui.startIndex to get the start index for a range row selection.
     * Use ui.endIndex to get the end index for a range row selection.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanging"): RowSelectionChangingEvent;
    /**
     * Event fired before row(s) are about to be selected (cancellable).
     * Return false in order to cancel selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     * Use ui.startIndex to get the start index for a range row selection.
     * Use ui.endIndex to get the end index for a range row selection.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanging", optionValue: RowSelectionChangingEvent): void;
    /**
     * Event fired after row(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanged"): RowSelectionChangedEvent;
    /**
     * Event fired after row(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to row DOM element.
     * Use ui.row.index to get row index.
     * Use ui.row.id to get the row id if primary key is defined or persistence is enabled.
     * Use ui.selectedRows to get reference to rows object array.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "rowSelectionChanged", optionValue: RowSelectionChangedEvent): void;
    /**
     * Event fired before cell(s) are about to be selected (cancellable).
     * Return false in order to cancel cell selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
     * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
     * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
     * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanging"): CellSelectionChangingEvent;
    /**
     * Event fired before cell(s) are about to be selected (cancellable).
     * Return false in order to cancel cell selection changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     * Use ui.firstColumnIndex to get the column index for the first cell in a range selection.
     * Use ui.firstRowIndex to get the row index for the first cell in a range selection.
     * Use ui.lastColumnIndex to get the column index for the last cell in a range selection.
     * Use ui.lastRowIndex to get the row index for the last cell in a range selection.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanging", optionValue: CellSelectionChangingEvent): void;
    /**
     * Event fired after cell(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanged"): CellSelectionChangedEvent;
    /**
     * Event fired after cell(s) are selected.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get reference to column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     * Use ui.selectedCells to get reference to selected cells object array.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "cellSelectionChanged", optionValue: CellSelectionChangedEvent): void;
    /**
     * Event fired before a cell becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active cell changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activeCellChanging"): ActiveCellChangingEvent;
    /**
     * Event fired before a cell becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active cell changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activeCellChanging", optionValue: ActiveCellChangingEvent): void;
    /**
     * Event fired after a cell becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activeCellChanged"): ActiveCellChangedEvent;
    /**
     * Event fired after a cell becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.cell.element to get reference to cell DOM element.
     * Use ui.cell.columnKey to get column key.
     * Use ui.cell.rowId to get the row id if primary key is defined or persistence is enabled.
     * Use ui.cell.index to get column index.
     * Use ui.cell.row to get reference to row DOM element.
     * Use ui.cell.rowIndex to get row index.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activeCellChanged", optionValue: ActiveCellChangedEvent): void;
    /**
     * Event fired before a row becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active row changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activeRowChanging"): ActiveRowChangingEvent;
    /**
     * Event fired before a row becomes active (focus style applied) (cancellable).
     * Return false in order to cancel active row changing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activeRowChanging", optionValue: ActiveRowChangingEvent): void;
    /**
     * Event fired after a row becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activeRowChanged"): ActiveRowChangedEvent;
    /**
     * Event fired after a row becomes active (focus style applied).
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSelection.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.row.element to get reference to active row DOM element.
     * Use ui.row.index to get active row index.
     * Use ui.row.id to get the active row id if primary key is defined or persistence is enabled.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSelection(optionLiteral: 'option', optionName: "activeRowChanged", optionValue: ActiveRowChangedEvent): void;
    igTreeGridSelection(options: IgTreeGridSelection): JQuery;
    igTreeGridSelection(optionLiteral: 'option', optionName: string): any;
    igTreeGridSelection(optionLiteral: 'option', options: IgTreeGridSelection): JQuery;
    igTreeGridSelection(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridSelection(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridSorting {
    /**
     * Specifies from which data bound level to be applied sorting - 0 is the first level
     */
    fromLevel?: number;
    /**
     * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
     */
    toLevel?: number;
    /**
     * Defines local or remote sorting.
     *
     * Valid values:
     * "remote"
     * "local"
     */
    type?: any;
    /**
     * Enables or disables the case sensitivity of the sorting. Works only for local sorting
     */
    caseSensitive?: boolean;
    /**
     * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling
     */
    applySortedColumnCss?: boolean;
    /**
     * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
     */
    sortUrlKey?: string;
    /**
     * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
     */
    sortUrlKeyAscValue?: string;
    /**
     * URL param value for descending type of sorting. Uses OData conventions
     */
    sortUrlKeyDescValue?: string;
    /**
     * Defines single column sorting or multiple column sorting.
     *
     * Valid values:
     * "single"
     * "multi" if enabled, previous sorted state for columns won't be cleared
     */
    mode?: any;
    /**
     * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array
     */
    customSortFunction?: Function;
    /**
     * Specifies which direction to use on the first click / keydown, if the column hasn't been sorted before
     *
     * Valid values:
     * "ascending"
     * "descending"
     */
    firstSortDirection?: any;
    /**
     * Custom sorted column tooltip in jQuery templating format
     */
    sortedColumnTooltip?: string;
    /**
     * Specifies whether sorting to be applied immediately when click sort/unsort columns in multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked
     */
    modalDialogSortOnClick?: boolean;
    /**
     * Specifies sortby button text for each unsorted column in multiple sorting dialog
     */
    modalDialogSortByButtonText?: string;
    /**
     * Specifies sortby button label for each unsorted column in multiple sorting dialog
     */
    modalDialogResetButtonLabel?: string;
    /**
     * Specifies caption for each descending sorted column in multiple sorting dialog
     */
    modalDialogCaptionButtonDesc?: string;
    /**
     * Specifies caption for each ascending sorted column in multiple sorting dialog
     */
    modalDialogCaptionButtonAsc?: string;
    /**
     * Specifies caption for unsort button in multiple sorting dialog
     */
    modalDialogCaptionButtonUnsort?: string;
    /**
     * Specifies width of multiple sorting dialog
     */
    modalDialogWidth?: number;
    /**
     * Specifies height of multiple sorting dialog
     */
    modalDialogHeight?: any;
    /**
     * Specifies time of milliseconds for animation duration to show/hide modal dialog
     */
    modalDialogAnimationDuration?: number;
    /**
     * Specifies text in feature chooser
     */
    featureChooserText?: string;
    /**
     * Custom unsorted column tooltip in jQuery templating format
     */
    unsortedColumnTooltip?: string;
    /**
     * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.)
     */
    columnSettings?: IgGridSortingColumnSetting[];
    /**
     * Specifies caption text for multiple sorting dialog
     */
    modalDialogCaptionText?: string;
    /**
     * Specifies text of button which apply changes in modal dialog
     */
    modalDialogButtonApplyText?: string;
    /**
     * Specifies text of button which cancel changes in modal dialog
     */
    modalDialogButtonCancelText?: string;
    /**
     * Specifies the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
     */
    featureChooserSortAsc?: string;
    /**
     * Specifies the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
     */
    featureChooserSortDesc?: string;
    /**
     * Enables / disables sorting persistence between states
     */
    persist?: boolean;
    /**
     * Controls containment behavior of multiple sorting dialog.
     * owner  The multi sorting dialog will be draggable only in the grid area
     * window  The multi sorting dialog will be draggable in the whole window area
     */
    sortingDialogContainment?: string;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired before sorting is invoked for a certain column.
     * Return false in order to cancel column sorting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.newExpressions to get sorting expressions.
     */
    columnSorting?: ColumnSortingEvent;
    /**
     * Event fired after the column has already been sorted and data - re-rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.expressions to get sorted expressions.
     */
    columnSorted?: ColumnSortedEvent;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogOpening?: ModalDialogOpeningEvent;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogOpened?: ModalDialogOpenedEvent;
    /**
     * Event fired every time the modal dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
     */
    modalDialogMoving?: ModalDialogMovingEvent;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogClosing?: ModalDialogClosingEvent;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogClosed?: ModalDialogClosedEvent;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogContentsRendering?: ModalDialogContentsRenderingEvent;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogContentsRendered?: ModalDialogContentsRenderedEvent;
    /**
     * Event fired when sorting of column is changed in modal dialog. Column should be sorted
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
     */
    modalDialogSortingChanged?: ModalDialogSortingChangedEvent;
    /**
     * Event fired when button to unsort column is clicked in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     */
    modalDialogButtonUnsortClick?: ModalDialogButtonUnsortClickEvent;
    /**
     * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     */
    modalDialogSortClick?: ModalDialogSortClickEvent;
    /**
     * Event fired when button Apply in modal dialog is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
     */
    modalDialogButtonApplyClick?: ModalDialogButtonApplyClickEvent;
    /**
     * Event fired when the button to reset sorting is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    modalDialogButtonResetClick?: ModalDialogButtonResetClickEvent;
    /**
     * Option for igTreeGridSorting
     */
    [optionName: string]: any;
}
interface IgTreeGridSortingMethods {
    /**
     * Returns whether a column with the specified columnKey is sorted(taken from the data source sorting expressions)
     *
     * @param columnKey     Column key (string)
     */
    isColumnSorted(columnKey: string): boolean;
    destroy(): void;
    /**
     * Sorts a grid column and updates the UI
     *
     * @param index     Column key (string) or index (number). Specifies the column which we want to sort. If the mode is multiple, previous sorting states are not cleared.
     * @param direction     Specifies sorting direction (ascending or descending)
     * @param header
     */
    sortColumn(index: Object, direction: Object, header: Object): void;
    /**
     * Sorts grid columns and updates the UI
     */
    sortMultiple(): void;
    /**
     * Remove current sorting(for all sorted columns) and updates the UI
     */
    clearSorting(): void;
    /**
     * Remove sorting for the grid column with the specified columnKey/columnIndex and updates the UI
     *
     * @param index     Column key (string) or index (number). Specifies the column for which we want to remove sorting. If the mode is multiple, previous sorting states are not cleared.
     * @param header     - if specified client events should be fired
     */
    unsortColumn(index: Object, header: Object): void;
    /**
     * Open multiple sorting dialog
     */
    openMultipleSortingDialog(): void;
    /**
     * Close multiple sorting dialog
     */
    closeMultipleSortingDialog(): void;
    /**
     * Renders content of multiple sorting dialog - sorted and unsorted columns.
     *
     * @param isToCallEvents
     */
    renderMultipleSortingDialogContent(isToCallEvents: Object): void;
    /**
     * Remove clear button for multiple sorting dialog
     */
    removeDialogClearButton(): void;
}
interface JQuery {
    data(propertyName: "igTreeGridSorting"): IgTreeGridSortingMethods;
}
interface JQuery {
    igTreeGridSorting(methodName: "isColumnSorted", columnKey: string): boolean;
    igTreeGridSorting(methodName: "destroy"): void;
    igTreeGridSorting(methodName: "sortColumn", index: Object, direction: Object, header: Object): void;
    igTreeGridSorting(methodName: "sortMultiple"): void;
    igTreeGridSorting(methodName: "clearSorting"): void;
    igTreeGridSorting(methodName: "unsortColumn", index: Object, header: Object): void;
    igTreeGridSorting(methodName: "openMultipleSortingDialog"): void;
    igTreeGridSorting(methodName: "closeMultipleSortingDialog"): void;
    igTreeGridSorting(methodName: "renderMultipleSortingDialogContent", isToCallEvents: Object): void;
    igTreeGridSorting(methodName: "removeDialogClearButton"): void;
    /**
     * Specifies from which data bound level to be applied sorting - 0 is the first level
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "fromLevel"): number;
    /**
     * Specifies from which data bound level to be applied sorting - 0 is the first level
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "fromLevel", optionValue: number): void;
    /**
     * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "toLevel"): number;
    /**
     * Specifies to which data bound level to be applied sorting - if -1 sorting should be applied to the last data bound level
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "toLevel", optionValue: number): void;
    /**
     * Defines local or remote sorting.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "type"): any;
    /**
     * Defines local or remote sorting.
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * Enables or disables the case sensitivity of the sorting. Works only for local sorting
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "caseSensitive"): boolean;
    /**
     * Enables or disables the case sensitivity of the sorting. Works only for local sorting
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "caseSensitive", optionValue: boolean): void;
    /**
     * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "applySortedColumnCss"): boolean;
    /**
     * Enables/disables special styling for sorted columns. If false, sorted column cells will not have any special sort-related styling
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "applySortedColumnCss", optionValue: boolean): void;
    /**
     * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKey"): string;
    /**
     * URL param name which specifies how sorting expressions will be encoded in the URL. Uses OData conventions. ex: ?sort(col1)=asc
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKey", optionValue: string): void;
    /**
     * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyAscValue"): string;
    /**
     * URL param value for ascending type of sorting. Uses OData conventions. Example: ?sort(col1)=asc
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyAscValue", optionValue: string): void;
    /**
     * URL param value for descending type of sorting. Uses OData conventions
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyDescValue"): string;
    /**
     * URL param value for descending type of sorting. Uses OData conventions
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortUrlKeyDescValue", optionValue: string): void;
    /**
     * Defines single column sorting or multiple column sorting.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Defines single column sorting or multiple column sorting.
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "customSortFunction"): Function;
    /**
     * Custom sort function(or name of the function as a string) accepting three parameters - the data to be sorted, an array of data source field definitions, and the direction to sort with (optional). The function should return the sorted data array
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "customSortFunction", optionValue: Function): void;
    /**
     * Gets which direction to use on the first click / keydown, if the column hasn't been sorted before
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "firstSortDirection"): any;
    /**
     * Sets which direction to use on the first click / keydown, if the column hasn't been sorted before
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "firstSortDirection", optionValue: any): void;
    /**
     * Custom sorted column tooltip in jQuery templating format
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortedColumnTooltip"): string;
    /**
     * Custom sorted column tooltip in jQuery templating format
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortedColumnTooltip", optionValue: string): void;
    /**
     * Gets whether sorting to be applied immediately when click sort/unsort columns in multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortOnClick"): boolean;
    /**
     * Sets whether sorting to be applied immediately when click sort/unsort columns in multiple sorting dialog. When it is false Apply button shows and sorting is applied when the button is clicked
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortOnClick", optionValue: boolean): void;
    /**
     * Gets sortby button text for each unsorted column in multiple sorting dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortByButtonText"): string;
    /**
     * Sets sortby button text for each unsorted column in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortByButtonText", optionValue: string): void;
    /**
     * Gets sortby button label for each unsorted column in multiple sorting dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogResetButtonLabel"): string;
    /**
     * Sets sortby button label for each unsorted column in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogResetButtonLabel", optionValue: string): void;
    /**
     * Gets caption for each descending sorted column in multiple sorting dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc"): string;
    /**
     * Sets caption for each descending sorted column in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonDesc", optionValue: string): void;
    /**
     * Gets caption for each ascending sorted column in multiple sorting dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc"): string;
    /**
     * Sets caption for each ascending sorted column in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonAsc", optionValue: string): void;
    /**
     * Gets caption for unsort button in multiple sorting dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUnsort"): string;
    /**
     * Sets caption for unsort button in multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionButtonUnsort", optionValue: string): void;
    /**
     * Gets width of multiple sorting dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogWidth"): number;
    /**
     * Sets width of multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogWidth", optionValue: number): void;
    /**
     * Gets height of multiple sorting dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogHeight"): any;
    /**
     * Sets height of multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogHeight", optionValue: any): void;
    /**
     * Gets time of milliseconds for animation duration to show/hide modal dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogAnimationDuration"): number;
    /**
     * Sets time of milliseconds for animation duration to show/hide modal dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogAnimationDuration", optionValue: number): void;
    /**
     * Gets text in feature chooser
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserText"): string;
    /**
     * Sets text in feature chooser
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserText", optionValue: string): void;
    /**
     * Custom unsorted column tooltip in jQuery templating format
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "unsortedColumnTooltip"): string;
    /**
     * Custom unsorted column tooltip in jQuery templating format
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "unsortedColumnTooltip", optionValue: string): void;
    /**
     * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.)
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "columnSettings"): IgGridSortingColumnSetting[];
    /**
     * A list of custom column settings that specify custom sorting settings for a specific column (whether sorting is enabled / disabled, default sort direction, first sort direction, etc.)
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridSortingColumnSetting[]): void;
    /**
     * Gets caption text for multiple sorting dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionText"): string;
    /**
     * Sets caption text for multiple sorting dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogCaptionText", optionValue: string): void;
    /**
     * Gets text of button which apply changes in modal dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyText"): string;
    /**
     * Sets text of button which apply changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyText", optionValue: string): void;
    /**
     * Gets text of button which cancel changes in modal dialog
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonCancelText"): string;
    /**
     * Sets text of button which cancel changes in modal dialog
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonCancelText", optionValue: string): void;
    /**
     * Gets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserSortAsc"): string;
    /**
     * Sets the text shown in the feature chooser item for sorting in ascending order (displayed only on touch environment).
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserSortAsc", optionValue: string): void;
    /**
     * Gets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserSortDesc"): string;
    /**
     * Sets the text shown in the feature chooser item for sorting in descending order (displayed only on touch environment).
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "featureChooserSortDesc", optionValue: string): void;
    /**
     * Enables / disables sorting persistence between states
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "persist"): boolean;
    /**
     * Enables / disables sorting persistence between states
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "persist", optionValue: boolean): void;
    /**
     * Controls containment behavior of multiple sorting dialog.
     * owner  The multi sorting dialog will be draggable only in the grid area
     * window  The multi sorting dialog will be draggable in the whole window area
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortingDialogContainment"): string;
    /**
     * Controls containment behavior of multiple sorting dialog.
     * owner  The multi sorting dialog will be draggable only in the grid area
     * window  The multi sorting dialog will be draggable in the whole window area
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "sortingDialogContainment", optionValue: string): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired before sorting is invoked for a certain column.
     * Return false in order to cancel column sorting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.newExpressions to get sorting expressions.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "columnSorting"): ColumnSortingEvent;
    /**
     * Event fired before sorting is invoked for a certain column.
     * Return false in order to cancel column sorting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.newExpressions to get sorting expressions.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "columnSorting", optionValue: ColumnSortingEvent): void;
    /**
     * Event fired after the column has already been sorted and data - re-rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.expressions to get sorted expressions.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "columnSorted"): ColumnSortedEvent;
    /**
     * Event fired after the column has already been sorted and data - re-rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridSorting.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.columnKey to get column key.
     * Use ui.direction to get sorting direction.
     * Use ui.expressions to get sorted expressions.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "columnSorted", optionValue: ColumnSortedEvent): void;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogOpening"): ModalDialogOpeningEvent;
    /**
     * Event fired before the modal dialog is opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.columnChooserElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogOpening", optionValue: ModalDialogOpeningEvent): void;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogOpened"): ModalDialogOpenedEvent;
    /**
     * Event fired after the modal dialog is already opened.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogOpened", optionValue: ModalDialogOpenedEvent): void;
    /**
     * Event fired every time the modal dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogMoving"): ModalDialogMovingEvent;
    /**
     * Event fired every time the modal dialog changes its position.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.originalPosition to get the original position of the modal dialog div as { top, left } object, relative to the page.
     * Use ui.position to get the current position of the modal dialog div as { top, left } object, relative to the page.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogMoving", optionValue: ModalDialogMovingEvent): void;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogClosing"): ModalDialogClosingEvent;
    /**
     * Event fired before the modal dialog is closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogClosing", optionValue: ModalDialogClosingEvent): void;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogClosed"): ModalDialogClosedEvent;
    /**
     * Event fired after the modal dialog has been closed.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogClosed", optionValue: ModalDialogClosedEvent): void;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendering"): ModalDialogContentsRenderingEvent;
    /**
     * Event fired before the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendering", optionValue: ModalDialogContentsRenderingEvent): void;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendered"): ModalDialogContentsRenderedEvent;
    /**
     * Event fired after the contents of the modal dialog are rendered.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogContentsRendered", optionValue: ModalDialogContentsRenderedEvent): void;
    /**
     * Event fired when sorting of column is changed in modal dialog. Column should be sorted
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortingChanged"): ModalDialogSortingChangedEvent;
    /**
     * Event fired when sorting of column is changed in modal dialog. Column should be sorted
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     * Use ui.isAsc to get whether column should be ascending or not. If true it should be ascending
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortingChanged", optionValue: ModalDialogSortingChangedEvent): void;
    /**
     * Event fired when button to unsort column is clicked in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonUnsortClick"): ModalDialogButtonUnsortClickEvent;
    /**
     * Event fired when button to unsort column is clicked in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonUnsortClick", optionValue: ModalDialogButtonUnsortClickEvent): void;
    /**
     * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortClick"): ModalDialogSortClickEvent;
    /**
     * Event fired when column(which is not sorted) is clicked to be sorted in modal dialog
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnKey to get the column key
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogSortClick", optionValue: ModalDialogSortClickEvent): void;
    /**
     * Event fired when button Apply in modal dialog is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick"): ModalDialogButtonApplyClickEvent;
    /**
     * Event fired when button Apply in modal dialog is clicked
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     * Use ui.columnsToSort to get array of columns which should be sorted - array of objects of sort order - Asc/Desc and columnIdentifier
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonApplyClick", optionValue: ModalDialogButtonApplyClickEvent): void;
    /**
     * Event fired when the button to reset sorting is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonResetClick"): ModalDialogButtonResetClickEvent;
    /**
     * Event fired when the button to reset sorting is clicked.
     * The handler function takes arguments evt and ui.
     * Use ui.owner to get the reference to the igGridSorting widget.
     * Use ui.owner.grid to get the reference to the igGrid widget.
     * Use ui.modalDialogElement to get a reference to the modal dialog element. This is a jQuery object.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridSorting(optionLiteral: 'option', optionName: "modalDialogButtonResetClick", optionValue: ModalDialogButtonResetClickEvent): void;
    igTreeGridSorting(options: IgTreeGridSorting): JQuery;
    igTreeGridSorting(optionLiteral: 'option', optionName: string): any;
    igTreeGridSorting(optionLiteral: 'option', options: IgTreeGridSorting): JQuery;
    igTreeGridSorting(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridSorting(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridTooltips {
    /**
     * determines the tooltip visibility option
     *
     * Valid values:
     * "always" tooltips always show for hovered elements
     * "never" tooltips do not show automatically
     * "overflow" tooltips show only when the underlying data overflows its container
     */
    visibility?: any;
    /**
     * controls the tooltip's style
     *
     * Valid values:
     * "tooltip" The tooltip will be positioned according to the mouse cursor. Will render the tooltip content as plain text.
     * "popover" The tooltip will be positioned according to the target element with an arrow pointing the element. This style is more suitable for touch-supported environments. Will render the tooltip content as HTML.
     */
    style?: any;
    /**
     * The time in milliseconds after which tooltip will show when
     * mouse cursor is hovered over a cell.
     */
    showDelay?: number;
    /**
     * Type="integer" The time in milliseconds after which tooltip hides when mouse
     * cursor gets outside of the cell.
     */
    hideDelay?: number;
    /**
     * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
     */
    columnSettings?: IgGridTooltipsColumnSettings;
    /**
     * Sets the time tooltip fades in and out when showing/hiding
     */
    fadeTimespan?: number;
    /**
     * Sets the left position of the tooltip relative to the mouse cursor
     */
    cursorLeftOffset?: number;
    /**
     * Sets the top position of the tooltip relative to the mouse cursor
     */
    cursorTopOffset?: number;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * use args.owner to get a reference to the widget
     * use args.tooltip to get or set the string to be displayed
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    tooltipShowing?: TooltipShowingEvent;
    /**
     * Event fired after a tooltip is shown
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    tooltipShown?: TooltipShownEvent;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    tooltipHiding?: TooltipHidingEvent;
    /**
     * Event fired after a tooltip is hidden
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip was displayed for
     * use args.element to get a reference to the cell the tooltip was displayed for
     * use args.index to get the row index of the cell the tooltip was displayed for
     * use args.columnKey to get the column key of the cell the tooltip was displayed for
     * use args.columnIndex to get the column index of the cell the tooltip was displayed for
     */
    tooltipHidden?: TooltipHiddenEvent;
    /**
     * Option for igTreeGridTooltips
     */
    [optionName: string]: any;
}
interface IgTreeGridTooltipsMethods {
    destroy(): void;
    /**
     * Returns the ID of the parent div element bounding the ruler and the tooltip container
     */
    id(): string;
}
interface JQuery {
    data(propertyName: "igTreeGridTooltips"): IgTreeGridTooltipsMethods;
}
interface JQuery {
    igTreeGridTooltips(methodName: "destroy"): void;
    igTreeGridTooltips(methodName: "id"): string;
    /**
     * Determines the tooltip visibility option
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "visibility"): any;
    /**
     * Determines the tooltip visibility option
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "visibility", optionValue: any): void;
    /**
     * Controls the tooltip's style
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "style"): any;
    /**
     * Controls the tooltip's style
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "style", optionValue: any): void;
    /**
     * The time in milliseconds after which tooltip will show when
     * mouse cursor is hovered over a cell.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "showDelay"): number;
    /**
     * The time in milliseconds after which tooltip will show when
     * mouse cursor is hovered over a cell.
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "showDelay", optionValue: number): void;
    /**
     * Type="integer" The time in milliseconds after which tooltip hides when mouse
     * cursor gets outside of the cell.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "hideDelay"): number;
    /**
     * Type="integer" The time in milliseconds after which tooltip hides when mouse
     * cursor gets outside of the cell.
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "hideDelay", optionValue: number): void;
    /**
     * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "columnSettings"): IgGridTooltipsColumnSettings;
    /**
     * A list of custom column settings that specify custom tooltip settings for a specific column (whether tooltips are enabled / disabled)
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridTooltipsColumnSettings): void;
    /**
     * The time tooltip fades in and out when showing/hiding
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "fadeTimespan"): number;
    /**
     * Sets the time tooltip fades in and out when showing/hiding
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "fadeTimespan", optionValue: number): void;
    /**
     * The left position of the tooltip relative to the mouse cursor
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "cursorLeftOffset"): number;
    /**
     * Sets the left position of the tooltip relative to the mouse cursor
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "cursorLeftOffset", optionValue: number): void;
    /**
     * The top position of the tooltip relative to the mouse cursor
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "cursorTopOffset"): number;
    /**
     * Sets the top position of the tooltip relative to the mouse cursor
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "cursorTopOffset", optionValue: number): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * use args.owner to get a reference to the widget
     * use args.tooltip to get or set the string to be displayed
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipShowing"): TooltipShowingEvent;
    /**
     * Event fired when the mouse has hovered on an element long enough to display a tooltip
     * use args.owner to get a reference to the widget
     * use args.tooltip to get or set the string to be displayed
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     *
     * @optionValue Define event handler function.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipShowing", optionValue: TooltipShowingEvent): void;
    /**
     * Event fired after a tooltip is shown
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipShown"): TooltipShownEvent;
    /**
     * Event fired after a tooltip is shown
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     *
     * @optionValue Define event handler function.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipShown", optionValue: TooltipShownEvent): void;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipHiding"): TooltipHidingEvent;
    /**
     * Event fired when the mouse has left an element and the tooltip is about to hide
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip is displayed for
     * use args.element to get a reference to the cell the tooltip is displayed for
     * use args.index to get the row index of the cell the tooltip is displayed for
     * use args.columnKey to get the column key of the cell the tooltip is displayed for
     * use args.columnIndex to get the column index of the cell the tooltip is displayed for
     *
     * @optionValue Define event handler function.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipHiding", optionValue: TooltipHidingEvent): void;
    /**
     * Event fired after a tooltip is hidden
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip was displayed for
     * use args.element to get a reference to the cell the tooltip was displayed for
     * use args.index to get the row index of the cell the tooltip was displayed for
     * use args.columnKey to get the column key of the cell the tooltip was displayed for
     * use args.columnIndex to get the column index of the cell the tooltip was displayed for
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipHidden"): TooltipHiddenEvent;
    /**
     * Event fired after a tooltip is hidden
     * use args.owner to get a reference to the widget
     * use args.tooltip to get the string displayed in the tooltip
     * use args.value to get the value of the cell the tooltip was displayed for
     * use args.element to get a reference to the cell the tooltip was displayed for
     * use args.index to get the row index of the cell the tooltip was displayed for
     * use args.columnKey to get the column key of the cell the tooltip was displayed for
     * use args.columnIndex to get the column index of the cell the tooltip was displayed for
     *
     * @optionValue Define event handler function.
     */
    igTreeGridTooltips(optionLiteral: 'option', optionName: "tooltipHidden", optionValue: TooltipHiddenEvent): void;
    igTreeGridTooltips(options: IgTreeGridTooltips): JQuery;
    igTreeGridTooltips(optionLiteral: 'option', optionName: string): any;
    igTreeGridTooltips(optionLiteral: 'option', options: IgTreeGridTooltips): JQuery;
    igTreeGridTooltips(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridTooltips(methodName: string, ...methodParams: any[]): any;
}
interface IgTreeGridUpdating {
    enableAddRow?: boolean;
    /**
     * Sets gets array of settings for each column.
     */
    columnSettings?: IgGridUpdatingColumnSetting[];
    /**
     * Sets the edit mode.
     *
     * Valid values:
     * "row" editors for all cells in a row are displayed. The editor of the clicked cell receives focus. Optionally Done and Cancel buttons are displayed.
     * "cell" an editor is displayed only for the clicked cell. The Done and Cancel buttons are not supported for this mode.
     * "dialog" editors for all cells will be rendered as a popup dialog
     * "none" editing of grid-cells is disabled
     */
    editMode?: any;
    /**
     * Sets gets delete-row functionality.
     * Value true: the "Delete" button is displayed on mouse-over a row and all selected rows are deleted by Delete-key.
     * Value false: delete-row is disabled.
     */
    enableDeleteRow?: boolean;
    /**
     * Sets gets option to enable validation for all columns.
     */
    validation?: boolean;
    /**
     * Sets gets text for Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneLabel is used.
     */
    doneLabel?: string;
    /**
     * Sets gets text for title of Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneTooltip is used.
     */
    doneTooltip?: string;
    /**
     * Sets gets text for Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelLabel is used.
     */
    cancelLabel?: string;
    /**
     * Sets gets text for title of Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelTooltip is used.
     */
    cancelTooltip?: string;
    /**
     * Sets gets text for add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowLabel is used.
     */
    addRowLabel?: string;
    /**
     * Sets gets text for title of add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowTooltip is used.
     */
    addRowTooltip?: string;
    /**
     * Sets gets text for Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowLabel is used.
     */
    deleteRowLabel?: string;
    /**
     * Sets gets text for title of Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowTooltip is used.
     */
    deleteRowTooltip?: string;
    /**
     * Sets gets visibility of the end-edit pop-up dialog with Done/Cancel buttons.
     */
    showDoneCancelButtons?: boolean;
    /**
     * Sets gets ability to enable or disable exception, which is raised when grid has pending transaction and may fail to render data correctly.
     */
    enableDataDirtyException?: boolean;
    /**
     * Sets gets triggers for start edit mode.
     * Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma.
     * Notes:
     * The array of strings similar to ["dblclick", "f2"] is also supported.
     * The keyboard triggers have effect only when "Selection" feature of grid is enabled.
     * If the "dblclick" is included, then "click" has no effect.
     */
    startEditTriggers?: string;
    /**
     * Enables horizontal move to the right on Enter while editing a cell.
     * Value true: Pressing Enter will move the focus to the next edited cell on the right
     * Value false: Pressing Enter will move the focus to the next edited cell on the row below
     */
    horizontalMoveOnEnter?: boolean;
    /**
     * Enables excel navigating style while editing a cell
     * Value true: Arrows will not navigate inside the edited cell, but will exit the edit mode
     * and move the focus to the nearest cell.
     * Value false: Arrows will navigate the cursor inside the edited cell
     */
    excelNavigationMode?: boolean;
    /**
     * Specifies a custom function to be called when AJAX request to the updateUrl option succeeds. Receives as argument the data returned by the server
     */
    saveChangesSuccessHandler?: any;
    /**
     * Specifies a custom function to be called when AJAX request to the updateUrl option fails. Receives three arguments - the jqXHR, string describing the type of error and an optional exception object
     */
    saveChangesErrorHandler?: any;
    /**
     * The swipe distance when on touch to trigger row delete button to appear.
     */
    swipeDistance?: any;
    /**
     * Controls whether the widget will wrap around the grid when editing reaches a cell in one of the edges of the data view.
     */
    wrapAround?: boolean;
    /**
     * A list of options controlling the rendering behavior of the row edit dialog. If the edit mode is not 'dialog' these have no effect.
     */
    rowEditDialogOptions?: IgGridUpdatingRowEditDialogOptions;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    inherit?: boolean;
    /**
     * Event which is raised before start row editing.
     * Return false in order to cancel editing and do not show editors in row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editRowStarting?: EditRowStartingEvent;
    /**
     * Event which is raised after start row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editRowStarted?: EditRowStartedEvent;
    /**
     * Event which is raised before end row editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    editRowEnding?: EditRowEndingEvent;
    /**
     * Event which is raised after end row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    editRowEnded?: EditRowEndedEvent;
    /**
     * Event which is raised before start cell editing.
     * Return false in order to cancel start editing and do not show editors.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get or set value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editCellStarting?: EditCellStartingEvent;
    /**
     * Event which is raised after start cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editCellStarted?: EditCellStartedEvent;
    /**
     * Event which is raised before end cell editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell/editor. That value can be modified and it will be used to update data source.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if value was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editCellEnding?: EditCellEndingEvent;
    /**
     * Event which is raised after end cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    editCellEnded?: EditCellEndedEvent;
    /**
     * Event which is raised before adding new row.
     * Return false in order to cancel adding new row to data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     */
    rowAdding?: RowAddingEvent;
    /**
     * Event which is raised after adding new row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     */
    rowAdded?: RowAddedEvent;
    /**
     * Event which is raised before row deleting.
     * Return false in order to cancel.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     */
    rowDeleting?: RowDeletingEvent;
    /**
     * Event which is raised after row deleting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     */
    rowDeleted?: RowDeletedEvent;
    /**
     * Event which is raised when autoCommit of grid is not enabled and grid has pending transaction which may fail to be correctly rendered.
     * Application should process that event and it may trigger commit of grid.
     * Return false in order to prevent exception.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     */
    dataDirty?: DataDirtyEvent;
    /**
     * Event which is raised before adding new row to get value of cell for primaryKey column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.value to set unique record-key-identifier for new row. It is prefilled with suggested value (defaultValue of column or number of rows in data source)
     */
    generatePrimaryKeyValue?: GeneratePrimaryKeyValueEvent;
    /**
     * Event fired before the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogBeforeOpen?: RowEditDialogBeforeOpenEvent;
    /**
     * Event fired after the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogAfterOpen?: RowEditDialogAfterOpenEvent;
    /**
     * Event fired before the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogBeforeClose?: RowEditDialogBeforeCloseEvent;
    /**
     * Event fired after the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogAfterClose?: RowEditDialogAfterCloseEvent;
    /**
     * Event fired after the row edit dialog is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    rowEditDialogContentsRendered?: RowEditDialogContentsRenderedEvent;
    /**
     * Option for igTreeGridUpdating
     */
    [optionName: string]: any;
}
interface IgTreeGridUpdatingMethods {
    destroy(): void;
    /**
     * Sets a cell value for the specified cell. It also creates a transaction and updates the UI.
     * If the specified cell is currently in edit mode, the function will set the desired value in the cell's editor instead.
     *
     * @param rowId    The primary key of the row the cell is a child of.
     * @param colKey    The column key of the cell.
     * @param value    The new value for the cell.
     */
    setCellValue(rowId: Object, colKey: string, value: Object): void;
    /**
     * Sets values for specified cells in a row. It also creates a transaction and updates the UI.
     * If the specified row is currently in edit mode, the function will set the desired values in the row's editors instead.
     *
     * @param rowId    The primary key of the row to update.
     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     */
    updateRow(rowId: Object, values: Object): void;
    /**
     * Adds a new row to the grid. It also creates a transaction and updates the UI.
     *
     * @param values    Pairs of values in the format { column1Key: value1, column2Key: value2, ... } .
     */
    addRow(values: Object): void;
    /**
     * Deletes a row from the grid. It also creates a transaction and updates the UI.
     *
     * @param rowId    The primary key of the row to delete.
     */
    deleteRow(rowId: Object): void;
    /**
     * Starts editing for the row or cell specified.
     *
     * @param rowId    The row id.
     * @param column    The column key or index.
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    startEdit(rowId: Object, column: Object, raiseEvents?: boolean): boolean;
    /**
     * Start for adding a new row.
     *
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    startAddRowEdit(raiseEvents?: boolean): boolean;
    /**
     * Ends the currently active edit mode.
     *
     * @param update    Specifies if the edit process should accept the current changes. Default is 'false'.
     * @param raiseEvents    Specifies whether or not updating events should be raised for this operation.
     */
    endEdit(update?: boolean, raiseEvents?: boolean): boolean;
    /**
     * Find column-key which editor has invalid value.
     */
    findInvalid(): string;
    /**
     * Checks if the grid is in edit mode.
     */
    isEditing(): boolean;
    /**
     * Gets the editor for a column by the column key. That method can be used only after editor was already created.
     *
     * @param key    The key of the column.
     */
    editorForKey(key: string): Object;
    /**
     * Gets the editor for a column by the cell it resides in. If allowed the function can create the editor if it has not been created yet.
     *
     * @param cell    Reference to the jQuery-wrapped TD object of the grid that the editor belongs to.
     * @param create    Requests to create the editor if it has not been created yet.
     */
    editorForCell(cell: string, create?: boolean): Object;
}
interface JQuery {
    data(propertyName: "igTreeGridUpdating"): IgTreeGridUpdatingMethods;
}
interface JQuery {
    igTreeGridUpdating(methodName: "destroy"): void;
    igTreeGridUpdating(methodName: "setCellValue", rowId: Object, colKey: string, value: Object): void;
    igTreeGridUpdating(methodName: "updateRow", rowId: Object, values: Object): void;
    igTreeGridUpdating(methodName: "addRow", values: Object): void;
    igTreeGridUpdating(methodName: "deleteRow", rowId: Object): void;
    igTreeGridUpdating(methodName: "startEdit", rowId: Object, column: Object, raiseEvents?: boolean): boolean;
    igTreeGridUpdating(methodName: "startAddRowEdit", raiseEvents?: boolean): boolean;
    igTreeGridUpdating(methodName: "endEdit", update?: boolean, raiseEvents?: boolean): boolean;
    igTreeGridUpdating(methodName: "findInvalid"): string;
    igTreeGridUpdating(methodName: "isEditing"): boolean;
    igTreeGridUpdating(methodName: "editorForKey", key: string): Object;
    igTreeGridUpdating(methodName: "editorForCell", cell: string, create?: boolean): Object;
    /**
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "enableAddRow"): boolean;
    /**
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "enableAddRow", optionValue: boolean): void;
    /**
     * Sets gets array of settings for each column.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "columnSettings"): IgGridUpdatingColumnSetting[];
    /**
     * Sets gets array of settings for each column.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "columnSettings", optionValue: IgGridUpdatingColumnSetting[]): void;
    /**
     * Sets the edit mode.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editMode"): any;
    /**
     * Sets the edit mode.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editMode", optionValue: any): void;
    /**
     * Sets gets delete-row functionality.
     * Value true: the "Delete" button is displayed on mouse-over a row and all selected rows are deleted by Delete-key.
     * Value false: delete-row is disabled.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "enableDeleteRow"): boolean;
    /**
     * Sets gets delete-row functionality.
     * Value true: the "Delete" button is displayed on mouse-over a row and all selected rows are deleted by Delete-key.
     * Value false: delete-row is disabled.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "enableDeleteRow", optionValue: boolean): void;
    /**
     * Sets gets option to enable validation for all columns.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "validation"): boolean;
    /**
     * Sets gets option to enable validation for all columns.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "validation", optionValue: boolean): void;
    /**
     * Sets gets text for Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneLabel is used.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "doneLabel"): string;
    /**
     * Sets gets text for Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneLabel is used.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "doneLabel", optionValue: string): void;
    /**
     * Sets gets text for title of Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneTooltip is used.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "doneTooltip"): string;
    /**
     * Sets gets text for title of Done editing button. If that is not set, then $.ig.GridUpdating.locale.doneTooltip is used.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "doneTooltip", optionValue: string): void;
    /**
     * Sets gets text for Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelLabel is used.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "cancelLabel"): string;
    /**
     * Sets gets text for Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelLabel is used.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "cancelLabel", optionValue: string): void;
    /**
     * Sets gets text for title of Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelTooltip is used.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "cancelTooltip"): string;
    /**
     * Sets gets text for title of Cancel editing button. If that is not set, then $.ig.GridUpdating.locale.cancelTooltip is used.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "cancelTooltip", optionValue: string): void;
    /**
     * Sets gets text for add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowLabel is used.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "addRowLabel"): string;
    /**
     * Sets gets text for add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowLabel is used.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "addRowLabel", optionValue: string): void;
    /**
     * Sets gets text for title of add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowTooltip is used.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "addRowTooltip"): string;
    /**
     * Sets gets text for title of add-new-row button. If that is not set, then $.ig.GridUpdating.locale.addRowTooltip is used.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "addRowTooltip", optionValue: string): void;
    /**
     * Sets gets text for Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowLabel is used.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "deleteRowLabel"): string;
    /**
     * Sets gets text for Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowLabel is used.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "deleteRowLabel", optionValue: string): void;
    /**
     * Sets gets text for title of Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowTooltip is used.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "deleteRowTooltip"): string;
    /**
     * Sets gets text for title of Delete row button. If that is not set, then $.ig.GridUpdating.locale.deleteRowTooltip is used.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "deleteRowTooltip", optionValue: string): void;
    /**
     * Sets gets visibility of the end-edit pop-up dialog with Done/Cancel buttons.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "showDoneCancelButtons"): boolean;
    /**
     * Sets gets visibility of the end-edit pop-up dialog with Done/Cancel buttons.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "showDoneCancelButtons", optionValue: boolean): void;
    /**
     * Sets gets ability to enable or disable exception, which is raised when grid has pending transaction and may fail to render data correctly.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "enableDataDirtyException"): boolean;
    /**
     * Sets gets ability to enable or disable exception, which is raised when grid has pending transaction and may fail to render data correctly.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "enableDataDirtyException", optionValue: boolean): void;
    /**
     * Sets gets triggers for start edit mode.
     * Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma.
     * Notes:
     * The array of strings similar to ["dblclick", "f2"] is also supported.
     * The keyboard triggers have effect only when "Selection" feature of grid is enabled.
     * If the "dblclick" is included, then "click" has no effect.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "startEditTriggers"): string;
    /**
     * Sets gets triggers for start edit mode.
     * Possible values: "click", "dblclick", "F2", "enter" and their combinations separated by coma.
     * Notes:
     * The array of strings similar to ["dblclick", "f2"] is also supported.
     * The keyboard triggers have effect only when "Selection" feature of grid is enabled.
     * If the "dblclick" is included, then "click" has no effect.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "startEditTriggers", optionValue: string): void;
    /**
     * Enables horizontal move to the right on Enter while editing a cell.
     * Value true: Pressing Enter will move the focus to the next edited cell on the right
     * Value false: Pressing Enter will move the focus to the next edited cell on the row below
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "horizontalMoveOnEnter"): boolean;
    /**
     * Enables horizontal move to the right on Enter while editing a cell.
     * Value true: Pressing Enter will move the focus to the next edited cell on the right
     * Value false: Pressing Enter will move the focus to the next edited cell on the row below
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "horizontalMoveOnEnter", optionValue: boolean): void;
    /**
     * Enables excel navigating style while editing a cell
     * Value true: Arrows will not navigate inside the edited cell, but will exit the edit mode
     * and move the focus to the nearest cell.
     * Value false: Arrows will navigate the cursor inside the edited cell
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "excelNavigationMode"): boolean;
    /**
     * Enables excel navigating style while editing a cell
     * Value true: Arrows will not navigate inside the edited cell, but will exit the edit mode
     * and move the focus to the nearest cell.
     * Value false: Arrows will navigate the cursor inside the edited cell
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "excelNavigationMode", optionValue: boolean): void;
    /**
     * Gets a custom function to be called when AJAX request to the updateUrl option succeeds. Receives as argument the data returned by the server
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "saveChangesSuccessHandler"): any;
    /**
     * Sets a custom function to be called when AJAX request to the updateUrl option succeeds. Receives as argument the data returned by the server
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "saveChangesSuccessHandler", optionValue: any): void;
    /**
     * Gets a custom function to be called when AJAX request to the updateUrl option fails. Receives three arguments - the jqXHR, string describing the type of error and an optional exception object
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "saveChangesErrorHandler"): any;
    /**
     * Sets a custom function to be called when AJAX request to the updateUrl option fails. Receives three arguments - the jqXHR, string describing the type of error and an optional exception object
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "saveChangesErrorHandler", optionValue: any): void;
    /**
     * The swipe distance when on touch to trigger row delete button to appear.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "swipeDistance"): any;
    /**
     * The swipe distance when on touch to trigger row delete button to appear.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "swipeDistance", optionValue: any): void;
    /**
     * Controls whether the widget will wrap around the grid when editing reaches a cell in one of the edges of the data view.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "wrapAround"): boolean;
    /**
     * Controls whether the widget will wrap around the grid when editing reaches a cell in one of the edges of the data view.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "wrapAround", optionValue: boolean): void;
    /**
     * A list of options controlling the rendering behavior of the row edit dialog. If the edit mode is not 'dialog' these have no effect.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogOptions"): IgGridUpdatingRowEditDialogOptions;
    /**
     * A list of options controlling the rendering behavior of the row edit dialog. If the edit mode is not 'dialog' these have no effect.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogOptions", optionValue: IgGridUpdatingRowEditDialogOptions): void;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "inherit"): boolean;
    /**
     * Enables/disables feature inheritance for the child layouts. NOTE: It only applies for igHierarchicalGrid.
     *
     * @optionValue New value to be set.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "inherit", optionValue: boolean): void;
    /**
     * Event which is raised before start row editing.
     * Return false in order to cancel editing and do not show editors in row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowStarting"): EditRowStartingEvent;
    /**
     * Event which is raised before start row editing.
     * Return false in order to cancel editing and do not show editors in row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowStarting", optionValue: EditRowStartingEvent): void;
    /**
     * Event which is raised after start row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowStarted"): EditRowStartedEvent;
    /**
     * Event which is raised after start row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowStarted", optionValue: EditRowStartedEvent): void;
    /**
     * Event which is raised before end row editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowEnding"): EditRowEndingEvent;
    /**
     * Event which is raised before end row editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowEnding", optionValue: EditRowEndingEvent): void;
    /**
     * Event which is raised after end row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowEnded"): EditRowEndedEvent;
    /**
     * Event which is raised after end row editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.update to check if value of any cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     * Use ui.values[key] to get value of cell in column with the key. That is available only when ui.update is true.
     * Use ui.oldValues[key] to get old value of cell in column with the key. That is available only when ui.update is true.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editRowEnded", optionValue: EditRowEndedEvent): void;
    /**
     * Event which is raised before start cell editing.
     * Return false in order to cancel start editing and do not show editors.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get or set value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellStarting"): EditCellStartingEvent;
    /**
     * Event which is raised before start cell editing.
     * Return false in order to cancel start editing and do not show editors.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get or set value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellStarting", optionValue: EditCellStartingEvent): void;
    /**
     * Event which is raised after start cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellStarted"): EditCellStartedEvent;
    /**
     * Event which is raised after start cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of editor.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellStarted", optionValue: EditCellStartedEvent): void;
    /**
     * Event which is raised before end cell editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell/editor. That value can be modified and it will be used to update data source.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if value was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellEnding"): EditCellEndingEvent;
    /**
     * Event which is raised before end cell editing.
     * Return false in order to cancel update of data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell/editor. That value can be modified and it will be used to update data source.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if value was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellEnding", optionValue: EditCellEndingEvent): void;
    /**
     * Event which is raised after end cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellEnded"): EditCellEndedEvent;
    /**
     * Event which is raised after end cell editing.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.rowID to get key or index of row.
     * Use ui.columnIndex to get index of column.
     * Use ui.columnKey to get key of column.
     * Use ui.editor to get reference to igEditor.
     * Use ui.value to get value of cell.
     * Use ui.oldValue to get old value.
     * Use ui.update to check if cell was modified and data source will be updated.
     * Use ui.rowAdding to check if that event is raised while new-row-adding.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "editCellEnded", optionValue: EditCellEndedEvent): void;
    /**
     * Event which is raised before adding new row.
     * Return false in order to cancel adding new row to data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowAdding"): RowAddingEvent;
    /**
     * Event which is raised before adding new row.
     * Return false in order to cancel adding new row to data source.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowAdding", optionValue: RowAddingEvent): void;
    /**
     * Event which is raised after adding new row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowAdded"): RowAddedEvent;
    /**
     * Event which is raised after adding new row.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.values[key] to get new value of cell in column with the key.
     * Use ui.oldValues[key] to get default value (before editing) of cell in column with the key.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowAdded", optionValue: RowAddedEvent): void;
    /**
     * Event which is raised before row deleting.
     * Return false in order to cancel.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowDeleting"): RowDeletingEvent;
    /**
     * Event which is raised before row deleting.
     * Return false in order to cancel.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowDeleting", optionValue: RowDeletingEvent): void;
    /**
     * Event which is raised after row deleting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowDeleted"): RowDeletedEvent;
    /**
     * Event which is raised after row deleting.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.element to get reference to jquery object which represents TR of row to delete.
     * Use ui.rowID to get key or index of row to delete.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowDeleted", optionValue: RowDeletedEvent): void;
    /**
     * Event which is raised when autoCommit of grid is not enabled and grid has pending transaction which may fail to be correctly rendered.
     * Application should process that event and it may trigger commit of grid.
     * Return false in order to prevent exception.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "dataDirty"): DataDirtyEvent;
    /**
     * Event which is raised when autoCommit of grid is not enabled and grid has pending transaction which may fail to be correctly rendered.
     * Application should process that event and it may trigger commit of grid.
     * Return false in order to prevent exception.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "dataDirty", optionValue: DataDirtyEvent): void;
    /**
     * Event which is raised before adding new row to get value of cell for primaryKey column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.value to set unique record-key-identifier for new row. It is prefilled with suggested value (defaultValue of column or number of rows in data source)
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "generatePrimaryKeyValue"): GeneratePrimaryKeyValueEvent;
    /**
     * Event which is raised before adding new row to get value of cell for primaryKey column.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.owner.grid to get reference to igGrid.
     * Use ui.value to set unique record-key-identifier for new row. It is prefilled with suggested value (defaultValue of column or number of rows in data source)
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "generatePrimaryKeyValue", optionValue: GeneratePrimaryKeyValueEvent): void;
    /**
     * Event fired before the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeOpen"): RowEditDialogBeforeOpenEvent;
    /**
     * Event fired before the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeOpen", optionValue: RowEditDialogBeforeOpenEvent): void;
    /**
     * Event fired after the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterOpen"): RowEditDialogAfterOpenEvent;
    /**
     * Event fired after the row edit dialog is opened.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterOpen", optionValue: RowEditDialogAfterOpenEvent): void;
    /**
     * Event fired before the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeClose"): RowEditDialogBeforeCloseEvent;
    /**
     * Event fired before the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogBeforeClose", optionValue: RowEditDialogBeforeCloseEvent): void;
    /**
     * Event fired after the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterClose"): RowEditDialogAfterCloseEvent;
    /**
     * Event fired after the row edit dialog is closed.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogAfterClose", optionValue: RowEditDialogAfterCloseEvent): void;
    /**
     * Event fired after the row edit dialog is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogContentsRendered"): RowEditDialogContentsRenderedEvent;
    /**
     * Event fired after the row edit dialog is rendered.
     * Function takes arguments evt and ui.
     * Use ui.owner to get reference to igGridUpdating.
     * Use ui.dialogElement to get reference to row edit dialog DOM element.
     *
     * @optionValue Define event handler function.
     */
    igTreeGridUpdating(optionLiteral: 'option', optionName: "rowEditDialogContentsRendered", optionValue: RowEditDialogContentsRenderedEvent): void;
    igTreeGridUpdating(options: IgTreeGridUpdating): JQuery;
    igTreeGridUpdating(optionLiteral: 'option', optionName: string): any;
    igTreeGridUpdating(optionLiteral: 'option', options: IgTreeGridUpdating): JQuery;
    igTreeGridUpdating(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igTreeGridUpdating(methodName: string, ...methodParams: any[]): any;
}
interface IgBrowseButton {
    autoselect?: boolean;
    multipleFiles?: boolean;
    container?: any;
    /**
     * Option for igBrowseButton
     */
    [optionName: string]: any;
}
interface IgBrowseButtonMethods {
    attachFilePicker(e: Object, isHidden: Object): void;
    getFilePicker(): void;
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igBrowseButton"): IgBrowseButtonMethods;
}
interface IgUploadFileExtensionIcons {
    /**
     * Array of string for file extensions
     */
    ext?: string;
    /**
     * Css classes which sets icon.
     */
    css?: string;
    /**
     * Default icons when the file extension is not found. It is taken only the first item which have def set to true, other are ignored.
     */
    def?: boolean;
    /**
     * Option for IgUploadFileExtensionIcons
     */
    [optionName: string]: any;
}
interface FileSelectingEvent {
    (event: Event, ui: FileSelectingEventUIParam): void;
}
interface FileSelectingEventUIParam {
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface FileSelectedEvent {
    (event: Event, ui: FileSelectedEventUIParam): void;
}
interface FileSelectedEventUIParam {
    /**
     * Used to get unique identifier of the file
     */
    fileId?: any;
    /**
     * Used to get the name of the uploaded file
     */
    filePath?: any;
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface FileUploadingEvent {
    (event: Event, ui: FileUploadingEventUIParam): void;
}
interface FileUploadingEventUIParam {
    /**
     * Used to get unique identifier of the file
     */
    fileId?: any;
    /**
     * Used to get the name of the uploaded file
     */
    filePath?: any;
    /**
     * Used totalSize to get the file size of the uploaded file
     */
    totalSize?: any;
    /**
     * Used to get uploaded bytes
     */
    uploadedBytes?: any;
    /**
     * Used to get current file status
     */
    fileStatus?: any;
    /**
     * Used to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
     */
    fileInfo?: any;
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface FileUploadedEvent {
    (event: Event, ui: FileUploadedEventUIParam): void;
}
interface FileUploadedEventUIParam {
    /**
     * Used to get unique identifier of the file
     */
    fileId?: any;
    /**
     * Used to get the name of the uploaded file
     */
    filePath?: any;
    /**
     * Used totalSize to get the file size of the uploaded file
     */
    totalSize?: any;
    /**
     * Used to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
     */
    fileInfo?: any;
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface FileUploadAbortedEvent {
    (event: Event, ui: FileUploadAbortedEventUIParam): void;
}
interface FileUploadAbortedEventUIParam {
    /**
     * Used to get unique identifier of the file
     */
    fileId?: any;
    /**
     * Used to get the name of the uploaded file
     */
    filePath?: any;
    /**
     * Used totalSize to get the file size of the uploaded file
     */
    totalSize?: any;
    /**
     * Used to get uploaded bytes
     */
    uploadedBytes?: any;
    /**
     * Used to get current file status
     */
    fileStatus?: any;
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface CancelAllClickedEvent {
    (event: Event, ui: CancelAllClickedEventUIParam): void;
}
interface CancelAllClickedEventUIParam {
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface OnErrorEvent {
    (event: Event, ui: OnErrorEventUIParam): void;
}
interface OnErrorEventUIParam {
    /**
     * Used to get current errorCode
     */
    errorCode?: any;
    /**
     * Used to get identifier of the file for which the event is fired(after that it can be used API function getFileInfo). NOTE: It is possible to be null in some cases: try to drop multiple files when mode is single , check maximum allowed uploading files fails or check for count of maximum allowed simultaneous files upload fails.
     */
    fileId?: any;
    /**
     * Used to get detailed error description
     */
    errorMessage?: any;
    /**
     * Used to get error type - it could be clientside or serverside
     */
    errorType?: any;
    /**
     * Used to get specific server message returned by server - if errorType is serverside
     */
    serverMessage?: any;
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface FileExtensionsValidatingEvent {
    (event: Event, ui: FileExtensionsValidatingEventUIParam): void;
}
interface FileExtensionsValidatingEventUIParam {
    /**
     * Used to get the full file name
     */
    fileName?: any;
    /**
     * Used to get file extension
     */
    fileExtension?: any;
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface OnXHRLoadEvent {
    (event: Event, ui: OnXHRLoadEventUIParam): void;
}
interface OnXHRLoadEventUIParam {
    /**
     * Used to get unique identifier of the file
     */
    fileId?: any;
    /**
     * Used to get reference to the original XMLHttpRequest object
     */
    xhr?: any;
    /**
     * Used to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from the server-side), etc.
     */
    fileInfo?: any;
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface OnFormDataSubmitEvent {
    (event: Event, ui: OnFormDataSubmitEventUIParam): void;
}
interface OnFormDataSubmitEventUIParam {
    /**
     * Used to get unique identifier of the file
     */
    fileId?: any;
    /**
     * Used to get reference to the fileInfo object - containing information for the fileName, fileSize, serverMessage, etc.
     */
    fileInfo?: any;
    /**
     * Used to get reference to the original XMLHttpRequest object(if the browser supports HTML 5 file API - if not it is undefined)
     */
    xhr?: any;
    /**
     * Used to get reference to FormData object(if the browser supports HTML5 file API) OR reference to jQuery representation of <form>
     */
    formData?: any;
    /**
     * Used to access the igUpload widget object.
     */
    owner?: any;
}
interface IgUpload {
    /**
     * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
     */
    width?: number;
    /**
     * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
     */
    height?: number;
    /**
     * Get or set whether the file start upload automatically when it is selected. Default is false.
     */
    autostartupload?: boolean;
    /**
     * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
     */
    labelUploadButton?: string;
    /**
     * Get or set label for browse button in main container.
     */
    labelAddButton?: string;
    /**
     * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
     */
    labelClearAllButton?: string;
    /**
     * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
     */
    labelSummaryTemplate?: string;
    /**
     * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
     */
    labelSummaryProgressBarTemplate?: string;
    /**
     * Get or set label for show/hide details button when main container is hidden.
     */
    labelShowDetails?: string;
    /**
     * Get or set label for show/hide details button when main container is shown.
     */
    labelHideDetails?: string;
    /**
     * Get or set label for button cancelling all files. Shown only in multiple upload mode.
     */
    labelSummaryProgressButtonCancel?: string;
    /**
     * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
     */
    labelSummaryProgressButtonContinue?: string;
    /**
     * Get or set label when upload is finished. Shown only in multiple upload mode.
     */
    labelSummaryProgressButtonDone?: string;
    /**
     * Get or set filename when it could not be shown the whole file name and should be shorten.
     */
    labelProgressBarFileNameContinue?: string;
    /**
     * Get or set message shown when max file size of the uploaded file exceeds the limit.
     */
    errorMessageMaxFileSizeExceeded?: string;
    /**
     * Get or set error message when ajax call to get file status throws error.
     */
    errorMessageGetFileStatus?: string;
    /**
     * Get or set error message when ajax call to send cancel upload command.
     */
    errorMessageCancelUpload?: string;
    /**
     * Get or set error message when file is not found.
     */
    errorMessageNoSuchFile?: string;
    /**
     * Get or set error message different from the other messages.
     */
    errorMessageOther?: string;
    /**
     * Get or set error message when file extension validation failed.
     */
    errorMessageValidatingFileExtension?: string;
    /**
     * Get or set error message when AJAX Request to get file size throws error.
     */
    errorMessageAJAXRequestFileSize?: string;
    /**
     * Get or set error message when trying to remove non existing file.
     */
    errorMessageTryToRemoveNonExistingFile?: string;
    /**
     * Get or set error message when trying to start non existing file.
     */
    errorMessageTryToStartNonExistingFile?: string;
    /**
     * Get or set error message when maximum allowed files exceeded.
     */
    errorMessageMaxUploadedFiles?: string;
    /**
     * Get or set error message when maximum simultaneous files is less or equal to 0.
     */
    errorMessageMaxSimultaneousFiles?: string;
    /**
     * Get or set error message when trying to drop more than 1 file and mode is single.
     */
    errorMessageDropMultipleFilesWhenSingleModel?: string;
    /**
     * Get or set URL for uploading.
     */
    uploadUrl?: string;
    /**
     * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
     */
    progressUrl?: string;
    /**
     * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
     */
    allowedExtensions?: string;
    /**
     * Get or set whether to show File Extension icon
     */
    showFileExtensionIcon?: boolean;
    /**
     * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
     */
    css?: any;
    /**
     * Set icon css classes for specified file extension
     */
    fileExtensionIcons?: IgUploadFileExtensionIcons;
    /**
     * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
     */
    mode?: any;
    /**
     * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
     */
    multipleFiles?: boolean;
    /**
     * Get or set the maximum number of allowed files to upload.
     */
    maxUploadedFiles?: number;
    /**
     * Get or set count of files that could be uploaded at the same time.
     */
    maxSimultaneousFilesUploads?: number;
    /**
     * Get or set file size metrics how to be shown files size.
     */
    fileSizeMetric?: any;
    /**
     * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
     */
    controlId?: string;
    /**
     * The number of digits after the decimal point.
     */
    fileSizeDecimalDisplay?: number;
    /**
     * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
     */
    maxFileSize?: any;
    /**
     * Defines the name of the file upload selecting event. Fired when browse button is pressed.
     * Return false in order to cancel selecting file.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igUpload widget object.
     */
    fileSelecting?: FileSelectingEvent;
    /**
     * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
     * Return false in order to cancel uploading file.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.owner in order to access the igUpload widget object.
     */
    fileSelected?: FileSelectedEvent;
    /**
     * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
     * Return false in order to cancel uploading file.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.uploadedBytes to get uploaded bytes
     * Use ui.fileStatus to get current file status
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     */
    fileUploading?: FileUploadingEvent;
    /**
     * Defines the name of the uploaded event. Fired when the file is uploaded
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     */
    fileUploaded?: FileUploadedEvent;
    /**
     * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.uploadedBytes to get uploaded bytes
     * Use ui.fileStatus to get current file status
     * Use ui.owner in order to access the igUpload widget object.
     */
    fileUploadAborted?: FileUploadAbortedEvent;
    /**
     * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igUpload widget object.
     */
    cancelAllClicked?: CancelAllClickedEvent;
    /**
     * Defines the name of the file upload error event. Fired when error is occurred.
     * Function takes arguments evt and ui.
     * Use ui.errorCode to get current errorCode
     * Use ui.fileId to get identifier of the file for which the event is fired(after that it can be used API function getFileInfo). NOTE: It is possible to be null in some cases: try to drop multiple files when mode is single , check maximum allowed uploading files fails or check for count of maximum allowed simultaneous files upload fails.
     * Use ui.errorMessage to get detailed error description
     * Use ui.errorType to get error type - it could be clientside or serverside
     * Use ui.serverMessage to get specific server message returned by server - if errorType is serverside
     * Use ui.owner in order to access the igUpload widget object.
     */
    onError?: OnErrorEvent;
    /**
     * It is fired when validating file extensions
     * Function takes arguments evt and ui.
     * Use ui.fileName to get the full file name
     * Use ui.fileExtension to get file extension
     * Use ui.owner in order to access the igUpload widget object.
     */
    fileExtensionsValidating?: FileExtensionsValidatingEvent;
    /**
     * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.xhr to get reference to the original XMLHttpRequest object
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from the server-side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     */
    onXHRLoad?: OnXHRLoadEvent;
    /**
     * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for the fileName, fileSize, serverMessage, etc.
     * Use ui.xhr to get reference to the original XMLHttpRequest object(if the browser supports HTML 5 file API - if not it is undefined)
     * Use ui.formData to get reference to FormData object(if the browser supports HTML5 file API) OR reference to jQuery representation of <form>
     * Use ui.owner in order to access the igUpload widget object.
     */
    onFormDataSubmit?: OnFormDataSubmitEvent;
    /**
     * Option for igUpload
     */
    [optionName: string]: any;
}
interface IgUploadMethods {
    /**
     * Return jquery object of fileupload container - html DOM element
     */
    container(): void;
    /**
     * Returns the current widget element
     */
    widget(): void;
    /**
     * Hide finished files
     */
    clearAll(): void;
    /**
     * Append additional data field to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     *
     * @param formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     * @param field    Data field that should be appended to the formData. The object has 2 properties - value and name. If the browser supports HTML5 the data field is appended to the formData object. Otherwise it is appended as input hidden field to the <form>
     */
    addDataField(formData: Object, field: Object): void;
    /**
     * Append additional data fields to formData(before submitting it to the server). Usually this function is used in the handler of the event onFormDataSubmit. If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     *
     * @param formData    If the browser supports HTML5 file API formData is instance of FormData, otherwise(like IE10 and older) formData is jQuery representation of the <form> that should be submitted to the server
     * @param fields    Array of data fields that should be appended to the formData. Each data field is object with 2 properties - value and name. If the browser supports HTML5 these data fields are added to the formData. Otherwise each of these data field is appended as input hidden field to the <form>
     */
    addDataFields(formData: Object, fields: any[]): void;
    /**
     * Start uploading file as submitting form with the specified formNumber.
     *
     * @param formNumber    id of the upload form
     */
    startUpload(formNumber: number): void;
    /**
     * Cancel upload for the specified file id
     * formNumber - id of the file to be canceled
     *
     * @param formNumber    id of the form which should be cancelled
     */
    cancelUpload(formNumber: number): void;
    /**
     * Destroy the widget
     */
    destroy(): void;
    /**
     * Returns the information about uploading files - all files uploaded/uploading/pending
     */
    getFileInfoData(): Object;
    /**
     * Cancel all uploading and pending files
     */
    cancelAll(): void;
    /**
     * Returns the information about the file by specified file identifier. It could be file which is uploading/uploaded or uploading is not started. If there isn't file with the specified file id returns null
     *
     * @param fileIndex    unique identifier of the file
     */
    getFileInfo(fileIndex: number): Object;
}
interface JQuery {
    data(propertyName: "igUpload"): IgUploadMethods;
}
interface JQuery {
    igBrowseButton(methodName: "attachFilePicker", e: Object, isHidden: Object): void;
    igBrowseButton(methodName: "getFilePicker"): void;
    igBrowseButton(methodName: "destroy"): void;
    /**
     */
    igBrowseButton(optionLiteral: 'option', optionName: "autoselect"): boolean;
    /**
     */
    igBrowseButton(optionLiteral: 'option', optionName: "autoselect", optionValue: boolean): void;
    /**
     */
    igBrowseButton(optionLiteral: 'option', optionName: "multipleFiles"): boolean;
    /**
     */
    igBrowseButton(optionLiteral: 'option', optionName: "multipleFiles", optionValue: boolean): void;
    /**
     */
    igBrowseButton(optionLiteral: 'option', optionName: "container"): any;
    /**
     */
    igBrowseButton(optionLiteral: 'option', optionName: "container", optionValue: any): void;
    igBrowseButton(options: IgBrowseButton): JQuery;
    igBrowseButton(optionLiteral: 'option', optionName: string): any;
    igBrowseButton(optionLiteral: 'option', options: IgBrowseButton): JQuery;
    igBrowseButton(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igBrowseButton(methodName: string, ...methodParams: any[]): any;
}
interface JQuery {
    igUpload(methodName: "container"): void;
    igUpload(methodName: "widget"): void;
    igUpload(methodName: "clearAll"): void;
    igUpload(methodName: "addDataField", formData: Object, field: Object): void;
    igUpload(methodName: "addDataFields", formData: Object, fields: any[]): void;
    igUpload(methodName: "startUpload", formNumber: number): void;
    igUpload(methodName: "cancelUpload", formNumber: number): void;
    igUpload(methodName: "destroy"): void;
    igUpload(methodName: "getFileInfoData"): Object;
    igUpload(methodName: "cancelAll"): void;
    igUpload(methodName: "getFileInfo", fileIndex: number): Object;
    /**
     * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
     */
    igUpload(optionLiteral: 'option', optionName: "width"): number;
    /**
     * Get or set width of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "width", optionValue: number): void;
    /**
     * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
     */
    igUpload(optionLiteral: 'option', optionName: "height"): number;
    /**
     * Get or set height of the main container of the file upload control. Main container contains all buttons, progressbar, etc.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "height", optionValue: number): void;
    /**
     * Get or set whether the file start upload automatically when it is selected. Default is false.
     */
    igUpload(optionLiteral: 'option', optionName: "autostartupload"): boolean;
    /**
     * Get or set whether the file start upload automatically when it is selected. Default is false.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "autostartupload", optionValue: boolean): void;
    /**
     * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
     */
    igUpload(optionLiteral: 'option', optionName: "labelUploadButton"): string;
    /**
     * Get or set label for the first shown browse button. When file is selected for the first time this button is hidden.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelUploadButton", optionValue: string): void;
    /**
     * Get or set label for browse button in main container.
     */
    igUpload(optionLiteral: 'option', optionName: "labelAddButton"): string;
    /**
     * Get or set label for browse button in main container.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelAddButton", optionValue: string): void;
    /**
     * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
     */
    igUpload(optionLiteral: 'option', optionName: "labelClearAllButton"): string;
    /**
     * Get or set label for summary Clear all button. It will be shown only in multiple upload mode.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelClearAllButton", optionValue: string): void;
    /**
     * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryTemplate"): string;
    /**
     * Get or set template for showing summary template. {0} is count of uploaded files. {1} is total count of file to be uploaded.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryTemplate", optionValue: string): void;
    /**
     * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressBarTemplate"): string;
    /**
     * Get or set template for showing uploading information in summary progress bar. It will be shown only in multiple upload mode. {0} uploaded filesize. {1} - total file size.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressBarTemplate", optionValue: string): void;
    /**
     * Get or set label for show/hide details button when main container is hidden.
     */
    igUpload(optionLiteral: 'option', optionName: "labelShowDetails"): string;
    /**
     * Get or set label for show/hide details button when main container is hidden.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelShowDetails", optionValue: string): void;
    /**
     * Get or set label for show/hide details button when main container is shown.
     */
    igUpload(optionLiteral: 'option', optionName: "labelHideDetails"): string;
    /**
     * Get or set label for show/hide details button when main container is shown.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelHideDetails", optionValue: string): void;
    /**
     * Get or set label for button cancelling all files. Shown only in multiple upload mode.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonCancel"): string;
    /**
     * Get or set label for button cancelling all files. Shown only in multiple upload mode.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonCancel", optionValue: string): void;
    /**
     * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonContinue"): string;
    /**
     * Get or set label for start upload batch files. Shown only in multiple upload mode and autostartupload is false.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonContinue", optionValue: string): void;
    /**
     * Get or set label when upload is finished. Shown only in multiple upload mode.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonDone"): string;
    /**
     * Get or set label when upload is finished. Shown only in multiple upload mode.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelSummaryProgressButtonDone", optionValue: string): void;
    /**
     * Get or set filename when it could not be shown the whole file name and should be shorten.
     */
    igUpload(optionLiteral: 'option', optionName: "labelProgressBarFileNameContinue"): string;
    /**
     * Get or set filename when it could not be shown the whole file name and should be shorten.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "labelProgressBarFileNameContinue", optionValue: string): void;
    /**
     * Get or set message shown when max file size of the uploaded file exceeds the limit.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageMaxFileSizeExceeded"): string;
    /**
     * Get or set message shown when max file size of the uploaded file exceeds the limit.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageMaxFileSizeExceeded", optionValue: string): void;
    /**
     * Get or set error message when ajax call to get file status throws error.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageGetFileStatus"): string;
    /**
     * Get or set error message when ajax call to get file status throws error.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageGetFileStatus", optionValue: string): void;
    /**
     * Get or set error message when ajax call to send cancel upload command.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageCancelUpload"): string;
    /**
     * Get or set error message when ajax call to send cancel upload command.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageCancelUpload", optionValue: string): void;
    /**
     * Get or set error message when file is not found.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageNoSuchFile"): string;
    /**
     * Get or set error message when file is not found.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageNoSuchFile", optionValue: string): void;
    /**
     * Get or set error message different from the other messages.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageOther"): string;
    /**
     * Get or set error message different from the other messages.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageOther", optionValue: string): void;
    /**
     * Get or set error message when file extension validation failed.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageValidatingFileExtension"): string;
    /**
     * Get or set error message when file extension validation failed.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageValidatingFileExtension", optionValue: string): void;
    /**
     * Get or set error message when AJAX Request to get file size throws error.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageAJAXRequestFileSize"): string;
    /**
     * Get or set error message when AJAX Request to get file size throws error.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageAJAXRequestFileSize", optionValue: string): void;
    /**
     * Get or set error message when trying to remove non existing file.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageTryToRemoveNonExistingFile"): string;
    /**
     * Get or set error message when trying to remove non existing file.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageTryToRemoveNonExistingFile", optionValue: string): void;
    /**
     * Get or set error message when trying to start non existing file.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageTryToStartNonExistingFile"): string;
    /**
     * Get or set error message when trying to start non existing file.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageTryToStartNonExistingFile", optionValue: string): void;
    /**
     * Get or set error message when maximum allowed files exceeded.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageMaxUploadedFiles"): string;
    /**
     * Get or set error message when maximum allowed files exceeded.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageMaxUploadedFiles", optionValue: string): void;
    /**
     * Get or set error message when maximum simultaneous files is less or equal to 0.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageMaxSimultaneousFiles"): string;
    /**
     * Get or set error message when maximum simultaneous files is less or equal to 0.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageMaxSimultaneousFiles", optionValue: string): void;
    /**
     * Get or set error message when trying to drop more than 1 file and mode is single.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageDropMultipleFilesWhenSingleModel"): string;
    /**
     * Get or set error message when trying to drop more than 1 file and mode is single.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "errorMessageDropMultipleFilesWhenSingleModel", optionValue: string): void;
    /**
     * Get or set URL for uploading.
     */
    igUpload(optionLiteral: 'option', optionName: "uploadUrl"): string;
    /**
     * Get or set URL for uploading.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "uploadUrl", optionValue: string): void;
    /**
     * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
     */
    igUpload(optionLiteral: 'option', optionName: "progressUrl"): string;
    /**
     * Get or set URL of HTTPHandler to get information about file upload, current size and also to get commands
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "progressUrl", optionValue: string): void;
    /**
     * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
     */
    igUpload(optionLiteral: 'option', optionName: "allowedExtensions"): string;
    /**
     * Get or set file allowed file extensions. When this array is empty - it is not made such validation. Example ["gif", "jpg", "bmp"].
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "allowedExtensions", optionValue: string): void;
    /**
     * Get or set whether to show File Extension icon
     */
    igUpload(optionLiteral: 'option', optionName: "showFileExtensionIcon"): boolean;
    /**
     * Get or set whether to show File Extension icon
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "showFileExtensionIcon", optionValue: boolean): void;
    /**
     * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
     */
    igUpload(optionLiteral: 'option', optionName: "css"): any;
    /**
     * Get or set control specific CSS options. For example you can override specific control classes with custom ones.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "css", optionValue: any): void;
    /**
     * Set icon css classes for specified file extension
     */
    igUpload(optionLiteral: 'option', optionName: "fileExtensionIcons"): IgUploadFileExtensionIcons;
    /**
     * Set icon css classes for specified file extension
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileExtensionIcons", optionValue: IgUploadFileExtensionIcons): void;
    /**
     * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
     */
    igUpload(optionLiteral: 'option', optionName: "mode"): any;
    /**
     * Get or set multiple or single file upload. In single upload it is possible to upload only one file at the same time.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "mode", optionValue: any): void;
    /**
     * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
     */
    igUpload(optionLiteral: 'option', optionName: "multipleFiles"): boolean;
    /**
     * Get or set a bool setting that allows user to select(for upload) more than 1 file from the browse dialog at once. HTML 5+ - it is supported by Chrome, MOzilla FF, Safar, Opera latest versions and IE10+
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "multipleFiles", optionValue: boolean): void;
    /**
     * Get or set the maximum number of allowed files to upload.
     */
    igUpload(optionLiteral: 'option', optionName: "maxUploadedFiles"): number;
    /**
     * Get or set the maximum number of allowed files to upload.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "maxUploadedFiles", optionValue: number): void;
    /**
     * Get or set count of files that could be uploaded at the same time.
     */
    igUpload(optionLiteral: 'option', optionName: "maxSimultaneousFilesUploads"): number;
    /**
     * Get or set count of files that could be uploaded at the same time.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "maxSimultaneousFilesUploads", optionValue: number): void;
    /**
     * Get or set file size metrics how to be shown files size.
     */
    igUpload(optionLiteral: 'option', optionName: "fileSizeMetric"): any;
    /**
     * Get or set file size metrics how to be shown files size.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileSizeMetric", optionValue: any): void;
    /**
     * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
     */
    igUpload(optionLiteral: 'option', optionName: "controlId"): string;
    /**
     * UniqueId of the control - should not be changed by developer. Set from server-side wrapper.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "controlId", optionValue: string): void;
    /**
     * The number of digits after the decimal point.
     */
    igUpload(optionLiteral: 'option', optionName: "fileSizeDecimalDisplay"): number;
    /**
     * The number of digits after the decimal point.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileSizeDecimalDisplay", optionValue: number): void;
    /**
     * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
     */
    igUpload(optionLiteral: 'option', optionName: "maxFileSize"): any;
    /**
     * Maximum size(in bytes) allowed for the file to be uploaded. If it is set to null or -1 there is no limitation otherwise if the size(of the selected file) exceeds this value it is not allowed to be uploaded. This option is used for validation only on client side and only if the browser supports HTML5 file API and share information about the file size
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "maxFileSize", optionValue: any): void;
    /**
     * Defines the name of the file upload selecting event. Fired when browse button is pressed.
     * Return false in order to cancel selecting file.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "fileSelecting"): FileSelectingEvent;
    /**
     * Defines the name of the file upload selecting event. Fired when browse button is pressed.
     * Return false in order to cancel selecting file.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileSelecting", optionValue: FileSelectingEvent): void;
    /**
     * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
     * Return false in order to cancel uploading file.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "fileSelected"): FileSelectedEvent;
    /**
     * Defines the name of the file upload selected event. Fired when file is selected from browse dialog.
     * Return false in order to cancel uploading file.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileSelected", optionValue: FileSelectedEvent): void;
    /**
     * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
     * Return false in order to cancel uploading file.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.uploadedBytes to get uploaded bytes
     * Use ui.fileStatus to get current file status
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "fileUploading"): FileUploadingEvent;
    /**
     * Defines the name of the file uploading event. Fired every time when fileuploader get status for the upload.
     * Return false in order to cancel uploading file.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.uploadedBytes to get uploaded bytes
     * Use ui.fileStatus to get current file status
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileUploading", optionValue: FileUploadingEvent): void;
    /**
     * Defines the name of the uploaded event. Fired when the file is uploaded
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "fileUploaded"): FileUploadedEvent;
    /**
     * Defines the name of the uploaded event. Fired when the file is uploaded
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from server side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileUploaded", optionValue: FileUploadedEvent): void;
    /**
     * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.uploadedBytes to get uploaded bytes
     * Use ui.fileStatus to get current file status
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "fileUploadAborted"): FileUploadAbortedEvent;
    /**
     * Defines the name of the file upload cancel event. Fired when the server responses that the file is canceled.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.filePath to get the name of the uploaded file
     * Use ui.totalSize to get the file size of the uploaded file
     * Use ui.uploadedBytes to get uploaded bytes
     * Use ui.fileStatus to get current file status
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileUploadAborted", optionValue: FileUploadAbortedEvent): void;
    /**
     * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "cancelAllClicked"): CancelAllClickedEvent;
    /**
     * Defines the name of the cancel all button event click. Fired when cancel all button in summary is clicked. Fired only in multiple upload mode.
     * Function takes arguments evt and ui.
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "cancelAllClicked", optionValue: CancelAllClickedEvent): void;
    /**
     * Defines the name of the file upload error event. Fired when error is occurred.
     * Function takes arguments evt and ui.
     * Use ui.errorCode to get current errorCode
     * Use ui.fileId to get identifier of the file for which the event is fired(after that it can be used API function getFileInfo). NOTE: It is possible to be null in some cases: try to drop multiple files when mode is single , check maximum allowed uploading files fails or check for count of maximum allowed simultaneous files upload fails.
     * Use ui.errorMessage to get detailed error description
     * Use ui.errorType to get error type - it could be clientside or serverside
     * Use ui.serverMessage to get specific server message returned by server - if errorType is serverside
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "onError"): OnErrorEvent;
    /**
     * Defines the name of the file upload error event. Fired when error is occurred.
     * Function takes arguments evt and ui.
     * Use ui.errorCode to get current errorCode
     * Use ui.fileId to get identifier of the file for which the event is fired(after that it can be used API function getFileInfo). NOTE: It is possible to be null in some cases: try to drop multiple files when mode is single , check maximum allowed uploading files fails or check for count of maximum allowed simultaneous files upload fails.
     * Use ui.errorMessage to get detailed error description
     * Use ui.errorType to get error type - it could be clientside or serverside
     * Use ui.serverMessage to get specific server message returned by server - if errorType is serverside
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "onError", optionValue: OnErrorEvent): void;
    /**
     * It is fired when validating file extensions
     * Function takes arguments evt and ui.
     * Use ui.fileName to get the full file name
     * Use ui.fileExtension to get file extension
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "fileExtensionsValidating"): FileExtensionsValidatingEvent;
    /**
     * It is fired when validating file extensions
     * Function takes arguments evt and ui.
     * Use ui.fileName to get the full file name
     * Use ui.fileExtension to get file extension
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "fileExtensionsValidating", optionValue: FileExtensionsValidatingEvent): void;
    /**
     * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.xhr to get reference to the original XMLHttpRequest object
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from the server-side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "onXHRLoad"): OnXHRLoadEvent;
    /**
     * It is fired when event onload(of XmlHttpRequest) is fired. This event will be fired only if the browser supports HTML5 file API
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.xhr to get reference to the original XMLHttpRequest object
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for  fileName, fileSize, serverMessage(if returned from the server-side), etc.
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "onXHRLoad", optionValue: OnXHRLoadEvent): void;
    /**
     * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for the fileName, fileSize, serverMessage, etc.
     * Use ui.xhr to get reference to the original XMLHttpRequest object(if the browser supports HTML 5 file API - if not it is undefined)
     * Use ui.formData to get reference to FormData object(if the browser supports HTML5 file API) OR reference to jQuery representation of <form>
     * Use ui.owner in order to access the igUpload widget object.
     */
    igUpload(optionLiteral: 'option', optionName: "onFormDataSubmit"): OnFormDataSubmitEvent;
    /**
     * It is fired before submitting to the server the uploading file(and its additional data if any). It could be used to append additional data fields to the FormData object(if the browser supports HTML5 file API - like newest Chrome, Firefox, IE11+). If the browser does not support HTML5 file API(IE10 and older) it could be added these data fields(as hidden input fields) to the form. Use the public API function addDataFields.
     * Function takes arguments evt and ui.
     * Use ui.fileId to get unique identifier of the file
     * Use ui.fileInfo to get reference to the fileInfo object - containing information for the fileName, fileSize, serverMessage, etc.
     * Use ui.xhr to get reference to the original XMLHttpRequest object(if the browser supports HTML 5 file API - if not it is undefined)
     * Use ui.formData to get reference to FormData object(if the browser supports HTML5 file API) OR reference to jQuery representation of <form>
     * Use ui.owner in order to access the igUpload widget object.
     *
     * @optionValue New value to be set.
     */
    igUpload(optionLiteral: 'option', optionName: "onFormDataSubmit", optionValue: OnFormDataSubmitEvent): void;
    igUpload(options: IgUpload): JQuery;
    igUpload(optionLiteral: 'option', optionName: string): any;
    igUpload(optionLiteral: 'option', options: IgUpload): JQuery;
    igUpload(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igUpload(methodName: string, ...methodParams: any[]): any;
}
interface IgValidatorField {
    /**
     * Controls where the popover DOM should be attached to. This field setting is required.
     *
     * Valid values:
     * "object" A reference to the parent jQuery object
     */
    selector?: any;
    /**
     * Option for IgValidatorField
     */
    [optionName: string]: any;
}
interface ValidatingEvent {
    (event: Event, ui: ValidatingEventUIParam): void;
}
interface ValidatingEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get current value in target.
     */
    value?: any;
}
interface ValidatedEvent {
    (event: Event, ui: ValidatedEventUIParam): void;
}
interface ValidatedEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get current value in target.
     */
    value?: any;
    /**
     * Used to determine the outcome of the validation.
     */
    valid?: any;
}
interface SuccessEvent {
    (event: Event, ui: SuccessEventUIParam): void;
}
interface SuccessEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get current value in target.
     */
    value?: any;
    /**
     * Used to determine the outcome of the validation.
     */
    valid?: any;
    fieldOptions?: any;
}
interface ErrorEvent {
    (event: Event, ui: ErrorEventUIParam): void;
}
interface ErrorEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get current value in target.
     */
    value?: any;
    /**
     * Used to determine the outcome of the validation.
     */
    valid?: any;
}
interface ErrorShowingEvent {
    (event: Event, ui: ErrorShowingEventUIParam): void;
}
interface ErrorShowingEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get text of message.
     */
    message?: any;
    /**
     * Used to get reference to the target of the message.
     */
    target?: any;
}
interface ErrorHidingEvent {
    (event: Event, ui: ErrorHidingEventUIParam): void;
}
interface ErrorHidingEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get text of message.
     */
    message?: any;
    /**
     * Used to get reference to the target of the message.
     */
    target?: any;
}
interface ErrorShownEvent {
    (event: Event, ui: ErrorShownEventUIParam): void;
}
interface ErrorShownEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get text of message.
     */
    message?: any;
    /**
     * Used to get reference to the target of the message.
     */
    target?: any;
}
interface ErrorHiddenEvent {
    (event: Event, ui: ErrorHiddenEventUIParam): void;
}
interface ErrorHiddenEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get text of message.
     */
    message?: any;
    /**
     * Used to get reference to the target of the message.
     */
    target?: any;
}
interface SuccessShowingEvent {
    (event: Event, ui: SuccessShowingEventUIParam): void;
}
interface SuccessShowingEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get text of message.
     */
    message?: any;
    /**
     * Used to get reference to the target of the message.
     */
    target?: any;
}
interface SuccessHidingEvent {
    (event: Event, ui: SuccessHidingEventUIParam): void;
}
interface SuccessHidingEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get text of message.
     */
    message?: any;
    /**
     * Used to get reference to the target of the message.
     */
    target?: any;
}
interface SuccessShownEvent {
    (event: Event, ui: SuccessShownEventUIParam): void;
}
interface SuccessShownEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get text of message.
     */
    message?: any;
    /**
     * Used to get reference to the target of the message.
     */
    target?: any;
}
interface SuccessHiddenEvent {
    (event: Event, ui: SuccessHiddenEventUIParam): void;
}
interface SuccessHiddenEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get text of message.
     */
    message?: any;
    /**
     * Used to get reference to the target of the message.
     */
    target?: any;
}
interface FormValidatingEvent {
    (event: Event, ui: FormValidatingEventUIParam): void;
}
interface FormValidatingEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get reference of the event target form.
     */
    target?: any;
}
interface FormValidatedEvent {
    (event: Event, ui: FormValidatedEventUIParam): void;
}
interface FormValidatedEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get reference of the event target form.
     */
    target?: any;
    /**
     * Used to determine the outcome of the validation.
     */
    valid?: any;
}
interface FormErrorEvent {
    (event: Event, ui: FormErrorEventUIParam): void;
}
interface FormErrorEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get reference of the event target form.
     */
    target?: any;
}
interface FormSuccessEvent {
    (event: Event, ui: FormSuccessEventUIParam): void;
}
interface FormSuccessEventUIParam {
    /**
     * Used to get reference to the igValidator widget.
     */
    owner?: any;
    /**
     * Used to get reference of the event target form.
     */
    target?: any;
}
interface IgValidator {
    /**
     * Gets or sets triggering validation when value in editor was changed.
     */
    onchange?: boolean;
    /**
     * Gets or sets triggering validation when editor lost focus.
     */
    onblur?: boolean;
    /**
     * Gets or sets triggering validation when form gets onsubmit event.
     */
    onsubmit?: boolean;
    /**
     * Gets or sets option to validate if value was entered (not empty text, selected item, etc.)
     *
     * Valid values:
     * "bool" A boolean value indicating if the field is required.
     * "object" A configuration object with optional error message (e.g. required: { errorMessage: "Error!"} )
     */
    required?: any;
    /**
     * Gets or sets option to validate if value is a number. Default separators for decimals and thousands are '.' and ',' respectively.
     *
     * Valid values:
     * "bool" A boolean value indicating if the field should be a number.
     * "object" A configuration object with errorMessage, decimalSeparator and thousandsSeparator. Those properties are all optional.
     */
    number?: any;
    /**
     * Gets or sets option to validate if value is a date. This can help guide the valueRange validation.                Note: Dependat on JavaScript Date parsing which will accept a wide range of values.
     *
     * Valid values:
     * "bool" A boolean value indicating if the field should be a valid JavaScript Date or can be parsed as one.
     * "object" A configuration object with optional error message (e.g. date: { errorMessage: "Enter a valid number"} )
     */
    date?: any;
    /**
     * Gets or sets option to validate if value is an email.                Note: Dependat on JavaScript Date parsing which will accept a wide range of values.
     *
     * Valid values:
     * "bool" A boolean value indicating if the field should be an email.
     * "object" A configuration object with optional error message (e.g. email: { errorMessage: "Enter a valid email"} )
     */
    email?: any;
    /**
     * Gets or sets minimum and maximum length of text or number of selected items. Null or 0 values are ignored.
     *
     * Valid values:
     * "array" An array of two numbers, where the first value is the minimum and the second is the maximum. (e.g. lengthRange: [ 1, 10] )
     * "object" A configuration object with optional error message. Message strings can contain format items for min and max respecitively (e.g. lengthRange: { min: 6, max: 20, errorMessage: "Password must be at least {0} long and no more than {1}." } )
     */
    lengthRange?: any;
    /**
     * Gets or sets minimum and maximum values. Null values are ignored.
     *
     * Valid values:
     * "array" An array of two numbers or dates, where the first is the minimum and the second is the maximum. (e.g. valueRange: [ 1, 10] )
     * "object" A configuration object with optional error message. Message strings can contain format items for min and max respecitively (e.g. lengthRange: { min: 6, max: 20, errorMessage: "Value must be between {0} and {1}." } )
     */
    valueRange?: any;
    /**
     * Gets or sets regular expression which is used to validate value in text editor.
     *
     * Valid values:
     * "object" A RegExp object or an object with expression and errorMessage properties.
     */
    pattern?: any;
    /**
     * Gets or sets custom jQuery element, which innerHTML will be used to show validation messages. That can be SPAN, LABEL or DIV.
     */
    messageTarget?: Element;
    /**
     * Gets or sets text for error-message which overrides all possible specific error-messages.
     */
    errorMessage?: string;
    /**
     * Gets or sets text for success message. Note there is no default, so setting this message will enable showing success indications.
     */
    successMessage?: string;
    /**
     * Gets or sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and blur.
     *                 Note: This will have no effect on required fields on form submit.
     */
    threshold?: number;
    /**
     * Requires the value in this field to be the same as another input element or editor control.
     *
     * Valid values:
     * "object" A reference to the jQuery object for the target or an object with selector property and custom errorMessage.
     */
    equalTo?: any;
    /**
     * Gets or sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguement to determine and return the state of the field.
     *
     * Valid values:
     * "object" A configuration object with method property being the function and optional error message.
     */
    custom?: any;
    /**
     * List of field items describing each field with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
     * Accepted options are also inherited from the global control configuration if not set.
     */
    fields?: IgValidatorField[];
    /**
     * Options for the igNotifier used to show error messages.
     */
    notificationOptions?: any;
    /**
     * Option to show an asterisks indication next to required fields.
     *     Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
     */
    requiredIndication?: boolean;
    /**
     * Option to show a label indication next to optional fields.
     *     Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
     */
    optionalIndication?: boolean;
    /**
     * Event which is raised on validation before default validation logic is applied.
     *                 Return false in order to cancel the event and consider the field valid.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    validating?: ValidatingEvent;
    /**
     * Event which is raised after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 ui.rule is populated with the name of the rule that failed validation, if any.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    validated?: ValidatedEvent;
    /**
     * Event raised for valid field  after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 Use ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    success?: SuccessEvent;
    /**
     * Event raised for invalid field after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 ui.rule is populated with the name of the rule that failed validation, if any.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    error?: ErrorEvent;
    /**
     * Event which is raised before error message is displayed.
     *                 Return false in order to prevent error message display.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    errorShowing?: ErrorShowingEvent;
    /**
     * Event which is raised before error message is hidden.
     *                 Return false in order to keep error message displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    errorHiding?: ErrorHidingEvent;
    /**
     * Event which is raised after error message was displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    errorShown?: ErrorShownEvent;
    /**
     * Event which is raised after error message was hidden.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    errorHidden?: ErrorHiddenEvent;
    /**
     * Event which is raised before success message is displayed.
     *                 Return false in order to prevent success message display.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    successShowing?: SuccessShowingEvent;
    /**
     * Event which is raised before success message is hidden.
     *                 Return false in order to keep success message displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    successHiding?: SuccessHidingEvent;
    /**
     * Event which is raised after success message was displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    successShown?: SuccessShownEvent;
    /**
     * Event which is raised after success message was hidden.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    successHidden?: SuccessHiddenEvent;
    /**
     * Event triggered on Validator instance level before handling a form submit event.
     *                 Return false to cancel to skip validating and potentially allow the submit if no other other validators return erros.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     */
    formValidating?: FormValidatingEvent;
    /**
     * Event triggered on Validator instance level after validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     *                 Use ui.valid to determine the outcome of the validation.
     */
    formValidated?: FormValidatedEvent;
    /**
     * Event triggered on Validator instance level after failed validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     */
    formError?: FormErrorEvent;
    /**
     * Event triggered on Validator instance level after successful validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     */
    formSuccess?: FormSuccessEvent;
    /**
     * Option for igValidator
     */
    [optionName: string]: any;
}
interface IgValidatorMethods {
    /**
     * Trigger validation and show errors for invalid fields.
     *
     * @param field     Optional field object to check. Only has effect with fields collection and skips other fields.
     */
    validate(field?: Object): boolean;
    /**
     * Trigger validation but do not display error messages.
     *
     * @param field Optional field object to check (skips other fields, only works with fields collection).
     */
    isValid(field?: Object): boolean;
    /**
     * Hide any possible message (either messageTarget or igNotifier).
     * Note: When the validator has a fields colleciton, not passing a field will hide messages on all fields.
     *
     * @param field Optional field to hide message for.
     */
    hide(field?: Object): void;
    /**
     * Gets all current error messages for invalid field(s). Note that this method does not valdiate and states and messages are only updated on validation, so
     * this can be used on formValidated event or after validate/isValid method calls.
     *
     * @param field Selector or zero-based index for a single field to get error message for.
     */
    getErrorMessages(field?: Object): any[];
    /**
     * Check for currently displayed message(s). Takes an optional field.
     * Note: When the validator has a fields colleciton, not passing a field will return a cumulative true even if just one field has visible message.
     *
     * @param field Selector or zero-based index for a single field to get error message for.
     */
    isMessageDisplayed(field?: Object): any[];
    /**
     * Gets the notifier for the igValidator or for a single filed.
     *
     * @param field Optional field object, its selector or zero-based index to get notifier for.
     */
    notifier(field?: Object): Object;
    /**
     * Adds an new input to the fields collection and initializes it with the validator. Note: Additional fields are only accepted if the validator has been created with the collection.
     *
     * @param field An object with the field selector and options.
     */
    addField(field: Object): Object;
    /**
     * Removes an input from the fields collection.
     *
     * @param field The field object to remove, its zero-based index or selector.
     */
    removeField(field: Object): Object;
    /**
     * Updates a field in the validator collection. Used to reinitialize field in case a control has been created after the validator or to pass in new options.
     *
     * @param field The field object to update, its zero-based index or selector.
     * @param fieldOptions New options to apply to the fields.
     */
    updateField(field: Object, fieldOptions?: Object): Object;
    /**
     * Destroys the validator widget.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igValidator"): IgValidatorMethods;
}
interface JQuery {
    igValidator(methodName: "validate", field?: Object): boolean;
    igValidator(methodName: "isValid", field?: Object): boolean;
    igValidator(methodName: "hide", field?: Object): void;
    igValidator(methodName: "getErrorMessages", field?: Object): any[];
    igValidator(methodName: "isMessageDisplayed", field?: Object): any[];
    igValidator(methodName: "notifier", field?: Object): Object;
    igValidator(methodName: "addField", field: Object): Object;
    igValidator(methodName: "removeField", field: Object): Object;
    igValidator(methodName: "updateField", field: Object, fieldOptions?: Object): Object;
    igValidator(methodName: "destroy"): void;
    /**
     * Gets  triggering validation when value in editor was changed.
     */
    igValidator(optionLiteral: 'option', optionName: "onchange"): boolean;
    /**
     * Sets triggering validation when value in editor was changed.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "onchange", optionValue: boolean): void;
    /**
     * Gets  triggering validation when editor lost focus.
     */
    igValidator(optionLiteral: 'option', optionName: "onblur"): boolean;
    /**
     * Sets triggering validation when editor lost focus.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "onblur", optionValue: boolean): void;
    /**
     * Gets  triggering validation when form gets onsubmit event.
     */
    igValidator(optionLiteral: 'option', optionName: "onsubmit"): boolean;
    /**
     * Sets triggering validation when form gets onsubmit event.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "onsubmit", optionValue: boolean): void;
    /**
     * Gets  option to validate if value was entered (not empty text, selected item, etc.)
     */
    igValidator(optionLiteral: 'option', optionName: "required"): any;
    /**
     * Sets option to validate if value was entered (not empty text, selected item, etc.)
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "required", optionValue: any): void;
    /**
     * Gets  option to validate if value is a number. Default separators for decimals and thousands are '.' and ',' respectively.
     */
    igValidator(optionLiteral: 'option', optionName: "number"): any;
    /**
     * Sets option to validate if value is a number. Default separators for decimals and thousands are '.' and ',' respectively.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "number", optionValue: any): void;
    /**
     * Gets  option to validate if value is a date. This can help guide the valueRange validation.                Note: Dependat on JavaScript Date parsing which will accept a wide range of values.
     */
    igValidator(optionLiteral: 'option', optionName: "date"): any;
    /**
     * Sets option to validate if value is a date. This can help guide the valueRange validation.                Note: Dependat on JavaScript Date parsing which will accept a wide range of values.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "date", optionValue: any): void;
    /**
     * Gets  option to validate if value is an email.                Note: Dependat on JavaScript Date parsing which will accept a wide range of values.
     */
    igValidator(optionLiteral: 'option', optionName: "email"): any;
    /**
     * Sets option to validate if value is an email.                Note: Dependat on JavaScript Date parsing which will accept a wide range of values.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "email", optionValue: any): void;
    /**
     * Gets  minimum and maximum length of text or number of selected items. Null or 0 values are ignored.
     */
    igValidator(optionLiteral: 'option', optionName: "lengthRange"): any;
    /**
     * Sets minimum and maximum length of text or number of selected items. Null or 0 values are ignored.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "lengthRange", optionValue: any): void;
    /**
     * Gets  minimum and maximum values. Null values are ignored.
     */
    igValidator(optionLiteral: 'option', optionName: "valueRange"): any;
    /**
     * Sets minimum and maximum values. Null values are ignored.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "valueRange", optionValue: any): void;
    /**
     * Gets  regular expression which is used to validate value in text editor.
     */
    igValidator(optionLiteral: 'option', optionName: "pattern"): any;
    /**
     * Sets regular expression which is used to validate value in text editor.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "pattern", optionValue: any): void;
    /**
     * Gets  custom jQuery element, which innerHTML will be used to show validation messages. That can be SPAN, LABEL or DIV.
     */
    igValidator(optionLiteral: 'option', optionName: "messageTarget"): Element;
    /**
     * Sets custom jQuery element, which innerHTML will be used to show validation messages. That can be SPAN, LABEL or DIV.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "messageTarget", optionValue: Element): void;
    /**
     * Gets  text for error-message which overrides all possible specific error-messages.
     */
    igValidator(optionLiteral: 'option', optionName: "errorMessage"): string;
    /**
     * Sets text for error-message which overrides all possible specific error-messages.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "errorMessage", optionValue: string): void;
    /**
     * Gets  text for success message. Note there is no default, so setting this message will enable showing success indications.
     */
    igValidator(optionLiteral: 'option', optionName: "successMessage"): string;
    /**
     * Sets text for success message. Note there is no default, so setting this message will enable showing success indications.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "successMessage", optionValue: string): void;
    /**
     * Gets  validation minimum input length. Validation won't be triggered for input before that value is reached on change and blur.
     *                 Note: This will have no effect on required fields on form submit.
     */
    igValidator(optionLiteral: 'option', optionName: "threshold"): number;
    /**
     * Sets validation minimum input length. Validation won't be triggered for input before that value is reached on change and blur.
     *                 Note: This will have no effect on required fields on form submit.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "threshold", optionValue: number): void;
    /**
     * Requires the value in this field to be the same as another input element or editor control.
     */
    igValidator(optionLiteral: 'option', optionName: "equalTo"): any;
    /**
     * Requires the value in this field to be the same as another input element or editor control.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "equalTo", optionValue: any): void;
    /**
     * Gets  a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguement to determine and return the state of the field.
     */
    igValidator(optionLiteral: 'option', optionName: "custom"): any;
    /**
     * Sets a custom function to perform validation. Use 'this' to reference the calling validator and the value and optional field settings arguement to determine and return the state of the field.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "custom", optionValue: any): void;
    /**
     * List of field items describing each field with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
     * Accepted options are also inherited from the global control configuration if not set.
     */
    igValidator(optionLiteral: 'option', optionName: "fields"): IgValidatorField[];
    /**
     * List of field items describing each field with validation options and a required selector. Fields can contain any of the validation rules and triggers but not other fields or event handlers.
     * Accepted options are also inherited from the global control configuration if not set.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "fields", optionValue: IgValidatorField[]): void;
    /**
     * Options for the igNotifier used to show error messages.
     */
    igValidator(optionLiteral: 'option', optionName: "notificationOptions"): any;
    /**
     * Options for the igNotifier used to show error messages.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "notificationOptions", optionValue: any): void;
    /**
     * Option to show an asterisks indication next to required fields.
     *     Note: Indicators are not supported on grouped controls such as checkbox or radio button  and the igRating control.
     */
    igValidator(optionLiteral: 'option', optionName: "requiredIndication"): boolean;
    /**
     * Option to show an asterisks indication next to required fields.
     *     Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "requiredIndication", optionValue: boolean): void;
    /**
     * Option to show a label indication next to optional fields.
     *     Note: Indicators are not supported on grouped controls such as checkbox or radio button  and the igRating control.
     */
    igValidator(optionLiteral: 'option', optionName: "optionalIndication"): boolean;
    /**
     * Option to show a label indication next to optional fields.
     *     Note: Indicators are not supported on grouped controls such as checkbox or radio button sets and the igRating control.
     *
     * @optionValue New value to be set.
     */
    igValidator(optionLiteral: 'option', optionName: "optionalIndication", optionValue: boolean): void;
    /**
     * Event which is raised on validation before default validation logic is applied.
     *                 Return false in order to cancel the event and consider the field valid.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "validating"): ValidatingEvent;
    /**
     * Event which is raised on validation before default validation logic is applied.
     *                 Return false in order to cancel the event and consider the field valid.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "validating", optionValue: ValidatingEvent): void;
    /**
     * Event which is raised after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 ui.rule is populated with the name of the rule that failed validation, if any.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "validated"): ValidatedEvent;
    /**
     * Event which is raised after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 ui.rule is populated with the name of the rule that failed validation, if any.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "validated", optionValue: ValidatedEvent): void;
    /**
     * Event raised for valid field  after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 Use ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "success"): SuccessEvent;
    /**
     * Event raised for valid field  after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 Use ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "success", optionValue: SuccessEvent): void;
    /**
     * Event raised for invalid field after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 ui.rule is populated with the name of the rule that failed validation, if any.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "error"): ErrorEvent;
    /**
     * Event raised for invalid field after value was validated but before any action takes effect.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.value to get current value in target.
     *                 Use ui.valid to determine the outcome of the validation.
     *                 ui.rule is populated with the name of the rule that failed validation, if any.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "error", optionValue: ErrorEvent): void;
    /**
     * Event which is raised before error message is displayed.
     *                 Return false in order to prevent error message display.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "errorShowing"): ErrorShowingEvent;
    /**
     * Event which is raised before error message is displayed.
     *                 Return false in order to prevent error message display.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "errorShowing", optionValue: ErrorShowingEvent): void;
    /**
     * Event which is raised before error message is hidden.
     *                 Return false in order to keep error message displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "errorHiding"): ErrorHidingEvent;
    /**
     * Event which is raised before error message is hidden.
     *                 Return false in order to keep error message displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "errorHiding", optionValue: ErrorHidingEvent): void;
    /**
     * Event which is raised after error message was displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "errorShown"): ErrorShownEvent;
    /**
     * Event which is raised after error message was displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "errorShown", optionValue: ErrorShownEvent): void;
    /**
     * Event which is raised after error message was hidden.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "errorHidden"): ErrorHiddenEvent;
    /**
     * Event which is raised after error message was hidden.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "errorHidden", optionValue: ErrorHiddenEvent): void;
    /**
     * Event which is raised before success message is displayed.
     *                 Return false in order to prevent success message display.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "successShowing"): SuccessShowingEvent;
    /**
     * Event which is raised before success message is displayed.
     *                 Return false in order to prevent success message display.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "successShowing", optionValue: SuccessShowingEvent): void;
    /**
     * Event which is raised before success message is hidden.
     *                 Return false in order to keep success message displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "successHiding"): SuccessHidingEvent;
    /**
     * Event which is raised before success message is hidden.
     *                 Return false in order to keep success message displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "successHiding", optionValue: SuccessHidingEvent): void;
    /**
     * Event which is raised after success message was displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "successShown"): SuccessShownEvent;
    /**
     * Event which is raised after success message was displayed.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "successShown", optionValue: SuccessShownEvent): void;
    /**
     * Event which is raised after success message was hidden.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     */
    igValidator(optionLiteral: 'option', optionName: "successHidden"): SuccessHiddenEvent;
    /**
     * Event which is raised after success message was hidden.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.message to get text of message.
     *                 Use ui.target to get reference to the target of the message.
     *                 ui.fieldOptions is populated with options for the specific field in the collection or null.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "successHidden", optionValue: SuccessHiddenEvent): void;
    /**
     * Event triggered on Validator instance level before handling a form submit event.
     *                 Return false to cancel to skip validating and potentially allow the submit if no other other validators return erros.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     */
    igValidator(optionLiteral: 'option', optionName: "formValidating"): FormValidatingEvent;
    /**
     * Event triggered on Validator instance level before handling a form submit event.
     *                 Return false to cancel to skip validating and potentially allow the submit if no other other validators return erros.
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "formValidating", optionValue: FormValidatingEvent): void;
    /**
     * Event triggered on Validator instance level after validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     *                 Use ui.valid to determine the outcome of the validation.
     */
    igValidator(optionLiteral: 'option', optionName: "formValidated"): FormValidatedEvent;
    /**
     * Event triggered on Validator instance level after validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     *                 Use ui.valid to determine the outcome of the validation.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "formValidated", optionValue: FormValidatedEvent): void;
    /**
     * Event triggered on Validator instance level after failed validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     */
    igValidator(optionLiteral: 'option', optionName: "formError"): FormErrorEvent;
    /**
     * Event triggered on Validator instance level after failed validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "formError", optionValue: FormErrorEvent): void;
    /**
     * Event triggered on Validator instance level after successful validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     */
    igValidator(optionLiteral: 'option', optionName: "formSuccess"): FormSuccessEvent;
    /**
     * Event triggered on Validator instance level after successful validation on form submit event
     *                 Function takes arguments evt and ui.
     *                 Use ui.owner to get reference to the igValidator widget.
     *                 Use ui.target to get reference of the event target form.
     *
     * @optionValue Define event handler function.
     */
    igValidator(optionLiteral: 'option', optionName: "formSuccess", optionValue: FormSuccessEvent): void;
    igValidator(options: IgValidator): JQuery;
    igValidator(optionLiteral: 'option', optionName: string): any;
    igValidator(optionLiteral: 'option', options: IgValidator): JQuery;
    igValidator(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igValidator(methodName: string, ...methodParams: any[]): any;
}
interface IgVideoPlayerBookmark {
    /**
     * Get or set where the bookmark will be positioned. Should be between 0 and movie duration in seconds.
     */
    time?: number;
    /**
     * Get or set bookmark title. It is shown as tooltip on hover.
     */
    title?: string;
    /**
     * Get or set whether the bookmark is disabled or not.
     */
    disabled?: boolean;
    /**
     * Option for IgVideoPlayerBookmark
     */
    [optionName: string]: any;
}
interface IgVideoPlayerRelatedVideo {
    /**
     * Get or set the URL of the related video image.
     */
    imageUrl?: string;
    /**
     * Get or set the title of the video.
     */
    title?: string;
    /**
     * Get or set the width of the related video image.
     */
    width?: number;
    /**
     * Get or set the height of the related video image.
     */
    height?: number;
    /**
     * Get or set a link to a page that will play the related video. It will be opened in a new window. If there are sources also, the link property has a priority.
     */
    link?: string;
    /**
     * Get or set the sources of the related video.
     */
    sources?: any[];
    /**
     * Get or set custom CSS class to be applied on the related video element.
     */
    css?: string;
    /**
     * Option for IgVideoPlayerRelatedVideo
     */
    [optionName: string]: any;
}
interface IgVideoPlayerBanner {
    /**
     * Get or set the banner image url.
     */
    imageUrl?: string;
    /**
     * Get or set an array of numbers. Each number specifies on which second in the movie the banner will pop.
     */
    times?: any[];
    /**
     * Get or set whether the user will be able to close the banner or not.
     */
    closeBanner?: boolean;
    /**
     * Get or set whether to apply animation effects when showing or hiding the banner. If set to true, the animation is played for banner.duration in milliseconds.
     */
    animate?: boolean;
    /**
     * Get or set whether the banner is visible or not.
     */
    visible?: boolean;
    /**
     * Get or set the banner animation duration.
     */
    duration?: number;
    /**
     * Get or set whether to automatically hide the banner. If set to true, the banner is hidden after banner.hidedelay in milliseconds.
     */
    autohide?: boolean;
    /**
     * Get or set the banner autohide delay in milliseconds. It is taken into account only if the banner.autohide option is set to true.
     */
    hidedelay?: number;
    /**
     * Get or set the banner link that will open in new window.
     */
    link?: string;
    /**
     * Get or set the banner width
     */
    width?: number;
    /**
     * Get or set the banner height
     */
    height?: number;
    /**
     * Get or set the banner specific css class, that will be applied on the banner grid.
     */
    css?: string;
    /**
     * Option for IgVideoPlayerBanner
     */
    [optionName: string]: any;
}
interface IgVideoPlayerCommercialsLinkedCommercial {
    /**
     * Get or set the sources of the linked commercial video.
     */
    sources?: any[];
    /**
     * Get or set the second in the video at which the linked commercial should play.
     */
    startTime?: number;
    /**
     * Get or set the link to open on linked commercial click.
     */
    link?: string;
    /**
     * Get or set the tooltip for the linked commercial bookmark.
     */
    title?: string;
    /**
     * Option for IgVideoPlayerCommercialsLinkedCommercial
     */
    [optionName: string]: any;
}
interface IgVideoPlayerCommercialsEmbeddedCommercial {
    /**
     * Get or set the start second of the embedded commercial.
     */
    startTime?: number;
    /**
     * Get or set the end second of the embedded commercial.
     */
    endTime?: number;
    /**
     * Get or set the sponsored link of the embedded commercial.
     */
    link?: string;
    /**
     * Get or set the tooltip for the bookmark of the embedded commercial.
     */
    title?: string;
    /**
     * Option for IgVideoPlayerCommercialsEmbeddedCommercial
     */
    [optionName: string]: any;
}
interface IgVideoPlayerCommercialsAdMessage {
    /**
     * Get or set whether to apply an animation effect when showing or hiding the ad message. If set to true, the animation is played for commercial.adMessage.animationDuration in milliseconds.
     */
    animate?: boolean;
    /**
     * Get or set the ad message auto hide of the commercial.
     */
    autoHide?: boolean;
    /**
     * Get or set the ad message hide delay.
     */
    hideDelay?: number;
    /**
     * Get or set the ad message animation duration of the commercial.
     */
    animationDuration?: number;
    /**
     * Option for IgVideoPlayerCommercialsAdMessage
     */
    [optionName: string]: any;
}
interface IgVideoPlayerCommercials {
    /**
     * Get or set an array of linked commercial objects. A linked commercial is a separate video file that will be played in the specified position of the original movie clip by the startTime property. This feature is useful if you have frequently changing outside commercial sources.
     */
    linkedCommercials?: IgVideoPlayerCommercialsLinkedCommercial[];
    /**
     * Get or set an array of embedded commercials objects. An embedded commercial is an ad that is contained in the original video file. It is suitable when you want to mark some sections of the video as commercials.
     */
    embeddedCommercials?: IgVideoPlayerCommercialsEmbeddedCommercial[];
    /**
     * Get or set whether the commercials will play againg during the repetitive video plays.
     */
    alwaysPlayCommercials?: boolean;
    /**
     * Get or set whether to show commercial locations or not.
     */
    showBookmarks?: boolean;
    /**
     * Customizes the ad message settings of the commercial. Ad message shows the duration of the commercial and pops up when the commercial starts playing.
     */
    adMessage?: IgVideoPlayerCommercialsAdMessage;
    /**
     * Option for IgVideoPlayerCommercials
     */
    [optionName: string]: any;
}
interface EndedEvent {
    (event: Event, ui: EndedEventUIParam): void;
}
interface EndedEventUIParam {
    /**
     * Used to get the url of the playing video.
     */
    source?: any;
    /**
     * Used to get the video duration in seconds.
     */
    duration?: any;
}
interface PlayingEvent {
    (event: Event, ui: PlayingEventUIParam): void;
}
interface PlayingEventUIParam {
    /**
     * Used to get the url of the playing video.
     */
    source?: any;
    /**
     * Used to get the video duration in seconds.
     */
    duration?: any;
}
interface PausedEvent {
    (event: Event, ui: PausedEventUIParam): void;
}
interface PausedEventUIParam {
    /**
     * Used to get the url of the playing video.
     */
    source?: any;
    /**
     * Used to get the video duration in seconds.
     */
    duration?: any;
}
interface BufferingEvent {
    (event: Event, ui: BufferingEventUIParam): void;
}
interface BufferingEventUIParam {
    /**
     * Used to get the url of the playing video.
     */
    source?: any;
    /**
     * Used to get buffered percentage.
     */
    buffered?: any;
}
interface ProgressEvent {
    (event: Event, ui: ProgressEventUIParam): void;
}
interface ProgressEventUIParam {
    /**
     * Used to get the url of the playing video.
     */
    source?: any;
    /**
     * Used to get current position in the video at which the event was fired.
     */
    currentTime?: any;
    /**
     * Used to get the video duration in seconds.
     */
    duration?: any;
}
interface WaitingEvent {
    (event: Event, ui: WaitingEventUIParam): void;
}
interface WaitingEventUIParam {
    /**
     * Used to get the url of the playing video.
     */
    source?: any;
    /**
     * Used to get current position in the video at which the event was fired.
     */
    currentTime?: any;
    /**
     * Used to get the video duration in seconds.
     */
    duration?: any;
}
interface EnterFullScreenEvent {
    (event: Event, ui: EnterFullScreenEventUIParam): void;
}
interface EnterFullScreenEventUIParam {
    /**
     * Used to get the url of the playing video.
     */
    source?: any;
}
interface ExitFullScreenEvent {
    (event: Event, ui: ExitFullScreenEventUIParam): void;
}
interface ExitFullScreenEventUIParam {
    /**
     * Used to get the url of the playing video.
     */
    source?: any;
}
interface RelatedVideoClickEvent {
    (event: Event, ui: RelatedVideoClickEventUIParam): void;
}
interface RelatedVideoClickEventUIParam {
    /**
     * Used to get the relatedVideo object from the relatedVideos array.
     */
    relatedVideo?: any;
    /**
     * Used to get the relatedVideo html element in the DOM.
     */
    relatedVideoElement?: any;
}
interface BannerVisibleEvent {
    (event: Event, ui: BannerVisibleEventUIParam): void;
}
interface BannerVisibleEventUIParam {
    /**
     * Used to get the banner index in the banners array.
     */
    index?: any;
    /**
     * Used to get the banner object from the banners array.
     */
    banner?: any;
    /**
     * Used to get the banner html element in the DOM.
     */
    bannerElement?: any;
}
interface BannerHiddenEvent {
    (event: Event, ui: BannerHiddenEventUIParam): void;
}
interface BannerHiddenEventUIParam {
    /**
     * Used to get the banner index in the banners array.
     */
    index?: any;
    /**
     * Used to get the banner object from the banners array.
     */
    banner?: any;
    /**
     * Used to get the banner html element in the DOM.
     */
    bannerElement?: any;
}
interface BannerClickEvent {
    (event: Event, ui: BannerClickEventUIParam): void;
}
interface BannerClickEventUIParam {
    /**
     * Used to get the banner html element in the DOM.
     */
    bannerElement?: any;
}
interface IgVideoPlayer {
    /**
     * Get or set a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
     */
    sources?: any[];
    /**
     * Get or set the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
     */
    width?: number;
    /**
     * Get or set the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
     */
    height?: number;
    /**
     * Get or set a URL to an image to show, when no video data is available.
     */
    posterUrl?: string;
    /**
     * Get or set whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
     */
    preload?: boolean;
    /**
     * Get or set whether the video should start playing immediately after the control is loaded.
     */
    autoplay?: boolean;
    /**
     * Get or set whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
     */
    autohide?: boolean;
    /**
     * Get or set volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
     */
    volumeAutohideDelay?: number;
    /**
     * Get or set the center big button hide delay.
     */
    centerButtonHideDelay?: number;
    /**
     * Get or set whether the video to start again after it has ended.
     */
    loop?: boolean;
    /**
     * Get or set whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls.
     */
    browserControls?: boolean;
    /**
     * Get or set whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just sets 100% width and height to the control.
     */
    fullscreen?: boolean;
    /**
     * Get or set the video volume. It can be between 0.0 and 1.0.
     */
    volume?: number;
    /**
     * Get or set whether the video volume is muted.
     */
    muted?: boolean;
    /**
     * Get or set video title.
     */
    title?: string;
    /**
     * Get or set whether the control seek tool tip will be shown when hovering the video progress bar.
     */
    showSeekTime?: boolean;
    /**
     * Get or set the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
     */
    progressLabelFormat?: string;
    /**
     * Get or set an array of bookmarks that will be displayed in the video player control.
     */
    bookmarks?: IgVideoPlayerBookmark[];
    /**
     * Get or set an array of related videos that will be displayed when video playback has ended.
     */
    relatedVideos?: IgVideoPlayerRelatedVideo[];
    /**
     * Get or set an array of banner objects that will show the banners when the video clip is played.
     */
    banners?: IgVideoPlayerBanner[];
    /**
     * Get or set an array of commercials objects that will be displayed when the video is playing.
     */
    commercials?: IgVideoPlayerCommercials;
    /**
     * Occurs when video has ended.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     */
    ended?: EndedEvent;
    /**
     * Occurs when video gets playing.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     */
    playing?: PlayingEvent;
    /**
     * Occurs when video is paused.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     */
    paused?: PausedEvent;
    /**
     * Occurs when a chunk of data is buffered.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.buffered to get buffered percentage.
     */
    buffering?: BufferingEvent;
    /**
     * Occurs when video has advanced the playback position.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.currentTime to get current position in the video at which the event was fired.
     * Use ui.duration to get the video duration in seconds.
     */
    progress?: ProgressEvent;
    /**
     * Occurs when igVideoPlayer is waiting for data from the server.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.currentTime to get current position in the video at which the event was fired.
     * Use ui.duration to get the video duration in seconds.
     */
    waiting?: WaitingEvent;
    /**
     * Occurs when the bookmark is hit.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.bookmark to get the bookmark object from the bookmarks array.
     * Use ui.bookmarkElement to get the html element in the DOM.
     */
    bookmarkHit?: BookmarkHitEvent;
    /**
     * Occurs when the bookmark is clicked.
     * Function takes arguments evt and ui.
     * Use ui.bookmark to get the bookmark object from the bookmarks array.
     * Use ui.bookmarkElement to get the html element in the DOM.
     */
    bookmarkClick?: BookmarkClickEvent;
    /**
     * Occurs when igVideoPlayer enters full screen mode.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     */
    enterFullScreen?: EnterFullScreenEvent;
    /**
     * Occurs when igVideoPlayer exits full screen mode.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     */
    exitFullScreen?: ExitFullScreenEvent;
    /**
     * Occurs when related video is clicked.
     * Function takes arguments evt and ui.
     * Use ui.relatedVideo to get the relatedVideo object from the relatedVideos array.
     * Use ui.relatedVideoElement to get the relatedVideo html element in the DOM.
     */
    relatedVideoClick?: RelatedVideoClickEvent;
    /**
     * Defines the name of the player banner visible event. Fired when the banner has been displayed.
     * Function takes arguments evt and ui.
     * Use ui.index to get the banner index in the banners array.
     * Use ui.banner to get the banner object from the banners array.
     * Use ui.bannerElement to get the banner html element in the DOM.
     */
    bannerVisible?: BannerVisibleEvent;
    /**
     * Occurs when the banner is hidden.
     * Function takes arguments evt and ui.
     * Use ui.index to get the banner index in the banners array.
     * Use ui.banner to get the banner object from the banners array.
     * Use ui.bannerElement to get the banner html element in the DOM.
     */
    bannerHidden?: BannerHiddenEvent;
    /**
     * Occurs when the banner is clicked.
     * Function takes arguments evt and ui.
     * Use ui.bannerElement to get the banner html element in the DOM.
     */
    bannerClick?: BannerClickEvent;
    /**
     * Occurs when browser does not support HTML 5 video.
     */
    browserNotSupported?: BrowserNotSupportedEvent;
    /**
     * Option for igVideoPlayer
     */
    [optionName: string]: any;
}
interface IgVideoPlayerMethods {
    /**
     * Returns the element on which the widget was instantiated
     */
    widget(): void;
    /**
     * Hide the add message if shown.
     */
    hideAdMessage(): void;
    /**
     * Play a linked commercial for this video.
     *
     * @param commercial    Specify the linked commercial to play.
     */
    playCommercial(commercial: Object): void;
    /**
     * Shows the ad banner, if there is such.
     *
     * @param index    Specify the index of the banner from the banners array.
     */
    showBanner(index: number): void;
    /**
     * Hide the ad banner, if there is such.
     *
     * @param index    Specify the index of the banner from the banners array.
     */
    hideBanner(index: number): void;
    /**
     * Resets the commercials, to be shown again.
     */
    resetCommercialsShow(): void;
    /**
     * Toggle control play state. If video is playing it will pause, if video is paused it will play.
     */
    togglePlay(): void;
    /**
     * Start playing current loaded video if any.
     */
    play(): void;
    /**
     * Pause the currently playing video if any.
     */
    pause(): void;
    /**
     * Get or set the current time of the playing video.
     *
     * @param val    Specify the playback position in seconds to navigate to.
     */
    currentTime(val: number): number;
    /**
     * Get a screenshot of the current video frame. It returns a canvas object that you can position and show on the page. This depends on the browser support for canvas.
     *
     * @param scaleFactor    Specify scale factor between 0 and 1.
     */
    screenshot(scaleFactor?: number): Object;
    /**
     * Get whether the current browser supports video tag.
     */
    supportsVideo(): boolean;
    /**
     * Get whether the current browser supports H.264 codec.
     */
    supportsH264BaselineVideo(): boolean;
    /**
     * Get whether the current browser supports Theora codec.
     */
    supportsOggTheoraVideo(): boolean;
    /**
     * Get whether the current browser supports WEBM codec.
     */
    supportsWebmVideo(): boolean;
    /**
     * Get whether the current played video is paused.
     */
    paused(): boolean;
    /**
     * Get whether the current played video has ended.
     */
    ended(): boolean;
    /**
     * Get the current duration of the played video. It may be NaN if duration is still not loaded or the video is a live stream.
     */
    duration(): number;
    /**
     * Get whether the player is seeking to find the new playback position specified.
     */
    seeking(): boolean;
    /**
     * Destroys the widget.
     */
    destroy(): void;
}
interface JQuery {
    data(propertyName: "igVideoPlayer"): IgVideoPlayerMethods;
}
interface JQuery {
    igVideoPlayer(methodName: "widget"): void;
    igVideoPlayer(methodName: "hideAdMessage"): void;
    igVideoPlayer(methodName: "playCommercial", commercial: Object): void;
    igVideoPlayer(methodName: "showBanner", index: number): void;
    igVideoPlayer(methodName: "hideBanner", index: number): void;
    igVideoPlayer(methodName: "resetCommercialsShow"): void;
    igVideoPlayer(methodName: "togglePlay"): void;
    igVideoPlayer(methodName: "play"): void;
    igVideoPlayer(methodName: "pause"): void;
    igVideoPlayer(methodName: "currentTime", val: number): number;
    igVideoPlayer(methodName: "screenshot", scaleFactor?: number): Object;
    igVideoPlayer(methodName: "supportsVideo"): boolean;
    igVideoPlayer(methodName: "supportsH264BaselineVideo"): boolean;
    igVideoPlayer(methodName: "supportsOggTheoraVideo"): boolean;
    igVideoPlayer(methodName: "supportsWebmVideo"): boolean;
    igVideoPlayer(methodName: "paused"): boolean;
    igVideoPlayer(methodName: "ended"): boolean;
    igVideoPlayer(methodName: "duration"): number;
    igVideoPlayer(methodName: "seeking"): boolean;
    igVideoPlayer(methodName: "destroy"): void;
    /**
     * Get or set a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "sources"): any[];
    /**
     * Get or set a list of video sources to choose from. Best coded/format is automatically detected by the control. Supported types are depending on the browser and could be one of the following mov, mp4, webm, ogg.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "sources", optionValue: any[]): void;
    /**
     * Get or set the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "width"): number;
    /**
     * Get or set the width of the control. By default null will stretch the control to fit data, if no other widths are defined.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "width", optionValue: number): void;
    /**
     * Get or set the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "height"): number;
    /**
     * Get or set the height of the control. By default null will stretch the control to fit data, if no other heights are defined.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "height", optionValue: number): void;
    /**
     * Get or set a URL to an image to show, when no video data is available.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "posterUrl"): string;
    /**
     * Get or set a URL to an image to show, when no video data is available.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "posterUrl", optionValue: string): void;
    /**
     * Get or set whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "preload"): boolean;
    /**
     * Get or set whether to preload load initial data for duration of video. If true it may start buffering the video, but this highly depends on the specific browser implementation.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "preload", optionValue: boolean): void;
    /**
     * Get or set whether the video should start playing immediately after the control is loaded.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "autoplay"): boolean;
    /**
     * Get or set whether the video should start playing immediately after the control is loaded.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "autoplay", optionValue: boolean): void;
    /**
     * Get or set whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "autohide"): boolean;
    /**
     * Get or set whether player controls will auto hide when video is not hovered. This is applicable only when Infragistics playback controls are used.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "autohide", optionValue: boolean): void;
    /**
     * Get or set volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "volumeAutohideDelay"): number;
    /**
     * Get or set volume slider auto hide delay. This is applicable only when Infragistics playback controls are used.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "volumeAutohideDelay", optionValue: number): void;
    /**
     * Get or set the center big button hide delay.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "centerButtonHideDelay"): number;
    /**
     * Get or set the center big button hide delay.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "centerButtonHideDelay", optionValue: number): void;
    /**
     * Get or set whether the video to start again after it has ended.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "loop"): boolean;
    /**
     * Get or set whether the video to start again after it has ended.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "loop", optionValue: boolean): void;
    /**
     * Get or set whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "browserControls"): boolean;
    /**
     * Get or set whether if you want to use the built in browser controls. By default player uses Infragistics playback controls. Note that you may have different look and feel across different browsers if you use the built in browser controls.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "browserControls", optionValue: boolean): void;
    /**
     * Get or set whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just  100% width and height to the control.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "fullscreen"): boolean;
    /**
     * Get or set whether the video player to be in full screen or not. This is not a pure full screen, because browsers do not allow that. It just sets 100% width and height to the control.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "fullscreen", optionValue: boolean): void;
    /**
     * Get or set the video volume. It can be between 0.0 and 1.0.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "volume"): number;
    /**
     * Get or set the video volume. It can be between 0.0 and 1.0.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "volume", optionValue: number): void;
    /**
     * Get or set whether the video volume is muted.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "muted"): boolean;
    /**
     * Get or set whether the video volume is muted.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "muted", optionValue: boolean): void;
    /**
     * Get or set video title.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "title"): string;
    /**
     * Get or set video title.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "title", optionValue: string): void;
    /**
     * Get or set whether the control seek tool tip will be shown when hovering the video progress bar.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "showSeekTime"): boolean;
    /**
     * Get or set whether the control seek tool tip will be shown when hovering the video progress bar.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "showSeekTime", optionValue: boolean): void;
    /**
     * Get or set the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "progressLabelFormat"): string;
    /**
     * Get or set the format of the video progress label. You should use ${currentTime} to represent current playback position and ${duration} to represent video duration.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "progressLabelFormat", optionValue: string): void;
    /**
     * Get or set an array of bookmarks that will be displayed in the video player control.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bookmarks"): IgVideoPlayerBookmark[];
    /**
     * Get or set an array of bookmarks that will be displayed in the video player control.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bookmarks", optionValue: IgVideoPlayerBookmark[]): void;
    /**
     * Get or set an array of related videos that will be displayed when video playback has ended.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "relatedVideos"): IgVideoPlayerRelatedVideo[];
    /**
     * Get or set an array of related videos that will be displayed when video playback has ended.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "relatedVideos", optionValue: IgVideoPlayerRelatedVideo[]): void;
    /**
     * Get or set an array of banner objects that will show the banners when the video clip is played.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "banners"): IgVideoPlayerBanner[];
    /**
     * Get or set an array of banner objects that will show the banners when the video clip is played.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "banners", optionValue: IgVideoPlayerBanner[]): void;
    /**
     * Get or set an array of commercials objects that will be displayed when the video is playing.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "commercials"): IgVideoPlayerCommercials;
    /**
     * Get or set an array of commercials objects that will be displayed when the video is playing.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "commercials", optionValue: IgVideoPlayerCommercials): void;
    /**
     * Occurs when video has ended.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "ended"): EndedEvent;
    /**
     * Occurs when video has ended.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "ended", optionValue: EndedEvent): void;
    /**
     * Occurs when video gets playing.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "playing"): PlayingEvent;
    /**
     * Occurs when video gets playing.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "playing", optionValue: PlayingEvent): void;
    /**
     * Occurs when video is paused.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "paused"): PausedEvent;
    /**
     * Occurs when video is paused.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.duration to get the video duration in seconds.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "paused", optionValue: PausedEvent): void;
    /**
     * Occurs when a chunk of data is buffered.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.buffered to get buffered percentage.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "buffering"): BufferingEvent;
    /**
     * Occurs when a chunk of data is buffered.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.buffered to get buffered percentage.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "buffering", optionValue: BufferingEvent): void;
    /**
     * Occurs when video has advanced the playback position.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.currentTime to get current position in the video at which the event was fired.
     * Use ui.duration to get the video duration in seconds.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "progress"): ProgressEvent;
    /**
     * Occurs when video has advanced the playback position.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.currentTime to get current position in the video at which the event was fired.
     * Use ui.duration to get the video duration in seconds.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "progress", optionValue: ProgressEvent): void;
    /**
     * Occurs when igVideoPlayer is waiting for data from the server.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.currentTime to get current position in the video at which the event was fired.
     * Use ui.duration to get the video duration in seconds.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "waiting"): WaitingEvent;
    /**
     * Occurs when igVideoPlayer is waiting for data from the server.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.currentTime to get current position in the video at which the event was fired.
     * Use ui.duration to get the video duration in seconds.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "waiting", optionValue: WaitingEvent): void;
    /**
     * Occurs when the bookmark is hit.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.bookmark to get the bookmark object from the bookmarks array.
     * Use ui.bookmarkElement to get the html element in the DOM.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bookmarkHit"): BookmarkHitEvent;
    /**
     * Occurs when the bookmark is hit.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     * Use ui.bookmark to get the bookmark object from the bookmarks array.
     * Use ui.bookmarkElement to get the html element in the DOM.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bookmarkHit", optionValue: BookmarkHitEvent): void;
    /**
     * Occurs when the bookmark is clicked.
     * Function takes arguments evt and ui.
     * Use ui.bookmark to get the bookmark object from the bookmarks array.
     * Use ui.bookmarkElement to get the html element in the DOM.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bookmarkClick"): BookmarkClickEvent;
    /**
     * Occurs when the bookmark is clicked.
     * Function takes arguments evt and ui.
     * Use ui.bookmark to get the bookmark object from the bookmarks array.
     * Use ui.bookmarkElement to get the html element in the DOM.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bookmarkClick", optionValue: BookmarkClickEvent): void;
    /**
     * Occurs when igVideoPlayer enters full screen mode.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "enterFullScreen"): EnterFullScreenEvent;
    /**
     * Occurs when igVideoPlayer enters full screen mode.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "enterFullScreen", optionValue: EnterFullScreenEvent): void;
    /**
     * Occurs when igVideoPlayer exits full screen mode.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "exitFullScreen"): ExitFullScreenEvent;
    /**
     * Occurs when igVideoPlayer exits full screen mode.
     * Function takes arguments evt and ui.
     * Use ui.source to get the url of the playing video.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "exitFullScreen", optionValue: ExitFullScreenEvent): void;
    /**
     * Occurs when related video is clicked.
     * Function takes arguments evt and ui.
     * Use ui.relatedVideo to get the relatedVideo object from the relatedVideos array.
     * Use ui.relatedVideoElement to get the relatedVideo html element in the DOM.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "relatedVideoClick"): RelatedVideoClickEvent;
    /**
     * Occurs when related video is clicked.
     * Function takes arguments evt and ui.
     * Use ui.relatedVideo to get the relatedVideo object from the relatedVideos array.
     * Use ui.relatedVideoElement to get the relatedVideo html element in the DOM.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "relatedVideoClick", optionValue: RelatedVideoClickEvent): void;
    /**
     * Defines the name of the player banner visible event. Fired when the banner has been displayed.
     * Function takes arguments evt and ui.
     * Use ui.index to get the banner index in the banners array.
     * Use ui.banner to get the banner object from the banners array.
     * Use ui.bannerElement to get the banner html element in the DOM.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bannerVisible"): BannerVisibleEvent;
    /**
     * Defines the name of the player banner visible event. Fired when the banner has been displayed.
     * Function takes arguments evt and ui.
     * Use ui.index to get the banner index in the banners array.
     * Use ui.banner to get the banner object from the banners array.
     * Use ui.bannerElement to get the banner html element in the DOM.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bannerVisible", optionValue: BannerVisibleEvent): void;
    /**
     * Occurs when the banner is hidden.
     * Function takes arguments evt and ui.
     * Use ui.index to get the banner index in the banners array.
     * Use ui.banner to get the banner object from the banners array.
     * Use ui.bannerElement to get the banner html element in the DOM.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bannerHidden"): BannerHiddenEvent;
    /**
     * Occurs when the banner is hidden.
     * Function takes arguments evt and ui.
     * Use ui.index to get the banner index in the banners array.
     * Use ui.banner to get the banner object from the banners array.
     * Use ui.bannerElement to get the banner html element in the DOM.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bannerHidden", optionValue: BannerHiddenEvent): void;
    /**
     * Occurs when the banner is clicked.
     * Function takes arguments evt and ui.
     * Use ui.bannerElement to get the banner html element in the DOM.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bannerClick"): BannerClickEvent;
    /**
     * Occurs when the banner is clicked.
     * Function takes arguments evt and ui.
     * Use ui.bannerElement to get the banner html element in the DOM.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "bannerClick", optionValue: BannerClickEvent): void;
    /**
     * Occurs when browser does not support HTML 5 video.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "browserNotSupported"): BrowserNotSupportedEvent;
    /**
     * Occurs when browser does not support HTML 5 video.
     *
     * @optionValue New value to be set.
     */
    igVideoPlayer(optionLiteral: 'option', optionName: "browserNotSupported", optionValue: BrowserNotSupportedEvent): void;
    igVideoPlayer(options: IgVideoPlayer): JQuery;
    igVideoPlayer(optionLiteral: 'option', optionName: string): any;
    igVideoPlayer(optionLiteral: 'option', options: IgVideoPlayer): JQuery;
    igVideoPlayer(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igVideoPlayer(methodName: string, ...methodParams: any[]): any;
}
interface IgZoombarDefaultZoomWindow {
    /**
     * The left component of the zoom window in percentages
     */
    left?: number;
    /**
     * The width of the zoom window in percentages
     */
    width?: string;
    /**
     * Option for IgZoombarDefaultZoomWindow
     */
    [optionName: string]: any;
}
interface ZoomChangingEvent {
    (event: Event, ui: ZoomChangingEventUIParam): void;
}
interface ZoomChangingEventUIParam {
    /**
     * Used to get reference to igZoombar.
     */
    owner?: any;
}
interface ZoomChangedEvent {
    (event: Event, ui: ZoomChangedEventUIParam): void;
}
interface ZoomChangedEventUIParam {
    /**
     * Used to get reference to igZoombar.
     */
    owner?: any;
}
interface WindowDragStartingEvent {
    (event: Event, ui: WindowDragStartingEventUIParam): void;
}
interface WindowDragStartingEventUIParam {
    /**
     * Used to get reference to igZoombar.
     */
    owner?: any;
}
interface WindowDragStartedEvent {
    (event: Event, ui: WindowDragStartedEventUIParam): void;
}
interface WindowDragStartedEventUIParam {
    /**
     * Used to get reference to igZoombar.
     */
    owner?: any;
}
interface WindowDraggingEvent {
    (event: Event, ui: WindowDraggingEventUIParam): void;
}
interface WindowDraggingEventUIParam {
    /**
     * Used to get reference to igZoombar.
     */
    owner?: any;
}
interface WindowDragEndingEvent {
    (event: Event, ui: WindowDragEndingEventUIParam): void;
}
interface WindowDragEndingEventUIParam {
    /**
     * Used to get reference to igZoombar.
     */
    owner?: any;
}
interface WindowDragEndedEvent {
    (event: Event, ui: WindowDragEndedEventUIParam): void;
}
interface WindowDragEndedEventUIParam {
    /**
     * Used to get reference to igZoombar.
     */
    owner?: any;
}
interface WindowResizingEvent {
    (event: Event, ui: WindowResizingEventUIParam): void;
}
interface WindowResizingEventUIParam {
    /**
     * Used to get reference to igZoombar.
     */
    owner?: any;
}
interface IgZoombar {
    /**
     * specifies the type of control the Zoombar is attached to.
     *
     * Valid values:
     * "igdatachart" The Zoombar will attach to the igDataChart control initialized on the target element
     * "auto" The Zoombar will attach to the first widget from the supported ones it finds initialized on the target element
     */
    type?: any;
    /**
     * specifies the element on which the widget the Zoombar is attached to is initialized
     *
     * Valid values:
     * "object" A valid jQuery object, the first element of which is that element
     */
    target?: any;
    /**
     * specifies how the target widget's clone is rendered inside the Zoombar
     *
     * Valid values:
     * "auto" options for initializing the clone will be inferred from the target widget. Certain properties will be altered to make the clone more suitable for using inside the Zoombar
     * "none" no clone of the target widget will be initialized inside the Zoombar
     * "object" A valid set of properties to initialize the clone with
     */
    clone?: any;
    /**
     * specifies the width of the Zoombar
     *
     * Valid values:
     * "auto" the width of the Zoombar will be the same as the widget it is attached to
     */
    width?: any;
    /**
     * specifies the height of the Zoombar
     */
    height?: any;
    /**
     * specifies when the zoom effect is applied
     *
     * Valid values:
     * "immediate" the zoom action is applied as the end-user interacts with the zoom window
     * "deferred" the zoom action is applied after the interaction with the zoom window completes
     */
    zoomAction?: any;
    /**
     * Specifies the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked
     */
    zoomWindowMoveDistance?: number;
    /**
     * Specifies the default zoom in percentages
     */
    defaultZoomWindow?: IgZoombarDefaultZoomWindow;
    /**
     * The minimal width the zoom window can have in percentages
     */
    zoomWindowMinWidth?: number;
    /**
     * Specifies the animation duration (in milliseconds) when hover style is applied or removed from elements
     */
    hoverStyleAnimationDuration?: number;
    /**
     * Specifies the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
     */
    windowPanDuration?: number;
    /**
     * Initial tabIndex for the Zoombar container elements
     */
    tabIndex?: number;
    /**
     * Event fired before a zoom action is applied
     * Function takes arguments evt and ui.
     * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
     * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
     * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
     * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    zoomChanging?: ZoomChangingEvent;
    /**
     * Event fired after a zoom action is applied
     * Function takes arguments evt and ui.
     * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
     * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
     * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
     * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    zoomChanged?: ZoomChangedEvent;
    /**
     * Event fired when the user attempts to drag the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    windowDragStarting?: WindowDragStartingEvent;
    /**
     * Event fired when the user starts dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    windowDragStarted?: WindowDragStartedEvent;
    /**
     * Event fired when the user drags the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    windowDragging?: WindowDraggingEvent;
    /**
     * Event fired when the user attemtps to stop dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    windowDragEnding?: WindowDragEndingEvent;
    /**
     * Event fired when the user stops dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    windowDragEnded?: WindowDragEndedEvent;
    /**
     * Event fired when the user resizes the zoom window with the window"s handles
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    windowResizing?: WindowResizingEvent;
    /**
     * Event fired after the user resizes the zoom window with the window"s handles
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    windowResized?: WindowResizedEvent;
    /**
     * Option for igZoombar
     */
    [optionName: string]: any;
}
interface IgZoombarMethods {
    /**
     * Destroys the Zoombar widget
     */
    destroy(): void;
    /**
     * Returns the main zoombar element
     */
    widget(): void;
    /**
     * Returns the ID of the element the zoombar is initialized on
     */
    id(): string;
    /**
     * Returns the DIV that is the topmost container of the zoombar widget
     */
    container(): Element;
    /**
     * Returns the element the clone widget is initialized on
     */
    clone(): Element;
    /**
     * Gets or sets the current zoom window
     *
     * @param left     The left parameter of the new zoom window in percentages
     * @param width     The width parameter of the new zoom window in percentages
     */
    zoom(left?: number, width?: number): Object;
}
interface JQuery {
    data(propertyName: "igZoombar"): IgZoombarMethods;
}
declare module Infragistics {
    class ZoombarProviderDefault {
        /**
         * Gets basic options for initializing the clone, based on the options the target is initialized with
         *
         * @param options
         */
        getBaseOpts(options: Object): void;
        /**
         * Alters specific options so that the the clone is more suitable for its purpose
         *
         * @param options
         */
        cleanOptsForZoom(options: Object): void;
        /**
         * Returns the provider"s widget name
         */
        widgetName(): void;
        /**
         * Returns the target widget width property
         */
        targetWidth(): void;
        /**
         * Sets the target widget min window width (to be in sync with the same property of the zoombar)
         *
         * @param minWidth
         */
        syncMinWidth(minWidth: Object): void;
        /**
         * Gets/sets the target object
         *
         * @param obj
         */
        targetObject(obj: Object): void;
        /**
         * Updates the target widget with new zoom. Returns success status if available.
         *
         * @param a
         * @param b
         */
        update(a: Object, b: Object): void;
        /**
         * Returns the full event name that the widget fires when its own zoom is applied
         */
        event(): void;
    }
}
declare module Infragistics {
    class ZoombarProviderDataChart {
        getBaseOpts(options: Object): void;
        cleanOptsForZoom(options: Object): void;
        widgetName(): void;
        targetWidth(): void;
        targetObject(obj: Object): void;
        syncMinWidth(minWidth: Object): void;
        update(a: Object, b: Object): void;
        event(): void;
    }
}
interface JQuery {
    igZoombar(methodName: "destroy"): void;
    igZoombar(methodName: "widget"): void;
    igZoombar(methodName: "id"): string;
    igZoombar(methodName: "container"): Element;
    igZoombar(methodName: "clone"): Element;
    igZoombar(methodName: "zoom", left?: number, width?: number): Object;
    /**
     * Specifies the type of control the Zoombar is attached to.
     */
    igZoombar(optionLiteral: 'option', optionName: "type"): any;
    /**
     * Specifies the type of control the Zoombar is attached to.
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "type", optionValue: any): void;
    /**
     * Specifies the element on which the widget the Zoombar is attached to is initialized
     */
    igZoombar(optionLiteral: 'option', optionName: "target"): any;
    /**
     * Specifies the element on which the widget the Zoombar is attached to is initialized
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "target", optionValue: any): void;
    /**
     * Specifies how the target widget's clone is rendered inside the Zoombar
     */
    igZoombar(optionLiteral: 'option', optionName: "clone"): any;
    /**
     * Specifies how the target widget's clone is rendered inside the Zoombar
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "clone", optionValue: any): void;
    /**
     * Specifies the width of the Zoombar
     */
    igZoombar(optionLiteral: 'option', optionName: "width"): any;
    /**
     * Specifies the width of the Zoombar
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "width", optionValue: any): void;
    /**
     * Specifies the height of the Zoombar
     */
    igZoombar(optionLiteral: 'option', optionName: "height"): any;
    /**
     * Specifies the height of the Zoombar
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "height", optionValue: any): void;
    /**
     * Specifies when the zoom effect is applied
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomAction"): any;
    /**
     * Specifies when the zoom effect is applied
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomAction", optionValue: any): void;
    /**
     * Specifies the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomWindowMoveDistance"): number;
    /**
     * Specifies the distance (in percents) the zoom window moves when the left or right scroll bar buttons are clicked
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomWindowMoveDistance", optionValue: number): void;
    /**
     * Specifies the default zoom in percentages
     */
    igZoombar(optionLiteral: 'option', optionName: "defaultZoomWindow"): IgZoombarDefaultZoomWindow;
    /**
     * Specifies the default zoom in percentages
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "defaultZoomWindow", optionValue: IgZoombarDefaultZoomWindow): void;
    /**
     * The minimal width the zoom window can have in percentages
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomWindowMinWidth"): number;
    /**
     * The minimal width the zoom window can have in percentages
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomWindowMinWidth", optionValue: number): void;
    /**
     * Specifies the animation duration (in milliseconds) when hover style is applied or removed from elements
     */
    igZoombar(optionLiteral: 'option', optionName: "hoverStyleAnimationDuration"): number;
    /**
     * Specifies the animation duration (in milliseconds) when hover style is applied or removed from elements
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "hoverStyleAnimationDuration", optionValue: number): void;
    /**
     * Specifies the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowPanDuration"): number;
    /**
     * Specifies the pan duration (in milliseconds) when the window changes position. Set to 0 for snap.
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowPanDuration", optionValue: number): void;
    /**
     * Initial tabIndex for the Zoombar container elements
     */
    igZoombar(optionLiteral: 'option', optionName: "tabIndex"): number;
    /**
     * Initial tabIndex for the Zoombar container elements
     *
     * @optionValue New value to be set.
     */
    igZoombar(optionLiteral: 'option', optionName: "tabIndex", optionValue: number): void;
    /**
     * Event fired before a zoom action is applied
     * Function takes arguments evt and ui.
     * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
     * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
     * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
     * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomChanging"): ZoomChangingEvent;
    /**
     * Event fired before a zoom action is applied
     * Function takes arguments evt and ui.
     * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
     * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
     * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
     * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomChanging", optionValue: ZoomChangingEvent): void;
    /**
     * Event fired after a zoom action is applied
     * Function takes arguments evt and ui.
     * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
     * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
     * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
     * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomChanged"): ZoomChangedEvent;
    /**
     * Event fired after a zoom action is applied
     * Function takes arguments evt and ui.
     * Use ui.previousZoom.left to get the previous zoom window left position as a fraction of the absolute width of the target
     * Use ui.previousZoom.width to get the previous zoom window width as a fraction of the absolute width of the target
     * Use ui.newZoom.left to get the new zoom window left position as a fraction of the absolute width of the target
     * Use ui.newZoom.width to get the new zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "zoomChanged", optionValue: ZoomChangedEvent): void;
    /**
     * Event fired when the user attempts to drag the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragStarting"): WindowDragStartingEvent;
    /**
     * Event fired when the user attempts to drag the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragStarting", optionValue: WindowDragStartingEvent): void;
    /**
     * Event fired when the user starts dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragStarted"): WindowDragStartedEvent;
    /**
     * Event fired when the user starts dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragStarted", optionValue: WindowDragStartedEvent): void;
    /**
     * Event fired when the user drags the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragging"): WindowDraggingEvent;
    /**
     * Event fired when the user drags the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragging", optionValue: WindowDraggingEvent): void;
    /**
     * Event fired when the user attemtps to stop dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragEnding"): WindowDragEndingEvent;
    /**
     * Event fired when the user attemtps to stop dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragEnding", optionValue: WindowDragEndingEvent): void;
    /**
     * Event fired when the user stops dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragEnded"): WindowDragEndedEvent;
    /**
     * Event fired when the user stops dragging the zoom window
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowDragEnded", optionValue: WindowDragEndedEvent): void;
    /**
     * Event fired when the user resizes the zoom window with the window"s handles
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowResizing"): WindowResizingEvent;
    /**
     * Event fired when the user resizes the zoom window with the window"s handles
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowResizing", optionValue: WindowResizingEvent): void;
    /**
     * Event fired after the user resizes the zoom window with the window"s handles
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowResized"): WindowResizedEvent;
    /**
     * Event fired after the user resizes the zoom window with the window"s handles
     * Function takes arguments evt and ui.
     * Use ui.zoomWindow.left to get the current zoom window left position as a fraction of the absolute width of the target
     * Use ui.zoomWindow.width to get the current zoom window width as a fraction of the absolute width of the target
     * Use ui.owner to get reference to igZoombar.
     *
     * @optionValue Define event handler function.
     */
    igZoombar(optionLiteral: 'option', optionName: "windowResized", optionValue: WindowResizedEvent): void;
    igZoombar(options: IgZoombar): JQuery;
    igZoombar(optionLiteral: 'option', optionName: string): any;
    igZoombar(optionLiteral: 'option', options: IgZoombar): JQuery;
    igZoombar(optionLiteral: 'option', optionName: string, optionValue: any): JQuery;
    igZoombar(methodName: string, ...methodParams: any[]): any;
}
interface IgLoader {
    scriptPath: string;
    cssPath: string;
    resources?: string;
    theme?: string;
    ready?: Function;
    localePath?: string;
    locale?: string;
    autoDetectLocale?: boolean;
    regional?: string;
    preinit?: Function;
}
interface IgniteUIStatic {
    tmpl(template: string, data: any, ...args: any[]): string;
    loader(options: IgLoader): void;
    loader(callback: Function): void;
    loader(resources: string, callback: Function): void;
    loader(): any;
    OlapUtilities: any;
}
interface JQueryStatic {
    ig: IgniteUIStatic;
}
